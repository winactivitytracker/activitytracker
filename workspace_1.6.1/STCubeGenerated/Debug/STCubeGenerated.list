
STCubeGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011de4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001428  08011f88  08011f88  00021f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133b0  080133b0  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  080133b0  080133b0  000233b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133b8  080133b8  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133b8  080133b8  000233b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133bc  080133bc  000233bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  080133c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f24  200002c0  08013680  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200061e4  08013680  000361e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033327  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068e4  00000000  00000000  00063617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a8  00000000  00000000  00069f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002048  00000000  00000000  0006c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f007  00000000  00000000  0006e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a656  00000000  00000000  0008d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a20c1  00000000  00000000  000b784d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015990e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a930  00000000  00000000  00159964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011f6c 	.word	0x08011f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	08011f6c 	.word	0x08011f6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <MX_FREERTOS_Init+0x38>)
 8001002:	2100      	movs	r1, #0
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_FREERTOS_Init+0x3c>)
 8001006:	f008 fc37 	bl	8009878 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <MX_FREERTOS_Init+0x40>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of LEDOn */
  LEDOnHandle = osThreadNew(LEDTurnOn, NULL, &LEDOn_attributes);
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <MX_FREERTOS_Init+0x44>)
 8001012:	2100      	movs	r1, #0
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <MX_FREERTOS_Init+0x48>)
 8001016:	f008 fc2f 	bl	8009878 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <MX_FREERTOS_Init+0x4c>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of LEDOff */
  LEDOffHandle = osThreadNew(LEDTurnOff, NULL, &LEDOff_attributes);
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <MX_FREERTOS_Init+0x50>)
 8001022:	2100      	movs	r1, #0
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <MX_FREERTOS_Init+0x54>)
 8001026:	f008 fc27 	bl	8009878 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <MX_FREERTOS_Init+0x58>)
 800102e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	08012e50 	.word	0x08012e50
 8001038:	08001059 	.word	0x08001059
 800103c:	20005524 	.word	0x20005524
 8001040:	08012e74 	.word	0x08012e74
 8001044:	0800106d 	.word	0x0800106d
 8001048:	20005528 	.word	0x20005528
 800104c:	08012e98 	.word	0x08012e98
 8001050:	0800108d 	.word	0x0800108d
 8001054:	2000552c 	.word	0x2000552c

08001058 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001060:	f00b f914 	bl	800c28c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f008 fc99 	bl	800999c <osDelay>
 800106a:	e7fb      	b.n	8001064 <StartDefaultTask+0xc>

0800106c <LEDTurnOn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDTurnOn */
void LEDTurnOn(void *argument)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDTurnOn */
  /* Infinite loop */
  for(;;)
  {
	  //GPS_CallBack();
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <LEDTurnOn+0x1c>)
 800107a:	f001 fc62 	bl	8002942 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
	  osDelay(300);
 800107e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001082:	f008 fc8b 	bl	800999c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001086:	e7f5      	b.n	8001074 <LEDTurnOn+0x8>
 8001088:	40020400 	.word	0x40020400

0800108c <LEDTurnOff>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDTurnOff */
void LEDTurnOff(void *argument)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDTurnOff */
  /* Infinite loop */
  for(;;)
  {
	  GPS_Process();
 8001094:	f000 f984 	bl	80013a0 <GPS_Process>
	  static uint16_t counter = 0;
	  	char numbers[16];

	  	//SSD1306_Clear();
	  	SSD1306_GotoXY (1,5); // goto 10, 10
 8001098:	2105      	movs	r1, #5
 800109a:	2001      	movs	r0, #1
 800109c:	f000 fd62 	bl	8001b64 <SSD1306_GotoXY>
	  	SSD1306_Puts ("GPS!", &Font_11x18, 1); // print Hello
 80010a0:	2201      	movs	r2, #1
 80010a2:	4935      	ldr	r1, [pc, #212]	; (8001178 <LEDTurnOff+0xec>)
 80010a4:	4835      	ldr	r0, [pc, #212]	; (800117c <LEDTurnOff+0xf0>)
 80010a6:	f000 fdf3 	bl	8001c90 <SSD1306_Puts>
	  	SSD1306_GotoXY (40,5); // goto 10, 10
 80010aa:	2105      	movs	r1, #5
 80010ac:	2028      	movs	r0, #40	; 0x28
 80010ae:	f000 fd59 	bl	8001b64 <SSD1306_GotoXY>
	  	sprintf(numbers, "%d",counter);
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <LEDTurnOff+0xf4>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4931      	ldr	r1, [pc, #196]	; (8001184 <LEDTurnOff+0xf8>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c fc1e 	bl	800d900 <siprintf>
	  	SSD1306_Puts (numbers, &Font_11x18, 1); // print Hello
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	2201      	movs	r2, #1
 80010ca:	492b      	ldr	r1, [pc, #172]	; (8001178 <LEDTurnOff+0xec>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fddf 	bl	8001c90 <SSD1306_Puts>
	  	SSD1306_GotoXY (1, 25);
 80010d2:	2119      	movs	r1, #25
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 fd45 	bl	8001b64 <SSD1306_GotoXY>
	  	SSD1306_Puts ("Lon: ", &Font_11x18, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	4926      	ldr	r1, [pc, #152]	; (8001178 <LEDTurnOff+0xec>)
 80010de:	482a      	ldr	r0, [pc, #168]	; (8001188 <LEDTurnOff+0xfc>)
 80010e0:	f000 fdd6 	bl	8001c90 <SSD1306_Puts>
	  	SSD1306_GotoXY (40, 25);
 80010e4:	2119      	movs	r1, #25
 80010e6:	2028      	movs	r0, #40	; 0x28
 80010e8:	f000 fd3c 	bl	8001b64 <SSD1306_GotoXY>
	  	sprintf(numbers, "%f", GPS.GPGGA.LongitudeDecimal);
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <LEDTurnOff+0x100>)
 80010ee:	e9d3 238a 	ldrd	r2, r3, [r3, #552]	; 0x228
 80010f2:	f107 0008 	add.w	r0, r7, #8
 80010f6:	4926      	ldr	r1, [pc, #152]	; (8001190 <LEDTurnOff+0x104>)
 80010f8:	f00c fc02 	bl	800d900 <siprintf>
	  	SSD1306_Puts (numbers, &Font_11x18, 1);
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2201      	movs	r2, #1
 8001102:	491d      	ldr	r1, [pc, #116]	; (8001178 <LEDTurnOff+0xec>)
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fdc3 	bl	8001c90 <SSD1306_Puts>
	  	SSD1306_GotoXY (1, 45);
 800110a:	212d      	movs	r1, #45	; 0x2d
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fd29 	bl	8001b64 <SSD1306_GotoXY>
	  	SSD1306_Puts ("Lan: ", &Font_11x18, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	4918      	ldr	r1, [pc, #96]	; (8001178 <LEDTurnOff+0xec>)
 8001116:	481f      	ldr	r0, [pc, #124]	; (8001194 <LEDTurnOff+0x108>)
 8001118:	f000 fdba 	bl	8001c90 <SSD1306_Puts>
	  	SSD1306_GotoXY (40, 45);
 800111c:	212d      	movs	r1, #45	; 0x2d
 800111e:	2028      	movs	r0, #40	; 0x28
 8001120:	f000 fd20 	bl	8001b64 <SSD1306_GotoXY>
	  	sprintf(numbers, "%f", GPS.GPGGA.LatitudeDecimal);
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <LEDTurnOff+0x100>)
 8001126:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 800112a:	f107 0008 	add.w	r0, r7, #8
 800112e:	4918      	ldr	r1, [pc, #96]	; (8001190 <LEDTurnOff+0x104>)
 8001130:	f00c fbe6 	bl	800d900 <siprintf>
	  	SSD1306_Puts (numbers, &Font_11x18, 1);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	2201      	movs	r2, #1
 800113a:	490f      	ldr	r1, [pc, #60]	; (8001178 <LEDTurnOff+0xec>)
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fda7 	bl	8001c90 <SSD1306_Puts>
	  	sprintf(numbers, "%d", counter);
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <LEDTurnOff+0xf4>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	490d      	ldr	r1, [pc, #52]	; (8001184 <LEDTurnOff+0xf8>)
 800114e:	4618      	mov	r0, r3
 8001150:	f00c fbd6 	bl	800d900 <siprintf>
	  	//SSD1306_Puts(numbers, &Font_11x18, 1);
	  	SSD1306_UpdateScreen(); // update screen
 8001154:	f000 fc60 	bl	8001a18 <SSD1306_UpdateScreen>
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	480e      	ldr	r0, [pc, #56]	; (8001198 <LEDTurnOff+0x10c>)
 800115e:	f001 fbf0 	bl	8002942 <HAL_GPIO_TogglePin>


	  	 counter++;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <LEDTurnOff+0xf4>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <LEDTurnOff+0xf4>)
 800116c:	801a      	strh	r2, [r3, #0]
	  	   osDelay(1000);
 800116e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001172:	f008 fc13 	bl	800999c <osDelay>
  {
 8001176:	e78d      	b.n	8001094 <LEDTurnOff+0x8>
 8001178:	20000000 	.word	0x20000000
 800117c:	08011fa4 	.word	0x08011fa4
 8001180:	200002dc 	.word	0x200002dc
 8001184:	08011fac 	.word	0x08011fac
 8001188:	08011fb0 	.word	0x08011fb0
 800118c:	20005530 	.word	0x20005530
 8001190:	08011fb8 	.word	0x08011fb8
 8001194:	08011fbc 	.word	0x08011fbc
 8001198:	40020400 	.word	0x40020400

0800119c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <MX_GPIO_Init+0xd0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a2c      	ldr	r2, [pc, #176]	; (800126c <MX_GPIO_Init+0xd0>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <MX_GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a25      	ldr	r2, [pc, #148]	; (800126c <MX_GPIO_Init+0xd0>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a1e      	ldr	r2, [pc, #120]	; (800126c <MX_GPIO_Init+0xd0>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <MX_GPIO_Init+0xd0>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_GPIO_Init+0xd0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f240 3102 	movw	r1, #770	; 0x302
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_GPIO_Init+0xd4>)
 800122a:	f001 fb71 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 800122e:	f240 3302 	movw	r3, #770	; 0x302
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <MX_GPIO_Init+0xd4>)
 8001248:	f001 f9de 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800124c:	2304      	movs	r3, #4
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_GPIO_Init+0xd4>)
 8001260:	f001 f9d2 	bl	8002608 <HAL_GPIO_Init>

}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400
 8001274:	00000000 	.word	0x00000000

08001278 <convertDegMinToDecDeg>:
#include <math.h>

GPS_t GPS;
//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff f95c 	bl	8000558 <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001310 <convertDegMinToDecDeg+0x98>
 80012a8:	ec43 2b10 	vmov	d0, r2, r3
 80012ac:	f010 fd10 	bl	8011cd0 <fmod>
 80012b0:	ed87 0b04 	vstr	d0, [r7, #16]

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 80012b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001318 <convertDegMinToDecDeg+0xa0>
 80012bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff f943 	bl	8000558 <__aeabi_f2d>
 80012d2:	4604      	mov	r4, r0
 80012d4:	460d      	mov	r5, r1
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <convertDegMinToDecDeg+0xa4>)
 80012dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e0:	f7ff fabc 	bl	800085c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7fe ffd6 	bl	800029c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return decDeg;
 80012f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001300:	eeb0 0a47 	vmov.f32	s0, s14
 8001304:	eef0 0a67 	vmov.f32	s1, s15
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	00000000 	.word	0x00000000
 8001314:	40590000 	.word	0x40590000
 8001318:	42c80000 	.word	0x42c80000
 800131c:	404e0000 	.word	0x404e0000

08001320 <GPS_Init>:
//##################################################################################################################
void	GPS_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <GPS_Init+0x1c>)
 8001326:	2200      	movs	r2, #0
 8001328:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 800132c:	2201      	movs	r2, #1
 800132e:	4904      	ldr	r1, [pc, #16]	; (8001340 <GPS_Init+0x20>)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <GPS_Init+0x24>)
 8001332:	f004 fa56 	bl	80057e2 <HAL_UART_Receive_IT>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20005530 	.word	0x20005530
 8001340:	20005732 	.word	0x20005732
 8001344:	20005874 	.word	0x20005874

08001348 <GPS_CallBack>:
//##################################################################################################################
void	GPS_CallBack(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 800134c:	f000 ffb8 	bl	80022c0 <HAL_GetTick>
 8001350:	4603      	mov	r3, r0
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <GPS_CallBack+0x4c>)
 8001354:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <GPS_CallBack+0x4c>)
 800135a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800135e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001362:	d210      	bcs.n	8001386 <GPS_CallBack+0x3e>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <GPS_CallBack+0x4c>)
 8001366:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800136a:	461a      	mov	r2, r3
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <GPS_CallBack+0x4c>)
 800136e:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <GPS_CallBack+0x4c>)
 8001374:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <GPS_CallBack+0x4c>)
 8001378:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800137c:	3301      	adds	r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <GPS_CallBack+0x4c>)
 8001382:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8001386:	2201      	movs	r2, #1
 8001388:	4903      	ldr	r1, [pc, #12]	; (8001398 <GPS_CallBack+0x50>)
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <GPS_CallBack+0x54>)
 800138c:	f004 fa29 	bl	80057e2 <HAL_UART_Receive_IT>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20005530 	.word	0x20005530
 8001398:	20005732 	.word	0x20005732
 800139c:	20005874 	.word	0x20005874

080013a0 <GPS_Process>:
//##################################################################################################################
void	GPS_Process(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b090      	sub	sp, #64	; 0x40
 80013a4:	af0e      	add	r7, sp, #56	; 0x38
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0))
 80013a6:	f000 ff8b 	bl	80022c0 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <GPS_Process+0x128>)
 80013ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b32      	cmp	r3, #50	; 0x32
 80013b6:	d97d      	bls.n	80014b4 <GPS_Process+0x114>
 80013b8:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <GPS_Process+0x128>)
 80013ba:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d078      	beq.n	80014b4 <GPS_Process+0x114>
	{
		char	*str;
		#if (_GPS_DEBUG==1)
		printf("%s",GPS.rxBuffer);
		#endif
		str=strstr((char*)GPS.rxBuffer,"$GPGGA,");
 80013c2:	4942      	ldr	r1, [pc, #264]	; (80014cc <GPS_Process+0x12c>)
 80013c4:	4840      	ldr	r0, [pc, #256]	; (80014c8 <GPS_Process+0x128>)
 80013c6:	f00c fb2c 	bl	800da22 <strstr>
 80013ca:	6078      	str	r0, [r7, #4]
		if(str!=NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d066      	beq.n	80014a0 <GPS_Process+0x100>
		{
			memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));
 80013d2:	2248      	movs	r2, #72	; 0x48
 80013d4:	2100      	movs	r1, #0
 80013d6:	483e      	ldr	r0, [pc, #248]	; (80014d0 <GPS_Process+0x130>)
 80013d8:	f00b fc0a 	bl	800cbf0 <memset>
			sscanf(str,"$GPGGA,%2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%hhd,%hhd,%f,%f,%c,%hd,%s,*%2s\r\n",&GPS.GPGGA.UTC_Hour,&GPS.GPGGA.UTC_Min,&GPS.GPGGA.UTC_Sec,&GPS.GPGGA.UTC_MicroSec,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude,&GPS.GPGGA.MSL_Units,&GPS.GPGGA.AgeofDiffCorr,GPS.GPGGA.DiffRefStationID,GPS.GPGGA.CheckSum);
 80013dc:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <GPS_Process+0x134>)
 80013de:	930d      	str	r3, [sp, #52]	; 0x34
 80013e0:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <GPS_Process+0x138>)
 80013e2:	930c      	str	r3, [sp, #48]	; 0x30
 80013e4:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <GPS_Process+0x13c>)
 80013e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <GPS_Process+0x140>)
 80013ea:	930a      	str	r3, [sp, #40]	; 0x28
 80013ec:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <GPS_Process+0x144>)
 80013ee:	9309      	str	r3, [sp, #36]	; 0x24
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <GPS_Process+0x148>)
 80013f2:	9308      	str	r3, [sp, #32]
 80013f4:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <GPS_Process+0x14c>)
 80013f6:	9307      	str	r3, [sp, #28]
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <GPS_Process+0x150>)
 80013fa:	9306      	str	r3, [sp, #24]
 80013fc:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <GPS_Process+0x154>)
 80013fe:	9305      	str	r3, [sp, #20]
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <GPS_Process+0x158>)
 8001402:	9304      	str	r3, [sp, #16]
 8001404:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <GPS_Process+0x15c>)
 8001406:	9303      	str	r3, [sp, #12]
 8001408:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <GPS_Process+0x160>)
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <GPS_Process+0x164>)
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <GPS_Process+0x168>)
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <GPS_Process+0x16c>)
 8001416:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <GPS_Process+0x130>)
 8001418:	493d      	ldr	r1, [pc, #244]	; (8001510 <GPS_Process+0x170>)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f00c fa90 	bl	800d940 <siscanf>
			if(GPS.GPGGA.NS_Indicator==0)
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <GPS_Process+0x128>)
 8001422:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <GPS_Process+0x92>
				GPS.GPGGA.NS_Indicator='-';
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <GPS_Process+0x128>)
 800142c:	222d      	movs	r2, #45	; 0x2d
 800142e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
			if(GPS.GPGGA.EW_Indicator==0)
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <GPS_Process+0x128>)
 8001434:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8001438:	2b00      	cmp	r3, #0
 800143a:	d103      	bne.n	8001444 <GPS_Process+0xa4>
				GPS.GPGGA.EW_Indicator='-';
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <GPS_Process+0x128>)
 800143e:	222d      	movs	r2, #45	; 0x2d
 8001440:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
			if(GPS.GPGGA.Geoid_Units==0)
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <GPS_Process+0x128>)
 8001446:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800144a:	2b00      	cmp	r3, #0
 800144c:	d103      	bne.n	8001456 <GPS_Process+0xb6>
				GPS.GPGGA.Geoid_Units='-';
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <GPS_Process+0x128>)
 8001450:	222d      	movs	r2, #45	; 0x2d
 8001452:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
			if(GPS.GPGGA.MSL_Units==0)
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <GPS_Process+0x128>)
 8001458:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <GPS_Process+0xc8>
				GPS.GPGGA.MSL_Units='-';
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <GPS_Process+0x128>)
 8001462:	222d      	movs	r2, #45	; 0x2d
 8001464:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <GPS_Process+0x128>)
 800146a:	edd3 7a84 	vldr	s15, [r3, #528]	; 0x210
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	f7ff ff01 	bl	8001278 <convertDegMinToDecDeg>
 8001476:	eeb0 7a40 	vmov.f32	s14, s0
 800147a:	eef0 7a60 	vmov.f32	s15, s1
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <GPS_Process+0x128>)
 8001480:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <GPS_Process+0x128>)
 8001486:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	f7ff fef3 	bl	8001278 <convertDegMinToDecDeg>
 8001492:	eeb0 7a40 	vmov.f32	s14, s0
 8001496:	eef0 7a60 	vmov.f32	s15, s1
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <GPS_Process+0x128>)
 800149c:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
		}
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 80014a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a4:	2100      	movs	r1, #0
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <GPS_Process+0x128>)
 80014a8:	f00b fba2 	bl	800cbf0 <memset>
		GPS.rxIndex=0;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <GPS_Process+0x128>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	4917      	ldr	r1, [pc, #92]	; (8001514 <GPS_Process+0x174>)
 80014b8:	4817      	ldr	r0, [pc, #92]	; (8001518 <GPS_Process+0x178>)
 80014ba:	f004 f992 	bl	80057e2 <HAL_UART_Receive_IT>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20005530 	.word	0x20005530
 80014cc:	08011fc4 	.word	0x08011fc4
 80014d0:	20005738 	.word	0x20005738
 80014d4:	2000577c 	.word	0x2000577c
 80014d8:	20005778 	.word	0x20005778
 80014dc:	20005776 	.word	0x20005776
 80014e0:	2000576c 	.word	0x2000576c
 80014e4:	20005768 	.word	0x20005768
 80014e8:	20005764 	.word	0x20005764
 80014ec:	20005762 	.word	0x20005762
 80014f0:	20005761 	.word	0x20005761
 80014f4:	20005760 	.word	0x20005760
 80014f8:	20005754 	.word	0x20005754
 80014fc:	20005750 	.word	0x20005750
 8001500:	20005740 	.word	0x20005740
 8001504:	2000573c 	.word	0x2000573c
 8001508:	2000573a 	.word	0x2000573a
 800150c:	20005739 	.word	0x20005739
 8001510:	08011fcc 	.word	0x08011fcc
 8001514:	20005732 	.word	0x20005732
 8001518:	20005874 	.word	0x20005874

0800151c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_I2C1_Init+0x50>)
 800155a:	f001 fa0d 	bl	8002978 <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f910 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20005780 	.word	0x20005780
 8001570:	40005400 	.word	0x40005400
 8001574:	00061a80 	.word	0x00061a80

08001578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_I2C_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b6:	23c0      	movs	r3, #192	; 0xc0
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ba:	2312      	movs	r3, #18
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c6:	2304      	movs	r3, #4
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_I2C_MspInit+0x8c>)
 80015d2:	f001 f819 	bl	8002608 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40005400 	.word	0x40005400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
   GPS_CallBack();
 8001610:	f7ff fe9a 	bl	8001348 <GPS_CallBack>
 }
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <UART1_SendString>:

void UART1_SendString(char* s) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), 1000);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7fe fddb 	bl	80001e0 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <UART1_SendString+0x28>)
 8001636:	f004 f842 	bl	80056be <HAL_UART_Transmit>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20005874 	.word	0x20005874

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164c:	f000 fe02 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001650:	f000 f81a 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001654:	f7ff fda2 	bl	800119c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001658:	f7ff ff60 	bl	800151c <MX_I2C1_Init>
  MX_SPI1_Init();
 800165c:	f000 f89a 	bl	8001794 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001660:	f000 fd52 	bl	8002108 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_MspInit();
  SSD1306_Init (); // initialize the display
 8001664:	f000 f914 	bl	8001890 <SSD1306_Init>
  SSD1306_Clear();
 8001668:	f000 fb37 	bl	8001cda <SSD1306_Clear>
  GPS_Init();
 800166c:	f7ff fe58 	bl	8001320 <GPS_Init>
  UART1_SendString("WORK!");
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <main+0x3c>)
 8001672:	f7ff ffd3 	bl	800161c <UART1_SendString>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001676:	f008 f8b5 	bl	80097e4 <osKernelInitialize>
  MX_FREERTOS_Init();
 800167a:	f7ff fcbf 	bl	8000ffc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800167e:	f008 f8d5 	bl	800982c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001682:	e7fe      	b.n	8001682 <main+0x3a>
 8001684:	08012018 	.word	0x08012018

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	; 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00b faaa 	bl	800cbf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <SystemClock_Config+0xd4>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <SystemClock_Config+0xd4>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <SystemClock_Config+0xd4>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <SystemClock_Config+0xd8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016d4:	4a22      	ldr	r2, [pc, #136]	; (8001760 <SystemClock_Config+0xd8>)
 80016d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <SystemClock_Config+0xd8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001704:	230f      	movs	r3, #15
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001708:	2390      	movs	r3, #144	; 0x90
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170c:	2302      	movs	r3, #2
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001710:	2305      	movs	r3, #5
 8001712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	4618      	mov	r0, r3
 800171a:	f003 f801 	bl	8004720 <HAL_RCC_OscConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001724:	f000 f830 	bl	8001788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001728:	230f      	movs	r3, #15
 800172a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fa64 	bl	8004c10 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800174e:	f000 f81b 	bl	8001788 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3750      	adds	r7, #80	; 0x50
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000

08001764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001776:	f000 fd8f 	bl	8002298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_SPI1_Init+0x64>)
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <MX_SPI1_Init+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017e0:	220a      	movs	r2, #10
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017e6:	f003 fc15 	bl	8005014 <HAL_SPI_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017f0:	f7ff ffca 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200057d4 	.word	0x200057d4
 80017fc:	40013000 	.word	0x40013000

08001800 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_SPI_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_SPI_MspInit+0x88>)
 800182c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_SPI_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800185a:	23f0      	movs	r3, #240	; 0xf0
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186a:	2305      	movs	r3, #5
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_SPI_MspInit+0x8c>)
 8001876:	f000 fec7 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40013000 	.word	0x40013000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001896:	f000 fa29 	bl	8001cec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800189a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800189e:	2201      	movs	r2, #1
 80018a0:	2178      	movs	r1, #120	; 0x78
 80018a2:	485b      	ldr	r0, [pc, #364]	; (8001a10 <SSD1306_Init+0x180>)
 80018a4:	f001 faaa 	bl	8002dfc <HAL_I2C_IsDeviceReady>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e0a9      	b.n	8001a06 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80018b2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80018b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018b8:	e002      	b.n	80018c0 <SSD1306_Init+0x30>
		p--;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3b01      	subs	r3, #1
 80018be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80018c6:	22ae      	movs	r2, #174	; 0xae
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	; 0x78
 80018cc:	f000 fa6c 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80018d0:	2220      	movs	r2, #32
 80018d2:	2100      	movs	r1, #0
 80018d4:	2078      	movs	r0, #120	; 0x78
 80018d6:	f000 fa67 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018da:	2210      	movs	r2, #16
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	; 0x78
 80018e0:	f000 fa62 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018e4:	22b0      	movs	r2, #176	; 0xb0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	; 0x78
 80018ea:	f000 fa5d 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80018ee:	22c8      	movs	r2, #200	; 0xc8
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	; 0x78
 80018f4:	f000 fa58 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2078      	movs	r0, #120	; 0x78
 80018fe:	f000 fa53 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001902:	2210      	movs	r2, #16
 8001904:	2100      	movs	r1, #0
 8001906:	2078      	movs	r0, #120	; 0x78
 8001908:	f000 fa4e 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	2100      	movs	r1, #0
 8001910:	2078      	movs	r0, #120	; 0x78
 8001912:	f000 fa49 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001916:	2281      	movs	r2, #129	; 0x81
 8001918:	2100      	movs	r1, #0
 800191a:	2078      	movs	r0, #120	; 0x78
 800191c:	f000 fa44 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001920:	22ff      	movs	r2, #255	; 0xff
 8001922:	2100      	movs	r1, #0
 8001924:	2078      	movs	r0, #120	; 0x78
 8001926:	f000 fa3f 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800192a:	22a1      	movs	r2, #161	; 0xa1
 800192c:	2100      	movs	r1, #0
 800192e:	2078      	movs	r0, #120	; 0x78
 8001930:	f000 fa3a 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001934:	22a6      	movs	r2, #166	; 0xa6
 8001936:	2100      	movs	r1, #0
 8001938:	2078      	movs	r0, #120	; 0x78
 800193a:	f000 fa35 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800193e:	22a8      	movs	r2, #168	; 0xa8
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	; 0x78
 8001944:	f000 fa30 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001948:	223f      	movs	r2, #63	; 0x3f
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	; 0x78
 800194e:	f000 fa2b 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001952:	22a4      	movs	r2, #164	; 0xa4
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	; 0x78
 8001958:	f000 fa26 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800195c:	22d3      	movs	r2, #211	; 0xd3
 800195e:	2100      	movs	r1, #0
 8001960:	2078      	movs	r0, #120	; 0x78
 8001962:	f000 fa21 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	; 0x78
 800196c:	f000 fa1c 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001970:	22d5      	movs	r2, #213	; 0xd5
 8001972:	2100      	movs	r1, #0
 8001974:	2078      	movs	r0, #120	; 0x78
 8001976:	f000 fa17 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800197a:	22f0      	movs	r2, #240	; 0xf0
 800197c:	2100      	movs	r1, #0
 800197e:	2078      	movs	r0, #120	; 0x78
 8001980:	f000 fa12 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001984:	22d9      	movs	r2, #217	; 0xd9
 8001986:	2100      	movs	r1, #0
 8001988:	2078      	movs	r0, #120	; 0x78
 800198a:	f000 fa0d 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800198e:	2222      	movs	r2, #34	; 0x22
 8001990:	2100      	movs	r1, #0
 8001992:	2078      	movs	r0, #120	; 0x78
 8001994:	f000 fa08 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001998:	22da      	movs	r2, #218	; 0xda
 800199a:	2100      	movs	r1, #0
 800199c:	2078      	movs	r0, #120	; 0x78
 800199e:	f000 fa03 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80019a2:	2212      	movs	r2, #18
 80019a4:	2100      	movs	r1, #0
 80019a6:	2078      	movs	r0, #120	; 0x78
 80019a8:	f000 f9fe 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80019ac:	22db      	movs	r2, #219	; 0xdb
 80019ae:	2100      	movs	r1, #0
 80019b0:	2078      	movs	r0, #120	; 0x78
 80019b2:	f000 f9f9 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80019b6:	2220      	movs	r2, #32
 80019b8:	2100      	movs	r1, #0
 80019ba:	2078      	movs	r0, #120	; 0x78
 80019bc:	f000 f9f4 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80019c0:	228d      	movs	r2, #141	; 0x8d
 80019c2:	2100      	movs	r1, #0
 80019c4:	2078      	movs	r0, #120	; 0x78
 80019c6:	f000 f9ef 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80019ca:	2214      	movs	r2, #20
 80019cc:	2100      	movs	r1, #0
 80019ce:	2078      	movs	r0, #120	; 0x78
 80019d0:	f000 f9ea 	bl	8001da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80019d4:	22af      	movs	r2, #175	; 0xaf
 80019d6:	2100      	movs	r1, #0
 80019d8:	2078      	movs	r0, #120	; 0x78
 80019da:	f000 f9e5 	bl	8001da8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80019de:	222e      	movs	r2, #46	; 0x2e
 80019e0:	2100      	movs	r1, #0
 80019e2:	2078      	movs	r0, #120	; 0x78
 80019e4:	f000 f9e0 	bl	8001da8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f843 	bl	8001a74 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80019ee:	f000 f813 	bl	8001a18 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <SSD1306_Init+0x184>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SSD1306_Init+0x184>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SSD1306_Init+0x184>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20005780 	.word	0x20005780
 8001a14:	200006e0 	.word	0x200006e0

08001a18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	e01d      	b.n	8001a60 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	3b50      	subs	r3, #80	; 0x50
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2078      	movs	r0, #120	; 0x78
 8001a30:	f000 f9ba 	bl	8001da8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2078      	movs	r0, #120	; 0x78
 8001a3a:	f000 f9b5 	bl	8001da8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a3e:	2210      	movs	r2, #16
 8001a40:	2100      	movs	r1, #0
 8001a42:	2078      	movs	r0, #120	; 0x78
 8001a44:	f000 f9b0 	bl	8001da8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <SSD1306_UpdateScreen+0x58>)
 8001a4e:	441a      	add	r2, r3
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	2140      	movs	r1, #64	; 0x40
 8001a54:	2078      	movs	r0, #120	; 0x78
 8001a56:	f000 f95f 	bl	8001d18 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b07      	cmp	r3, #7
 8001a64:	d9de      	bls.n	8001a24 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200002e0 	.word	0x200002e0

08001a74 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <SSD1306_Fill+0x14>
 8001a84:	2300      	movs	r3, #0
 8001a86:	e000      	b.n	8001a8a <SSD1306_Fill+0x16>
 8001a88:	23ff      	movs	r3, #255	; 0xff
 8001a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <SSD1306_Fill+0x2c>)
 8001a92:	f00b f8ad 	bl	800cbf0 <memset>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002e0 	.word	0x200002e0

08001aa4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	80bb      	strh	r3, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	70fb      	strb	r3, [r7, #3]
	if (
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aba:	d848      	bhi.n	8001b4e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	2b3f      	cmp	r3, #63	; 0x3f
 8001ac0:	d845      	bhi.n	8001b4e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <SSD1306_DrawPixel+0xb8>)
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d11a      	bne.n	8001b14 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	88bb      	ldrh	r3, [r7, #4]
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	b298      	uxth	r0, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	01db      	lsls	r3, r3, #7
 8001aea:	4413      	add	r3, r2
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <SSD1306_DrawPixel+0xbc>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	b25a      	sxtb	r2, r3
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b259      	sxtb	r1, r3
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	4603      	mov	r3, r0
 8001b08:	01db      	lsls	r3, r3, #7
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2c9      	uxtb	r1, r1
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <SSD1306_DrawPixel+0xbc>)
 8001b10:	54d1      	strb	r1, [r2, r3]
 8001b12:	e01d      	b.n	8001b50 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b14:	88fa      	ldrh	r2, [r7, #6]
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	b298      	uxth	r0, r3
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	01db      	lsls	r3, r3, #7
 8001b20:	4413      	add	r3, r2
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <SSD1306_DrawPixel+0xbc>)
 8001b24:	5cd3      	ldrb	r3, [r2, r3]
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	b259      	sxtb	r1, r3
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	4603      	mov	r3, r0
 8001b42:	01db      	lsls	r3, r3, #7
 8001b44:	4413      	add	r3, r2
 8001b46:	b2c9      	uxtb	r1, r1
 8001b48:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <SSD1306_DrawPixel+0xbc>)
 8001b4a:	54d1      	strb	r1, [r2, r3]
 8001b4c:	e000      	b.n	8001b50 <SSD1306_DrawPixel+0xac>
		return;
 8001b4e:	bf00      	nop
	}
}
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200006e0 	.word	0x200006e0
 8001b60:	200002e0 	.word	0x200002e0

08001b64 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	80fb      	strh	r3, [r7, #6]
 8001b70:	4613      	mov	r3, r2
 8001b72:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b74:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <SSD1306_GotoXY+0x28>)
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <SSD1306_GotoXY+0x28>)
 8001b7c:	88bb      	ldrh	r3, [r7, #4]
 8001b7e:	8053      	strh	r3, [r2, #2]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	200006e0 	.word	0x200006e0

08001b90 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
	if (
 8001bac:	2b7f      	cmp	r3, #127	; 0x7f
 8001bae:	dc07      	bgt.n	8001bc0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001bb2:	885b      	ldrh	r3, [r3, #2]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001bbc:	2b3f      	cmp	r3, #63	; 0x3f
 8001bbe:	dd01      	ble.n	8001bc4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e05e      	b.n	8001c82 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e04b      	b.n	8001c62 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	3b20      	subs	r3, #32
 8001bd2:	6839      	ldr	r1, [r7, #0]
 8001bd4:	7849      	ldrb	r1, [r1, #1]
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	440b      	add	r3, r1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	e030      	b.n	8001c50 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	b298      	uxth	r0, r3
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001c0c:	885a      	ldrh	r2, [r3, #2]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	79ba      	ldrb	r2, [r7, #6]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7ff ff43 	bl	8001aa4 <SSD1306_DrawPixel>
 8001c1e:	e014      	b.n	8001c4a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001c22:	881a      	ldrh	r2, [r3, #0]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	b298      	uxth	r0, r3
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001c2e:	885a      	ldrh	r2, [r3, #2]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	b299      	uxth	r1, r3
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2301      	moveq	r3, #1
 8001c40:	2300      	movne	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	f7ff ff2d 	bl	8001aa4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d3c8      	bcc.n	8001bee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	785b      	ldrb	r3, [r3, #1]
 8001c66:	461a      	mov	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d3ad      	bcc.n	8001bca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001c70:	881a      	ldrh	r2, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <SSD1306_Putc+0xfc>)
 8001c7e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c80:	79fb      	ldrb	r3, [r7, #7]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200006e0 	.word	0x200006e0

08001c90 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c9e:	e012      	b.n	8001cc6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff71 	bl	8001b90 <SSD1306_Putc>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d002      	beq.n	8001cc0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	e008      	b.n	8001cd2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e8      	bne.n	8001ca0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff fec8 	bl	8001a74 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ce4:	f7ff fe98 	bl	8001a18 <SSD1306_UpdateScreen>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <ssd1306_I2C_Init+0x28>)
 8001cf4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cf6:	e002      	b.n	8001cfe <ssd1306_I2C_Init+0x12>
		p--;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f9      	bne.n	8001cf8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	0003d090 	.word	0x0003d090

08001d18 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b0c7      	sub	sp, #284	; 0x11c
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4604      	mov	r4, r0
 8001d20:	4608      	mov	r0, r1
 8001d22:	4639      	mov	r1, r7
 8001d24:	600a      	str	r2, [r1, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	1dbb      	adds	r3, r7, #6
 8001d30:	4602      	mov	r2, r0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	460a      	mov	r2, r1
 8001d38:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	1dba      	adds	r2, r7, #6
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d4a:	e010      	b.n	8001d6e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001d4c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d50:	463a      	mov	r2, r7
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	441a      	add	r2, r3
 8001d56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	7811      	ldrb	r1, [r2, #0]
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d64:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d6e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	1d3a      	adds	r2, r7, #4
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8e7      	bhi.n	8001d4c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d7c:	1dfb      	adds	r3, r7, #7
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b299      	uxth	r1, r3
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f107 020c 	add.w	r2, r7, #12
 8001d8e:	200a      	movs	r0, #10
 8001d90:	9000      	str	r0, [sp, #0]
 8001d92:	4804      	ldr	r0, [pc, #16]	; (8001da4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001d94:	f000 ff34 	bl	8002c00 <HAL_I2C_Master_Transmit>
}
 8001d98:	bf00      	nop
 8001d9a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20005780 	.word	0x20005780

08001da8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
 8001db2:	460b      	mov	r3, r1
 8001db4:	71bb      	strb	r3, [r7, #6]
 8001db6:	4613      	mov	r3, r2
 8001db8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dbe:	797b      	ldrb	r3, [r7, #5]
 8001dc0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	230a      	movs	r3, #10
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <ssd1306_I2C_Write+0x38>)
 8001dd2:	f000 ff15 	bl	8002c00 <HAL_I2C_Master_Transmit>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20005780 	.word	0x20005780

08001de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_MspInit+0x54>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_MspInit+0x54>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_MspInit+0x54>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_MspInit+0x54>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_MspInit+0x54>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_MspInit+0x54>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	210f      	movs	r1, #15
 8001e26:	f06f 0001 	mvn.w	r0, #1
 8001e2a:	f000 fb31 	bl	8002490 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	201d      	movs	r0, #29
 8001e52:	f000 fb1d 	bl	8002490 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e56:	201d      	movs	r0, #29
 8001e58:	f000 fb36 	bl	80024c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_InitTick+0xa0>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_InitTick+0xa0>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_InitTick+0xa0>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e78:	f107 0210 	add.w	r2, r7, #16
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 f894 	bl	8004fb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e88:	f003 f86a 	bl	8004f60 <HAL_RCC_GetPCLK1Freq>
 8001e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_InitTick+0xa4>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0c9b      	lsrs	r3, r3, #18
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_InitTick+0xac>)
 8001ea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ea8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001ebe:	f003 f932 	bl	8005126 <HAL_TIM_Base_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001ec8:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eca:	f003 f985 	bl	80051d8 <HAL_TIM_Base_Start_IT>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3730      	adds	r7, #48	; 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	431bde83 	.word	0x431bde83
 8001ee4:	2000582c 	.word	0x2000582c
 8001ee8:	40000400 	.word	0x40000400

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <TIM3_IRQHandler+0x10>)
 8001f1e:	f003 f9bd 	bl	800529c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000582c 	.word	0x2000582c

08001f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_RxCpltCallback(&huart1);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <USART1_IRQHandler+0x14>)
 8001f32:	f7ff fb69 	bl	8001608 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f36:	4802      	ldr	r0, [pc, #8]	; (8001f40 <USART1_IRQHandler+0x14>)
 8001f38:	f003 fc84 	bl	8005844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20005874 	.word	0x20005874

08001f44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <OTG_FS_IRQHandler+0x10>)
 8001f4a:	f001 fc17 	bl	800377c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20005dcc 	.word	0x20005dcc

08001f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	return 1;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_kill>:

int _kill(int pid, int sig)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f72:	f00a fe05 	bl	800cb80 <__errno>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2216      	movs	r2, #22
 8001f7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_exit>:

void _exit (int status)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffe7 	bl	8001f68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f9a:	e7fe      	b.n	8001f9a <_exit+0x12>

08001f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e00a      	b.n	8001fc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fae:	f3af 8000 	nop.w
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	60ba      	str	r2, [r7, #8]
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf0      	blt.n	8001fae <_read+0x12>
	}

return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e009      	b.n	8001ffc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	60ba      	str	r2, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	dbf1      	blt.n	8001fe8 <_write+0x12>
	}
	return len;
 8002004:	687b      	ldr	r3, [r7, #4]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_close>:

int _close(int file)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002036:	605a      	str	r2, [r3, #4]
	return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_isatty>:

int _isatty(int file)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	return 1;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f00a fd6a 	bl	800cb80 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20010000 	.word	0x20010000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	200006e8 	.word	0x200006e8
 80020e0:	200061e8 	.word	0x200061e8

080020e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <SystemInit+0x20>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <SystemInit+0x20>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <MX_USART1_UART_Init+0x50>)
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <MX_USART1_UART_Init+0x54>)
 8002110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_USART1_UART_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <MX_USART1_UART_Init+0x50>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <MX_USART1_UART_Init+0x50>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002140:	f003 fa70 	bl	8005624 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800214a:	f7ff fb1d 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_MspInit(&huart1);
 800214e:	4802      	ldr	r0, [pc, #8]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002150:	f000 f806 	bl	8002160 <HAL_UART_MspInit>
  /* USER CODE END USART1_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20005874 	.word	0x20005874
 800215c:	40011000 	.word	0x40011000

08002160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_UART_MspInit+0x94>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d134      	bne.n	80021ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <HAL_UART_MspInit+0x98>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <HAL_UART_MspInit+0x98>)
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_UART_MspInit+0x98>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_UART_MspInit+0x98>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_UART_MspInit+0x98>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_UART_MspInit+0x98>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021cc:	2307      	movs	r3, #7
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <HAL_UART_MspInit+0x9c>)
 80021d8:	f000 fa16 	bl	8002608 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2025      	movs	r0, #37	; 0x25
 80021e2:	f000 f955 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021e6:	2025      	movs	r0, #37	; 0x25
 80021e8:	f000 f96e 	bl	80024c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002206:	490e      	ldr	r1, [pc, #56]	; (8002240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800221c:	4c0b      	ldr	r4, [pc, #44]	; (800224c <LoopFillZerobss+0x26>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800222a:	f7ff ff5b 	bl	80020e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222e:	f00a fcad 	bl	800cb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7ff fa09 	bl	8001648 <main>
  bx  lr    
 8002236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002244:	080133c0 	.word	0x080133c0
  ldr r2, =_sbss
 8002248:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 800224c:	200061e4 	.word	0x200061e4

08002250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_Init+0x40>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_Init+0x40>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_Init+0x40>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f000 f8fc 	bl	800247a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff fdda 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff fdac 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000010 	.word	0x20000010
 80022bc:	200058b8 	.word	0x200058b8

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	200058b8 	.word	0x200058b8

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff ffee 	bl	80022c0 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffde 	bl	80022c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000010 	.word	0x20000010

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <__NVIC_EnableIRQ+0x38>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff4c 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a2:	f7ff ff61 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	6978      	ldr	r0, [r7, #20]
 80024ae:	f7ff ffb1 	bl	8002414 <NVIC_EncodePriority>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff80 	bl	80023c0 <__NVIC_SetPriority>
}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff54 	bl	8002384 <__NVIC_EnableIRQ>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024f2:	f7ff fee5 	bl	80022c0 <HAL_GetTick>
 80024f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d008      	beq.n	8002516 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e052      	b.n	80025bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0216 	bic.w	r2, r2, #22
 8002524:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002534:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_DMA_Abort+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0208 	bic.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002566:	e013      	b.n	8002590 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002568:	f7ff feaa 	bl	80022c0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b05      	cmp	r3, #5
 8002574:	d90c      	bls.n	8002590 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e015      	b.n	80025bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e4      	bne.n	8002568 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	223f      	movs	r2, #63	; 0x3f
 80025a4:	409a      	lsls	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00c      	b.n	80025fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2205      	movs	r2, #5
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e159      	b.n	80028d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8148 	bne.w	80028d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d005      	beq.n	800265a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	2b02      	cmp	r3, #2
 8002658:	d130      	bne.n	80026bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0201 	and.w	r2, r3, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d017      	beq.n	80026f8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a2 	beq.w	80028d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_GPIO_Init+0x2f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x202>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2f4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x1fe>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_GPIO_Init+0x2f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x1fa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a46      	ldr	r2, [pc, #280]	; (8002904 <HAL_GPIO_Init+0x2fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x1f6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a45      	ldr	r2, [pc, #276]	; (8002908 <HAL_GPIO_Init+0x300>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x1f2>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x204>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281c:	4935      	ldr	r1, [pc, #212]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_GPIO_Init+0x304>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284e:	4a2f      	ldr	r2, [pc, #188]	; (800290c <HAL_GPIO_Init+0x304>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_GPIO_Init+0x304>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_GPIO_Init+0x304>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_GPIO_Init+0x304>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_GPIO_Init+0x304>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_GPIO_Init+0x304>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_GPIO_Init+0x304>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f aea2 	bls.w	8002624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002954:	887a      	ldrh	r2, [r7, #2]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	041a      	lsls	r2, r3, #16
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43d9      	mvns	r1, r3
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	400b      	ands	r3, r1
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e12b      	b.n	8002be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe fdea 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029dc:	f002 fac0 	bl	8004f60 <HAL_RCC_GetPCLK1Freq>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a81      	ldr	r2, [pc, #516]	; (8002bec <HAL_I2C_Init+0x274>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d807      	bhi.n	80029fc <HAL_I2C_Init+0x84>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a80      	ldr	r2, [pc, #512]	; (8002bf0 <HAL_I2C_Init+0x278>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e006      	b.n	8002a0a <HAL_I2C_Init+0x92>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a7d      	ldr	r2, [pc, #500]	; (8002bf4 <HAL_I2C_Init+0x27c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0e7      	b.n	8002be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a78      	ldr	r2, [pc, #480]	; (8002bf8 <HAL_I2C_Init+0x280>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9b      	lsrs	r3, r3, #18
 8002a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a6a      	ldr	r2, [pc, #424]	; (8002bec <HAL_I2C_Init+0x274>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d802      	bhi.n	8002a4c <HAL_I2C_Init+0xd4>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	e009      	b.n	8002a60 <HAL_I2C_Init+0xe8>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	4a69      	ldr	r2, [pc, #420]	; (8002bfc <HAL_I2C_Init+0x284>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	3301      	adds	r3, #1
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	495c      	ldr	r1, [pc, #368]	; (8002bec <HAL_I2C_Init+0x274>)
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	d819      	bhi.n	8002ab4 <HAL_I2C_Init+0x13c>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e59      	subs	r1, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8e:	1c59      	adds	r1, r3, #1
 8002a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a94:	400b      	ands	r3, r1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_I2C_Init+0x138>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e59      	subs	r1, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aae:	e051      	b.n	8002b54 <HAL_I2C_Init+0x1dc>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	e04f      	b.n	8002b54 <HAL_I2C_Init+0x1dc>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d111      	bne.n	8002ae0 <HAL_I2C_Init+0x168>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e012      	b.n	8002b06 <HAL_I2C_Init+0x18e>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	0099      	lsls	r1, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Init+0x196>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e022      	b.n	8002b54 <HAL_I2C_Init+0x1dc>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10e      	bne.n	8002b34 <HAL_I2C_Init+0x1bc>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1e58      	subs	r0, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	440b      	add	r3, r1
 8002b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b32:	e00f      	b.n	8002b54 <HAL_I2C_Init+0x1dc>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1e58      	subs	r0, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	0099      	lsls	r1, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	6809      	ldr	r1, [r1, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6911      	ldr	r1, [r2, #16]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	000186a0 	.word	0x000186a0
 8002bf0:	001e847f 	.word	0x001e847f
 8002bf4:	003d08ff 	.word	0x003d08ff
 8002bf8:	431bde83 	.word	0x431bde83
 8002bfc:	10624dd3 	.word	0x10624dd3

08002c00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
 8002c10:	4613      	mov	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7ff fb54 	bl	80022c0 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	f040 80e0 	bne.w	8002de8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2319      	movs	r3, #25
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4970      	ldr	r1, [pc, #448]	; (8002df4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fa92 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e0d3      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2C_Master_Transmit+0x50>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0cc      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d007      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2210      	movs	r2, #16
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	893a      	ldrh	r2, [r7, #8]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a50      	ldr	r2, [pc, #320]	; (8002df8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cb8:	8979      	ldrh	r1, [r7, #10]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f9ca 	bl	8003058 <I2C_MasterRequestWrite>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e08d      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ce4:	e066      	b.n	8002db4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fb0c 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06b      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d11b      	bne.n	8002d88 <HAL_I2C_Master_Transmit+0x188>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d017      	beq.n	8002d88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	6a39      	ldr	r1, [r7, #32]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fafc 	bl	800338a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d107      	bne.n	8002db0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e01a      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d194      	bne.n	8002ce6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00100002 	.word	0x00100002
 8002df8:	ffff0000 	.word	0xffff0000

08002dfc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff fa58 	bl	80022c0 <HAL_GetTick>
 8002e10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	f040 8111 	bne.w	8003046 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2319      	movs	r3, #25
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4988      	ldr	r1, [pc, #544]	; (8003050 <HAL_I2C_IsDeviceReady+0x254>)
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f994 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e104      	b.n	8003048 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_I2C_IsDeviceReady+0x50>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e0fd      	b.n	8003048 <HAL_I2C_IsDeviceReady+0x24c>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d007      	beq.n	8002e72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2224      	movs	r2, #36	; 0x24
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a70      	ldr	r2, [pc, #448]	; (8003054 <HAL_I2C_IsDeviceReady+0x258>)
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f952 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ecc:	d103      	bne.n	8002ed6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b6      	b.n	8003048 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ee8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eea:	f7ff f9e9 	bl	80022c0 <HAL_GetTick>
 8002eee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	bf0c      	ite	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	2300      	movne	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f1e:	e025      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7ff f9ce 	bl	80022c0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <HAL_I2C_IsDeviceReady+0x13a>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	22a0      	movs	r2, #160	; 0xa0
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2ba0      	cmp	r3, #160	; 0xa0
 8002f76:	d005      	beq.n	8002f84 <HAL_I2C_IsDeviceReady+0x188>
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_I2C_IsDeviceReady+0x188>
 8002f7e:	7dbb      	ldrb	r3, [r7, #22]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0cd      	beq.n	8002f20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d129      	bne.n	8002fee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2319      	movs	r3, #25
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4921      	ldr	r1, [pc, #132]	; (8003050 <HAL_I2C_IsDeviceReady+0x254>)
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f8c6 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e036      	b.n	8003048 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e02c      	b.n	8003048 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003006:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2319      	movs	r3, #25
 800300e:	2201      	movs	r2, #1
 8003010:	490f      	ldr	r1, [pc, #60]	; (8003050 <HAL_I2C_IsDeviceReady+0x254>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f8a2 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e012      	b.n	8003048 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3301      	adds	r3, #1
 8003026:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	f4ff af32 	bcc.w	8002e96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	00100002 	.word	0x00100002
 8003054:	ffff0000 	.word	0xffff0000

08003058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	460b      	mov	r3, r1
 8003066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d006      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d003      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003080:	d108      	bne.n	8003094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e00b      	b.n	80030ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	2b12      	cmp	r3, #18
 800309a:	d107      	bne.n	80030ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f84f 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d103      	bne.n	80030dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e035      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e8:	d108      	bne.n	80030fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	e01b      	b.n	8003134 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	11db      	asrs	r3, r3, #7
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 0306 	and.w	r3, r3, #6
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f063 030f 	orn	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <I2C_MasterRequestWrite+0xfc>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f875 	bl	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e010      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <I2C_MasterRequestWrite+0x100>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f865 	bl	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00010008 	.word	0x00010008
 8003158:	00010002 	.word	0x00010002

0800315c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316c:	e025      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d021      	beq.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7ff f8a3 	bl	80022c0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e023      	b.n	8003202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10d      	bne.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	e00c      	b.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d0b6      	beq.n	800316e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003218:	e051      	b.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003228:	d123      	bne.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003242:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0204 	orr.w	r2, r3, #4
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e046      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d021      	beq.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327a:	f7ff f821 	bl	80022c0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d116      	bne.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e020      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10c      	bne.n	80032e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4013      	ands	r3, r2
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	e00b      	b.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4013      	ands	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d18d      	bne.n	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003314:	e02d      	b.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f878 	bl	800340c <I2C_IsAcknowledgeFailed>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e02d      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe ffc7 	bl	80022c0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e007      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d1ca      	bne.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003396:	e02d      	b.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f837 	bl	800340c <I2C_IsAcknowledgeFailed>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e02d      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d021      	beq.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7fe ff86 	bl	80022c0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e007      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d1ca      	bne.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d11b      	bne.n	800345c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f043 0204 	orr.w	r2, r3, #4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800346a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346c:	b08f      	sub	sp, #60	; 0x3c
 800346e:	af0a      	add	r7, sp, #40	; 0x28
 8003470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e10f      	b.n	800369c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f009 f87e 	bl	800c598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2203      	movs	r2, #3
 80034a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 f82f 	bl	800651e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	687e      	ldr	r6, [r7, #4]
 80034c8:	466d      	mov	r5, sp
 80034ca:	f106 0410 	add.w	r4, r6, #16
 80034ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034da:	e885 0003 	stmia.w	r5, {r0, r1}
 80034de:	1d33      	adds	r3, r6, #4
 80034e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	f002 ff06 	bl	80062f4 <USB_CoreInit>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0d0      	b.n	800369c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f003 f81d 	bl	8006540 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	e04a      	b.n	80035a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	333d      	adds	r3, #61	; 0x3d
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	333c      	adds	r3, #60	; 0x3c
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	b298      	uxth	r0, r3
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3342      	adds	r3, #66	; 0x42
 8003548:	4602      	mov	r2, r0
 800354a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	333f      	adds	r3, #63	; 0x3f
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3344      	adds	r3, #68	; 0x44
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3348      	adds	r3, #72	; 0x48
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3350      	adds	r3, #80	; 0x50
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	3301      	adds	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3af      	bcc.n	800350c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e044      	b.n	800363c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	3301      	adds	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d3b5      	bcc.n	80035b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	687e      	ldr	r6, [r7, #4]
 800364e:	466d      	mov	r5, sp
 8003650:	f106 0410 	add.w	r4, r6, #16
 8003654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003660:	e885 0003 	stmia.w	r5, {r0, r1}
 8003664:	1d33      	adds	r3, r6, #4
 8003666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003668:	6838      	ldr	r0, [r7, #0]
 800366a:	f002 ff93 	bl	8006594 <USB_DevInit>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e00d      	b.n	800369c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f003 feff 	bl	8007498 <USB_DevDisconnect>

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_PCD_Start+0x1c>
 80036bc:	2302      	movs	r3, #2
 80036be:	e020      	b.n	8003702 <HAL_PCD_Start+0x5e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d109      	bne.n	80036e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d005      	beq.n	80036e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 ff07 	bl	80064fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 feaf 	bl	8007456 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_PCD_Stop+0x1c>
 8003722:	2302      	movs	r3, #2
 8003724:	e026      	b.n	8003774 <HAL_PCD_Stop+0x6a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fef3 	bl	800651e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f003 feab 	bl	8007498 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2110      	movs	r1, #16
 8003748:	4618      	mov	r0, r3
 800374a:	f003 f887 	bl	800685c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	2b01      	cmp	r3, #1
 8003754:	d109      	bne.n	800376a <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800375a:	2b01      	cmp	r3, #1
 800375c:	d005      	beq.n	800376a <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b08d      	sub	sp, #52	; 0x34
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 ff34 	bl	8007600 <USB_GetMode>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 839d 	bne.w	8003eda <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 fe98 	bl	80074da <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8393 	beq.w	8003ed8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fe8f 	bl	80074da <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d107      	bne.n	80037d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f002 0202 	and.w	r2, r2, #2
 80037d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f003 fe7d 	bl	80074da <USB_ReadInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d161      	bne.n	80038ae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0210 	bic.w	r2, r2, #16
 80037f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	0c5b      	lsrs	r3, r3, #17
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	2b02      	cmp	r3, #2
 8003824:	d124      	bne.n	8003870 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d035      	beq.n	800389e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	6a38      	ldr	r0, [r7, #32]
 8003846:	f003 fce3 	bl	8007210 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003856:	441a      	add	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003868:	441a      	add	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	619a      	str	r2, [r3, #24]
 800386e:	e016      	b.n	800389e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	0c5b      	lsrs	r3, r3, #17
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2b06      	cmp	r3, #6
 800387a:	d110      	bne.n	800389e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003882:	2208      	movs	r2, #8
 8003884:	4619      	mov	r1, r3
 8003886:	6a38      	ldr	r0, [r7, #32]
 8003888:	f003 fcc2 	bl	8007210 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003898:	441a      	add	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0210 	orr.w	r2, r2, #16
 80038ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 fe11 	bl	80074da <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038c2:	d16e      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f003 fe17 	bl	8007500 <USB_ReadDevAllOutEpInterrupt>
 80038d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038d4:	e062      	b.n	800399c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d057      	beq.n	8003990 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 fe3c 	bl	8007568 <USB_ReadDevOutEPInterrupt>
 80038f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	2301      	movs	r3, #1
 800390c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800390e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fd4f 	bl	80043b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00c      	beq.n	800393a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	2308      	movs	r3, #8
 8003930:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fe49 	bl	80045cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	2310      	movs	r3, #16
 8003954:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	2320      	movs	r3, #32
 8003970:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	461a      	mov	r2, r3
 800398a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800398e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	3301      	adds	r3, #1
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d199      	bne.n	80038d6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fd97 	bl	80074da <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b6:	f040 80c0 	bne.w	8003b3a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fdb8 	bl	8007534 <USB_ReadDevAllInEpInterrupt>
 80039c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039ca:	e0b2      	b.n	8003b32 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80a7 	beq.w	8003b26 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fdde 	bl	80075a4 <USB_ReadDevInEPInterrupt>
 80039e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d057      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a14:	4013      	ands	r3, r2
 8003a16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2301      	movs	r3, #1
 8003a28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d132      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3348      	adds	r3, #72	; 0x48
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4403      	add	r3, r0
 8003a52:	3344      	adds	r3, #68	; 0x44
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4419      	add	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4403      	add	r3, r0
 8003a66:	3348      	adds	r3, #72	; 0x48
 8003a68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d113      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x31c>
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3350      	adds	r3, #80	; 0x50
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a90:	461a      	mov	r2, r3
 8003a92:	2101      	movs	r1, #1
 8003a94:	f003 fde6 	bl	8007664 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f008 fdfb 	bl	800c69a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	461a      	mov	r2, r3
 8003abc:	2308      	movs	r3, #8
 8003abe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2310      	movs	r3, #16
 8003ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	461a      	mov	r2, r3
 8003af4:	2340      	movs	r3, #64	; 0x40
 8003af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2302      	movs	r3, #2
 8003b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fbb9 	bl	8004298 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	3301      	adds	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f af49 	bne.w	80039cc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f003 fccb 	bl	80074da <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4e:	d122      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d108      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b76:	2100      	movs	r1, #0
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fdc5 	bl	8004708 <HAL_PCDEx_LPM_Callback>
 8003b7e:	e002      	b.n	8003b86 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f008 fdf7 	bl	800c774 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f003 fc9d 	bl	80074da <USB_ReadInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003baa:	d112      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d102      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f008 fdb3 	bl	800c728 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bd0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fc7f 	bl	80074da <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	f040 80c7 	bne.w	8003d78 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2110      	movs	r1, #16
 8003c04:	4618      	mov	r0, r3
 8003c06:	f002 fe29 	bl	800685c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0e:	e056      	b.n	8003cbe <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c42:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	461a      	mov	r2, r3
 8003c72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c76:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cb6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	3301      	adds	r3, #1
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3a3      	bcc.n	8003c10 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cda:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d016      	beq.n	8003d12 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf4:	f043 030b 	orr.w	r3, r3, #11
 8003cf8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f043 030b 	orr.w	r3, r3, #11
 8003d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d10:	e015      	b.n	8003d3e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d24:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d28:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d38:	f043 030b 	orr.w	r3, r3, #11
 8003d3c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d50:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d62:	461a      	mov	r2, r3
 8003d64:	f003 fc7e 	bl	8007664 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f003 fbac 	bl	80074da <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8c:	d124      	bne.n	8003dd8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fc42 	bl	800761c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f002 fdbe 	bl	800691e <USB_GetDevSpeed>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681c      	ldr	r4, [r3, #0]
 8003dae:	f001 f8cb 	bl	8004f48 <HAL_RCC_GetHCLKFreq>
 8003db2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f002 fafb 	bl	80063b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f008 fc91 	bl	800c6ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f003 fb7c 	bl	80074da <USB_ReadInterrupts>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d10a      	bne.n	8003e02 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f008 fc6e 	bl	800c6ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f002 0208 	and.w	r2, r2, #8
 8003e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 fb67 	bl	80074da <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e16:	d10f      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f008 fcc6 	bl	800c7b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f003 fb4c 	bl	80074da <USB_ReadInterrupts>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e4c:	d10f      	bne.n	8003e6e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f008 fc99 	bl	800c790 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 fb31 	bl	80074da <USB_ReadInterrupts>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d10a      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f008 fca7 	bl	800c7d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 fb1b 	bl	80074da <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d115      	bne.n	8003eda <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f008 fc97 	bl	800c7f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e000      	b.n	8003eda <HAL_PCD_IRQHandler+0x75e>
      return;
 8003ed8:	bf00      	nop
    }
  }
}
 8003eda:	3734      	adds	r7, #52	; 0x34
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}

08003ee0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_PCD_SetAddress+0x1a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e013      	b.n	8003f22 <HAL_PCD_SetAddress+0x42>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f003 fa79 	bl	800740a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	4608      	mov	r0, r1
 8003f34:	4611      	mov	r1, r2
 8003f36:	461a      	mov	r2, r3
 8003f38:	4603      	mov	r3, r0
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	803b      	strh	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da0f      	bge.n	8003f70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	3338      	adds	r3, #56	; 0x38
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	705a      	strb	r2, [r3, #1]
 8003f6e:	e00f      	b.n	8003f90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 020f 	and.w	r2, r3, #15
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	3304      	adds	r3, #4
 8003f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f9c:	883a      	ldrh	r2, [r7, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	78ba      	ldrb	r2, [r7, #2]
 8003fa6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fba:	78bb      	ldrb	r3, [r7, #2]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d102      	bne.n	8003fc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_PCD_EP_Open+0xaa>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e00e      	b.n	8003ff2 <HAL_PCD_EP_Open+0xc8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f002 fcc0 	bl	8006968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	460b      	mov	r3, r1
 8004008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	3304      	adds	r3, #4
 8004022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800403c:	7afb      	ldrb	r3, [r7, #11]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	b2da      	uxtb	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d102      	bne.n	8004056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004056:	7afb      	ldrb	r3, [r7, #11]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	f002 ff47 	bl	8006f00 <USB_EP0StartXfer>
 8004072:	e008      	b.n	8004086 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	f002 fcf9 	bl	8006a78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	460b      	mov	r3, r1
 800409e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a0:	7afb      	ldrb	r3, [r7, #11]
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	3338      	adds	r3, #56	; 0x38
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	3304      	adds	r3, #4
 80040b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2201      	movs	r2, #1
 80040ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d0:	7afb      	ldrb	r3, [r7, #11]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d102      	bne.n	80040ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040ea:	7afb      	ldrb	r3, [r7, #11]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	6979      	ldr	r1, [r7, #20]
 8004102:	f002 fefd 	bl	8006f00 <USB_EP0StartXfer>
 8004106:	e008      	b.n	800411a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	f002 fcaf 	bl	8006a78 <USB_EPStartXfer>
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 020f 	and.w	r2, r3, #15
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	429a      	cmp	r2, r3
 800413c:	d901      	bls.n	8004142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e050      	b.n	80041e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004146:	2b00      	cmp	r3, #0
 8004148:	da0f      	bge.n	800416a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	3338      	adds	r3, #56	; 0x38
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	3304      	adds	r3, #4
 8004160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	705a      	strb	r2, [r3, #1]
 8004168:	e00d      	b.n	8004186 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_PCD_EP_SetStall+0x82>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e01e      	b.n	80041e4 <HAL_PCD_EP_SetStall+0xc0>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 f854 	bl	8007262 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	b2d9      	uxtb	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041d4:	461a      	mov	r2, r3
 80041d6:	f003 fa45 	bl	8007664 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d901      	bls.n	800420a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e042      	b.n	8004290 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800420a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	da0f      	bge.n	8004232 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	3338      	adds	r3, #56	; 0x38
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	705a      	strb	r2, [r3, #1]
 8004230:	e00f      	b.n	8004252 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	f003 020f 	and.w	r2, r3, #15
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4413      	add	r3, r2
 8004248:	3304      	adds	r3, #4
 800424a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_PCD_EP_ClrStall+0x86>
 800426e:	2302      	movs	r3, #2
 8004270:	e00e      	b.n	8004290 <HAL_PCD_EP_ClrStall+0xa4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	4618      	mov	r0, r3
 8004282:	f003 f85c 	bl	800733e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af02      	add	r7, sp, #8
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	3338      	adds	r3, #56	; 0x38
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	4413      	add	r3, r2
 80042bc:	3304      	adds	r3, #4
 80042be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d901      	bls.n	80042d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e06c      	b.n	80043aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d902      	bls.n	80042ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3303      	adds	r3, #3
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042f4:	e02b      	b.n	800434e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	429a      	cmp	r2, r3
 800430a:	d902      	bls.n	8004312 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3303      	adds	r3, #3
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68d9      	ldr	r1, [r3, #12]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800432a:	b2db      	uxtb	r3, r3
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4603      	mov	r3, r0
 8004330:	6978      	ldr	r0, [r7, #20]
 8004332:	f002 ff38 	bl	80071a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	441a      	add	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	441a      	add	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	b29b      	uxth	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	429a      	cmp	r2, r3
 8004362:	d809      	bhi.n	8004378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800436c:	429a      	cmp	r2, r3
 800436e:	d203      	bcs.n	8004378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1be      	bne.n	80042f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	429a      	cmp	r2, r3
 8004382:	d811      	bhi.n	80043a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	2201      	movs	r2, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	43db      	mvns	r3, r3
 800439e:	6939      	ldr	r1, [r7, #16]
 80043a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a4:	4013      	ands	r3, r2
 80043a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	333c      	adds	r3, #60	; 0x3c
 80043cc:	3304      	adds	r3, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	f040 80a0 	bne.w	800452c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d015      	beq.n	8004422 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a72      	ldr	r2, [pc, #456]	; (80045c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	f240 80dd 	bls.w	80045ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80d7 	beq.w	80045ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	461a      	mov	r2, r3
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	6093      	str	r3, [r2, #8]
 8004420:	e0cb      	b.n	80045ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	461a      	mov	r2, r3
 800443a:	2320      	movs	r3, #32
 800443c:	6093      	str	r3, [r2, #8]
 800443e:	e0bc      	b.n	80045ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 80b7 	bne.w	80045ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a5d      	ldr	r2, [pc, #372]	; (80045c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d90f      	bls.n	8004474 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	e0a2      	b.n	80045ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004486:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	0159      	lsls	r1, r3, #5
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	440b      	add	r3, r1
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800449a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4403      	add	r3, r0
 80044aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80044ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4403      	add	r3, r0
 80044d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4419      	add	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4403      	add	r3, r0
 80044e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d114      	bne.n	800451e <PCD_EP_OutXfrComplete_int+0x16a>
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d108      	bne.n	800451e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004516:	461a      	mov	r2, r3
 8004518:	2101      	movs	r1, #1
 800451a:	f003 f8a3 	bl	8007664 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f008 f89d 	bl	800c664 <HAL_PCD_DataOutStageCallback>
 800452a:	e046      	b.n	80045ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d124      	bne.n	800457e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	461a      	mov	r2, r3
 800454c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004550:	6093      	str	r3, [r2, #8]
 8004552:	e032      	b.n	80045ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	461a      	mov	r2, r3
 800456c:	2320      	movs	r3, #32
 800456e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f008 f874 	bl	800c664 <HAL_PCD_DataOutStageCallback>
 800457c:	e01d      	b.n	80045ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d114      	bne.n	80045ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d108      	bne.n	80045ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045a6:	461a      	mov	r2, r3
 80045a8:	2100      	movs	r1, #0
 80045aa:	f003 f85b 	bl	8007664 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	4619      	mov	r1, r3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f008 f855 	bl	800c664 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	4f54300a 	.word	0x4f54300a
 80045c8:	4f54310a 	.word	0x4f54310a

080045cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	333c      	adds	r3, #60	; 0x3c
 80045e4:	3304      	adds	r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <PCD_EP_OutSetupPacket_int+0x88>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d90e      	bls.n	8004620 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	461a      	mov	r2, r3
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f008 f80d 	bl	800c640 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <PCD_EP_OutSetupPacket_int+0x88>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d90c      	bls.n	8004648 <PCD_EP_OutSetupPacket_int+0x7c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d108      	bne.n	8004648 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004640:	461a      	mov	r2, r3
 8004642:	2101      	movs	r1, #1
 8004644:	f003 f80e 	bl	8007664 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	4f54300a 	.word	0x4f54300a

08004658 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	70fb      	strb	r3, [r7, #3]
 8004664:	4613      	mov	r3, r2
 8004666:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004676:	883b      	ldrh	r3, [r7, #0]
 8004678:	0419      	lsls	r1, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	430a      	orrs	r2, r1
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
 8004684:	e028      	b.n	80046d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004694:	2300      	movs	r3, #0
 8004696:	73fb      	strb	r3, [r7, #15]
 8004698:	e00d      	b.n	80046b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	3340      	adds	r3, #64	; 0x40
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	0c1b      	lsrs	r3, r3, #16
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4413      	add	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	3301      	adds	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	429a      	cmp	r2, r3
 80046be:	d3ec      	bcc.n	800469a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046c0:	883b      	ldrh	r3, [r7, #0]
 80046c2:	0418      	lsls	r0, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	4302      	orrs	r2, r0
 80046d0:	3340      	adds	r3, #64	; 0x40
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e264      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d075      	beq.n	800482a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473e:	4ba3      	ldr	r3, [pc, #652]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b04      	cmp	r3, #4
 8004748:	d00c      	beq.n	8004764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474a:	4ba0      	ldr	r3, [pc, #640]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004752:	2b08      	cmp	r3, #8
 8004754:	d112      	bne.n	800477c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004756:	4b9d      	ldr	r3, [pc, #628]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004762:	d10b      	bne.n	800477c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004764:	4b99      	ldr	r3, [pc, #612]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d05b      	beq.n	8004828 <HAL_RCC_OscConfig+0x108>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d157      	bne.n	8004828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e23f      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d106      	bne.n	8004794 <HAL_RCC_OscConfig+0x74>
 8004786:	4b91      	ldr	r3, [pc, #580]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a90      	ldr	r2, [pc, #576]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e01d      	b.n	80047d0 <HAL_RCC_OscConfig+0xb0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x98>
 800479e:	4b8b      	ldr	r3, [pc, #556]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a8a      	ldr	r2, [pc, #552]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	4b88      	ldr	r3, [pc, #544]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a87      	ldr	r2, [pc, #540]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e00b      	b.n	80047d0 <HAL_RCC_OscConfig+0xb0>
 80047b8:	4b84      	ldr	r3, [pc, #528]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a83      	ldr	r2, [pc, #524]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4b81      	ldr	r3, [pc, #516]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a80      	ldr	r2, [pc, #512]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d013      	beq.n	8004800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd fd72 	bl	80022c0 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd fd6e 	bl	80022c0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e204      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	4b76      	ldr	r3, [pc, #472]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0xc0>
 80047fe:	e014      	b.n	800482a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fd fd5e 	bl	80022c0 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004808:	f7fd fd5a 	bl	80022c0 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e1f0      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	4b6c      	ldr	r3, [pc, #432]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0xe8>
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d063      	beq.n	80048fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004836:	4b65      	ldr	r3, [pc, #404]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004842:	4b62      	ldr	r3, [pc, #392]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800484a:	2b08      	cmp	r3, #8
 800484c:	d11c      	bne.n	8004888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484e:	4b5f      	ldr	r3, [pc, #380]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d116      	bne.n	8004888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	4b5c      	ldr	r3, [pc, #368]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_RCC_OscConfig+0x152>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d001      	beq.n	8004872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e1c4      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	4b56      	ldr	r3, [pc, #344]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4952      	ldr	r1, [pc, #328]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004886:	e03a      	b.n	80048fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004890:	4b4f      	ldr	r3, [pc, #316]	; (80049d0 <HAL_RCC_OscConfig+0x2b0>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fd fd13 	bl	80022c0 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489e:	f7fd fd0f 	bl	80022c0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e1a5      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b0:	4b46      	ldr	r3, [pc, #280]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048bc:	4b43      	ldr	r3, [pc, #268]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4940      	ldr	r1, [pc, #256]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]
 80048d0:	e015      	b.n	80048fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d2:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <HAL_RCC_OscConfig+0x2b0>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fd fcf2 	bl	80022c0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e0:	f7fd fcee 	bl	80022c0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e184      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d030      	beq.n	800496c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004912:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <HAL_RCC_OscConfig+0x2b4>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004918:	f7fd fcd2 	bl	80022c0 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004920:	f7fd fcce 	bl	80022c0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e164      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x200>
 800493e:	e015      	b.n	800496c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004940:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCC_OscConfig+0x2b4>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004946:	f7fd fcbb 	bl	80022c0 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494e:	f7fd fcb7 	bl	80022c0 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e14d      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80a0 	beq.w	8004aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10f      	bne.n	80049aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 8004994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004998:	6413      	str	r3, [r2, #64]	; 0x40
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <HAL_RCC_OscConfig+0x2ac>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCC_OscConfig+0x2b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d121      	bne.n	80049fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <HAL_RCC_OscConfig+0x2b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a07      	ldr	r2, [pc, #28]	; (80049d8 <HAL_RCC_OscConfig+0x2b8>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c2:	f7fd fc7d 	bl	80022c0 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	e011      	b.n	80049ee <HAL_RCC_OscConfig+0x2ce>
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	42470000 	.word	0x42470000
 80049d4:	42470e80 	.word	0x42470e80
 80049d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049dc:	f7fd fc70 	bl	80022c0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e106      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	4b85      	ldr	r3, [pc, #532]	; (8004c04 <HAL_RCC_OscConfig+0x4e4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x2f0>
 8004a02:	4b81      	ldr	r3, [pc, #516]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a80      	ldr	r2, [pc, #512]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0e:	e01c      	b.n	8004a4a <HAL_RCC_OscConfig+0x32a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d10c      	bne.n	8004a32 <HAL_RCC_OscConfig+0x312>
 8004a18:	4b7b      	ldr	r3, [pc, #492]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	4a7a      	ldr	r2, [pc, #488]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a1e:	f043 0304 	orr.w	r3, r3, #4
 8004a22:	6713      	str	r3, [r2, #112]	; 0x70
 8004a24:	4b78      	ldr	r3, [pc, #480]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	4a77      	ldr	r2, [pc, #476]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a30:	e00b      	b.n	8004a4a <HAL_RCC_OscConfig+0x32a>
 8004a32:	4b75      	ldr	r3, [pc, #468]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	4a74      	ldr	r2, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3e:	4b72      	ldr	r3, [pc, #456]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	4a71      	ldr	r2, [pc, #452]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a44:	f023 0304 	bic.w	r3, r3, #4
 8004a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d015      	beq.n	8004a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a52:	f7fd fc35 	bl	80022c0 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fd fc31 	bl	80022c0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0c5      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a70:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0ee      	beq.n	8004a5a <HAL_RCC_OscConfig+0x33a>
 8004a7c:	e014      	b.n	8004aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7e:	f7fd fc1f 	bl	80022c0 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a84:	e00a      	b.n	8004a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fd fc1b 	bl	80022c0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e0af      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9c:	4b5a      	ldr	r3, [pc, #360]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ee      	bne.n	8004a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	4b56      	ldr	r3, [pc, #344]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	4a55      	ldr	r2, [pc, #340]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 809b 	beq.w	8004bfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac4:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d05c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d141      	bne.n	8004b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad8:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <HAL_RCC_OscConfig+0x4ec>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fd fbef 	bl	80022c0 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fd fbeb 	bl	80022c0 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e081      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af8:	4b43      	ldr	r3, [pc, #268]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f0      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	019b      	lsls	r3, r3, #6
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	061b      	lsls	r3, r3, #24
 8004b28:	4937      	ldr	r1, [pc, #220]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCC_OscConfig+0x4ec>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fd fbc4 	bl	80022c0 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fd fbc0 	bl	80022c0 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e056      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4e:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x41c>
 8004b5a:	e04e      	b.n	8004bfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_RCC_OscConfig+0x4ec>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fd fbad 	bl	80022c0 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6a:	f7fd fba9 	bl	80022c0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e03f      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7c:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x44a>
 8004b88:	e037      	b.n	8004bfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e032      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b96:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <HAL_RCC_OscConfig+0x4e8>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d028      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d121      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d11a      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d111      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	3b01      	subs	r3, #1
 8004be0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d001      	beq.n	8004bfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40007000 	.word	0x40007000
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	42470060 	.word	0x42470060

08004c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0cc      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c24:	4b68      	ldr	r3, [pc, #416]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d90c      	bls.n	8004c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b63      	ldr	r3, [pc, #396]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0b8      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c64:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a58      	ldr	r2, [pc, #352]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c7c:	4b53      	ldr	r3, [pc, #332]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a52      	ldr	r2, [pc, #328]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b50      	ldr	r3, [pc, #320]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	494d      	ldr	r1, [pc, #308]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d044      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d119      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d003      	beq.n	8004cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e06f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e067      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cee:	4b37      	ldr	r3, [pc, #220]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 0203 	bic.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4934      	ldr	r1, [pc, #208]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d00:	f7fd fade 	bl	80022c0 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d08:	f7fd fada 	bl	80022c0 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e04f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 020c 	and.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1eb      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d20c      	bcs.n	8004d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e032      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d64:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4916      	ldr	r1, [pc, #88]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	490e      	ldr	r1, [pc, #56]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d96:	f000 f821 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	490a      	ldr	r1, [pc, #40]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	5ccb      	ldrb	r3, [r1, r3]
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd f840 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023c00 	.word	0x40023c00
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	08012ebc 	.word	0x08012ebc
 8004dd4:	20000008 	.word	0x20000008
 8004dd8:	2000000c 	.word	0x2000000c

08004ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de2:	2100      	movs	r1, #0
 8004de4:	6079      	str	r1, [r7, #4]
 8004de6:	2100      	movs	r1, #0
 8004de8:	60f9      	str	r1, [r7, #12]
 8004dea:	2100      	movs	r1, #0
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dee:	2100      	movs	r1, #0
 8004df0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df2:	4952      	ldr	r1, [pc, #328]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004df4:	6889      	ldr	r1, [r1, #8]
 8004df6:	f001 010c 	and.w	r1, r1, #12
 8004dfa:	2908      	cmp	r1, #8
 8004dfc:	d00d      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x3e>
 8004dfe:	2908      	cmp	r1, #8
 8004e00:	f200 8094 	bhi.w	8004f2c <HAL_RCC_GetSysClockFreq+0x150>
 8004e04:	2900      	cmp	r1, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0x32>
 8004e08:	2904      	cmp	r1, #4
 8004e0a:	d003      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x38>
 8004e0c:	e08e      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0e:	4b4c      	ldr	r3, [pc, #304]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x164>)
 8004e10:	60bb      	str	r3, [r7, #8]
       break;
 8004e12:	e08e      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e14:	4b4b      	ldr	r3, [pc, #300]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e16:	60bb      	str	r3, [r7, #8]
      break;
 8004e18:	e08b      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e1a:	4948      	ldr	r1, [pc, #288]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e1c:	6849      	ldr	r1, [r1, #4]
 8004e1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004e22:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e24:	4945      	ldr	r1, [pc, #276]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e26:	6849      	ldr	r1, [r1, #4]
 8004e28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d024      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e30:	4942      	ldr	r1, [pc, #264]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e32:	6849      	ldr	r1, [r1, #4]
 8004e34:	0989      	lsrs	r1, r1, #6
 8004e36:	4608      	mov	r0, r1
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004e40:	f04f 0500 	mov.w	r5, #0
 8004e44:	ea00 0204 	and.w	r2, r0, r4
 8004e48:	ea01 0305 	and.w	r3, r1, r5
 8004e4c:	493d      	ldr	r1, [pc, #244]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e4e:	fb01 f003 	mul.w	r0, r1, r3
 8004e52:	2100      	movs	r1, #0
 8004e54:	fb01 f102 	mul.w	r1, r1, r2
 8004e58:	1844      	adds	r4, r0, r1
 8004e5a:	493a      	ldr	r1, [pc, #232]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e5c:	fba2 0101 	umull	r0, r1, r2, r1
 8004e60:	1863      	adds	r3, r4, r1
 8004e62:	4619      	mov	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	f7fb ff14 	bl	8000c98 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e04a      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e8a:	f04f 0100 	mov.w	r1, #0
 8004e8e:	ea02 0400 	and.w	r4, r2, r0
 8004e92:	ea03 0501 	and.w	r5, r3, r1
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	014b      	lsls	r3, r1, #5
 8004ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ea8:	0142      	lsls	r2, r0, #5
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	1b00      	subs	r0, r0, r4
 8004eb0:	eb61 0105 	sbc.w	r1, r1, r5
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	018b      	lsls	r3, r1, #6
 8004ebe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ec2:	0182      	lsls	r2, r0, #6
 8004ec4:	1a12      	subs	r2, r2, r0
 8004ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eca:	f04f 0000 	mov.w	r0, #0
 8004ece:	f04f 0100 	mov.w	r1, #0
 8004ed2:	00d9      	lsls	r1, r3, #3
 8004ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed8:	00d0      	lsls	r0, r2, #3
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	1912      	adds	r2, r2, r4
 8004ee0:	eb45 0303 	adc.w	r3, r5, r3
 8004ee4:	f04f 0000 	mov.w	r0, #0
 8004ee8:	f04f 0100 	mov.w	r1, #0
 8004eec:	0299      	lsls	r1, r3, #10
 8004eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ef2:	0290      	lsls	r0, r2, #10
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4619      	mov	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	f7fb fec8 	bl	8000c98 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	60bb      	str	r3, [r7, #8]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f2e:	60bb      	str	r3, [r7, #8]
      break;
 8004f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f32:	68bb      	ldr	r3, [r7, #8]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	00f42400 	.word	0x00f42400
 8004f44:	017d7840 	.word	0x017d7840

08004f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20000008 	.word	0x20000008

08004f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f64:	f7ff fff0 	bl	8004f48 <HAL_RCC_GetHCLKFreq>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	0a9b      	lsrs	r3, r3, #10
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	4903      	ldr	r1, [pc, #12]	; (8004f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f76:	5ccb      	ldrb	r3, [r1, r3]
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40023800 	.word	0x40023800
 8004f84:	08012ecc 	.word	0x08012ecc

08004f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f8c:	f7ff ffdc 	bl	8004f48 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0b5b      	lsrs	r3, r3, #13
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4903      	ldr	r1, [pc, #12]	; (8004fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	08012ecc 	.word	0x08012ecc

08004fb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	220f      	movs	r2, #15
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fc0:	4b12      	ldr	r3, [pc, #72]	; (800500c <HAL_RCC_GetClockConfig+0x5c>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0203 	and.w	r2, r3, #3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	; (800500c <HAL_RCC_GetClockConfig+0x5c>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_RCC_GetClockConfig+0x5c>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fe4:	4b09      	ldr	r3, [pc, #36]	; (800500c <HAL_RCC_GetClockConfig+0x5c>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	08db      	lsrs	r3, r3, #3
 8004fea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_RCC_GetClockConfig+0x60>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0207 	and.w	r2, r3, #7
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	601a      	str	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	40023c00 	.word	0x40023c00

08005014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e07b      	b.n	800511e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005036:	d009      	beq.n	800504c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	61da      	str	r2, [r3, #28]
 800503e:	e005      	b.n	800504c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc fbca 	bl	8001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005082:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	ea42 0103 	orr.w	r1, r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	f003 0104 	and.w	r1, r3, #4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0210 	and.w	r2, r3, #16
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e041      	b.n	80051bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f839 	bl	80051c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 f9c9 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d001      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e044      	b.n	800527a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1e      	ldr	r2, [pc, #120]	; (8005288 <HAL_TIM_Base_Start_IT+0xb0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x6c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d013      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x6c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1a      	ldr	r2, [pc, #104]	; (800528c <HAL_TIM_Base_Start_IT+0xb4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x6c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a19      	ldr	r2, [pc, #100]	; (8005290 <HAL_TIM_Base_Start_IT+0xb8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x6c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a17      	ldr	r2, [pc, #92]	; (8005294 <HAL_TIM_Base_Start_IT+0xbc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x6c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <HAL_TIM_Base_Start_IT+0xc0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d111      	bne.n	8005268 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b06      	cmp	r3, #6
 8005254:	d010      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005266:	e007      	b.n	8005278 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40010000 	.word	0x40010000
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40014000 	.word	0x40014000

0800529c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d122      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d11b      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0202 	mvn.w	r2, #2
 80052c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8ee 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8e0 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8f1 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0204 	mvn.w	r2, #4
 800531c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8c4 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8b6 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8c7 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b08      	cmp	r3, #8
 8005358:	d122      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b08      	cmp	r3, #8
 8005366:	d11b      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0208 	mvn.w	r2, #8
 8005370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2204      	movs	r2, #4
 8005376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f89a 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f88c 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f89d 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0210 	mvn.w	r2, #16
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2208      	movs	r2, #8
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f870 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f862 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f873 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d107      	bne.n	8005420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0201 	mvn.w	r2, #1
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc f9a2 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d10e      	bne.n	800544c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d107      	bne.n	800544c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8e2 	bl	8005610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b40      	cmp	r3, #64	; 0x40
 8005458:	d10e      	bne.n	8005478 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d107      	bne.n	8005478 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f838 	bl	80054e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b20      	cmp	r3, #32
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b20      	cmp	r3, #32
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0220 	mvn.w	r2, #32
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f8ac 	bl	80055fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a31      	ldr	r2, [pc, #196]	; (80055e4 <TIM_Base_SetConfig+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a30      	ldr	r2, [pc, #192]	; (80055e8 <TIM_Base_SetConfig+0xec>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a2f      	ldr	r2, [pc, #188]	; (80055ec <TIM_Base_SetConfig+0xf0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <TIM_Base_SetConfig+0xe8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <TIM_Base_SetConfig+0xec>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a20      	ldr	r2, [pc, #128]	; (80055ec <TIM_Base_SetConfig+0xf0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <TIM_Base_SetConfig+0xf4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <TIM_Base_SetConfig+0xf8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <TIM_Base_SetConfig+0xfc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800

080055fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e03f      	b.n	80056b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fc fd88 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2224      	movs	r2, #36	; 0x24
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fc7b 	bl	8005f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800567c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800568c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800569c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b08a      	sub	sp, #40	; 0x28
 80056c2:	af02      	add	r7, sp, #8
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d17c      	bne.n	80057d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_UART_Transmit+0x2c>
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e075      	b.n	80057da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_UART_Transmit+0x3e>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e06e      	b.n	80057da <HAL_UART_Transmit+0x11c>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005712:	f7fc fdd5 	bl	80022c0 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	88fa      	ldrh	r2, [r7, #6]
 8005722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572c:	d108      	bne.n	8005740 <HAL_UART_Transmit+0x82>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	e003      	b.n	8005748 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005750:	e02a      	b.n	80057a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	2180      	movs	r1, #128	; 0x80
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 fa3d 	bl	8005bdc <UART_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e036      	b.n	80057da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3302      	adds	r3, #2
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e007      	b.n	800579a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1cf      	bne.n	8005752 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2140      	movs	r1, #64	; 0x40
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fa0d 	bl	8005bdc <UART_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e006      	b.n	80057da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	4613      	mov	r3, r2
 80057ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d11d      	bne.n	8005838 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_UART_Receive_IT+0x26>
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e016      	b.n	800583a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_UART_Receive_IT+0x38>
 8005816:	2302      	movs	r3, #2
 8005818:	e00f      	b.n	800583a <HAL_UART_Receive_IT+0x58>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	461a      	mov	r2, r3
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fa1e 	bl	8005c70 <UART_Start_Receive_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	e000      	b.n	800583a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x52>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fad1 	bl	8005e36 <UART_Receive_IT>
      return;
 8005894:	e17c      	b.n	8005b90 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80b1 	beq.w	8005a00 <HAL_UART_IRQHandler+0x1bc>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <HAL_UART_IRQHandler+0x70>
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80a6 	beq.w	8005a00 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_UART_IRQHandler+0x90>
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_UART_IRQHandler+0xb0>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f043 0202 	orr.w	r2, r3, #2
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_UART_IRQHandler+0xd0>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f043 0204 	orr.w	r2, r3, #4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00f      	beq.n	800593e <HAL_UART_IRQHandler+0xfa>
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d104      	bne.n	8005932 <HAL_UART_IRQHandler+0xee>
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f043 0208 	orr.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 811f 	beq.w	8005b86 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_UART_IRQHandler+0x11e>
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fa6a 	bl	8005e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <HAL_UART_IRQHandler+0x146>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d031      	beq.n	80059ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9aa 	bl	8005ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d123      	bne.n	80059e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d013      	beq.n	80059de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	4a77      	ldr	r2, [pc, #476]	; (8005b98 <HAL_UART_IRQHandler+0x354>)
 80059bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fc fdfe 	bl	80025c4 <HAL_DMA_Abort_IT>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059d8:	4610      	mov	r0, r2
 80059da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059dc:	e00e      	b.n	80059fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8e6 	bl	8005bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e4:	e00a      	b.n	80059fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8e2 	bl	8005bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	e006      	b.n	80059fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8de 	bl	8005bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059fa:	e0c4      	b.n	8005b86 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	bf00      	nop
    return;
 80059fe:	e0c2      	b.n	8005b86 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f040 80a2 	bne.w	8005b4e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 809c 	beq.w	8005b4e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8096 	beq.w	8005b4e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d14f      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005a50:	8a3b      	ldrh	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8099 	beq.w	8005b8a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a5c:	8a3a      	ldrh	r2, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	f080 8093 	bcs.w	8005b8a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8a3a      	ldrh	r2, [r7, #16]
 8005a68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a74:	d02b      	beq.n	8005ace <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a84:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0210 	bic.w	r2, r2, #16
 8005ac2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc fd0b 	bl	80024e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f870 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ae4:	e051      	b.n	8005b8a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d047      	beq.n	8005b8e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005afe:	8a7b      	ldrh	r3, [r7, #18]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d044      	beq.n	8005b8e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b12:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0210 	bic.w	r2, r2, #16
 8005b40:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b42:	8a7b      	ldrh	r3, [r7, #18]
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f83c 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b4c:	e01f      	b.n	8005b8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_UART_IRQHandler+0x326>
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f8ff 	bl	8005d66 <UART_Transmit_IT>
    return;
 8005b68:	e012      	b.n	8005b90 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <HAL_UART_IRQHandler+0x34c>
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f941 	bl	8005e06 <UART_EndTransmit_IT>
    return;
 8005b84:	e004      	b.n	8005b90 <HAL_UART_IRQHandler+0x34c>
    return;
 8005b86:	bf00      	nop
 8005b88:	e002      	b.n	8005b90 <HAL_UART_IRQHandler+0x34c>
      return;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HAL_UART_IRQHandler+0x34c>
      return;
 8005b8e:	bf00      	nop
  }
}
 8005b90:	3728      	adds	r7, #40	; 0x28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	08005d3f 	.word	0x08005d3f

08005b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bec:	e02c      	b.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d028      	beq.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfc:	f7fc fb60 	bl	80022c0 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d21d      	bcs.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e00f      	b.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4013      	ands	r3, r2
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d0c3      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	88fa      	ldrh	r2, [r7, #6]
 8005c88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2222      	movs	r2, #34	; 0x22
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0201 	orr.w	r2, r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0220 	orr.w	r2, r2, #32
 8005cd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cfa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0201 	bic.w	r2, r2, #1
 8005d0a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d107      	bne.n	8005d24 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0210 	bic.w	r2, r2, #16
 8005d22:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff ff29 	bl	8005bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b21      	cmp	r3, #33	; 0x21
 8005d78:	d13e      	bne.n	8005df8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d114      	bne.n	8005dae <UART_Transmit_IT+0x48>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d110      	bne.n	8005dae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	621a      	str	r2, [r3, #32]
 8005dac:	e008      	b.n	8005dc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6211      	str	r1, [r2, #32]
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005de2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff feb8 	bl	8005b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b22      	cmp	r3, #34	; 0x22
 8005e48:	f040 8087 	bne.w	8005f5a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e54:	d117      	bne.n	8005e86 <UART_Receive_IT+0x50>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d113      	bne.n	8005e86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	1c9a      	adds	r2, r3, #2
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28
 8005e84:	e026      	b.n	8005ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	d007      	beq.n	8005eaa <UART_Receive_IT+0x74>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <UART_Receive_IT+0x82>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e008      	b.n	8005eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d136      	bne.n	8005f56 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0220 	bic.w	r2, r2, #32
 8005ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d10e      	bne.n	8005f46 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0210 	bic.w	r2, r2, #16
 8005f36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fe40 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
 8005f44:	e002      	b.n	8005f4c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fb fb5e 	bl	8001608 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e002      	b.n	8005f5c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e000      	b.n	8005f5c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	b09f      	sub	sp, #124	; 0x7c
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7a:	68d9      	ldr	r1, [r3, #12]
 8005f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	ea40 0301 	orr.w	r3, r0, r1
 8005f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fa8:	f021 010c 	bic.w	r1, r1, #12
 8005fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc2:	6999      	ldr	r1, [r3, #24]
 8005fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	ea40 0301 	orr.w	r3, r0, r1
 8005fcc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4bc5      	ldr	r3, [pc, #788]	; (80062e8 <UART_SetConfig+0x384>)
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d004      	beq.n	8005fe2 <UART_SetConfig+0x7e>
 8005fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4bc3      	ldr	r3, [pc, #780]	; (80062ec <UART_SetConfig+0x388>)
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d103      	bne.n	8005fea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fe2:	f7fe ffd1 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8005fe6:	6778      	str	r0, [r7, #116]	; 0x74
 8005fe8:	e002      	b.n	8005ff0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fea:	f7fe ffb9 	bl	8004f60 <HAL_RCC_GetPCLK1Freq>
 8005fee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff8:	f040 80b6 	bne.w	8006168 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffe:	461c      	mov	r4, r3
 8006000:	f04f 0500 	mov.w	r5, #0
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	1891      	adds	r1, r2, r2
 800600a:	6439      	str	r1, [r7, #64]	; 0x40
 800600c:	415b      	adcs	r3, r3
 800600e:	647b      	str	r3, [r7, #68]	; 0x44
 8006010:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006014:	1912      	adds	r2, r2, r4
 8006016:	eb45 0303 	adc.w	r3, r5, r3
 800601a:	f04f 0000 	mov.w	r0, #0
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	00d9      	lsls	r1, r3, #3
 8006024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006028:	00d0      	lsls	r0, r2, #3
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	1911      	adds	r1, r2, r4
 8006030:	6639      	str	r1, [r7, #96]	; 0x60
 8006032:	416b      	adcs	r3, r5
 8006034:	667b      	str	r3, [r7, #100]	; 0x64
 8006036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	461a      	mov	r2, r3
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	1891      	adds	r1, r2, r2
 8006042:	63b9      	str	r1, [r7, #56]	; 0x38
 8006044:	415b      	adcs	r3, r3
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800604c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006050:	f7fa fe22 	bl	8000c98 <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4ba5      	ldr	r3, [pc, #660]	; (80062f0 <UART_SetConfig+0x38c>)
 800605a:	fba3 2302 	umull	r2, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	011e      	lsls	r6, r3, #4
 8006062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006064:	461c      	mov	r4, r3
 8006066:	f04f 0500 	mov.w	r5, #0
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	1891      	adds	r1, r2, r2
 8006070:	6339      	str	r1, [r7, #48]	; 0x30
 8006072:	415b      	adcs	r3, r3
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
 8006076:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800607a:	1912      	adds	r2, r2, r4
 800607c:	eb45 0303 	adc.w	r3, r5, r3
 8006080:	f04f 0000 	mov.w	r0, #0
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	00d9      	lsls	r1, r3, #3
 800608a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800608e:	00d0      	lsls	r0, r2, #3
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	1911      	adds	r1, r2, r4
 8006096:	65b9      	str	r1, [r7, #88]	; 0x58
 8006098:	416b      	adcs	r3, r5
 800609a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	461a      	mov	r2, r3
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	1891      	adds	r1, r2, r2
 80060a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80060aa:	415b      	adcs	r3, r3
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80060b6:	f7fa fdef 	bl	8000c98 <__aeabi_uldivmod>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4b8c      	ldr	r3, [pc, #560]	; (80062f0 <UART_SetConfig+0x38c>)
 80060c0:	fba3 1302 	umull	r1, r3, r3, r2
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	2164      	movs	r1, #100	; 0x64
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	3332      	adds	r3, #50	; 0x32
 80060d2:	4a87      	ldr	r2, [pc, #540]	; (80062f0 <UART_SetConfig+0x38c>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060e0:	441e      	add	r6, r3
 80060e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e4:	4618      	mov	r0, r3
 80060e6:	f04f 0100 	mov.w	r1, #0
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	1894      	adds	r4, r2, r2
 80060f0:	623c      	str	r4, [r7, #32]
 80060f2:	415b      	adcs	r3, r3
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
 80060f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060fa:	1812      	adds	r2, r2, r0
 80060fc:	eb41 0303 	adc.w	r3, r1, r3
 8006100:	f04f 0400 	mov.w	r4, #0
 8006104:	f04f 0500 	mov.w	r5, #0
 8006108:	00dd      	lsls	r5, r3, #3
 800610a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800610e:	00d4      	lsls	r4, r2, #3
 8006110:	4622      	mov	r2, r4
 8006112:	462b      	mov	r3, r5
 8006114:	1814      	adds	r4, r2, r0
 8006116:	653c      	str	r4, [r7, #80]	; 0x50
 8006118:	414b      	adcs	r3, r1
 800611a:	657b      	str	r3, [r7, #84]	; 0x54
 800611c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	461a      	mov	r2, r3
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	1891      	adds	r1, r2, r2
 8006128:	61b9      	str	r1, [r7, #24]
 800612a:	415b      	adcs	r3, r3
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006132:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006136:	f7fa fdaf 	bl	8000c98 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4b6c      	ldr	r3, [pc, #432]	; (80062f0 <UART_SetConfig+0x38c>)
 8006140:	fba3 1302 	umull	r1, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	2164      	movs	r1, #100	; 0x64
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	3332      	adds	r3, #50	; 0x32
 8006152:	4a67      	ldr	r2, [pc, #412]	; (80062f0 <UART_SetConfig+0x38c>)
 8006154:	fba2 2303 	umull	r2, r3, r2, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 0207 	and.w	r2, r3, #7
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4432      	add	r2, r6
 8006164:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006166:	e0b9      	b.n	80062dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800616a:	461c      	mov	r4, r3
 800616c:	f04f 0500 	mov.w	r5, #0
 8006170:	4622      	mov	r2, r4
 8006172:	462b      	mov	r3, r5
 8006174:	1891      	adds	r1, r2, r2
 8006176:	6139      	str	r1, [r7, #16]
 8006178:	415b      	adcs	r3, r3
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006180:	1912      	adds	r2, r2, r4
 8006182:	eb45 0303 	adc.w	r3, r5, r3
 8006186:	f04f 0000 	mov.w	r0, #0
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	00d9      	lsls	r1, r3, #3
 8006190:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006194:	00d0      	lsls	r0, r2, #3
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	eb12 0804 	adds.w	r8, r2, r4
 800619e:	eb43 0905 	adc.w	r9, r3, r5
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f04f 0100 	mov.w	r1, #0
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	008b      	lsls	r3, r1, #2
 80061b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061ba:	0082      	lsls	r2, r0, #2
 80061bc:	4640      	mov	r0, r8
 80061be:	4649      	mov	r1, r9
 80061c0:	f7fa fd6a 	bl	8000c98 <__aeabi_uldivmod>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4b49      	ldr	r3, [pc, #292]	; (80062f0 <UART_SetConfig+0x38c>)
 80061ca:	fba3 2302 	umull	r2, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	011e      	lsls	r6, r3, #4
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	4618      	mov	r0, r3
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	1894      	adds	r4, r2, r2
 80061e0:	60bc      	str	r4, [r7, #8]
 80061e2:	415b      	adcs	r3, r3
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ea:	1812      	adds	r2, r2, r0
 80061ec:	eb41 0303 	adc.w	r3, r1, r3
 80061f0:	f04f 0400 	mov.w	r4, #0
 80061f4:	f04f 0500 	mov.w	r5, #0
 80061f8:	00dd      	lsls	r5, r3, #3
 80061fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061fe:	00d4      	lsls	r4, r2, #3
 8006200:	4622      	mov	r2, r4
 8006202:	462b      	mov	r3, r5
 8006204:	1814      	adds	r4, r2, r0
 8006206:	64bc      	str	r4, [r7, #72]	; 0x48
 8006208:	414b      	adcs	r3, r1
 800620a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800620c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4618      	mov	r0, r3
 8006212:	f04f 0100 	mov.w	r1, #0
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	008b      	lsls	r3, r1, #2
 8006220:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006224:	0082      	lsls	r2, r0, #2
 8006226:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800622a:	f7fa fd35 	bl	8000c98 <__aeabi_uldivmod>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <UART_SetConfig+0x38c>)
 8006234:	fba3 1302 	umull	r1, r3, r3, r2
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	2164      	movs	r1, #100	; 0x64
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	3332      	adds	r3, #50	; 0x32
 8006246:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <UART_SetConfig+0x38c>)
 8006248:	fba2 2303 	umull	r2, r3, r2, r3
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006252:	441e      	add	r6, r3
 8006254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006256:	4618      	mov	r0, r3
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	1894      	adds	r4, r2, r2
 8006262:	603c      	str	r4, [r7, #0]
 8006264:	415b      	adcs	r3, r3
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626c:	1812      	adds	r2, r2, r0
 800626e:	eb41 0303 	adc.w	r3, r1, r3
 8006272:	f04f 0400 	mov.w	r4, #0
 8006276:	f04f 0500 	mov.w	r5, #0
 800627a:	00dd      	lsls	r5, r3, #3
 800627c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006280:	00d4      	lsls	r4, r2, #3
 8006282:	4622      	mov	r2, r4
 8006284:	462b      	mov	r3, r5
 8006286:	eb12 0a00 	adds.w	sl, r2, r0
 800628a:	eb43 0b01 	adc.w	fp, r3, r1
 800628e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4618      	mov	r0, r3
 8006294:	f04f 0100 	mov.w	r1, #0
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	008b      	lsls	r3, r1, #2
 80062a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062a6:	0082      	lsls	r2, r0, #2
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7fa fcf4 	bl	8000c98 <__aeabi_uldivmod>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <UART_SetConfig+0x38c>)
 80062b6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	2164      	movs	r1, #100	; 0x64
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	3332      	adds	r3, #50	; 0x32
 80062c8:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <UART_SetConfig+0x38c>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	f003 020f 	and.w	r2, r3, #15
 80062d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4432      	add	r2, r6
 80062da:	609a      	str	r2, [r3, #8]
}
 80062dc:	bf00      	nop
 80062de:	377c      	adds	r7, #124	; 0x7c
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e6:	bf00      	nop
 80062e8:	40011000 	.word	0x40011000
 80062ec:	40011400 	.word	0x40011400
 80062f0:	51eb851f 	.word	0x51eb851f

080062f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062f4:	b084      	sub	sp, #16
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	f107 001c 	add.w	r0, r7, #28
 8006302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2b01      	cmp	r3, #1
 800630a:	d122      	bne.n	8006352 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f9ea 	bl	8007720 <USB_CoreReset>
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]
 8006350:	e01a      	b.n	8006388 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 f9de 	bl	8007720 <USB_CoreReset>
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
 800637a:	e005      	b.n	8006388 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	2b01      	cmp	r3, #1
 800638c:	d10b      	bne.n	80063a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f043 0206 	orr.w	r2, r3, #6
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f043 0220 	orr.w	r2, r3, #32
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b2:	b004      	add	sp, #16
 80063b4:	4770      	bx	lr
	...

080063b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d165      	bne.n	8006498 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4a41      	ldr	r2, [pc, #260]	; (80064d4 <USB_SetTurnaroundTime+0x11c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d906      	bls.n	80063e2 <USB_SetTurnaroundTime+0x2a>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4a40      	ldr	r2, [pc, #256]	; (80064d8 <USB_SetTurnaroundTime+0x120>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d202      	bcs.n	80063e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063dc:	230f      	movs	r3, #15
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e062      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4a3c      	ldr	r2, [pc, #240]	; (80064d8 <USB_SetTurnaroundTime+0x120>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d306      	bcc.n	80063f8 <USB_SetTurnaroundTime+0x40>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4a3b      	ldr	r2, [pc, #236]	; (80064dc <USB_SetTurnaroundTime+0x124>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d202      	bcs.n	80063f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063f2:	230e      	movs	r3, #14
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e057      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4a38      	ldr	r2, [pc, #224]	; (80064dc <USB_SetTurnaroundTime+0x124>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d306      	bcc.n	800640e <USB_SetTurnaroundTime+0x56>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4a37      	ldr	r2, [pc, #220]	; (80064e0 <USB_SetTurnaroundTime+0x128>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d202      	bcs.n	800640e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006408:	230d      	movs	r3, #13
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	e04c      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4a33      	ldr	r2, [pc, #204]	; (80064e0 <USB_SetTurnaroundTime+0x128>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d306      	bcc.n	8006424 <USB_SetTurnaroundTime+0x6c>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4a32      	ldr	r2, [pc, #200]	; (80064e4 <USB_SetTurnaroundTime+0x12c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d802      	bhi.n	8006424 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800641e:	230c      	movs	r3, #12
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e041      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a2f      	ldr	r2, [pc, #188]	; (80064e4 <USB_SetTurnaroundTime+0x12c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d906      	bls.n	800643a <USB_SetTurnaroundTime+0x82>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a2e      	ldr	r2, [pc, #184]	; (80064e8 <USB_SetTurnaroundTime+0x130>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d802      	bhi.n	800643a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006434:	230b      	movs	r3, #11
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e036      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4a2a      	ldr	r2, [pc, #168]	; (80064e8 <USB_SetTurnaroundTime+0x130>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d906      	bls.n	8006450 <USB_SetTurnaroundTime+0x98>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4a29      	ldr	r2, [pc, #164]	; (80064ec <USB_SetTurnaroundTime+0x134>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d802      	bhi.n	8006450 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800644a:	230a      	movs	r3, #10
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e02b      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4a26      	ldr	r2, [pc, #152]	; (80064ec <USB_SetTurnaroundTime+0x134>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d906      	bls.n	8006466 <USB_SetTurnaroundTime+0xae>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a25      	ldr	r2, [pc, #148]	; (80064f0 <USB_SetTurnaroundTime+0x138>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d202      	bcs.n	8006466 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006460:	2309      	movs	r3, #9
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e020      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <USB_SetTurnaroundTime+0x138>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d306      	bcc.n	800647c <USB_SetTurnaroundTime+0xc4>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <USB_SetTurnaroundTime+0x13c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d802      	bhi.n	800647c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006476:	2308      	movs	r3, #8
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e015      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <USB_SetTurnaroundTime+0x13c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d906      	bls.n	8006492 <USB_SetTurnaroundTime+0xda>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <USB_SetTurnaroundTime+0x140>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d202      	bcs.n	8006492 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800648c:	2307      	movs	r3, #7
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e00a      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006492:	2306      	movs	r3, #6
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e007      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800649e:	2309      	movs	r3, #9
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	e001      	b.n	80064a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064a4:	2309      	movs	r3, #9
 80064a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	029b      	lsls	r3, r3, #10
 80064bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	00d8acbf 	.word	0x00d8acbf
 80064d8:	00e4e1c0 	.word	0x00e4e1c0
 80064dc:	00f42400 	.word	0x00f42400
 80064e0:	01067380 	.word	0x01067380
 80064e4:	011a499f 	.word	0x011a499f
 80064e8:	01312cff 	.word	0x01312cff
 80064ec:	014ca43f 	.word	0x014ca43f
 80064f0:	016e3600 	.word	0x016e3600
 80064f4:	01a6ab1f 	.word	0x01a6ab1f
 80064f8:	01e84800 	.word	0x01e84800

080064fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f043 0201 	orr.w	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f023 0201 	bic.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d106      	bne.n	800656c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	e00b      	b.n	8006584 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60da      	str	r2, [r3, #12]
 800657e:	e001      	b.n	8006584 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e003      	b.n	800658c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006584:	2032      	movs	r0, #50	; 0x32
 8006586:	f7fb fea7 	bl	80022d8 <HAL_Delay>

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006594:	b084      	sub	sp, #16
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ae:	2300      	movs	r3, #0
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	e009      	b.n	80065c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	3340      	adds	r3, #64	; 0x40
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	2200      	movs	r2, #0
 80065c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3301      	adds	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b0e      	cmp	r3, #14
 80065cc:	d9f2      	bls.n	80065b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11c      	bne.n	800660e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e2:	f043 0302 	orr.w	r3, r3, #2
 80065e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
 800660c:	e00b      	b.n	8006626 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800662c:	461a      	mov	r2, r3
 800662e:	2300      	movs	r3, #0
 8006630:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006638:	4619      	mov	r1, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006640:	461a      	mov	r2, r3
 8006642:	680b      	ldr	r3, [r1, #0]
 8006644:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	2b01      	cmp	r3, #1
 800664a:	d10c      	bne.n	8006666 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006652:	2100      	movs	r1, #0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f949 	bl	80068ec <USB_SetDevSpeed>
 800665a:	e008      	b.n	800666e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800665c:	2101      	movs	r1, #1
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f944 	bl	80068ec <USB_SetDevSpeed>
 8006664:	e003      	b.n	800666e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006666:	2103      	movs	r1, #3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f93f 	bl	80068ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800666e:	2110      	movs	r1, #16
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8f3 	bl	800685c <USB_FlushTxFifo>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f911 	bl	80068a8 <USB_FlushRxFifo>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	461a      	mov	r2, r3
 8006698:	2300      	movs	r3, #0
 800669a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a2:	461a      	mov	r2, r3
 80066a4:	2300      	movs	r3, #0
 80066a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	461a      	mov	r2, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b4:	2300      	movs	r3, #0
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	e043      	b.n	8006742 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d0:	d118      	bne.n	8006704 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	461a      	mov	r2, r3
 80066e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	e013      	b.n	8006716 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	461a      	mov	r2, r3
 80066fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e008      	b.n	8006716 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	461a      	mov	r2, r3
 8006712:	2300      	movs	r3, #0
 8006714:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006722:	461a      	mov	r2, r3
 8006724:	2300      	movs	r3, #0
 8006726:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	461a      	mov	r2, r3
 8006736:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800673a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3301      	adds	r3, #1
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	d3b7      	bcc.n	80066ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	e043      	b.n	80067d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006766:	d118      	bne.n	800679a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	461a      	mov	r2, r3
 800677c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	e013      	b.n	80067ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e008      	b.n	80067ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	461a      	mov	r2, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	461a      	mov	r2, r3
 80067ba:	2300      	movs	r3, #0
 80067bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	461a      	mov	r2, r3
 80067cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d3b7      	bcc.n	8006750 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006800:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	2b00      	cmp	r3, #0
 8006806:	d105      	bne.n	8006814 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f043 0210 	orr.w	r2, r3, #16
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699a      	ldr	r2, [r3, #24]
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <USB_DevInit+0x2c4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f043 0208 	orr.w	r2, r3, #8
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006834:	2b01      	cmp	r3, #1
 8006836:	d107      	bne.n	8006848 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006840:	f043 0304 	orr.w	r3, r3, #4
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006854:	b004      	add	sp, #16
 8006856:	4770      	bx	lr
 8006858:	803c3800 	.word	0x803c3800

0800685c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	019b      	lsls	r3, r3, #6
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <USB_FlushTxFifo+0x48>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e006      	b.n	8006896 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b20      	cmp	r3, #32
 8006892:	d0f0      	beq.n	8006876 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	00030d40 	.word	0x00030d40

080068a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2210      	movs	r2, #16
 80068b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <USB_FlushRxFifo+0x40>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d901      	bls.n	80068cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e006      	b.n	80068da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d0f0      	beq.n	80068ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	00030d40 	.word	0x00030d40

080068ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	68f9      	ldr	r1, [r7, #12]
 8006908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800690c:	4313      	orrs	r3, r2
 800690e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800691e:	b480      	push	{r7}
 8006920:	b087      	sub	sp, #28
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 0306 	and.w	r3, r3, #6
 8006936:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]
 8006942:	e00a      	b.n	800695a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d002      	beq.n	8006950 <USB_GetDevSpeed+0x32>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b06      	cmp	r3, #6
 800694e:	d102      	bne.n	8006956 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006950:	2302      	movs	r3, #2
 8006952:	75fb      	strb	r3, [r7, #23]
 8006954:	e001      	b.n	800695a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006956:	230f      	movs	r3, #15
 8006958:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800695a:	7dfb      	ldrb	r3, [r7, #23]
}
 800695c:	4618      	mov	r0, r3
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d13a      	bne.n	80069fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	2101      	movs	r1, #1
 8006996:	fa01 f303 	lsl.w	r3, r1, r3
 800699a:	b29b      	uxth	r3, r3
 800699c:	68f9      	ldr	r1, [r7, #12]
 800699e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069a2:	4313      	orrs	r3, r2
 80069a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d155      	bne.n	8006a68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	78db      	ldrb	r3, [r3, #3]
 80069d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	059b      	lsls	r3, r3, #22
 80069de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069e0:	4313      	orrs	r3, r2
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e036      	b.n	8006a68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a00:	69da      	ldr	r2, [r3, #28]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11a      	bne.n	8006a68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	78db      	ldrb	r3, [r3, #3]
 8006a4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	4313      	orrs	r3, r2
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	; 0x28
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	f040 815c 	bne.w	8006d52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d132      	bne.n	8006b08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ac4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	0151      	lsls	r1, r2, #5
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	440a      	add	r2, r1
 8006adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b00:	0cdb      	lsrs	r3, r3, #19
 8006b02:	04db      	lsls	r3, r3, #19
 8006b04:	6113      	str	r3, [r2, #16]
 8006b06:	e074      	b.n	8006bf2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b22:	0cdb      	lsrs	r3, r3, #19
 8006b24:	04db      	lsls	r3, r3, #19
 8006b26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	0151      	lsls	r1, r2, #5
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6959      	ldr	r1, [r3, #20]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	440b      	add	r3, r1
 8006b64:	1e59      	subs	r1, r3, #1
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b6e:	04d9      	lsls	r1, r3, #19
 8006b70:	4b9d      	ldr	r3, [pc, #628]	; (8006de8 <USB_EPStartXfer+0x370>)
 8006b72:	400b      	ands	r3, r1
 8006b74:	69b9      	ldr	r1, [r7, #24]
 8006b76:	0148      	lsls	r0, r1, #5
 8006b78:	69f9      	ldr	r1, [r7, #28]
 8006b7a:	4401      	add	r1, r0
 8006b7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b80:	4313      	orrs	r3, r2
 8006b82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b90:	691a      	ldr	r2, [r3, #16]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	0148      	lsls	r0, r1, #5
 8006b9e:	69f9      	ldr	r1, [r7, #28]
 8006ba0:	4401      	add	r1, r0
 8006ba2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	78db      	ldrb	r3, [r3, #3]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d11f      	bne.n	8006bf2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d14b      	bne.n	8006c90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d009      	beq.n	8006c14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	78db      	ldrb	r3, [r3, #3]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d128      	bne.n	8006c6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d110      	bne.n	8006c4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	e00f      	b.n	8006c6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e12f      	b.n	8006ef0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	0151      	lsls	r1, r2, #5
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	440a      	add	r2, r1
 8006ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006caa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	78db      	ldrb	r3, [r3, #3]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d015      	beq.n	8006ce4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8117 	beq.w	8006ef0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd8:	69f9      	ldr	r1, [r7, #28]
 8006cda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	634b      	str	r3, [r1, #52]	; 0x34
 8006ce2:	e105      	b.n	8006ef0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d110      	bne.n	8006d16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	e00f      	b.n	8006d36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	0151      	lsls	r1, r2, #5
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	68d9      	ldr	r1, [r3, #12]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	b298      	uxth	r0, r3
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fa2b 	bl	80071a6 <USB_WritePacket>
 8006d50:	e0ce      	b.n	8006ef0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6c:	0cdb      	lsrs	r3, r3, #19
 8006d6e:	04db      	lsls	r3, r3, #19
 8006d70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d126      	bne.n	8006dec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db4:	69b9      	ldr	r1, [r7, #24]
 8006db6:	0148      	lsls	r0, r1, #5
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	4401      	add	r1, r0
 8006dbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006de2:	6113      	str	r3, [r2, #16]
 8006de4:	e036      	b.n	8006e54 <USB_EPStartXfer+0x3dc>
 8006de6:	bf00      	nop
 8006de8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	695a      	ldr	r2, [r3, #20]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4413      	add	r3, r2
 8006df6:	1e5a      	subs	r2, r3, #1
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e00:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	8afb      	ldrh	r3, [r7, #22]
 8006e12:	04d9      	lsls	r1, r3, #19
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <USB_EPStartXfer+0x484>)
 8006e16:	400b      	ands	r3, r1
 8006e18:	69b9      	ldr	r1, [r7, #24]
 8006e1a:	0148      	lsls	r0, r1, #5
 8006e1c:	69f9      	ldr	r1, [r7, #28]
 8006e1e:	4401      	add	r1, r0
 8006e20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e24:	4313      	orrs	r3, r2
 8006e26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	691a      	ldr	r2, [r3, #16]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	8af9      	ldrh	r1, [r7, #22]
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e44:	69b9      	ldr	r1, [r7, #24]
 8006e46:	0148      	lsls	r0, r1, #5
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	4401      	add	r1, r0
 8006e4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e50:	4313      	orrs	r3, r2
 8006e52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d10d      	bne.n	8006e76 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	68d9      	ldr	r1, [r3, #12]
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	460a      	mov	r2, r1
 8006e74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	78db      	ldrb	r3, [r3, #3]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d128      	bne.n	8006ed0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d110      	bne.n	8006eb0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e00f      	b.n	8006ed0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ece:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	1ff80000 	.word	0x1ff80000

08006f00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	f040 80cd 	bne.w	80070bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d132      	bne.n	8006f90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	0151      	lsls	r1, r2, #5
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	440a      	add	r2, r1
 8006f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f88:	0cdb      	lsrs	r3, r3, #19
 8006f8a:	04db      	lsls	r3, r3, #19
 8006f8c:	6113      	str	r3, [r2, #16]
 8006f8e:	e04e      	b.n	800702e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006faa:	0cdb      	lsrs	r3, r3, #19
 8006fac:	04db      	lsls	r3, r3, #19
 8006fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fd2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d903      	bls.n	8006fe8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800701e:	6939      	ldr	r1, [r7, #16]
 8007020:	0148      	lsls	r0, r1, #5
 8007022:	6979      	ldr	r1, [r7, #20]
 8007024:	4401      	add	r1, r0
 8007026:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800702a:	4313      	orrs	r3, r2
 800702c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d11e      	bne.n	8007072 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	461a      	mov	r2, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	e092      	b.n	8007198 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007090:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d07e      	beq.n	8007198 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	2101      	movs	r1, #1
 80070ac:	fa01 f303 	lsl.w	r3, r1, r3
 80070b0:	6979      	ldr	r1, [r7, #20]
 80070b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b6:	4313      	orrs	r3, r2
 80070b8:	634b      	str	r3, [r1, #52]	; 0x34
 80070ba:	e06d      	b.n	8007198 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	0151      	lsls	r1, r2, #5
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	440a      	add	r2, r1
 80070d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d6:	0cdb      	lsrs	r3, r3, #19
 80070d8:	04db      	lsls	r3, r3, #19
 80070da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800712e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007146:	6939      	ldr	r1, [r7, #16]
 8007148:	0148      	lsls	r0, r1, #5
 800714a:	6979      	ldr	r1, [r7, #20]
 800714c:	4401      	add	r1, r0
 800714e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007152:	4313      	orrs	r3, r2
 8007154:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10d      	bne.n	8007178 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	68d9      	ldr	r1, [r3, #12]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	460a      	mov	r2, r1
 8007176:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007192:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b089      	sub	sp, #36	; 0x24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	4611      	mov	r1, r2
 80071b2:	461a      	mov	r2, r3
 80071b4:	460b      	mov	r3, r1
 80071b6:	71fb      	strb	r3, [r7, #7]
 80071b8:	4613      	mov	r3, r2
 80071ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80071c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11a      	bne.n	8007202 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071cc:	88bb      	ldrh	r3, [r7, #4]
 80071ce:	3303      	adds	r3, #3
 80071d0:	089b      	lsrs	r3, r3, #2
 80071d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
 80071d8:	e00f      	b.n	80071fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	031a      	lsls	r2, r3, #12
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	461a      	mov	r2, r3
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3304      	adds	r3, #4
 80071f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	3301      	adds	r3, #1
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d3eb      	bcc.n	80071da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3724      	adds	r7, #36	; 0x24
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007210:	b480      	push	{r7}
 8007212:	b089      	sub	sp, #36	; 0x24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	3303      	adds	r3, #3
 800722a:	089b      	lsrs	r3, r3, #2
 800722c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800722e:	2300      	movs	r3, #0
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	e00b      	b.n	800724c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	3304      	adds	r3, #4
 8007244:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	3301      	adds	r3, #1
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	429a      	cmp	r2, r3
 8007252:	d3ef      	bcc.n	8007234 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007254:	69fb      	ldr	r3, [r7, #28]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3724      	adds	r7, #36	; 0x24
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d12c      	bne.n	80072d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	db12      	blt.n	80072b6 <USB_EPSetStall+0x54>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00f      	beq.n	80072b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e02b      	b.n	8007330 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	db12      	blt.n	8007310 <USB_EPSetStall+0xae>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00f      	beq.n	8007310 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800730e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	440a      	add	r2, r1
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d128      	bne.n	80073ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	440a      	add	r2, r1
 8007370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007374:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007378:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	78db      	ldrb	r3, [r3, #3]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d003      	beq.n	800738a <USB_EPClearStall+0x4c>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	78db      	ldrb	r3, [r3, #3]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d138      	bne.n	80073fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e027      	b.n	80073fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	78db      	ldrb	r3, [r3, #3]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d003      	beq.n	80073dc <USB_EPClearStall+0x9e>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	78db      	ldrb	r3, [r3, #3]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d10f      	bne.n	80073fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007428:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800742c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007444:	4313      	orrs	r3, r2
 8007446:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007470:	f023 0303 	bic.w	r3, r3, #3
 8007474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007484:	f023 0302 	bic.w	r3, r3, #2
 8007488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b2:	f023 0303 	bic.w	r3, r3, #3
 80074b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c6:	f043 0302 	orr.w	r3, r3, #2
 80074ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4013      	ands	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074f2:	68fb      	ldr	r3, [r7, #12]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4013      	ands	r3, r2
 8007522:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	0c1b      	lsrs	r3, r3, #16
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4013      	ands	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	b29b      	uxth	r3, r3
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	4013      	ands	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007596:	68bb      	ldr	r3, [r7, #8]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	f003 030f 	and.w	r3, r3, #15
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
 80075d4:	01db      	lsls	r3, r3, #7
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4013      	ands	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075f2:	68bb      	ldr	r3, [r7, #8]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f003 0301 	and.w	r3, r3, #1
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007636:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800763a:	f023 0307 	bic.w	r3, r3, #7
 800763e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800764e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	460b      	mov	r3, r1
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	333c      	adds	r3, #60	; 0x3c
 800767a:	3304      	adds	r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4a26      	ldr	r2, [pc, #152]	; (800771c <USB_EP0_OutStart+0xb8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d90a      	bls.n	800769e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007698:	d101      	bne.n	800769e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	e037      	b.n	800770e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a4:	461a      	mov	r2, r3
 80076a6:	2300      	movs	r3, #0
 80076a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076cc:	f043 0318 	orr.w	r3, r3, #24
 80076d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80076e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076e6:	7afb      	ldrb	r3, [r7, #11]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d10f      	bne.n	800770c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007706:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800770a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	4f54300a 	.word	0x4f54300a

08007720 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a13      	ldr	r2, [pc, #76]	; (8007784 <USB_CoreReset+0x64>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d901      	bls.n	800773e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e01b      	b.n	8007776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	daf2      	bge.n	800772c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f043 0201 	orr.w	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a09      	ldr	r2, [pc, #36]	; (8007784 <USB_CoreReset+0x64>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d901      	bls.n	8007768 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e006      	b.n	8007776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b01      	cmp	r3, #1
 8007772:	d0f0      	beq.n	8007756 <USB_CoreReset+0x36>

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	00030d40 	.word	0x00030d40

08007788 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800778c:	f3bf 8f4f 	dsb	sy
}
 8007790:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007792:	4b06      	ldr	r3, [pc, #24]	; (80077ac <__NVIC_SystemReset+0x24>)
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800779a:	4904      	ldr	r1, [pc, #16]	; (80077ac <__NVIC_SystemReset+0x24>)
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <__NVIC_SystemReset+0x28>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80077a2:	f3bf 8f4f 	dsb	sy
}
 80077a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <__NVIC_SystemReset+0x20>
 80077ac:	e000ed00 	.word	0xe000ed00
 80077b0:	05fa0004 	.word	0x05fa0004

080077b4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80077c0:	f240 401c 	movw	r0, #1052	; 0x41c
 80077c4:	f005 f998 	bl	800caf8 <USBD_static_malloc>
 80077c8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077d8:	2302      	movs	r3, #2
 80077da:	e03f      	b.n	800785c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2202      	movs	r2, #2
 800783a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	4798      	blx	r3
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	e000      	b.n	800785c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800787a:	2302      	movs	r3, #2
 800787c:	e027      	b.n	80078ce <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007884:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2202      	movs	r2, #2
 800789a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2202      	movs	r2, #2
 80078aa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078be:	4618      	mov	r0, r3
 80078c0:	f005 f928 	bl	800cb14 <USBD_static_free>
  pdev->pClassData = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078e8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007900:	2303      	movs	r3, #3
 8007902:	e0d5      	b.n	8007ab0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03e      	beq.n	800798e <USBD_DFU_Setup+0xb6>
 8007910:	2b20      	cmp	r3, #32
 8007912:	f040 80c5 	bne.w	8007aa0 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	2b06      	cmp	r3, #6
 800791c:	d82f      	bhi.n	800797e <USBD_DFU_Setup+0xa6>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <USBD_DFU_Setup+0x4c>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007975 	.word	0x08007975
 8007928:	08007941 	.word	0x08007941
 800792c:	0800794b 	.word	0x0800794b
 8007930:	08007955 	.word	0x08007955
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007965 	.word	0x08007965
 800793c:	0800796d 	.word	0x0800796d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa6c 	bl	8007e20 <DFU_Download>
          break;
 8007948:	e020      	b.n	800798c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fad3 	bl	8007ef8 <DFU_Upload>
          break;
 8007952:	e01b      	b.n	800798c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fba9 	bl	80080ac <DFU_GetStatus>
          break;
 800795a:	e017      	b.n	800798c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc5b 	bl	8008218 <DFU_ClearStatus>
          break;
 8007962:	e013      	b.n	800798c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fcab 	bl	80082c0 <DFU_GetState>
          break;
 800796a:	e00f      	b.n	800798c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fcbf 	bl	80082f0 <DFU_Abort>
          break;
 8007972:	e00b      	b.n	800798c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f9ee 	bl	8007d58 <DFU_Detach>
          break;
 800797c:	e006      	b.n	800798c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 fdf9 	bl	8009578 <USBD_CtlError>
          ret = USBD_FAIL;
 8007986:	2303      	movs	r3, #3
 8007988:	77fb      	strb	r3, [r7, #31]
          break;
 800798a:	bf00      	nop
      }
      break;
 800798c:	e08f      	b.n	8007aae <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b0b      	cmp	r3, #11
 8007994:	d87b      	bhi.n	8007a8e <USBD_DFU_Setup+0x1b6>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <USBD_DFU_Setup+0xc4>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	080079cd 	.word	0x080079cd
 80079a0:	08007a9d 	.word	0x08007a9d
 80079a4:	08007a8f 	.word	0x08007a8f
 80079a8:	08007a8f 	.word	0x08007a8f
 80079ac:	08007a8f 	.word	0x08007a8f
 80079b0:	08007a8f 	.word	0x08007a8f
 80079b4:	080079f7 	.word	0x080079f7
 80079b8:	08007a8f 	.word	0x08007a8f
 80079bc:	08007a8f 	.word	0x08007a8f
 80079c0:	08007a8f 	.word	0x08007a8f
 80079c4:	08007a21 	.word	0x08007a21
 80079c8:	08007a4d 	.word	0x08007a4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d107      	bne.n	80079e8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079d8:	f107 030e 	add.w	r3, r7, #14
 80079dc:	2202      	movs	r2, #2
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fe3a 	bl	800965a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079e6:	e05a      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 fdc4 	bl	8009578 <USBD_CtlError>
            ret = USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	77fb      	strb	r3, [r7, #31]
          break;
 80079f4:	e053      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	885b      	ldrh	r3, [r3, #2]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b21      	cmp	r3, #33	; 0x21
 8007a00:	d107      	bne.n	8007a12 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8007a02:	4b2d      	ldr	r3, [pc, #180]	; (8007ab8 <USBD_DFU_Setup+0x1e0>)
 8007a04:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	88db      	ldrh	r3, [r3, #6]
 8007a0a:	2b09      	cmp	r3, #9
 8007a0c:	bf28      	it	cs
 8007a0e:	2309      	movcs	r3, #9
 8007a10:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a12:	8afb      	ldrh	r3, [r7, #22]
 8007a14:	461a      	mov	r2, r3
 8007a16:	69b9      	ldr	r1, [r7, #24]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fe1e 	bl	800965a <USBD_CtlSendData>
          break;
 8007a1e:	e03e      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d108      	bne.n	8007a3e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a32:	2201      	movs	r2, #1
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fe0f 	bl	800965a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a3c:	e02f      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fd99 	bl	8009578 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a46:	2303      	movs	r3, #3
 8007a48:	77fb      	strb	r3, [r7, #31]
          break;
 8007a4a:	e028      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d114      	bne.n	8007a80 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d107      	bne.n	8007a72 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a70:	e015      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fd7f 	bl	8009578 <USBD_CtlError>
              ret = USBD_FAIL;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	77fb      	strb	r3, [r7, #31]
          break;
 8007a7e:	e00e      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fd78 	bl	8009578 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	77fb      	strb	r3, [r7, #31]
          break;
 8007a8c:	e007      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fd71 	bl	8009578 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	77fb      	strb	r3, [r7, #31]
          break;
 8007a9a:	e000      	b.n	8007a9e <USBD_DFU_Setup+0x1c6>
          break;
 8007a9c:	bf00      	nop
      }
      break;
 8007a9e:	e006      	b.n	8007aae <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fd68 	bl	8009578 <USBD_CtlError>
      ret = USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	77fb      	strb	r3, [r7, #31]
      break;
 8007aac:	bf00      	nop
  }

  return (uint8_t)ret;
 8007aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3720      	adds	r7, #32
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000062 	.word	0x20000062

08007abc <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	221b      	movs	r2, #27
 8007ac8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8007aca:	4b03      	ldr	r3, [pc, #12]	; (8007ad8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	20000050 	.word	0x20000050

08007adc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b088      	sub	sp, #32
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b00:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b08:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e0ce      	b.n	8007cb2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	f040 80bd 	bne.w	8007c9a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d17c      	bne.n	8007c24 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	f000 8093 	beq.w	8007c5c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b3c:	2b05      	cmp	r3, #5
 8007b3e:	d15e      	bne.n	8007bfe <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b21      	cmp	r3, #33	; 0x21
 8007b46:	d124      	bne.n	8007b92 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	789b      	ldrb	r3, [r3, #2]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	441a      	add	r2, r3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	78db      	ldrb	r3, [r3, #3]
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	441a      	add	r2, r3
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	791b      	ldrb	r3, [r3, #4]
 8007b86:	061b      	lsls	r3, r3, #24
 8007b88:	441a      	add	r2, r3
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8007b90:	e064      	b.n	8007c5c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b41      	cmp	r3, #65	; 0x41
 8007b98:	d12f      	bne.n	8007bfa <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	789b      	ldrb	r3, [r3, #2]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	441a      	add	r2, r3
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	78db      	ldrb	r3, [r3, #3]
 8007bc4:	041b      	lsls	r3, r3, #16
 8007bc6:	441a      	add	r2, r3
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	061b      	lsls	r3, r3, #24
 8007bda:	441a      	add	r2, r3
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d032      	beq.n	8007c5c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e05b      	b.n	8007cb2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e059      	b.n	8007cb2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8007c12:	2301      	movs	r3, #1
 8007c14:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8007c16:	f107 030c 	add.w	r3, r7, #12
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fcab 	bl	8009578 <USBD_CtlError>
 8007c22:	e01b      	b.n	8007c5c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d916      	bls.n	8007c5c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c34:	3b02      	subs	r3, #2
 8007c36:	029a      	lsls	r2, r3, #10
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007c3e:	4413      	add	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	69f8      	ldr	r0, [r7, #28]
 8007c48:	6979      	ldr	r1, [r7, #20]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8007c50:	4798      	blx	r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e02a      	b.n	8007cb2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8007c98:	e00a      	b.n	8007cb0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007ca0:	2b07      	cmp	r3, #7
 8007ca2:	d103      	bne.n	8007cac <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fb75 	bl	8008394 <DFU_Leave>
 8007caa:	e001      	b.n	8007cb0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e000      	b.n	8007cb2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3720      	adds	r7, #32
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	220a      	movs	r2, #10
 8007cdc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8007cde:	4b03      	ldr	r3, [pc, #12]	; (8007cec <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	2000006c 	.word	0x2000006c

08007cf0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d04:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	2b06      	cmp	r3, #6
 8007d0a:	d808      	bhi.n	8007d1e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	4905      	ldr	r1, [pc, #20]	; (8007d28 <USBD_DFU_GetUsrStringDesc+0x38>)
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 fc40 	bl	800959a <USBD_GetString>
    return USBD_StrDesc;
 8007d1a:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <USBD_DFU_GetUsrStringDesc+0x38>)
 8007d1c:	e000      	b.n	8007d20 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8007d1e:	2300      	movs	r3, #0
  }
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	200006ec 	.word	0x200006ec

08007d2c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e004      	b.n	8007d4a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
	...

08007d58 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d68:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d051      	beq.n	8007e14 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d013      	beq.n	8007da2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d00e      	beq.n	8007da2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d009      	beq.n	8007da2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007d94:	2b06      	cmp	r3, #6
 8007d96:	d004      	beq.n	8007da2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d125      	bne.n	8007dee <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2202      	movs	r2, #2
 8007da6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8007dee:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <DFU_Detach+0xc4>)
 8007df0:	7d5b      	ldrb	r3, [r3, #21]
 8007df2:	f003 0310 	and.w	r3, r3, #16
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d006      	beq.n	8007e08 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fb7b 	bl	80084f6 <USBD_Stop>
    (void)USBD_Start(pdev);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fb6c 	bl	80084de <USBD_Start>
 8007e06:	e006      	b.n	8007e16 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	885b      	ldrh	r3, [r3, #2]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fa fa63 	bl	80022d8 <HAL_Delay>
 8007e12:	e000      	b.n	8007e16 <DFU_Detach+0xbe>
    return;
 8007e14:	bf00      	nop
  }
}
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000050 	.word	0x20000050

08007e20 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e30:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d05b      	beq.n	8007ef0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	88db      	ldrh	r3, [r3, #6]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d02d      	beq.n	8007e9c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d004      	beq.n	8007e54 <DFU_Download+0x34>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007e50:	2b05      	cmp	r3, #5
 8007e52:	d11e      	bne.n	8007e92 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	885b      	ldrh	r3, [r3, #2]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	88db      	ldrh	r3, [r3, #6]
 8007e64:	461a      	mov	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007e80:	68f9      	ldr	r1, [r7, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fc11 	bl	80096b2 <USBD_CtlPrepareRx>
 8007e90:	e02f      	b.n	8007ef2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fb6f 	bl	8009578 <USBD_CtlError>
 8007e9a:	e02a      	b.n	8007ef2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d004      	beq.n	8007eb0 <DFU_Download+0x90>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d11a      	bne.n	8007ee6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2206      	movs	r2, #6
 8007ebc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8007ee4:	e005      	b.n	8007ef2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 fb45 	bl	8009578 <USBD_CtlError>
 8007eee:	e000      	b.n	8007ef2 <DFU_Download+0xd2>
    return;
 8007ef0:	bf00      	nop
    }
  }
}
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f08:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f10:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80c4 	beq.w	80080a2 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	88db      	ldrh	r3, [r3, #6]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 80a8 	beq.w	8008074 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d005      	beq.n	8007f3a <DFU_Upload+0x42>
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007f34:	2b09      	cmp	r3, #9
 8007f36:	f040 8090 	bne.w	800805a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	88db      	ldrh	r3, [r3, #6]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d12c      	bne.n	8007fb6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d901      	bls.n	8007f6a <DFU_Upload+0x72>
 8007f66:	2202      	movs	r2, #2
 8007f68:	e000      	b.n	8007f6c <DFU_Upload+0x74>
 8007f6a:	2209      	movs	r2, #9
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2221      	movs	r2, #33	; 0x21
 8007fa0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2241      	movs	r2, #65	; 0x41
 8007fa6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2203      	movs	r2, #3
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fb53 	bl	800965a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007fb4:	e076      	b.n	80080a4 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d931      	bls.n	8008024 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2209      	movs	r2, #9
 8007fc4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007ff2:	3b02      	subs	r3, #2
 8007ff4:	029a      	lsls	r2, r3, #10
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007ffc:	4413      	add	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	6979      	ldr	r1, [r7, #20]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800800e:	4798      	blx	r3
 8008010:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008018:	461a      	mov	r2, r3
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 fb1c 	bl	800965a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008022:	e03f      	b.n	80080a4 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	220f      	movs	r2, #15
 8008028:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fa90 	bl	8009578 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8008058:	e024      	b.n	80080a4 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2200      	movs	r2, #0
 800805e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fa83 	bl	8009578 <USBD_CtlError>
 8008072:	e017      	b.n	80080a4 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80080a0:	e000      	b.n	80080a4 <DFU_Upload+0x1ac>
    return;
 80080a2:	bf00      	nop
  }
}
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ba:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80a0 	beq.w	800820c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d002      	beq.n	80080dc <DFU_GetStatus+0x30>
 80080d6:	2b06      	cmp	r3, #6
 80080d8:	d051      	beq.n	800817e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80080da:	e08e      	b.n	80081fa <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d034      	beq.n	8008150 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2204      	movs	r2, #4
 80080ea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10e      	bne.n	800813a <DFU_GetStatus+0x8e>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b41      	cmp	r3, #65	; 0x41
 8008122:	d10a      	bne.n	800813a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8008134:	2100      	movs	r1, #0
 8008136:	4798      	blx	r3
      break;
 8008138:	e05f      	b.n	80081fa <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800814a:	2101      	movs	r1, #1
 800814c:	4798      	blx	r3
      break;
 800814e:	e054      	b.n	80081fa <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2205      	movs	r2, #5
 8008154:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800817c:	e03d      	b.n	80081fa <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008184:	2b01      	cmp	r3, #1
 8008186:	d116      	bne.n	80081b6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2207      	movs	r2, #7
 800818c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80081b4:	e020      	b.n	80081f8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d11b      	bne.n	80081f8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80081c0:	4b14      	ldr	r3, [pc, #80]	; (8008214 <DFU_GetStatus+0x168>)
 80081c2:	7d1b      	ldrb	r3, [r3, #20]
 80081c4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80081f8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008200:	2206      	movs	r2, #6
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 fa28 	bl	800965a <USBD_CtlSendData>
 800820a:	e000      	b.n	800820e <DFU_GetStatus+0x162>
    return;
 800820c:	bf00      	nop
}
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20000050 	.word	0x20000050

08008218 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008226:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d042      	beq.n	80082b4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008234:	2b0a      	cmp	r3, #10
 8008236:	d11e      	bne.n	8008276 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8008274:	e01f      	b.n	80082b6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	220a      	movs	r2, #10
 800827a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	220e      	movs	r2, #14
 8008282:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 80082b2:	e000      	b.n	80082b6 <DFU_ClearStatus+0x9e>
    return;
 80082b4:	bf00      	nop
  }
}
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ce:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d008      	beq.n	80082e8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80082dc:	2201      	movs	r2, #1
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f9ba 	bl	800965a <USBD_CtlSendData>
 80082e6:	e000      	b.n	80082ea <DFU_GetState+0x2a>
    return;
 80082e8:	bf00      	nop
}
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fe:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d03f      	beq.n	8008386 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800830c:	2b02      	cmp	r3, #2
 800830e:	d013      	beq.n	8008338 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008316:	2b03      	cmp	r3, #3
 8008318:	d00e      	beq.n	8008338 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008320:	2b05      	cmp	r3, #5
 8008322:	d009      	beq.n	8008338 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800832a:	2b06      	cmp	r3, #6
 800832c:	d004      	beq.n	8008338 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008334:	2b09      	cmp	r3, #9
 8008336:	d127      	bne.n	8008388 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8008384:	e000      	b.n	8008388 <DFU_Abort+0x98>
    return;
 8008386:	bf00      	nop
  }
}
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
	...

08008394 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083a2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d03b      	beq.n	8008422 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80083b2:	4b1e      	ldr	r3, [pc, #120]	; (800842c <DFU_Leave+0x98>)
 80083b4:	7d1b      	ldrb	r3, [r3, #20]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d016      	beq.n	80083ec <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2206      	movs	r2, #6
 80083c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 80083ea:	e01b      	b.n	8008424 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2208      	movs	r2, #8
 80083f0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f86c 	bl	80084f6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800841e:	f7ff f9b3 	bl	8007788 <__NVIC_SystemReset>
    return;
 8008422:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000050 	.word	0x20000050

08008430 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	e01f      	b.n	8008488 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	79fa      	ldrb	r2, [r7, #7]
 800847a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f004 f9c7 	bl	800c810 <USBD_LL_Init>
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e016      	b.n	80084d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	f107 020e 	add.w	r2, r7, #14
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
 80084cc:	4602      	mov	r2, r0
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f004 f9de 	bl	800c8a8 <USBD_LL_Start>
 80084ec:	4603      	mov	r3, r0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f004 f9ed 	bl	800c8de <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6852      	ldr	r2, [r2, #4]
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	4611      	mov	r1, r2
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
  }

  return USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800854e:	2303      	movs	r3, #3
 8008550:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d009      	beq.n	8008570 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	4611      	mov	r1, r2
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	460b      	mov	r3, r1
 8008584:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	78fa      	ldrb	r2, [r7, #3]
 800859a:	4611      	mov	r1, r2
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
  }

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 ffa1 	bl	8009504 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085de:	f003 031f 	and.w	r3, r3, #31
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d01a      	beq.n	800861c <USBD_LL_SetupStage+0x72>
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d822      	bhi.n	8008630 <USBD_LL_SetupStage+0x86>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <USBD_LL_SetupStage+0x4a>
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d00a      	beq.n	8008608 <USBD_LL_SetupStage+0x5e>
 80085f2:	e01d      	b.n	8008630 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa61 	bl	8008ac4 <USBD_StdDevReq>
 8008602:	4603      	mov	r3, r0
 8008604:	73fb      	strb	r3, [r7, #15]
      break;
 8008606:	e020      	b.n	800864a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fac5 	bl	8008ba0 <USBD_StdItfReq>
 8008616:	4603      	mov	r3, r0
 8008618:	73fb      	strb	r3, [r7, #15]
      break;
 800861a:	e016      	b.n	800864a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb04 	bl	8008c32 <USBD_StdEPReq>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
      break;
 800862e:	e00c      	b.n	800864a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008636:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800863a:	b2db      	uxtb	r3, r3
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f004 f98e 	bl	800c960 <USBD_LL_StallEP>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]
      break;
 8008648:	bf00      	nop
  }

  return ret;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	460b      	mov	r3, r1
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008662:	7afb      	ldrb	r3, [r7, #11]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d138      	bne.n	80086da <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800866e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008676:	2b03      	cmp	r3, #3
 8008678:	d14a      	bne.n	8008710 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	429a      	cmp	r2, r3
 8008684:	d913      	bls.n	80086ae <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4293      	cmp	r3, r2
 800869e:	bf28      	it	cs
 80086a0:	4613      	movcs	r3, r2
 80086a2:	461a      	mov	r2, r3
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f001 f820 	bl	80096ec <USBD_CtlContinueRx>
 80086ac:	e030      	b.n	8008710 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d10b      	bne.n	80086d2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f001 f81b 	bl	800970e <USBD_CtlSendStatus>
 80086d8:	e01a      	b.n	8008710 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d114      	bne.n	8008710 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00e      	beq.n	8008710 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	7afa      	ldrb	r2, [r7, #11]
 80086fc:	4611      	mov	r1, r2
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	4798      	blx	r3
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	e000      	b.n	8008712 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	460b      	mov	r3, r1
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d16b      	bne.n	8008806 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3314      	adds	r3, #20
 8008732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800873a:	2b02      	cmp	r3, #2
 800873c:	d156      	bne.n	80087ec <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	429a      	cmp	r2, r3
 8008748:	d914      	bls.n	8008774 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	1ad2      	subs	r2, r2, r3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	461a      	mov	r2, r3
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 ff95 	bl	8009690 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008766:	2300      	movs	r3, #0
 8008768:	2200      	movs	r2, #0
 800876a:	2100      	movs	r1, #0
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f004 f9a1 	bl	800cab4 <USBD_LL_PrepareReceive>
 8008772:	e03b      	b.n	80087ec <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	429a      	cmp	r2, r3
 800877e:	d11c      	bne.n	80087ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008788:	429a      	cmp	r2, r3
 800878a:	d316      	bcc.n	80087ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008796:	429a      	cmp	r2, r3
 8008798:	d20f      	bcs.n	80087ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800879a:	2200      	movs	r2, #0
 800879c:	2100      	movs	r1, #0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 ff76 	bl	8009690 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ac:	2300      	movs	r3, #0
 80087ae:	2200      	movs	r2, #0
 80087b0:	2100      	movs	r1, #0
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f004 f97e 	bl	800cab4 <USBD_LL_PrepareReceive>
 80087b8:	e018      	b.n	80087ec <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d10b      	bne.n	80087de <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087de:	2180      	movs	r1, #128	; 0x80
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f004 f8bd 	bl	800c960 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 ffa4 	bl	8009734 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d122      	bne.n	800883c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7ff fe98 	bl	800852c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008804:	e01a      	b.n	800883c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b03      	cmp	r3, #3
 8008810:	d114      	bne.n	800883c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	7afa      	ldrb	r2, [r7, #11]
 8008828:	4611      	mov	r1, r2
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	4798      	blx	r3
 800882e:	4603      	mov	r3, r0
 8008830:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	e000      	b.n	800883e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	e02f      	b.n	80088da <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00f      	beq.n	80088a4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d009      	beq.n	80088a4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6852      	ldr	r2, [r2, #4]
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	4611      	mov	r1, r2
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088a4:	2340      	movs	r3, #64	; 0x40
 80088a6:	2200      	movs	r2, #0
 80088a8:	2100      	movs	r1, #0
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f004 f832 	bl	800c914 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2240      	movs	r2, #64	; 0x40
 80088bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088c0:	2340      	movs	r3, #64	; 0x40
 80088c2:	2200      	movs	r2, #0
 80088c4:	2180      	movs	r1, #128	; 0x80
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f004 f824 	bl	800c914 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2240      	movs	r2, #64	; 0x40
 80088d6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	78fa      	ldrb	r2, [r7, #3]
 80088f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008910:	b2da      	uxtb	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2204      	movs	r2, #4
 800891c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b04      	cmp	r3, #4
 8008940:	d106      	bne.n	8008950 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008948:	b2da      	uxtb	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	e012      	b.n	800899a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b03      	cmp	r3, #3
 800897e:	d10b      	bne.n	8008998 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e014      	b.n	80089e6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d10d      	bne.n	80089e4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	4611      	mov	r1, r2
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e014      	b.n	8008a32 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d10d      	bne.n	8008a30 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d007      	beq.n	8008a30 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d009      	beq.n	8008a7e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6852      	ldr	r2, [r2, #4]
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	4611      	mov	r1, r2
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
  }

  return USBD_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008aa6:	8a3b      	ldrh	r3, [r7, #16]
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	b21a      	sxth	r2, r3
 8008aac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	b21b      	sxth	r3, r3
 8008ab4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ab6:	89fb      	ldrh	r3, [r7, #14]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ada:	2b40      	cmp	r3, #64	; 0x40
 8008adc:	d005      	beq.n	8008aea <USBD_StdDevReq+0x26>
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d853      	bhi.n	8008b8a <USBD_StdDevReq+0xc6>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <USBD_StdDevReq+0x3a>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d14f      	bne.n	8008b8a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]
      break;
 8008afc:	e04a      	b.n	8008b94 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	785b      	ldrb	r3, [r3, #1]
 8008b02:	2b09      	cmp	r3, #9
 8008b04:	d83b      	bhi.n	8008b7e <USBD_StdDevReq+0xba>
 8008b06:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <USBD_StdDevReq+0x48>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008b75 	.word	0x08008b75
 8008b14:	08008b7f 	.word	0x08008b7f
 8008b18:	08008b6b 	.word	0x08008b6b
 8008b1c:	08008b7f 	.word	0x08008b7f
 8008b20:	08008b3f 	.word	0x08008b3f
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b7f 	.word	0x08008b7f
 8008b2c:	08008b57 	.word	0x08008b57
 8008b30:	08008b49 	.word	0x08008b49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f9de 	bl	8008ef8 <USBD_GetDescriptor>
          break;
 8008b3c:	e024      	b.n	8008b88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fb55 	bl	80091f0 <USBD_SetAddress>
          break;
 8008b46:	e01f      	b.n	8008b88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fb94 	bl	8009278 <USBD_SetConfig>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]
          break;
 8008b54:	e018      	b.n	8008b88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fc33 	bl	80093c4 <USBD_GetConfig>
          break;
 8008b5e:	e013      	b.n	8008b88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc64 	bl	8009430 <USBD_GetStatus>
          break;
 8008b68:	e00e      	b.n	8008b88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fc93 	bl	8009498 <USBD_SetFeature>
          break;
 8008b72:	e009      	b.n	8008b88 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fca2 	bl	80094c0 <USBD_ClrFeature>
          break;
 8008b7c:	e004      	b.n	8008b88 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fcf9 	bl	8009578 <USBD_CtlError>
          break;
 8008b86:	bf00      	nop
      }
      break;
 8008b88:	e004      	b.n	8008b94 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fcf3 	bl	8009578 <USBD_CtlError>
      break;
 8008b92:	bf00      	nop
  }

  return ret;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop

08008ba0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bb6:	2b40      	cmp	r3, #64	; 0x40
 8008bb8:	d005      	beq.n	8008bc6 <USBD_StdItfReq+0x26>
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	d82f      	bhi.n	8008c1e <USBD_StdItfReq+0x7e>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USBD_StdItfReq+0x26>
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d12b      	bne.n	8008c1e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d81d      	bhi.n	8008c10 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	889b      	ldrh	r3, [r3, #4]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d813      	bhi.n	8008c06 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	4798      	blx	r3
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	88db      	ldrh	r3, [r3, #6]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d110      	bne.n	8008c1a <USBD_StdItfReq+0x7a>
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10d      	bne.n	8008c1a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fd85 	bl	800970e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c04:	e009      	b.n	8008c1a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fcb5 	bl	8009578 <USBD_CtlError>
          break;
 8008c0e:	e004      	b.n	8008c1a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fcb0 	bl	8009578 <USBD_CtlError>
          break;
 8008c18:	e000      	b.n	8008c1c <USBD_StdItfReq+0x7c>
          break;
 8008c1a:	bf00      	nop
      }
      break;
 8008c1c:	e004      	b.n	8008c28 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fca9 	bl	8009578 <USBD_CtlError>
      break;
 8008c26:	bf00      	nop
  }

  return ret;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	889b      	ldrh	r3, [r3, #4]
 8008c44:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c4e:	2b40      	cmp	r3, #64	; 0x40
 8008c50:	d007      	beq.n	8008c62 <USBD_StdEPReq+0x30>
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	f200 8145 	bhi.w	8008ee2 <USBD_StdEPReq+0x2b0>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00c      	beq.n	8008c76 <USBD_StdEPReq+0x44>
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	f040 8140 	bne.w	8008ee2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
      break;
 8008c74:	e13a      	b.n	8008eec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d007      	beq.n	8008c8e <USBD_StdEPReq+0x5c>
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	f300 8129 	bgt.w	8008ed6 <USBD_StdEPReq+0x2a4>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d07f      	beq.n	8008d88 <USBD_StdEPReq+0x156>
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d03c      	beq.n	8008d06 <USBD_StdEPReq+0xd4>
 8008c8c:	e123      	b.n	8008ed6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d002      	beq.n	8008ca0 <USBD_StdEPReq+0x6e>
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d016      	beq.n	8008ccc <USBD_StdEPReq+0x9a>
 8008c9e:	e02c      	b.n	8008cfa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00d      	beq.n	8008cc2 <USBD_StdEPReq+0x90>
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b80      	cmp	r3, #128	; 0x80
 8008caa:	d00a      	beq.n	8008cc2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f003 fe55 	bl	800c960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cb6:	2180      	movs	r1, #128	; 0x80
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f003 fe51 	bl	800c960 <USBD_LL_StallEP>
 8008cbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cc0:	e020      	b.n	8008d04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fc57 	bl	8009578 <USBD_CtlError>
              break;
 8008cca:	e01b      	b.n	8008d04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	885b      	ldrh	r3, [r3, #2]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10e      	bne.n	8008cf2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00b      	beq.n	8008cf2 <USBD_StdEPReq+0xc0>
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	2b80      	cmp	r3, #128	; 0x80
 8008cde:	d008      	beq.n	8008cf2 <USBD_StdEPReq+0xc0>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	88db      	ldrh	r3, [r3, #6]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f003 fe37 	bl	800c960 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fd0b 	bl	800970e <USBD_CtlSendStatus>

              break;
 8008cf8:	e004      	b.n	8008d04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fc3b 	bl	8009578 <USBD_CtlError>
              break;
 8008d02:	bf00      	nop
          }
          break;
 8008d04:	e0ec      	b.n	8008ee0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d002      	beq.n	8008d18 <USBD_StdEPReq+0xe6>
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d016      	beq.n	8008d44 <USBD_StdEPReq+0x112>
 8008d16:	e030      	b.n	8008d7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00d      	beq.n	8008d3a <USBD_StdEPReq+0x108>
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	2b80      	cmp	r3, #128	; 0x80
 8008d22:	d00a      	beq.n	8008d3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f003 fe19 	bl	800c960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d2e:	2180      	movs	r1, #128	; 0x80
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f003 fe15 	bl	800c960 <USBD_LL_StallEP>
 8008d36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d38:	e025      	b.n	8008d86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fc1b 	bl	8009578 <USBD_CtlError>
              break;
 8008d42:	e020      	b.n	8008d86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	885b      	ldrh	r3, [r3, #2]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d11b      	bne.n	8008d84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f003 fe1f 	bl	800c99e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fcd4 	bl	800970e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	4798      	blx	r3
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d78:	e004      	b.n	8008d84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fbfb 	bl	8009578 <USBD_CtlError>
              break;
 8008d82:	e000      	b.n	8008d86 <USBD_StdEPReq+0x154>
              break;
 8008d84:	bf00      	nop
          }
          break;
 8008d86:	e0ab      	b.n	8008ee0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d002      	beq.n	8008d9a <USBD_StdEPReq+0x168>
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d032      	beq.n	8008dfe <USBD_StdEPReq+0x1cc>
 8008d98:	e097      	b.n	8008eca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d007      	beq.n	8008db0 <USBD_StdEPReq+0x17e>
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	2b80      	cmp	r3, #128	; 0x80
 8008da4:	d004      	beq.n	8008db0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fbe5 	bl	8009578 <USBD_CtlError>
                break;
 8008dae:	e091      	b.n	8008ed4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da0b      	bge.n	8008dd0 <USBD_StdEPReq+0x19e>
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4413      	add	r3, r2
 8008dcc:	3304      	adds	r3, #4
 8008dce:	e00b      	b.n	8008de8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	3304      	adds	r3, #4
 8008de8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2202      	movs	r2, #2
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fc2f 	bl	800965a <USBD_CtlSendData>
              break;
 8008dfc:	e06a      	b.n	8008ed4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da11      	bge.n	8008e2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	f003 020f 	and.w	r2, r3, #15
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	3324      	adds	r3, #36	; 0x24
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d117      	bne.n	8008e50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fba8 	bl	8009578 <USBD_CtlError>
                  break;
 8008e28:	e054      	b.n	8008ed4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	f003 020f 	and.w	r2, r3, #15
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d104      	bne.n	8008e50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fb95 	bl	8009578 <USBD_CtlError>
                  break;
 8008e4e:	e041      	b.n	8008ed4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	da0b      	bge.n	8008e70 <USBD_StdEPReq+0x23e>
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	3310      	adds	r3, #16
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	e00b      	b.n	8008e88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	3304      	adds	r3, #4
 8008e88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <USBD_StdEPReq+0x264>
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b80      	cmp	r3, #128	; 0x80
 8008e94:	d103      	bne.n	8008e9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	e00e      	b.n	8008ebc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f003 fd9a 	bl	800c9dc <USBD_LL_IsStallEP>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	e002      	b.n	8008ebc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fbc9 	bl	800965a <USBD_CtlSendData>
              break;
 8008ec8:	e004      	b.n	8008ed4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fb53 	bl	8009578 <USBD_CtlError>
              break;
 8008ed2:	bf00      	nop
          }
          break;
 8008ed4:	e004      	b.n	8008ee0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fb4d 	bl	8009578 <USBD_CtlError>
          break;
 8008ede:	bf00      	nop
      }
      break;
 8008ee0:	e004      	b.n	8008eec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb47 	bl	8009578 <USBD_CtlError>
      break;
 8008eea:	bf00      	nop
  }

  return ret;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	885b      	ldrh	r3, [r3, #2]
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b06      	cmp	r3, #6
 8008f1a:	f200 813b 	bhi.w	8009194 <USBD_GetDescriptor+0x29c>
 8008f1e:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <USBD_GetDescriptor+0x2c>)
 8008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f24:	08008f41 	.word	0x08008f41
 8008f28:	08008f59 	.word	0x08008f59
 8008f2c:	08008f99 	.word	0x08008f99
 8008f30:	08009195 	.word	0x08009195
 8008f34:	08009195 	.word	0x08009195
 8008f38:	08009135 	.word	0x08009135
 8008f3c:	08009161 	.word	0x08009161
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7c12      	ldrb	r2, [r2, #16]
 8008f4c:	f107 0108 	add.w	r1, r7, #8
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
 8008f54:	60f8      	str	r0, [r7, #12]
      break;
 8008f56:	e125      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	7c1b      	ldrb	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10d      	bne.n	8008f7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	f107 0208 	add.w	r2, r7, #8
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
 8008f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	2202      	movs	r2, #2
 8008f78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f7a:	e113      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f84:	f107 0208 	add.w	r2, r7, #8
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	2202      	movs	r2, #2
 8008f94:	701a      	strb	r2, [r3, #0]
      break;
 8008f96:	e105      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	f200 80ac 	bhi.w	80090fc <USBD_GetDescriptor+0x204>
 8008fa4:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <USBD_GetDescriptor+0xb4>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08008fc5 	.word	0x08008fc5
 8008fb0:	08008ff9 	.word	0x08008ff9
 8008fb4:	0800902d 	.word	0x0800902d
 8008fb8:	08009061 	.word	0x08009061
 8008fbc:	08009095 	.word	0x08009095
 8008fc0:	080090c9 	.word	0x080090c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe6:	e0a4      	b.n	8009132 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fac4 	bl	8009578 <USBD_CtlError>
            err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff6:	e09c      	b.n	8009132 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e08a      	b.n	8009132 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 faaa 	bl	8009578 <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e082      	b.n	8009132 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e070      	b.n	8009132 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa90 	bl	8009578 <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e068      	b.n	8009132 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	7c12      	ldrb	r2, [r2, #16]
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009082:	e056      	b.n	8009132 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa76 	bl	8009578 <USBD_CtlError>
            err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
          break;
 8009092:	e04e      	b.n	8009132 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7c12      	ldrb	r2, [r2, #16]
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090b6:	e03c      	b.n	8009132 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa5c 	bl	8009578 <USBD_CtlError>
            err++;
 80090c0:	7afb      	ldrb	r3, [r7, #11]
 80090c2:	3301      	adds	r3, #1
 80090c4:	72fb      	strb	r3, [r7, #11]
          break;
 80090c6:	e034      	b.n	8009132 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	7c12      	ldrb	r2, [r2, #16]
 80090e0:	f107 0108 	add.w	r1, r7, #8
 80090e4:	4610      	mov	r0, r2
 80090e6:	4798      	blx	r3
 80090e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ea:	e022      	b.n	8009132 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa42 	bl	8009578 <USBD_CtlError>
            err++;
 80090f4:	7afb      	ldrb	r3, [r7, #11]
 80090f6:	3301      	adds	r3, #1
 80090f8:	72fb      	strb	r3, [r7, #11]
          break;
 80090fa:	e01a      	b.n	8009132 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00c      	beq.n	8009122 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	8852      	ldrh	r2, [r2, #2]
 8009114:	b2d1      	uxtb	r1, r2
 8009116:	f107 0208 	add.w	r2, r7, #8
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
 800911e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009120:	e006      	b.n	8009130 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fa27 	bl	8009578 <USBD_CtlError>
            err++;
 800912a:	7afb      	ldrb	r3, [r7, #11]
 800912c:	3301      	adds	r3, #1
 800912e:	72fb      	strb	r3, [r7, #11]
          break;
 8009130:	bf00      	nop
      }
      break;
 8009132:	e037      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7c1b      	ldrb	r3, [r3, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	f107 0208 	add.w	r2, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800914e:	e029      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa10 	bl	8009578 <USBD_CtlError>
        err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
      break;
 800915e:	e021      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	7c1b      	ldrb	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10d      	bne.n	8009184 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	f107 0208 	add.w	r2, r7, #8
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	2207      	movs	r2, #7
 8009180:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009182:	e00f      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f9f6 	bl	8009578 <USBD_CtlError>
        err++;
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	3301      	adds	r3, #1
 8009190:	72fb      	strb	r3, [r7, #11]
      break;
 8009192:	e007      	b.n	80091a4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f9ee 	bl	8009578 <USBD_CtlError>
      err++;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	3301      	adds	r3, #1
 80091a0:	72fb      	strb	r3, [r7, #11]
      break;
 80091a2:	bf00      	nop
  }

  if (err != 0U)
 80091a4:	7afb      	ldrb	r3, [r7, #11]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d11e      	bne.n	80091e8 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d016      	beq.n	80091e0 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 80091b2:	893b      	ldrh	r3, [r7, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00e      	beq.n	80091d6 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	88da      	ldrh	r2, [r3, #6]
 80091bc:	893b      	ldrh	r3, [r7, #8]
 80091be:	4293      	cmp	r3, r2
 80091c0:	bf28      	it	cs
 80091c2:	4613      	movcs	r3, r2
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091c8:	893b      	ldrh	r3, [r7, #8]
 80091ca:	461a      	mov	r2, r3
 80091cc:	68f9      	ldr	r1, [r7, #12]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa43 	bl	800965a <USBD_CtlSendData>
 80091d4:	e009      	b.n	80091ea <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f9cd 	bl	8009578 <USBD_CtlError>
 80091de:	e004      	b.n	80091ea <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fa94 	bl	800970e <USBD_CtlSendStatus>
 80091e6:	e000      	b.n	80091ea <USBD_GetDescriptor+0x2f2>
    return;
 80091e8:	bf00      	nop
  }
}
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	889b      	ldrh	r3, [r3, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d131      	bne.n	8009266 <USBD_SetAddress+0x76>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d12d      	bne.n	8009266 <USBD_SetAddress+0x76>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	2b7f      	cmp	r3, #127	; 0x7f
 8009210:	d829      	bhi.n	8009266 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	885b      	ldrh	r3, [r3, #2]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800921c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b03      	cmp	r3, #3
 8009228:	d104      	bne.n	8009234 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f9a3 	bl	8009578 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009232:	e01d      	b.n	8009270 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7bfa      	ldrb	r2, [r7, #15]
 8009238:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f003 fbf7 	bl	800ca34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa61 	bl	800970e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d004      	beq.n	800925c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2202      	movs	r2, #2
 8009256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925a:	e009      	b.n	8009270 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009264:	e004      	b.n	8009270 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f985 	bl	8009578 <USBD_CtlError>
  }
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	885b      	ldrh	r3, [r3, #2]
 800928a:	b2da      	uxtb	r2, r3
 800928c:	4b4c      	ldr	r3, [pc, #304]	; (80093c0 <USBD_SetConfig+0x148>)
 800928e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009290:	4b4b      	ldr	r3, [pc, #300]	; (80093c0 <USBD_SetConfig+0x148>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d905      	bls.n	80092a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f96c 	bl	8009578 <USBD_CtlError>
    return USBD_FAIL;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e088      	b.n	80093b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d002      	beq.n	80092b6 <USBD_SetConfig+0x3e>
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d025      	beq.n	8009300 <USBD_SetConfig+0x88>
 80092b4:	e071      	b.n	800939a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092b6:	4b42      	ldr	r3, [pc, #264]	; (80093c0 <USBD_SetConfig+0x148>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d01c      	beq.n	80092f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80092be:	4b40      	ldr	r3, [pc, #256]	; (80093c0 <USBD_SetConfig+0x148>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092c8:	4b3d      	ldr	r3, [pc, #244]	; (80093c0 <USBD_SetConfig+0x148>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff f937 	bl	8008542 <USBD_SetClassConfig>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f949 	bl	8009578 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092e6:	e065      	b.n	80093b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fa10 	bl	800970e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2203      	movs	r2, #3
 80092f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092f6:	e05d      	b.n	80093b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa08 	bl	800970e <USBD_CtlSendStatus>
      break;
 80092fe:	e059      	b.n	80093b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009300:	4b2f      	ldr	r3, [pc, #188]	; (80093c0 <USBD_SetConfig+0x148>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d112      	bne.n	800932e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009310:	4b2b      	ldr	r3, [pc, #172]	; (80093c0 <USBD_SetConfig+0x148>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800931a:	4b29      	ldr	r3, [pc, #164]	; (80093c0 <USBD_SetConfig+0x148>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff f92a 	bl	800857a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9f1 	bl	800970e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800932c:	e042      	b.n	80093b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800932e:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <USBD_SetConfig+0x148>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d02a      	beq.n	8009392 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff f918 	bl	800857a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800934a:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <USBD_SetConfig+0x148>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009354:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <USBD_SetConfig+0x148>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff f8f1 	bl	8008542 <USBD_SetClassConfig>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00f      	beq.n	800938a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f903 	bl	8009578 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff f8fd 	bl	800857a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2202      	movs	r2, #2
 8009384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009388:	e014      	b.n	80093b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f9bf 	bl	800970e <USBD_CtlSendStatus>
      break;
 8009390:	e010      	b.n	80093b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f9bb 	bl	800970e <USBD_CtlSendStatus>
      break;
 8009398:	e00c      	b.n	80093b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f8eb 	bl	8009578 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093a2:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <USBD_SetConfig+0x148>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff f8e6 	bl	800857a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	73fb      	strb	r3, [r7, #15]
      break;
 80093b2:	bf00      	nop
  }

  return ret;
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	200007eb 	.word	0x200007eb

080093c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	88db      	ldrh	r3, [r3, #6]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d004      	beq.n	80093e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f8cd 	bl	8009578 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093de:	e023      	b.n	8009428 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	dc02      	bgt.n	80093f2 <USBD_GetConfig+0x2e>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dc03      	bgt.n	80093f8 <USBD_GetConfig+0x34>
 80093f0:	e015      	b.n	800941e <USBD_GetConfig+0x5a>
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d00b      	beq.n	800940e <USBD_GetConfig+0x4a>
 80093f6:	e012      	b.n	800941e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3308      	adds	r3, #8
 8009402:	2201      	movs	r2, #1
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f927 	bl	800965a <USBD_CtlSendData>
        break;
 800940c:	e00c      	b.n	8009428 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3304      	adds	r3, #4
 8009412:	2201      	movs	r2, #1
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f91f 	bl	800965a <USBD_CtlSendData>
        break;
 800941c:	e004      	b.n	8009428 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f8a9 	bl	8009578 <USBD_CtlError>
        break;
 8009426:	bf00      	nop
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009440:	b2db      	uxtb	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	2b02      	cmp	r3, #2
 8009446:	d81e      	bhi.n	8009486 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	88db      	ldrh	r3, [r3, #6]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d004      	beq.n	800945a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f890 	bl	8009578 <USBD_CtlError>
        break;
 8009458:	e01a      	b.n	8009490 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f043 0202 	orr.w	r2, r3, #2
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	330c      	adds	r3, #12
 800947a:	2202      	movs	r2, #2
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f8eb 	bl	800965a <USBD_CtlSendData>
      break;
 8009484:	e004      	b.n	8009490 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f875 	bl	8009578 <USBD_CtlError>
      break;
 800948e:	bf00      	nop
  }
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	885b      	ldrh	r3, [r3, #2]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d106      	bne.n	80094b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f92b 	bl	800970e <USBD_CtlSendStatus>
  }
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d80b      	bhi.n	80094f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	885b      	ldrh	r3, [r3, #2]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d10c      	bne.n	80094fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f910 	bl	800970e <USBD_CtlSendStatus>
      }
      break;
 80094ee:	e004      	b.n	80094fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f840 	bl	8009578 <USBD_CtlError>
      break;
 80094f8:	e000      	b.n	80094fc <USBD_ClrFeature+0x3c>
      break;
 80094fa:	bf00      	nop
  }
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	781a      	ldrb	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f7ff faaa 	bl	8008a88 <SWAPBYTE>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3301      	adds	r3, #1
 8009540:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff fa9d 	bl	8008a88 <SWAPBYTE>
 800954e:	4603      	mov	r3, r0
 8009550:	461a      	mov	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3301      	adds	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f7ff fa90 	bl	8008a88 <SWAPBYTE>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	80da      	strh	r2, [r3, #6]
}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009582:	2180      	movs	r1, #128	; 0x80
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f003 f9eb 	bl	800c960 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800958a:	2100      	movs	r1, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f003 f9e7 	bl	800c960 <USBD_LL_StallEP>
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d036      	beq.n	800961e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095b4:	6938      	ldr	r0, [r7, #16]
 80095b6:	f000 f836 	bl	8009626 <USBD_GetLen>
 80095ba:	4603      	mov	r3, r0
 80095bc:	3301      	adds	r3, #1
 80095be:	b29b      	uxth	r3, r3
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	7812      	ldrb	r2, [r2, #0]
 80095d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	3301      	adds	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	4413      	add	r3, r2
 80095e0:	2203      	movs	r2, #3
 80095e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	3301      	adds	r3, #1
 80095e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095ea:	e013      	b.n	8009614 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	4413      	add	r3, r2
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	7812      	ldrb	r2, [r2, #0]
 80095f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	3301      	adds	r3, #1
 80095fc:	613b      	str	r3, [r7, #16]
    idx++;
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	3301      	adds	r3, #1
 8009602:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	4413      	add	r3, r2
 800960a:	2200      	movs	r2, #0
 800960c:	701a      	strb	r2, [r3, #0]
    idx++;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	3301      	adds	r3, #1
 8009612:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e7      	bne.n	80095ec <USBD_GetString+0x52>
 800961c:	e000      	b.n	8009620 <USBD_GetString+0x86>
    return;
 800961e:	bf00      	nop
  }
}
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009636:	e005      	b.n	8009644 <USBD_GetLen+0x1e>
  {
    len++;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	3301      	adds	r3, #1
 800963c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	3301      	adds	r3, #1
 8009642:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f5      	bne.n	8009638 <USBD_GetLen+0x12>
  }

  return len;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2202      	movs	r2, #2
 800966a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	2100      	movs	r1, #0
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f003 f9f6 	bl	800ca72 <USBD_LL_Transmit>

  return USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f003 f9e5 	bl	800ca72 <USBD_LL_Transmit>

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2203      	movs	r2, #3
 80096c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	2100      	movs	r1, #0
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f003 f9e9 	bl	800cab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	2100      	movs	r1, #0
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f003 f9d8 	bl	800cab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2204      	movs	r2, #4
 800971a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800971e:	2300      	movs	r3, #0
 8009720:	2200      	movs	r2, #0
 8009722:	2100      	movs	r1, #0
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f003 f9a4 	bl	800ca72 <USBD_LL_Transmit>

  return USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2205      	movs	r2, #5
 8009740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	2100      	movs	r1, #0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f003 f9b2 	bl	800cab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <__NVIC_SetPriority>:
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800976c:	2b00      	cmp	r3, #0
 800976e:	db0a      	blt.n	8009786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	b2da      	uxtb	r2, r3
 8009774:	490c      	ldr	r1, [pc, #48]	; (80097a8 <__NVIC_SetPriority+0x4c>)
 8009776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800977a:	0112      	lsls	r2, r2, #4
 800977c:	b2d2      	uxtb	r2, r2
 800977e:	440b      	add	r3, r1
 8009780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009784:	e00a      	b.n	800979c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4908      	ldr	r1, [pc, #32]	; (80097ac <__NVIC_SetPriority+0x50>)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	3b04      	subs	r3, #4
 8009794:	0112      	lsls	r2, r2, #4
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	440b      	add	r3, r1
 800979a:	761a      	strb	r2, [r3, #24]
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	e000e100 	.word	0xe000e100
 80097ac:	e000ed00 	.word	0xe000ed00

080097b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <SysTick_Handler+0x1c>)
 80097b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80097b8:	f001 fcfe 	bl	800b1b8 <xTaskGetSchedulerState>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d001      	beq.n	80097c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80097c2:	f002 fae9 	bl	800bd98 <xPortSysTickHandler>
  }
}
 80097c6:	bf00      	nop
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	e000e010 	.word	0xe000e010

080097d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097d4:	2100      	movs	r1, #0
 80097d6:	f06f 0004 	mvn.w	r0, #4
 80097da:	f7ff ffbf 	bl	800975c <__NVIC_SetPriority>
#endif
}
 80097de:	bf00      	nop
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ea:	f3ef 8305 	mrs	r3, IPSR
 80097ee:	603b      	str	r3, [r7, #0]
  return(result);
 80097f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097f6:	f06f 0305 	mvn.w	r3, #5
 80097fa:	607b      	str	r3, [r7, #4]
 80097fc:	e00c      	b.n	8009818 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097fe:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <osKernelInitialize+0x44>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d105      	bne.n	8009812 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009806:	4b08      	ldr	r3, [pc, #32]	; (8009828 <osKernelInitialize+0x44>)
 8009808:	2201      	movs	r2, #1
 800980a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800980c:	2300      	movs	r3, #0
 800980e:	607b      	str	r3, [r7, #4]
 8009810:	e002      	b.n	8009818 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009812:	f04f 33ff 	mov.w	r3, #4294967295
 8009816:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009818:	687b      	ldr	r3, [r7, #4]
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	200007ec 	.word	0x200007ec

0800982c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009832:	f3ef 8305 	mrs	r3, IPSR
 8009836:	603b      	str	r3, [r7, #0]
  return(result);
 8009838:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <osKernelStart+0x1a>
    stat = osErrorISR;
 800983e:	f06f 0305 	mvn.w	r3, #5
 8009842:	607b      	str	r3, [r7, #4]
 8009844:	e010      	b.n	8009868 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <osKernelStart+0x48>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d109      	bne.n	8009862 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800984e:	f7ff ffbf 	bl	80097d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009852:	4b08      	ldr	r3, [pc, #32]	; (8009874 <osKernelStart+0x48>)
 8009854:	2202      	movs	r2, #2
 8009856:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009858:	f001 f866 	bl	800a928 <vTaskStartScheduler>
      stat = osOK;
 800985c:	2300      	movs	r3, #0
 800985e:	607b      	str	r3, [r7, #4]
 8009860:	e002      	b.n	8009868 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009862:	f04f 33ff 	mov.w	r3, #4294967295
 8009866:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009868:	687b      	ldr	r3, [r7, #4]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	200007ec 	.word	0x200007ec

08009878 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009878:	b580      	push	{r7, lr}
 800987a:	b08e      	sub	sp, #56	; 0x38
 800987c:	af04      	add	r7, sp, #16
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009884:	2300      	movs	r3, #0
 8009886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009888:	f3ef 8305 	mrs	r3, IPSR
 800988c:	617b      	str	r3, [r7, #20]
  return(result);
 800988e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009890:	2b00      	cmp	r3, #0
 8009892:	d17e      	bne.n	8009992 <osThreadNew+0x11a>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d07b      	beq.n	8009992 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800989a:	2380      	movs	r3, #128	; 0x80
 800989c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800989e:	2318      	movs	r3, #24
 80098a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80098a6:	f04f 33ff 	mov.w	r3, #4294967295
 80098aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d045      	beq.n	800993e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <osThreadNew+0x48>
        name = attr->name;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d008      	beq.n	80098e6 <osThreadNew+0x6e>
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	2b38      	cmp	r3, #56	; 0x38
 80098d8:	d805      	bhi.n	80098e6 <osThreadNew+0x6e>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <osThreadNew+0x72>
        return (NULL);
 80098e6:	2300      	movs	r3, #0
 80098e8:	e054      	b.n	8009994 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00e      	beq.n	8009920 <osThreadNew+0xa8>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	2b5b      	cmp	r3, #91	; 0x5b
 8009908:	d90a      	bls.n	8009920 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800990e:	2b00      	cmp	r3, #0
 8009910:	d006      	beq.n	8009920 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <osThreadNew+0xa8>
        mem = 1;
 800991a:	2301      	movs	r3, #1
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	e010      	b.n	8009942 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10c      	bne.n	8009942 <osThreadNew+0xca>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d108      	bne.n	8009942 <osThreadNew+0xca>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <osThreadNew+0xca>
          mem = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	61bb      	str	r3, [r7, #24]
 800993c:	e001      	b.n	8009942 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d110      	bne.n	800996a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009950:	9202      	str	r2, [sp, #8]
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	6a3a      	ldr	r2, [r7, #32]
 800995c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 fe0c 	bl	800a57c <xTaskCreateStatic>
 8009964:	4603      	mov	r3, r0
 8009966:	613b      	str	r3, [r7, #16]
 8009968:	e013      	b.n	8009992 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d110      	bne.n	8009992 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	b29a      	uxth	r2, r3
 8009974:	f107 0310 	add.w	r3, r7, #16
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fe57 	bl	800a636 <xTaskCreate>
 8009988:	4603      	mov	r3, r0
 800998a:	2b01      	cmp	r3, #1
 800998c:	d001      	beq.n	8009992 <osThreadNew+0x11a>
            hTask = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009992:	693b      	ldr	r3, [r7, #16]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3728      	adds	r7, #40	; 0x28
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a4:	f3ef 8305 	mrs	r3, IPSR
 80099a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <osDelay+0x1c>
    stat = osErrorISR;
 80099b0:	f06f 0305 	mvn.w	r3, #5
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	e007      	b.n	80099c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 ff7c 	bl	800a8c0 <vTaskDelay>
    }
  }

  return (stat);
 80099c8:	68fb      	ldr	r3, [r7, #12]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4a07      	ldr	r2, [pc, #28]	; (8009a00 <vApplicationGetIdleTaskMemory+0x2c>)
 80099e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	4a06      	ldr	r2, [pc, #24]	; (8009a04 <vApplicationGetIdleTaskMemory+0x30>)
 80099ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2280      	movs	r2, #128	; 0x80
 80099f0:	601a      	str	r2, [r3, #0]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	200007f0 	.word	0x200007f0
 8009a04:	2000084c 	.word	0x2000084c

08009a08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4a07      	ldr	r2, [pc, #28]	; (8009a34 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	4a06      	ldr	r2, [pc, #24]	; (8009a38 <vApplicationGetTimerTaskMemory+0x30>)
 8009a1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	20000a4c 	.word	0x20000a4c
 8009a38:	20000aa8 	.word	0x20000aa8

08009a3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f103 0208 	add.w	r2, r3, #8
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f04f 32ff 	mov.w	r2, #4294967295
 8009a54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f103 0208 	add.w	r2, r3, #8
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f103 0208 	add.w	r2, r3, #8
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a96:	b480      	push	{r7}
 8009a98:	b085      	sub	sp, #20
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	601a      	str	r2, [r3, #0]
}
 8009ad2:	bf00      	nop
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af4:	d103      	bne.n	8009afe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	e00c      	b.n	8009b18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3308      	adds	r3, #8
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e002      	b.n	8009b0c <vListInsert+0x2e>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d2f6      	bcs.n	8009b06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
}
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	6892      	ldr	r2, [r2, #8]
 8009b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	6852      	ldr	r2, [r2, #4]
 8009b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d103      	bne.n	8009b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	1e5a      	subs	r2, r3, #1
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bce:	f002 f851 	bl	800bc74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	441a      	add	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	68f9      	ldr	r1, [r7, #12]
 8009c02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c04:	fb01 f303 	mul.w	r3, r1, r3
 8009c08:	441a      	add	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	22ff      	movs	r2, #255	; 0xff
 8009c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	22ff      	movs	r2, #255	; 0xff
 8009c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d114      	bne.n	8009c4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d01a      	beq.n	8009c62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3310      	adds	r3, #16
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 f903 	bl	800ae3c <xTaskRemoveFromEventList>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d012      	beq.n	8009c62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c3c:	4b0c      	ldr	r3, [pc, #48]	; (8009c70 <xQueueGenericReset+0xcc>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	e009      	b.n	8009c62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3310      	adds	r3, #16
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff fef2 	bl	8009a3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3324      	adds	r3, #36	; 0x24
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff feed 	bl	8009a3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c62:	f002 f837 	bl	800bcd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c66:	2301      	movs	r3, #1
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	e000ed04 	.word	0xe000ed04

08009c74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08e      	sub	sp, #56	; 0x38
 8009c78:	af02      	add	r7, sp, #8
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <xQueueGenericCreateStatic+0x52>
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <xQueueGenericCreateStatic+0x56>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <xQueueGenericCreateStatic+0x58>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	623b      	str	r3, [r7, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <xQueueGenericCreateStatic+0x7e>
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <xQueueGenericCreateStatic+0x82>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e000      	b.n	8009cf8 <xQueueGenericCreateStatic+0x84>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61fb      	str	r3, [r7, #28]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d12:	2350      	movs	r3, #80	; 0x50
 8009d14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2b50      	cmp	r3, #80	; 0x50
 8009d1a:	d00a      	beq.n	8009d32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	61bb      	str	r3, [r7, #24]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00d      	beq.n	8009d5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f805 	bl	8009d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3730      	adds	r7, #48	; 0x30
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	e002      	b.n	8009d86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d92:	2101      	movs	r1, #1
 8009d94:	69b8      	ldr	r0, [r7, #24]
 8009d96:	f7ff ff05 	bl	8009ba4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	78fa      	ldrb	r2, [r7, #3]
 8009d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009da2:	bf00      	nop
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08e      	sub	sp, #56	; 0x38
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueGenericSend+0x32>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d103      	bne.n	8009dec <xQueueGenericSend+0x40>
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <xQueueGenericSend+0x44>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <xQueueGenericSend+0x46>
 8009df0:	2300      	movs	r3, #0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <xQueueGenericSend+0x60>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d103      	bne.n	8009e1a <xQueueGenericSend+0x6e>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d101      	bne.n	8009e1e <xQueueGenericSend+0x72>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <xQueueGenericSend+0x74>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xQueueGenericSend+0x8e>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	623b      	str	r3, [r7, #32]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e3a:	f001 f9bd 	bl	800b1b8 <xTaskGetSchedulerState>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d102      	bne.n	8009e4a <xQueueGenericSend+0x9e>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <xQueueGenericSend+0xa2>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e000      	b.n	8009e50 <xQueueGenericSend+0xa4>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <xQueueGenericSend+0xbe>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	61fb      	str	r3, [r7, #28]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e6a:	f001 ff03 	bl	800bc74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d302      	bcc.n	8009e80 <xQueueGenericSend+0xd4>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d129      	bne.n	8009ed4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e86:	f000 fa0b 	bl	800a2a0 <prvCopyDataToQueue>
 8009e8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d010      	beq.n	8009eb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	3324      	adds	r3, #36	; 0x24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 ffcf 	bl	800ae3c <xTaskRemoveFromEventList>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d013      	beq.n	8009ecc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ea4:	4b3f      	ldr	r3, [pc, #252]	; (8009fa4 <xQueueGenericSend+0x1f8>)
 8009ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	e00a      	b.n	8009ecc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ebc:	4b39      	ldr	r3, [pc, #228]	; (8009fa4 <xQueueGenericSend+0x1f8>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ecc:	f001 ff02 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e063      	b.n	8009f9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d103      	bne.n	8009ee2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eda:	f001 fefb 	bl	800bcd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e05c      	b.n	8009f9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d106      	bne.n	8009ef6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ee8:	f107 0314 	add.w	r3, r7, #20
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 f809 	bl	800af04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ef6:	f001 feed 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009efa:	f000 fd7b 	bl	800a9f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009efe:	f001 feb9 	bl	800bc74 <vPortEnterCritical>
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f08:	b25b      	sxtb	r3, r3
 8009f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0e:	d103      	bne.n	8009f18 <xQueueGenericSend+0x16c>
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f1e:	b25b      	sxtb	r3, r3
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f24:	d103      	bne.n	8009f2e <xQueueGenericSend+0x182>
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f2e:	f001 fed1 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f32:	1d3a      	adds	r2, r7, #4
 8009f34:	f107 0314 	add.w	r3, r7, #20
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 fff8 	bl	800af30 <xTaskCheckForTimeOut>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d124      	bne.n	8009f90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f48:	f000 faa2 	bl	800a490 <prvIsQueueFull>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d018      	beq.n	8009f84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	3310      	adds	r3, #16
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f000 ff1e 	bl	800ad9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f62:	f000 fa2d 	bl	800a3c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f66:	f000 fd53 	bl	800aa10 <xTaskResumeAll>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f47f af7c 	bne.w	8009e6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f72:	4b0c      	ldr	r3, [pc, #48]	; (8009fa4 <xQueueGenericSend+0x1f8>)
 8009f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	e772      	b.n	8009e6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f86:	f000 fa1b 	bl	800a3c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f8a:	f000 fd41 	bl	800aa10 <xTaskResumeAll>
 8009f8e:	e76c      	b.n	8009e6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f92:	f000 fa15 	bl	800a3c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f96:	f000 fd3b 	bl	800aa10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3738      	adds	r7, #56	; 0x38
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	e000ed04 	.word	0xe000ed04

08009fa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b090      	sub	sp, #64	; 0x40
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d103      	bne.n	8009fe4 <xQueueGenericSendFromISR+0x3c>
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <xQueueGenericSendFromISR+0x40>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e000      	b.n	8009fea <xQueueGenericSendFromISR+0x42>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a000:	bf00      	nop
 800a002:	e7fe      	b.n	800a002 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b02      	cmp	r3, #2
 800a008:	d103      	bne.n	800a012 <xQueueGenericSendFromISR+0x6a>
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <xQueueGenericSendFromISR+0x6e>
 800a012:	2301      	movs	r3, #1
 800a014:	e000      	b.n	800a018 <xQueueGenericSendFromISR+0x70>
 800a016:	2300      	movs	r3, #0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	623b      	str	r3, [r7, #32]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a032:	f001 ff01 	bl	800be38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a036:	f3ef 8211 	mrs	r2, BASEPRI
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	61fa      	str	r2, [r7, #28]
 800a04c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a04e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d302      	bcc.n	800a064 <xQueueGenericSendFromISR+0xbc>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d12f      	bne.n	800a0c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a072:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	68b9      	ldr	r1, [r7, #8]
 800a078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a07a:	f000 f911 	bl	800a2a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a07e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a086:	d112      	bne.n	800a0ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d016      	beq.n	800a0be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	3324      	adds	r3, #36	; 0x24
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fed1 	bl	800ae3c <xTaskRemoveFromEventList>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00e      	beq.n	800a0be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	e007      	b.n	800a0be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	b25a      	sxtb	r2, r3
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a0c2:	e001      	b.n	800a0c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3740      	adds	r7, #64	; 0x40
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08c      	sub	sp, #48	; 0x30
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10a      	bne.n	800a110 <xQueueReceive+0x30>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	623b      	str	r3, [r7, #32]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d103      	bne.n	800a11e <xQueueReceive+0x3e>
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <xQueueReceive+0x42>
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <xQueueReceive+0x44>
 800a122:	2300      	movs	r3, #0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10a      	bne.n	800a13e <xQueueReceive+0x5e>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	61fb      	str	r3, [r7, #28]
}
 800a13a:	bf00      	nop
 800a13c:	e7fe      	b.n	800a13c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a13e:	f001 f83b 	bl	800b1b8 <xTaskGetSchedulerState>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <xQueueReceive+0x6e>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <xQueueReceive+0x72>
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <xQueueReceive+0x74>
 800a152:	2300      	movs	r3, #0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <xQueueReceive+0x8e>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	61bb      	str	r3, [r7, #24]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a16e:	f001 fd81 	bl	800bc74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01f      	beq.n	800a1be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a182:	f000 f8f7 	bl	800a374 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	1e5a      	subs	r2, r3, #1
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00f      	beq.n	800a1b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	3310      	adds	r3, #16
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 fe4e 	bl	800ae3c <xTaskRemoveFromEventList>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d007      	beq.n	800a1b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1a6:	4b3d      	ldr	r3, [pc, #244]	; (800a29c <xQueueReceive+0x1bc>)
 800a1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1b6:	f001 fd8d 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e069      	b.n	800a292 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1c4:	f001 fd86 	bl	800bcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e062      	b.n	800a292 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1d2:	f107 0310 	add.w	r3, r7, #16
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fe94 	bl	800af04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1e0:	f001 fd78 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1e4:	f000 fc06 	bl	800a9f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1e8:	f001 fd44 	bl	800bc74 <vPortEnterCritical>
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1f2:	b25b      	sxtb	r3, r3
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f8:	d103      	bne.n	800a202 <xQueueReceive+0x122>
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a208:	b25b      	sxtb	r3, r3
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	d103      	bne.n	800a218 <xQueueReceive+0x138>
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a218:	f001 fd5c 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a21c:	1d3a      	adds	r2, r7, #4
 800a21e:	f107 0310 	add.w	r3, r7, #16
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fe83 	bl	800af30 <xTaskCheckForTimeOut>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d123      	bne.n	800a278 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a232:	f000 f917 	bl	800a464 <prvIsQueueEmpty>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d017      	beq.n	800a26c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	3324      	adds	r3, #36	; 0x24
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fda9 	bl	800ad9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24c:	f000 f8b8 	bl	800a3c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a250:	f000 fbde 	bl	800aa10 <xTaskResumeAll>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d189      	bne.n	800a16e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a25a:	4b10      	ldr	r3, [pc, #64]	; (800a29c <xQueueReceive+0x1bc>)
 800a25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	e780      	b.n	800a16e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a26e:	f000 f8a7 	bl	800a3c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a272:	f000 fbcd 	bl	800aa10 <xTaskResumeAll>
 800a276:	e77a      	b.n	800a16e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a27a:	f000 f8a1 	bl	800a3c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a27e:	f000 fbc7 	bl	800aa10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a284:	f000 f8ee 	bl	800a464 <prvIsQueueEmpty>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f43f af6f 	beq.w	800a16e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a292:	4618      	mov	r0, r3
 800a294:	3730      	adds	r7, #48	; 0x30
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	e000ed04 	.word	0xe000ed04

0800a2a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10d      	bne.n	800a2da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d14d      	bne.n	800a362 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 ff92 	bl	800b1f4 <xTaskPriorityDisinherit>
 800a2d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	609a      	str	r2, [r3, #8]
 800a2d8:	e043      	b.n	800a362 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d119      	bne.n	800a314 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6858      	ldr	r0, [r3, #4]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	f002 fc72 	bl	800cbd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	441a      	add	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	429a      	cmp	r2, r3
 800a308:	d32b      	bcc.n	800a362 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	e026      	b.n	800a362 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	68d8      	ldr	r0, [r3, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	461a      	mov	r2, r3
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	f002 fc58 	bl	800cbd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	425b      	negs	r3, r3
 800a32e:	441a      	add	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d207      	bcs.n	800a350 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	425b      	negs	r3, r3
 800a34a:	441a      	add	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d105      	bne.n	800a362 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	3b01      	subs	r3, #1
 800a360:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a36a:	697b      	ldr	r3, [r7, #20]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	d018      	beq.n	800a3b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	441a      	add	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d303      	bcc.n	800a3a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68d9      	ldr	r1, [r3, #12]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6838      	ldr	r0, [r7, #0]
 800a3b4:	f002 fc0e 	bl	800cbd4 <memcpy>
	}
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3c8:	f001 fc54 	bl	800bc74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3d4:	e011      	b.n	800a3fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d012      	beq.n	800a404 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3324      	adds	r3, #36	; 0x24
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fd2a 	bl	800ae3c <xTaskRemoveFromEventList>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3ee:	f000 fe01 	bl	800aff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dce9      	bgt.n	800a3d6 <prvUnlockQueue+0x16>
 800a402:	e000      	b.n	800a406 <prvUnlockQueue+0x46>
					break;
 800a404:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	22ff      	movs	r2, #255	; 0xff
 800a40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a40e:	f001 fc61 	bl	800bcd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a412:	f001 fc2f 	bl	800bc74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a41c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a41e:	e011      	b.n	800a444 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d012      	beq.n	800a44e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3310      	adds	r3, #16
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fd05 	bl	800ae3c <xTaskRemoveFromEventList>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a438:	f000 fddc 	bl	800aff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	3b01      	subs	r3, #1
 800a440:	b2db      	uxtb	r3, r3
 800a442:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	dce9      	bgt.n	800a420 <prvUnlockQueue+0x60>
 800a44c:	e000      	b.n	800a450 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a44e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	22ff      	movs	r2, #255	; 0xff
 800a454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a458:	f001 fc3c 	bl	800bcd4 <vPortExitCritical>
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a46c:	f001 fc02 	bl	800bc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a478:	2301      	movs	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e001      	b.n	800a482 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a47e:	2300      	movs	r3, #0
 800a480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a482:	f001 fc27 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800a486:	68fb      	ldr	r3, [r7, #12]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a498:	f001 fbec 	bl	800bc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d102      	bne.n	800a4ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e001      	b.n	800a4b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4b2:	f001 fc0f 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	e014      	b.n	800a4fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4d0:	4a0f      	ldr	r2, [pc, #60]	; (800a510 <vQueueAddToRegistry+0x50>)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10b      	bne.n	800a4f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4dc:	490c      	ldr	r1, [pc, #48]	; (800a510 <vQueueAddToRegistry+0x50>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4e6:	4a0a      	ldr	r2, [pc, #40]	; (800a510 <vQueueAddToRegistry+0x50>)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4f2:	e006      	b.n	800a502 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b07      	cmp	r3, #7
 800a4fe:	d9e7      	bls.n	800a4d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	200058bc 	.word	0x200058bc

0800a514 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a524:	f001 fba6 	bl	800bc74 <vPortEnterCritical>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a52e:	b25b      	sxtb	r3, r3
 800a530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a534:	d103      	bne.n	800a53e <vQueueWaitForMessageRestricted+0x2a>
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a544:	b25b      	sxtb	r3, r3
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54a:	d103      	bne.n	800a554 <vQueueWaitForMessageRestricted+0x40>
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a554:	f001 fbbe 	bl	800bcd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d106      	bne.n	800a56e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	3324      	adds	r3, #36	; 0x24
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fc3b 	bl	800ade4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a56e:	6978      	ldr	r0, [r7, #20]
 800a570:	f7ff ff26 	bl	800a3c0 <prvUnlockQueue>
	}
 800a574:	bf00      	nop
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08e      	sub	sp, #56	; 0x38
 800a580:	af04      	add	r7, sp, #16
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	623b      	str	r3, [r7, #32]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61fb      	str	r3, [r7, #28]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5c2:	235c      	movs	r3, #92	; 0x5c
 800a5c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	2b5c      	cmp	r3, #92	; 0x5c
 800a5ca:	d00a      	beq.n	800a5e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	61bb      	str	r3, [r7, #24]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d01e      	beq.n	800a628 <xTaskCreateStatic+0xac>
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01b      	beq.n	800a628 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a602:	2300      	movs	r3, #0
 800a604:	9303      	str	r3, [sp, #12]
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	9302      	str	r3, [sp, #8]
 800a60a:	f107 0314 	add.w	r3, r7, #20
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	68b9      	ldr	r1, [r7, #8]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f850 	bl	800a6c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a622:	f000 f8dd 	bl	800a7e0 <prvAddNewTaskToReadyList>
 800a626:	e001      	b.n	800a62c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a62c:	697b      	ldr	r3, [r7, #20]
	}
 800a62e:	4618      	mov	r0, r3
 800a630:	3728      	adds	r7, #40	; 0x28
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a636:	b580      	push	{r7, lr}
 800a638:	b08c      	sub	sp, #48	; 0x30
 800a63a:	af04      	add	r7, sp, #16
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	60b9      	str	r1, [r7, #8]
 800a640:	603b      	str	r3, [r7, #0]
 800a642:	4613      	mov	r3, r2
 800a644:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f001 fc34 	bl	800beb8 <pvPortMalloc>
 800a650:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00e      	beq.n	800a676 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a658:	205c      	movs	r0, #92	; 0x5c
 800a65a:	f001 fc2d 	bl	800beb8 <pvPortMalloc>
 800a65e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	631a      	str	r2, [r3, #48]	; 0x30
 800a66c:	e005      	b.n	800a67a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a66e:	6978      	ldr	r0, [r7, #20]
 800a670:	f001 fcee 	bl	800c050 <vPortFree>
 800a674:	e001      	b.n	800a67a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a676:	2300      	movs	r3, #0
 800a678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d017      	beq.n	800a6b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a688:	88fa      	ldrh	r2, [r7, #6]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9303      	str	r3, [sp, #12]
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	9302      	str	r3, [sp, #8]
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 f80e 	bl	800a6c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6a4:	69f8      	ldr	r0, [r7, #28]
 800a6a6:	f000 f89b 	bl	800a7e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	e002      	b.n	800a6b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	21a5      	movs	r1, #165	; 0xa5
 800a6da:	f002 fa89 	bl	800cbf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	f023 0307 	bic.w	r3, r3, #7
 800a6f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	617b      	str	r3, [r7, #20]
}
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d01f      	beq.n	800a75e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a71e:	2300      	movs	r3, #0
 800a720:	61fb      	str	r3, [r7, #28]
 800a722:	e012      	b.n	800a74a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	4413      	add	r3, r2
 800a72a:	7819      	ldrb	r1, [r3, #0]
 800a72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	4413      	add	r3, r2
 800a732:	3334      	adds	r3, #52	; 0x34
 800a734:	460a      	mov	r2, r1
 800a736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	4413      	add	r3, r2
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d006      	beq.n	800a752 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	3301      	adds	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	2b0f      	cmp	r3, #15
 800a74e:	d9e9      	bls.n	800a724 <prvInitialiseNewTask+0x64>
 800a750:	e000      	b.n	800a754 <prvInitialiseNewTask+0x94>
			{
				break;
 800a752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a75c:	e003      	b.n	800a766 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	2b37      	cmp	r3, #55	; 0x37
 800a76a:	d901      	bls.n	800a770 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a76c:	2337      	movs	r3, #55	; 0x37
 800a76e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a77a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	2200      	movs	r2, #0
 800a780:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	3304      	adds	r3, #4
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff f978 	bl	8009a7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	3318      	adds	r3, #24
 800a790:	4618      	mov	r0, r3
 800a792:	f7ff f973 	bl	8009a7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a79a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	69b8      	ldr	r0, [r7, #24]
 800a7c0:	f001 f928 	bl	800ba14 <pxPortInitialiseStack>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7d6:	bf00      	nop
 800a7d8:	3720      	adds	r7, #32
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7e8:	f001 fa44 	bl	800bc74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7ec:	4b2d      	ldr	r3, [pc, #180]	; (800a8a4 <prvAddNewTaskToReadyList+0xc4>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	4a2c      	ldr	r2, [pc, #176]	; (800a8a4 <prvAddNewTaskToReadyList+0xc4>)
 800a7f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7f6:	4b2c      	ldr	r3, [pc, #176]	; (800a8a8 <prvAddNewTaskToReadyList+0xc8>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7fe:	4a2a      	ldr	r2, [pc, #168]	; (800a8a8 <prvAddNewTaskToReadyList+0xc8>)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a804:	4b27      	ldr	r3, [pc, #156]	; (800a8a4 <prvAddNewTaskToReadyList+0xc4>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d110      	bne.n	800a82e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a80c:	f000 fc16 	bl	800b03c <prvInitialiseTaskLists>
 800a810:	e00d      	b.n	800a82e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a812:	4b26      	ldr	r3, [pc, #152]	; (800a8ac <prvAddNewTaskToReadyList+0xcc>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a81a:	4b23      	ldr	r3, [pc, #140]	; (800a8a8 <prvAddNewTaskToReadyList+0xc8>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	429a      	cmp	r2, r3
 800a826:	d802      	bhi.n	800a82e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a828:	4a1f      	ldr	r2, [pc, #124]	; (800a8a8 <prvAddNewTaskToReadyList+0xc8>)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a82e:	4b20      	ldr	r3, [pc, #128]	; (800a8b0 <prvAddNewTaskToReadyList+0xd0>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3301      	adds	r3, #1
 800a834:	4a1e      	ldr	r2, [pc, #120]	; (800a8b0 <prvAddNewTaskToReadyList+0xd0>)
 800a836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a838:	4b1d      	ldr	r3, [pc, #116]	; (800a8b0 <prvAddNewTaskToReadyList+0xd0>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a844:	4b1b      	ldr	r3, [pc, #108]	; (800a8b4 <prvAddNewTaskToReadyList+0xd4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d903      	bls.n	800a854 <prvAddNewTaskToReadyList+0x74>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	4a18      	ldr	r2, [pc, #96]	; (800a8b4 <prvAddNewTaskToReadyList+0xd4>)
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4a15      	ldr	r2, [pc, #84]	; (800a8b8 <prvAddNewTaskToReadyList+0xd8>)
 800a862:	441a      	add	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3304      	adds	r3, #4
 800a868:	4619      	mov	r1, r3
 800a86a:	4610      	mov	r0, r2
 800a86c:	f7ff f913 	bl	8009a96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a870:	f001 fa30 	bl	800bcd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a874:	4b0d      	ldr	r3, [pc, #52]	; (800a8ac <prvAddNewTaskToReadyList+0xcc>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00e      	beq.n	800a89a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a87c:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <prvAddNewTaskToReadyList+0xc8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	429a      	cmp	r2, r3
 800a888:	d207      	bcs.n	800a89a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a88a:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <prvAddNewTaskToReadyList+0xdc>)
 800a88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	2000137c 	.word	0x2000137c
 800a8a8:	20000ea8 	.word	0x20000ea8
 800a8ac:	20001388 	.word	0x20001388
 800a8b0:	20001398 	.word	0x20001398
 800a8b4:	20001384 	.word	0x20001384
 800a8b8:	20000eac 	.word	0x20000eac
 800a8bc:	e000ed04 	.word	0xe000ed04

0800a8c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d017      	beq.n	800a902 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8d2:	4b13      	ldr	r3, [pc, #76]	; (800a920 <vTaskDelay+0x60>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <vTaskDelay+0x30>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	60bb      	str	r3, [r7, #8]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8f0:	f000 f880 	bl	800a9f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fcea 	bl	800b2d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8fc:	f000 f888 	bl	800aa10 <xTaskResumeAll>
 800a900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d107      	bne.n	800a918 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a908:	4b06      	ldr	r3, [pc, #24]	; (800a924 <vTaskDelay+0x64>)
 800a90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a918:	bf00      	nop
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	200013a4 	.word	0x200013a4
 800a924:	e000ed04 	.word	0xe000ed04

0800a928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08a      	sub	sp, #40	; 0x28
 800a92c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a932:	2300      	movs	r3, #0
 800a934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a936:	463a      	mov	r2, r7
 800a938:	1d39      	adds	r1, r7, #4
 800a93a:	f107 0308 	add.w	r3, r7, #8
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff f848 	bl	80099d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	9202      	str	r2, [sp, #8]
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	2300      	movs	r3, #0
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	2300      	movs	r3, #0
 800a954:	460a      	mov	r2, r1
 800a956:	4921      	ldr	r1, [pc, #132]	; (800a9dc <vTaskStartScheduler+0xb4>)
 800a958:	4821      	ldr	r0, [pc, #132]	; (800a9e0 <vTaskStartScheduler+0xb8>)
 800a95a:	f7ff fe0f 	bl	800a57c <xTaskCreateStatic>
 800a95e:	4603      	mov	r3, r0
 800a960:	4a20      	ldr	r2, [pc, #128]	; (800a9e4 <vTaskStartScheduler+0xbc>)
 800a962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a964:	4b1f      	ldr	r3, [pc, #124]	; (800a9e4 <vTaskStartScheduler+0xbc>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a96c:	2301      	movs	r3, #1
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e001      	b.n	800a976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d102      	bne.n	800a982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a97c:	f000 fcfc 	bl	800b378 <xTimerCreateTimerTask>
 800a980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d116      	bne.n	800a9b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	613b      	str	r3, [r7, #16]
}
 800a99a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a99c:	4b12      	ldr	r3, [pc, #72]	; (800a9e8 <vTaskStartScheduler+0xc0>)
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9a4:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <vTaskStartScheduler+0xc4>)
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9aa:	4b11      	ldr	r3, [pc, #68]	; (800a9f0 <vTaskStartScheduler+0xc8>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9b0:	f001 f8be 	bl	800bb30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9b4:	e00e      	b.n	800a9d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d10a      	bne.n	800a9d4 <vTaskStartScheduler+0xac>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	60fb      	str	r3, [r7, #12]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <vTaskStartScheduler+0xaa>
}
 800a9d4:	bf00      	nop
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	08012020 	.word	0x08012020
 800a9e0:	0800b00d 	.word	0x0800b00d
 800a9e4:	200013a0 	.word	0x200013a0
 800a9e8:	2000139c 	.word	0x2000139c
 800a9ec:	20001388 	.word	0x20001388
 800a9f0:	20001380 	.word	0x20001380

0800a9f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9f8:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <vTaskSuspendAll+0x18>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	4a03      	ldr	r2, [pc, #12]	; (800aa0c <vTaskSuspendAll+0x18>)
 800aa00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa02:	bf00      	nop
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	200013a4 	.word	0x200013a4

0800aa10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa16:	2300      	movs	r3, #0
 800aa18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa1e:	4b42      	ldr	r3, [pc, #264]	; (800ab28 <xTaskResumeAll+0x118>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10a      	bne.n	800aa3c <xTaskResumeAll+0x2c>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	603b      	str	r3, [r7, #0]
}
 800aa38:	bf00      	nop
 800aa3a:	e7fe      	b.n	800aa3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa3c:	f001 f91a 	bl	800bc74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa40:	4b39      	ldr	r3, [pc, #228]	; (800ab28 <xTaskResumeAll+0x118>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	4a38      	ldr	r2, [pc, #224]	; (800ab28 <xTaskResumeAll+0x118>)
 800aa48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa4a:	4b37      	ldr	r3, [pc, #220]	; (800ab28 <xTaskResumeAll+0x118>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d162      	bne.n	800ab18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa52:	4b36      	ldr	r3, [pc, #216]	; (800ab2c <xTaskResumeAll+0x11c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d05e      	beq.n	800ab18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa5a:	e02f      	b.n	800aabc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5c:	4b34      	ldr	r3, [pc, #208]	; (800ab30 <xTaskResumeAll+0x120>)
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3318      	adds	r3, #24
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7ff f871 	bl	8009b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3304      	adds	r3, #4
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff f86c 	bl	8009b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7c:	4b2d      	ldr	r3, [pc, #180]	; (800ab34 <xTaskResumeAll+0x124>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d903      	bls.n	800aa8c <xTaskResumeAll+0x7c>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa88:	4a2a      	ldr	r2, [pc, #168]	; (800ab34 <xTaskResumeAll+0x124>)
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	4613      	mov	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4a27      	ldr	r2, [pc, #156]	; (800ab38 <xTaskResumeAll+0x128>)
 800aa9a:	441a      	add	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	f7fe fff7 	bl	8009a96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaac:	4b23      	ldr	r3, [pc, #140]	; (800ab3c <xTaskResumeAll+0x12c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d302      	bcc.n	800aabc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aab6:	4b22      	ldr	r3, [pc, #136]	; (800ab40 <xTaskResumeAll+0x130>)
 800aab8:	2201      	movs	r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aabc:	4b1c      	ldr	r3, [pc, #112]	; (800ab30 <xTaskResumeAll+0x120>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1cb      	bne.n	800aa5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aaca:	f000 fb55 	bl	800b178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aace:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <xTaskResumeAll+0x134>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d010      	beq.n	800aafc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aada:	f000 f847 	bl	800ab6c <xTaskIncrementTick>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aae4:	4b16      	ldr	r3, [pc, #88]	; (800ab40 <xTaskResumeAll+0x130>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1f1      	bne.n	800aada <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aaf6:	4b13      	ldr	r3, [pc, #76]	; (800ab44 <xTaskResumeAll+0x134>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aafc:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <xTaskResumeAll+0x130>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d009      	beq.n	800ab18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab04:	2301      	movs	r3, #1
 800ab06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab08:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <xTaskResumeAll+0x138>)
 800ab0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab18:	f001 f8dc 	bl	800bcd4 <vPortExitCritical>

	return xAlreadyYielded;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	200013a4 	.word	0x200013a4
 800ab2c:	2000137c 	.word	0x2000137c
 800ab30:	2000133c 	.word	0x2000133c
 800ab34:	20001384 	.word	0x20001384
 800ab38:	20000eac 	.word	0x20000eac
 800ab3c:	20000ea8 	.word	0x20000ea8
 800ab40:	20001390 	.word	0x20001390
 800ab44:	2000138c 	.word	0x2000138c
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab52:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <xTaskGetTickCount+0x1c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab58:	687b      	ldr	r3, [r7, #4]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	20001380 	.word	0x20001380

0800ab6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab72:	2300      	movs	r3, #0
 800ab74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab76:	4b4f      	ldr	r3, [pc, #316]	; (800acb4 <xTaskIncrementTick+0x148>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f040 808f 	bne.w	800ac9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab80:	4b4d      	ldr	r3, [pc, #308]	; (800acb8 <xTaskIncrementTick+0x14c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3301      	adds	r3, #1
 800ab86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab88:	4a4b      	ldr	r2, [pc, #300]	; (800acb8 <xTaskIncrementTick+0x14c>)
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d120      	bne.n	800abd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab94:	4b49      	ldr	r3, [pc, #292]	; (800acbc <xTaskIncrementTick+0x150>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00a      	beq.n	800abb4 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	603b      	str	r3, [r7, #0]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <xTaskIncrementTick+0x46>
 800abb4:	4b41      	ldr	r3, [pc, #260]	; (800acbc <xTaskIncrementTick+0x150>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	4b41      	ldr	r3, [pc, #260]	; (800acc0 <xTaskIncrementTick+0x154>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a3f      	ldr	r2, [pc, #252]	; (800acbc <xTaskIncrementTick+0x150>)
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	4a3f      	ldr	r2, [pc, #252]	; (800acc0 <xTaskIncrementTick+0x154>)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	4b3e      	ldr	r3, [pc, #248]	; (800acc4 <xTaskIncrementTick+0x158>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3301      	adds	r3, #1
 800abce:	4a3d      	ldr	r2, [pc, #244]	; (800acc4 <xTaskIncrementTick+0x158>)
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	f000 fad1 	bl	800b178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abd6:	4b3c      	ldr	r3, [pc, #240]	; (800acc8 <xTaskIncrementTick+0x15c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d349      	bcc.n	800ac74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abe0:	4b36      	ldr	r3, [pc, #216]	; (800acbc <xTaskIncrementTick+0x150>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d104      	bne.n	800abf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abea:	4b37      	ldr	r3, [pc, #220]	; (800acc8 <xTaskIncrementTick+0x15c>)
 800abec:	f04f 32ff 	mov.w	r2, #4294967295
 800abf0:	601a      	str	r2, [r3, #0]
					break;
 800abf2:	e03f      	b.n	800ac74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abf4:	4b31      	ldr	r3, [pc, #196]	; (800acbc <xTaskIncrementTick+0x150>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d203      	bcs.n	800ac14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac0c:	4a2e      	ldr	r2, [pc, #184]	; (800acc8 <xTaskIncrementTick+0x15c>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac12:	e02f      	b.n	800ac74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	3304      	adds	r3, #4
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe ff99 	bl	8009b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d004      	beq.n	800ac30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	3318      	adds	r3, #24
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe ff90 	bl	8009b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac34:	4b25      	ldr	r3, [pc, #148]	; (800accc <xTaskIncrementTick+0x160>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d903      	bls.n	800ac44 <xTaskIncrementTick+0xd8>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac40:	4a22      	ldr	r2, [pc, #136]	; (800accc <xTaskIncrementTick+0x160>)
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4a1f      	ldr	r2, [pc, #124]	; (800acd0 <xTaskIncrementTick+0x164>)
 800ac52:	441a      	add	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4610      	mov	r0, r2
 800ac5c:	f7fe ff1b 	bl	8009a96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac64:	4b1b      	ldr	r3, [pc, #108]	; (800acd4 <xTaskIncrementTick+0x168>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d3b8      	bcc.n	800abe0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac72:	e7b5      	b.n	800abe0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac74:	4b17      	ldr	r3, [pc, #92]	; (800acd4 <xTaskIncrementTick+0x168>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	4915      	ldr	r1, [pc, #84]	; (800acd0 <xTaskIncrementTick+0x164>)
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	440b      	add	r3, r1
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d901      	bls.n	800ac90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <xTaskIncrementTick+0x16c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d007      	beq.n	800aca8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	e004      	b.n	800aca8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac9e:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <xTaskIncrementTick+0x170>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	3301      	adds	r3, #1
 800aca4:	4a0d      	ldr	r2, [pc, #52]	; (800acdc <xTaskIncrementTick+0x170>)
 800aca6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aca8:	697b      	ldr	r3, [r7, #20]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3718      	adds	r7, #24
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200013a4 	.word	0x200013a4
 800acb8:	20001380 	.word	0x20001380
 800acbc:	20001334 	.word	0x20001334
 800acc0:	20001338 	.word	0x20001338
 800acc4:	20001394 	.word	0x20001394
 800acc8:	2000139c 	.word	0x2000139c
 800accc:	20001384 	.word	0x20001384
 800acd0:	20000eac 	.word	0x20000eac
 800acd4:	20000ea8 	.word	0x20000ea8
 800acd8:	20001390 	.word	0x20001390
 800acdc:	2000138c 	.word	0x2000138c

0800ace0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ace6:	4b28      	ldr	r3, [pc, #160]	; (800ad88 <vTaskSwitchContext+0xa8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acee:	4b27      	ldr	r3, [pc, #156]	; (800ad8c <vTaskSwitchContext+0xac>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acf4:	e041      	b.n	800ad7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800acf6:	4b25      	ldr	r3, [pc, #148]	; (800ad8c <vTaskSwitchContext+0xac>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acfc:	4b24      	ldr	r3, [pc, #144]	; (800ad90 <vTaskSwitchContext+0xb0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	60fb      	str	r3, [r7, #12]
 800ad02:	e010      	b.n	800ad26 <vTaskSwitchContext+0x46>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	607b      	str	r3, [r7, #4]
}
 800ad1c:	bf00      	nop
 800ad1e:	e7fe      	b.n	800ad1e <vTaskSwitchContext+0x3e>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	491b      	ldr	r1, [pc, #108]	; (800ad94 <vTaskSwitchContext+0xb4>)
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	440b      	add	r3, r1
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0e4      	beq.n	800ad04 <vTaskSwitchContext+0x24>
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4a13      	ldr	r2, [pc, #76]	; (800ad94 <vTaskSwitchContext+0xb4>)
 800ad46:	4413      	add	r3, r2
 800ad48:	60bb      	str	r3, [r7, #8]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	605a      	str	r2, [r3, #4]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d104      	bne.n	800ad6a <vTaskSwitchContext+0x8a>
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	4a09      	ldr	r2, [pc, #36]	; (800ad98 <vTaskSwitchContext+0xb8>)
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	4a06      	ldr	r2, [pc, #24]	; (800ad90 <vTaskSwitchContext+0xb0>)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6013      	str	r3, [r2, #0]
}
 800ad7a:	bf00      	nop
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	200013a4 	.word	0x200013a4
 800ad8c:	20001390 	.word	0x20001390
 800ad90:	20001384 	.word	0x20001384
 800ad94:	20000eac 	.word	0x20000eac
 800ad98:	20000ea8 	.word	0x20000ea8

0800ad9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	60fb      	str	r3, [r7, #12]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <vTaskPlaceOnEventList+0x44>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3318      	adds	r3, #24
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7fe fe87 	bl	8009ade <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800add0:	2101      	movs	r1, #1
 800add2:	6838      	ldr	r0, [r7, #0]
 800add4:	f000 fa7c 	bl	800b2d0 <prvAddCurrentTaskToDelayedList>
}
 800add8:	bf00      	nop
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	20000ea8 	.word	0x20000ea8

0800ade4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	617b      	str	r3, [r7, #20]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3318      	adds	r3, #24
 800ae12:	4619      	mov	r1, r3
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7fe fe3e 	bl	8009a96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae20:	f04f 33ff 	mov.w	r3, #4294967295
 800ae24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	68b8      	ldr	r0, [r7, #8]
 800ae2a:	f000 fa51 	bl	800b2d0 <prvAddCurrentTaskToDelayedList>
	}
 800ae2e:	bf00      	nop
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20000ea8 	.word	0x20000ea8

0800ae3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	60fb      	str	r3, [r7, #12]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	3318      	adds	r3, #24
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fe6f 	bl	8009b50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae72:	4b1e      	ldr	r3, [pc, #120]	; (800aeec <xTaskRemoveFromEventList+0xb0>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d11d      	bne.n	800aeb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fe66 	bl	8009b50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae88:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <xTaskRemoveFromEventList+0xb4>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d903      	bls.n	800ae98 <xTaskRemoveFromEventList+0x5c>
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	4a16      	ldr	r2, [pc, #88]	; (800aef0 <xTaskRemoveFromEventList+0xb4>)
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4a13      	ldr	r2, [pc, #76]	; (800aef4 <xTaskRemoveFromEventList+0xb8>)
 800aea6:	441a      	add	r2, r3
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	f7fe fdf1 	bl	8009a96 <vListInsertEnd>
 800aeb4:	e005      	b.n	800aec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	3318      	adds	r3, #24
 800aeba:	4619      	mov	r1, r3
 800aebc:	480e      	ldr	r0, [pc, #56]	; (800aef8 <xTaskRemoveFromEventList+0xbc>)
 800aebe:	f7fe fdea 	bl	8009a96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <xTaskRemoveFromEventList+0xc0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aecc:	429a      	cmp	r2, r3
 800aece:	d905      	bls.n	800aedc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aed0:	2301      	movs	r3, #1
 800aed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <xTaskRemoveFromEventList+0xc4>)
 800aed6:	2201      	movs	r2, #1
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	e001      	b.n	800aee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aedc:	2300      	movs	r3, #0
 800aede:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aee0:	697b      	ldr	r3, [r7, #20]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	200013a4 	.word	0x200013a4
 800aef0:	20001384 	.word	0x20001384
 800aef4:	20000eac 	.word	0x20000eac
 800aef8:	2000133c 	.word	0x2000133c
 800aefc:	20000ea8 	.word	0x20000ea8
 800af00:	20001390 	.word	0x20001390

0800af04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <vTaskInternalSetTimeOutState+0x24>)
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <vTaskInternalSetTimeOutState+0x28>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	605a      	str	r2, [r3, #4]
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	20001394 	.word	0x20001394
 800af2c:	20001380 	.word	0x20001380

0800af30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10a      	bne.n	800af56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	613b      	str	r3, [r7, #16]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10a      	bne.n	800af72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	60fb      	str	r3, [r7, #12]
}
 800af6e:	bf00      	nop
 800af70:	e7fe      	b.n	800af70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800af72:	f000 fe7f 	bl	800bc74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af76:	4b1d      	ldr	r3, [pc, #116]	; (800afec <xTaskCheckForTimeOut+0xbc>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d102      	bne.n	800af96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	e023      	b.n	800afde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <xTaskCheckForTimeOut+0xc0>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d007      	beq.n	800afb2 <xTaskCheckForTimeOut+0x82>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d302      	bcc.n	800afb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e015      	b.n	800afde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d20b      	bcs.n	800afd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	1ad2      	subs	r2, r2, r3
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff ff9b 	bl	800af04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
 800afd2:	e004      	b.n	800afde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800afda:	2301      	movs	r3, #1
 800afdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800afde:	f000 fe79 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800afe2:	69fb      	ldr	r3, [r7, #28]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3720      	adds	r7, #32
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20001380 	.word	0x20001380
 800aff0:	20001394 	.word	0x20001394

0800aff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aff8:	4b03      	ldr	r3, [pc, #12]	; (800b008 <vTaskMissedYield+0x14>)
 800affa:	2201      	movs	r2, #1
 800affc:	601a      	str	r2, [r3, #0]
}
 800affe:	bf00      	nop
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	20001390 	.word	0x20001390

0800b00c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b014:	f000 f852 	bl	800b0bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b018:	4b06      	ldr	r3, [pc, #24]	; (800b034 <prvIdleTask+0x28>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d9f9      	bls.n	800b014 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <prvIdleTask+0x2c>)
 800b022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b030:	e7f0      	b.n	800b014 <prvIdleTask+0x8>
 800b032:	bf00      	nop
 800b034:	20000eac 	.word	0x20000eac
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b042:	2300      	movs	r3, #0
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	e00c      	b.n	800b062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	4613      	mov	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4a12      	ldr	r2, [pc, #72]	; (800b09c <prvInitialiseTaskLists+0x60>)
 800b054:	4413      	add	r3, r2
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fcf0 	bl	8009a3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3301      	adds	r3, #1
 800b060:	607b      	str	r3, [r7, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b37      	cmp	r3, #55	; 0x37
 800b066:	d9ef      	bls.n	800b048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b068:	480d      	ldr	r0, [pc, #52]	; (800b0a0 <prvInitialiseTaskLists+0x64>)
 800b06a:	f7fe fce7 	bl	8009a3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b06e:	480d      	ldr	r0, [pc, #52]	; (800b0a4 <prvInitialiseTaskLists+0x68>)
 800b070:	f7fe fce4 	bl	8009a3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b074:	480c      	ldr	r0, [pc, #48]	; (800b0a8 <prvInitialiseTaskLists+0x6c>)
 800b076:	f7fe fce1 	bl	8009a3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b07a:	480c      	ldr	r0, [pc, #48]	; (800b0ac <prvInitialiseTaskLists+0x70>)
 800b07c:	f7fe fcde 	bl	8009a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b080:	480b      	ldr	r0, [pc, #44]	; (800b0b0 <prvInitialiseTaskLists+0x74>)
 800b082:	f7fe fcdb 	bl	8009a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b086:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <prvInitialiseTaskLists+0x78>)
 800b088:	4a05      	ldr	r2, [pc, #20]	; (800b0a0 <prvInitialiseTaskLists+0x64>)
 800b08a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <prvInitialiseTaskLists+0x7c>)
 800b08e:	4a05      	ldr	r2, [pc, #20]	; (800b0a4 <prvInitialiseTaskLists+0x68>)
 800b090:	601a      	str	r2, [r3, #0]
}
 800b092:	bf00      	nop
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000eac 	.word	0x20000eac
 800b0a0:	2000130c 	.word	0x2000130c
 800b0a4:	20001320 	.word	0x20001320
 800b0a8:	2000133c 	.word	0x2000133c
 800b0ac:	20001350 	.word	0x20001350
 800b0b0:	20001368 	.word	0x20001368
 800b0b4:	20001334 	.word	0x20001334
 800b0b8:	20001338 	.word	0x20001338

0800b0bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0c2:	e019      	b.n	800b0f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0c4:	f000 fdd6 	bl	800bc74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c8:	4b10      	ldr	r3, [pc, #64]	; (800b10c <prvCheckTasksWaitingTermination+0x50>)
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe fd3b 	bl	8009b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b0da:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <prvCheckTasksWaitingTermination+0x54>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4a0b      	ldr	r2, [pc, #44]	; (800b110 <prvCheckTasksWaitingTermination+0x54>)
 800b0e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b0e4:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <prvCheckTasksWaitingTermination+0x58>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	4a0a      	ldr	r2, [pc, #40]	; (800b114 <prvCheckTasksWaitingTermination+0x58>)
 800b0ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b0ee:	f000 fdf1 	bl	800bcd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f810 	bl	800b118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0f8:	4b06      	ldr	r3, [pc, #24]	; (800b114 <prvCheckTasksWaitingTermination+0x58>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e1      	bne.n	800b0c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b100:	bf00      	nop
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20001350 	.word	0x20001350
 800b110:	2000137c 	.word	0x2000137c
 800b114:	20001364 	.word	0x20001364

0800b118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b126:	2b00      	cmp	r3, #0
 800b128:	d108      	bne.n	800b13c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 ff8e 	bl	800c050 <vPortFree>
				vPortFree( pxTCB );
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 ff8b 	bl	800c050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b13a:	e018      	b.n	800b16e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b142:	2b01      	cmp	r3, #1
 800b144:	d103      	bne.n	800b14e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 ff82 	bl	800c050 <vPortFree>
	}
 800b14c:	e00f      	b.n	800b16e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b154:	2b02      	cmp	r3, #2
 800b156:	d00a      	beq.n	800b16e <prvDeleteTCB+0x56>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	60fb      	str	r3, [r7, #12]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <prvDeleteTCB+0x54>
	}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
	...

0800b178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b17e:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <prvResetNextTaskUnblockTime+0x38>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b188:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b18a:	f04f 32ff 	mov.w	r2, #4294967295
 800b18e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b190:	e008      	b.n	800b1a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b192:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <prvResetNextTaskUnblockTime+0x38>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	4a04      	ldr	r2, [pc, #16]	; (800b1b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b1a2:	6013      	str	r3, [r2, #0]
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	20001334 	.word	0x20001334
 800b1b4:	2000139c 	.word	0x2000139c

0800b1b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1be:	4b0b      	ldr	r3, [pc, #44]	; (800b1ec <xTaskGetSchedulerState+0x34>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d102      	bne.n	800b1cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	607b      	str	r3, [r7, #4]
 800b1ca:	e008      	b.n	800b1de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1cc:	4b08      	ldr	r3, [pc, #32]	; (800b1f0 <xTaskGetSchedulerState+0x38>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	607b      	str	r3, [r7, #4]
 800b1d8:	e001      	b.n	800b1de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b1de:	687b      	ldr	r3, [r7, #4]
	}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	20001388 	.word	0x20001388
 800b1f0:	200013a4 	.word	0x200013a4

0800b1f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d056      	beq.n	800b2b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b20a:	4b2e      	ldr	r3, [pc, #184]	; (800b2c4 <xTaskPriorityDisinherit+0xd0>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	429a      	cmp	r2, r3
 800b212:	d00a      	beq.n	800b22a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	60fb      	str	r3, [r7, #12]
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	60bb      	str	r3, [r7, #8]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b24c:	1e5a      	subs	r2, r3, #1
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d02c      	beq.n	800b2b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b262:	2b00      	cmp	r3, #0
 800b264:	d128      	bne.n	800b2b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	3304      	adds	r3, #4
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fc70 	bl	8009b50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b288:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <xTaskPriorityDisinherit+0xd4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d903      	bls.n	800b298 <xTaskPriorityDisinherit+0xa4>
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	4a0c      	ldr	r2, [pc, #48]	; (800b2c8 <xTaskPriorityDisinherit+0xd4>)
 800b296:	6013      	str	r3, [r2, #0]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29c:	4613      	mov	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4a09      	ldr	r2, [pc, #36]	; (800b2cc <xTaskPriorityDisinherit+0xd8>)
 800b2a6:	441a      	add	r2, r3
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f7fe fbf1 	bl	8009a96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2b8:	697b      	ldr	r3, [r7, #20]
	}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20000ea8 	.word	0x20000ea8
 800b2c8:	20001384 	.word	0x20001384
 800b2cc:	20000eac 	.word	0x20000eac

0800b2d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2da:	4b21      	ldr	r3, [pc, #132]	; (800b360 <prvAddCurrentTaskToDelayedList+0x90>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2e0:	4b20      	ldr	r3, [pc, #128]	; (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe fc32 	bl	8009b50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f2:	d10a      	bne.n	800b30a <prvAddCurrentTaskToDelayedList+0x3a>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2fa:	4b1a      	ldr	r3, [pc, #104]	; (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3304      	adds	r3, #4
 800b300:	4619      	mov	r1, r3
 800b302:	4819      	ldr	r0, [pc, #100]	; (800b368 <prvAddCurrentTaskToDelayedList+0x98>)
 800b304:	f7fe fbc7 	bl	8009a96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b308:	e026      	b.n	800b358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4413      	add	r3, r2
 800b310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b312:	4b14      	ldr	r3, [pc, #80]	; (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d209      	bcs.n	800b336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b322:	4b12      	ldr	r3, [pc, #72]	; (800b36c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	4b0f      	ldr	r3, [pc, #60]	; (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f7fe fbd5 	bl	8009ade <vListInsert>
}
 800b334:	e010      	b.n	800b358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b336:	4b0e      	ldr	r3, [pc, #56]	; (800b370 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3304      	adds	r3, #4
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f7fe fbcb 	bl	8009ade <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b348:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d202      	bcs.n	800b358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b352:	4a08      	ldr	r2, [pc, #32]	; (800b374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	6013      	str	r3, [r2, #0]
}
 800b358:	bf00      	nop
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20001380 	.word	0x20001380
 800b364:	20000ea8 	.word	0x20000ea8
 800b368:	20001368 	.word	0x20001368
 800b36c:	20001338 	.word	0x20001338
 800b370:	20001334 	.word	0x20001334
 800b374:	2000139c 	.word	0x2000139c

0800b378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	; 0x28
 800b37c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b382:	f000 fb07 	bl	800b994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b386:	4b1c      	ldr	r3, [pc, #112]	; (800b3f8 <xTimerCreateTimerTask+0x80>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d021      	beq.n	800b3d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b396:	1d3a      	adds	r2, r7, #4
 800b398:	f107 0108 	add.w	r1, r7, #8
 800b39c:	f107 030c 	add.w	r3, r7, #12
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe fb31 	bl	8009a08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	9202      	str	r2, [sp, #8]
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	460a      	mov	r2, r1
 800b3b8:	4910      	ldr	r1, [pc, #64]	; (800b3fc <xTimerCreateTimerTask+0x84>)
 800b3ba:	4811      	ldr	r0, [pc, #68]	; (800b400 <xTimerCreateTimerTask+0x88>)
 800b3bc:	f7ff f8de 	bl	800a57c <xTaskCreateStatic>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	4a10      	ldr	r2, [pc, #64]	; (800b404 <xTimerCreateTimerTask+0x8c>)
 800b3c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3c6:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <xTimerCreateTimerTask+0x8c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10a      	bne.n	800b3ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	613b      	str	r3, [r7, #16]
}
 800b3ea:	bf00      	nop
 800b3ec:	e7fe      	b.n	800b3ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b3ee:	697b      	ldr	r3, [r7, #20]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	200013d8 	.word	0x200013d8
 800b3fc:	08012028 	.word	0x08012028
 800b400:	0800b53d 	.word	0x0800b53d
 800b404:	200013dc 	.word	0x200013dc

0800b408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08a      	sub	sp, #40	; 0x28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
 800b414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b416:	2300      	movs	r3, #0
 800b418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10a      	bne.n	800b436 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	623b      	str	r3, [r7, #32]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b436:	4b1a      	ldr	r3, [pc, #104]	; (800b4a0 <xTimerGenericCommand+0x98>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d02a      	beq.n	800b494 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b05      	cmp	r3, #5
 800b44e:	dc18      	bgt.n	800b482 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b450:	f7ff feb2 	bl	800b1b8 <xTaskGetSchedulerState>
 800b454:	4603      	mov	r3, r0
 800b456:	2b02      	cmp	r3, #2
 800b458:	d109      	bne.n	800b46e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b45a:	4b11      	ldr	r3, [pc, #68]	; (800b4a0 <xTimerGenericCommand+0x98>)
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f107 0110 	add.w	r1, r7, #16
 800b462:	2300      	movs	r3, #0
 800b464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b466:	f7fe fca1 	bl	8009dac <xQueueGenericSend>
 800b46a:	6278      	str	r0, [r7, #36]	; 0x24
 800b46c:	e012      	b.n	800b494 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b46e:	4b0c      	ldr	r3, [pc, #48]	; (800b4a0 <xTimerGenericCommand+0x98>)
 800b470:	6818      	ldr	r0, [r3, #0]
 800b472:	f107 0110 	add.w	r1, r7, #16
 800b476:	2300      	movs	r3, #0
 800b478:	2200      	movs	r2, #0
 800b47a:	f7fe fc97 	bl	8009dac <xQueueGenericSend>
 800b47e:	6278      	str	r0, [r7, #36]	; 0x24
 800b480:	e008      	b.n	800b494 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b482:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <xTimerGenericCommand+0x98>)
 800b484:	6818      	ldr	r0, [r3, #0]
 800b486:	f107 0110 	add.w	r1, r7, #16
 800b48a:	2300      	movs	r3, #0
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	f7fe fd8b 	bl	8009fa8 <xQueueGenericSendFromISR>
 800b492:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b496:	4618      	mov	r0, r3
 800b498:	3728      	adds	r7, #40	; 0x28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	200013d8 	.word	0x200013d8

0800b4a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ae:	4b22      	ldr	r3, [pc, #136]	; (800b538 <prvProcessExpiredTimer+0x94>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fe fb47 	bl	8009b50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d022      	beq.n	800b516 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	699a      	ldr	r2, [r3, #24]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	18d1      	adds	r1, r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	6978      	ldr	r0, [r7, #20]
 800b4de:	f000 f8d1 	bl	800b684 <prvInsertTimerInActiveList>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01f      	beq.n	800b528 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	6978      	ldr	r0, [r7, #20]
 800b4f4:	f7ff ff88 	bl	800b408 <xTimerGenericCommand>
 800b4f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d113      	bne.n	800b528 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b51c:	f023 0301 	bic.w	r3, r3, #1
 800b520:	b2da      	uxtb	r2, r3
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	6978      	ldr	r0, [r7, #20]
 800b52e:	4798      	blx	r3
}
 800b530:	bf00      	nop
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	200013d0 	.word	0x200013d0

0800b53c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b544:	f107 0308 	add.w	r3, r7, #8
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f857 	bl	800b5fc <prvGetNextExpireTime>
 800b54e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	4619      	mov	r1, r3
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f000 f803 	bl	800b560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b55a:	f000 f8d5 	bl	800b708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b55e:	e7f1      	b.n	800b544 <prvTimerTask+0x8>

0800b560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b56a:	f7ff fa43 	bl	800a9f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	4618      	mov	r0, r3
 800b574:	f000 f866 	bl	800b644 <prvSampleTimeNow>
 800b578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d130      	bne.n	800b5e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10a      	bne.n	800b59c <prvProcessTimerOrBlockTask+0x3c>
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d806      	bhi.n	800b59c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b58e:	f7ff fa3f 	bl	800aa10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b592:	68f9      	ldr	r1, [r7, #12]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff ff85 	bl	800b4a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b59a:	e024      	b.n	800b5e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d008      	beq.n	800b5b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5a2:	4b13      	ldr	r3, [pc, #76]	; (800b5f0 <prvProcessTimerOrBlockTask+0x90>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <prvProcessTimerOrBlockTask+0x50>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e000      	b.n	800b5b2 <prvProcessTimerOrBlockTask+0x52>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5b4:	4b0f      	ldr	r3, [pc, #60]	; (800b5f4 <prvProcessTimerOrBlockTask+0x94>)
 800b5b6:	6818      	ldr	r0, [r3, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	f7fe ffa7 	bl	800a514 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5c6:	f7ff fa23 	bl	800aa10 <xTaskResumeAll>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10a      	bne.n	800b5e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5d0:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <prvProcessTimerOrBlockTask+0x98>)
 800b5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
}
 800b5e0:	e001      	b.n	800b5e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5e2:	f7ff fa15 	bl	800aa10 <xTaskResumeAll>
}
 800b5e6:	bf00      	nop
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	200013d4 	.word	0x200013d4
 800b5f4:	200013d8 	.word	0x200013d8
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <prvGetNextExpireTime+0x44>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <prvGetNextExpireTime+0x16>
 800b60e:	2201      	movs	r2, #1
 800b610:	e000      	b.n	800b614 <prvGetNextExpireTime+0x18>
 800b612:	2200      	movs	r2, #0
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d105      	bne.n	800b62c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b620:	4b07      	ldr	r3, [pc, #28]	; (800b640 <prvGetNextExpireTime+0x44>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	60fb      	str	r3, [r7, #12]
 800b62a:	e001      	b.n	800b630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b62c:	2300      	movs	r3, #0
 800b62e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b630:	68fb      	ldr	r3, [r7, #12]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	200013d0 	.word	0x200013d0

0800b644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b64c:	f7ff fa7e 	bl	800ab4c <xTaskGetTickCount>
 800b650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b652:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <prvSampleTimeNow+0x3c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d205      	bcs.n	800b668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b65c:	f000 f936 	bl	800b8cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	e002      	b.n	800b66e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b66e:	4a04      	ldr	r2, [pc, #16]	; (800b680 <prvSampleTimeNow+0x3c>)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b674:	68fb      	ldr	r3, [r7, #12]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	200013e0 	.word	0x200013e0

0800b684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b692:	2300      	movs	r3, #0
 800b694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d812      	bhi.n	800b6d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d302      	bcc.n	800b6be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	617b      	str	r3, [r7, #20]
 800b6bc:	e01b      	b.n	800b6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6be:	4b10      	ldr	r3, [pc, #64]	; (800b700 <prvInsertTimerInActiveList+0x7c>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	f7fe fa08 	bl	8009ade <vListInsert>
 800b6ce:	e012      	b.n	800b6f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d206      	bcs.n	800b6e6 <prvInsertTimerInActiveList+0x62>
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d302      	bcc.n	800b6e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	617b      	str	r3, [r7, #20]
 800b6e4:	e007      	b.n	800b6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6e6:	4b07      	ldr	r3, [pc, #28]	; (800b704 <prvInsertTimerInActiveList+0x80>)
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	f7fe f9f4 	bl	8009ade <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6f6:	697b      	ldr	r3, [r7, #20]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	200013d4 	.word	0x200013d4
 800b704:	200013d0 	.word	0x200013d0

0800b708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08e      	sub	sp, #56	; 0x38
 800b70c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b70e:	e0ca      	b.n	800b8a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	da18      	bge.n	800b748 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b716:	1d3b      	adds	r3, r7, #4
 800b718:	3304      	adds	r3, #4
 800b71a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10a      	bne.n	800b738 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	61fb      	str	r3, [r7, #28]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b73e:	6850      	ldr	r0, [r2, #4]
 800b740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b742:	6892      	ldr	r2, [r2, #8]
 800b744:	4611      	mov	r1, r2
 800b746:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f2c0 80aa 	blt.w	800b8a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d004      	beq.n	800b766 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	3304      	adds	r3, #4
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe f9f5 	bl	8009b50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b766:	463b      	mov	r3, r7
 800b768:	4618      	mov	r0, r3
 800b76a:	f7ff ff6b 	bl	800b644 <prvSampleTimeNow>
 800b76e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b09      	cmp	r3, #9
 800b774:	f200 8097 	bhi.w	800b8a6 <prvProcessReceivedCommands+0x19e>
 800b778:	a201      	add	r2, pc, #4	; (adr r2, 800b780 <prvProcessReceivedCommands+0x78>)
 800b77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77e:	bf00      	nop
 800b780:	0800b7a9 	.word	0x0800b7a9
 800b784:	0800b7a9 	.word	0x0800b7a9
 800b788:	0800b7a9 	.word	0x0800b7a9
 800b78c:	0800b81d 	.word	0x0800b81d
 800b790:	0800b831 	.word	0x0800b831
 800b794:	0800b87b 	.word	0x0800b87b
 800b798:	0800b7a9 	.word	0x0800b7a9
 800b79c:	0800b7a9 	.word	0x0800b7a9
 800b7a0:	0800b81d 	.word	0x0800b81d
 800b7a4:	0800b831 	.word	0x0800b831
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	18d1      	adds	r1, r2, r3
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7c8:	f7ff ff5c 	bl	800b684 <prvInsertTimerInActiveList>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d069      	beq.n	800b8a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d05e      	beq.n	800b8a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	441a      	add	r2, r3
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7fa:	f7ff fe05 	bl	800b408 <xTimerGenericCommand>
 800b7fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d14f      	bne.n	800b8a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	61bb      	str	r3, [r7, #24]
}
 800b818:	bf00      	nop
 800b81a:	e7fe      	b.n	800b81a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b822:	f023 0301 	bic.w	r3, r3, #1
 800b826:	b2da      	uxtb	r2, r3
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b82e:	e03a      	b.n	800b8a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	617b      	str	r3, [r7, #20]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	699a      	ldr	r2, [r3, #24]
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	18d1      	adds	r1, r2, r3
 800b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b874:	f7ff ff06 	bl	800b684 <prvInsertTimerInActiveList>
					break;
 800b878:	e015      	b.n	800b8a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b880:	f003 0302 	and.w	r3, r3, #2
 800b884:	2b00      	cmp	r3, #0
 800b886:	d103      	bne.n	800b890 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b88a:	f000 fbe1 	bl	800c050 <vPortFree>
 800b88e:	e00a      	b.n	800b8a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b896:	f023 0301 	bic.w	r3, r3, #1
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8a2:	e000      	b.n	800b8a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b8a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8a6:	4b08      	ldr	r3, [pc, #32]	; (800b8c8 <prvProcessReceivedCommands+0x1c0>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	1d39      	adds	r1, r7, #4
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fe fc16 	bl	800a0e0 <xQueueReceive>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f47f af2a 	bne.w	800b710 <prvProcessReceivedCommands+0x8>
	}
}
 800b8bc:	bf00      	nop
 800b8be:	bf00      	nop
 800b8c0:	3730      	adds	r7, #48	; 0x30
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	200013d8 	.word	0x200013d8

0800b8cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8d2:	e048      	b.n	800b966 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8d4:	4b2d      	ldr	r3, [pc, #180]	; (800b98c <prvSwitchTimerLists+0xc0>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8de:	4b2b      	ldr	r3, [pc, #172]	; (800b98c <prvSwitchTimerLists+0xc0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fe f92f 	bl	8009b50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b900:	f003 0304 	and.w	r3, r3, #4
 800b904:	2b00      	cmp	r3, #0
 800b906:	d02e      	beq.n	800b966 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	4413      	add	r3, r2
 800b910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	429a      	cmp	r2, r3
 800b918:	d90e      	bls.n	800b938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b926:	4b19      	ldr	r3, [pc, #100]	; (800b98c <prvSwitchTimerLists+0xc0>)
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3304      	adds	r3, #4
 800b92e:	4619      	mov	r1, r3
 800b930:	4610      	mov	r0, r2
 800b932:	f7fe f8d4 	bl	8009ade <vListInsert>
 800b936:	e016      	b.n	800b966 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b938:	2300      	movs	r3, #0
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	2300      	movs	r3, #0
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	2100      	movs	r1, #0
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7ff fd60 	bl	800b408 <xTimerGenericCommand>
 800b948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	603b      	str	r3, [r7, #0]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b966:	4b09      	ldr	r3, [pc, #36]	; (800b98c <prvSwitchTimerLists+0xc0>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1b1      	bne.n	800b8d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b970:	4b06      	ldr	r3, [pc, #24]	; (800b98c <prvSwitchTimerLists+0xc0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b976:	4b06      	ldr	r3, [pc, #24]	; (800b990 <prvSwitchTimerLists+0xc4>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a04      	ldr	r2, [pc, #16]	; (800b98c <prvSwitchTimerLists+0xc0>)
 800b97c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b97e:	4a04      	ldr	r2, [pc, #16]	; (800b990 <prvSwitchTimerLists+0xc4>)
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	6013      	str	r3, [r2, #0]
}
 800b984:	bf00      	nop
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	200013d0 	.word	0x200013d0
 800b990:	200013d4 	.word	0x200013d4

0800b994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b99a:	f000 f96b 	bl	800bc74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b99e:	4b15      	ldr	r3, [pc, #84]	; (800b9f4 <prvCheckForValidListAndQueue+0x60>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d120      	bne.n	800b9e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9a6:	4814      	ldr	r0, [pc, #80]	; (800b9f8 <prvCheckForValidListAndQueue+0x64>)
 800b9a8:	f7fe f848 	bl	8009a3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9ac:	4813      	ldr	r0, [pc, #76]	; (800b9fc <prvCheckForValidListAndQueue+0x68>)
 800b9ae:	f7fe f845 	bl	8009a3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9b2:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <prvCheckForValidListAndQueue+0x6c>)
 800b9b4:	4a10      	ldr	r2, [pc, #64]	; (800b9f8 <prvCheckForValidListAndQueue+0x64>)
 800b9b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9b8:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <prvCheckForValidListAndQueue+0x70>)
 800b9ba:	4a10      	ldr	r2, [pc, #64]	; (800b9fc <prvCheckForValidListAndQueue+0x68>)
 800b9bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	4b11      	ldr	r3, [pc, #68]	; (800ba08 <prvCheckForValidListAndQueue+0x74>)
 800b9c4:	4a11      	ldr	r2, [pc, #68]	; (800ba0c <prvCheckForValidListAndQueue+0x78>)
 800b9c6:	2110      	movs	r1, #16
 800b9c8:	200a      	movs	r0, #10
 800b9ca:	f7fe f953 	bl	8009c74 <xQueueGenericCreateStatic>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	4a08      	ldr	r2, [pc, #32]	; (800b9f4 <prvCheckForValidListAndQueue+0x60>)
 800b9d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9d4:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <prvCheckForValidListAndQueue+0x60>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <prvCheckForValidListAndQueue+0x60>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	490b      	ldr	r1, [pc, #44]	; (800ba10 <prvCheckForValidListAndQueue+0x7c>)
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe fd6c 	bl	800a4c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9e8:	f000 f974 	bl	800bcd4 <vPortExitCritical>
}
 800b9ec:	bf00      	nop
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200013d8 	.word	0x200013d8
 800b9f8:	200013a8 	.word	0x200013a8
 800b9fc:	200013bc 	.word	0x200013bc
 800ba00:	200013d0 	.word	0x200013d0
 800ba04:	200013d4 	.word	0x200013d4
 800ba08:	20001484 	.word	0x20001484
 800ba0c:	200013e4 	.word	0x200013e4
 800ba10:	08012030 	.word	0x08012030

0800ba14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3b04      	subs	r3, #4
 800ba24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3b04      	subs	r3, #4
 800ba32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f023 0201 	bic.w	r2, r3, #1
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	3b04      	subs	r3, #4
 800ba42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba44:	4a0c      	ldr	r2, [pc, #48]	; (800ba78 <pxPortInitialiseStack+0x64>)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3b14      	subs	r3, #20
 800ba4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f06f 0202 	mvn.w	r2, #2
 800ba62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3b20      	subs	r3, #32
 800ba68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	0800ba7d 	.word	0x0800ba7d

0800ba7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba86:	4b12      	ldr	r3, [pc, #72]	; (800bad0 <prvTaskExitError+0x54>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d00a      	beq.n	800baa6 <prvTaskExitError+0x2a>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	60fb      	str	r3, [r7, #12]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <prvTaskExitError+0x28>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	60bb      	str	r3, [r7, #8]
}
 800bab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800baba:	bf00      	nop
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0fc      	beq.n	800babc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bac2:	bf00      	nop
 800bac4:	bf00      	nop
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	20000078 	.word	0x20000078
	...

0800bae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <pxCurrentTCBConst2>)
 800bae2:	6819      	ldr	r1, [r3, #0]
 800bae4:	6808      	ldr	r0, [r1, #0]
 800bae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	f380 8809 	msr	PSP, r0
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f04f 0000 	mov.w	r0, #0
 800baf6:	f380 8811 	msr	BASEPRI, r0
 800bafa:	4770      	bx	lr
 800bafc:	f3af 8000 	nop.w

0800bb00 <pxCurrentTCBConst2>:
 800bb00:	20000ea8 	.word	0x20000ea8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop

0800bb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb08:	4808      	ldr	r0, [pc, #32]	; (800bb2c <prvPortStartFirstTask+0x24>)
 800bb0a:	6800      	ldr	r0, [r0, #0]
 800bb0c:	6800      	ldr	r0, [r0, #0]
 800bb0e:	f380 8808 	msr	MSP, r0
 800bb12:	f04f 0000 	mov.w	r0, #0
 800bb16:	f380 8814 	msr	CONTROL, r0
 800bb1a:	b662      	cpsie	i
 800bb1c:	b661      	cpsie	f
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	df00      	svc	0
 800bb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb2a:	bf00      	nop
 800bb2c:	e000ed08 	.word	0xe000ed08

0800bb30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb36:	4b46      	ldr	r3, [pc, #280]	; (800bc50 <xPortStartScheduler+0x120>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a46      	ldr	r2, [pc, #280]	; (800bc54 <xPortStartScheduler+0x124>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d10a      	bne.n	800bb56 <xPortStartScheduler+0x26>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	613b      	str	r3, [r7, #16]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb56:	4b3e      	ldr	r3, [pc, #248]	; (800bc50 <xPortStartScheduler+0x120>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a3f      	ldr	r2, [pc, #252]	; (800bc58 <xPortStartScheduler+0x128>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d10a      	bne.n	800bb76 <xPortStartScheduler+0x46>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb76:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <xPortStartScheduler+0x12c>)
 800bb78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	22ff      	movs	r2, #255	; 0xff
 800bb86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	4b31      	ldr	r3, [pc, #196]	; (800bc60 <xPortStartScheduler+0x130>)
 800bb9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb9e:	4b31      	ldr	r3, [pc, #196]	; (800bc64 <xPortStartScheduler+0x134>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bba4:	e009      	b.n	800bbba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bba6:	4b2f      	ldr	r3, [pc, #188]	; (800bc64 <xPortStartScheduler+0x134>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	4a2d      	ldr	r2, [pc, #180]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbba:	78fb      	ldrb	r3, [r7, #3]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d0ef      	beq.n	800bba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbc6:	4b27      	ldr	r3, [pc, #156]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f1c3 0307 	rsb	r3, r3, #7
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d00a      	beq.n	800bbe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60bb      	str	r3, [r7, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbe8:	4b1e      	ldr	r3, [pc, #120]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	021b      	lsls	r3, r3, #8
 800bbee:	4a1d      	ldr	r2, [pc, #116]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbf2:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbfa:	4a1a      	ldr	r2, [pc, #104]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc06:	4b18      	ldr	r3, [pc, #96]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a17      	ldr	r2, [pc, #92]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a14      	ldr	r2, [pc, #80]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc1e:	f000 f8dd 	bl	800bddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc22:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <xPortStartScheduler+0x13c>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc28:	f000 f8fc 	bl	800be24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc2c:	4b10      	ldr	r3, [pc, #64]	; (800bc70 <xPortStartScheduler+0x140>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a0f      	ldr	r2, [pc, #60]	; (800bc70 <xPortStartScheduler+0x140>)
 800bc32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc38:	f7ff ff66 	bl	800bb08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc3c:	f7ff f850 	bl	800ace0 <vTaskSwitchContext>
	prvTaskExitError();
 800bc40:	f7ff ff1c 	bl	800ba7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	e000ed00 	.word	0xe000ed00
 800bc54:	410fc271 	.word	0x410fc271
 800bc58:	410fc270 	.word	0x410fc270
 800bc5c:	e000e400 	.word	0xe000e400
 800bc60:	200014d4 	.word	0x200014d4
 800bc64:	200014d8 	.word	0x200014d8
 800bc68:	e000ed20 	.word	0xe000ed20
 800bc6c:	20000078 	.word	0x20000078
 800bc70:	e000ef34 	.word	0xe000ef34

0800bc74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	607b      	str	r3, [r7, #4]
}
 800bc8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc8e:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <vPortEnterCritical+0x58>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3301      	adds	r3, #1
 800bc94:	4a0d      	ldr	r2, [pc, #52]	; (800bccc <vPortEnterCritical+0x58>)
 800bc96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc98:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <vPortEnterCritical+0x58>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d10f      	bne.n	800bcc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <vPortEnterCritical+0x5c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	603b      	str	r3, [r7, #0]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <vPortEnterCritical+0x4a>
	}
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	20000078 	.word	0x20000078
 800bcd0:	e000ed04 	.word	0xe000ed04

0800bcd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcda:	4b12      	ldr	r3, [pc, #72]	; (800bd24 <vPortExitCritical+0x50>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <vPortExitCritical+0x24>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	607b      	str	r3, [r7, #4]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <vPortExitCritical+0x50>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	4a09      	ldr	r2, [pc, #36]	; (800bd24 <vPortExitCritical+0x50>)
 800bd00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd02:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <vPortExitCritical+0x50>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d105      	bne.n	800bd16 <vPortExitCritical+0x42>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	f383 8811 	msr	BASEPRI, r3
}
 800bd14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd16:	bf00      	nop
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	20000078 	.word	0x20000078
	...

0800bd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd30:	f3ef 8009 	mrs	r0, PSP
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <pxCurrentTCBConst>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	f01e 0f10 	tst.w	lr, #16
 800bd40:	bf08      	it	eq
 800bd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4a:	6010      	str	r0, [r2, #0]
 800bd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd54:	f380 8811 	msr	BASEPRI, r0
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f7fe ffbe 	bl	800ace0 <vTaskSwitchContext>
 800bd64:	f04f 0000 	mov.w	r0, #0
 800bd68:	f380 8811 	msr	BASEPRI, r0
 800bd6c:	bc09      	pop	{r0, r3}
 800bd6e:	6819      	ldr	r1, [r3, #0]
 800bd70:	6808      	ldr	r0, [r1, #0]
 800bd72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd76:	f01e 0f10 	tst.w	lr, #16
 800bd7a:	bf08      	it	eq
 800bd7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd80:	f380 8809 	msr	PSP, r0
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	f3af 8000 	nop.w

0800bd90 <pxCurrentTCBConst>:
 800bd90:	20000ea8 	.word	0x20000ea8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop

0800bd98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	607b      	str	r3, [r7, #4]
}
 800bdb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdb2:	f7fe fedb 	bl	800ab6c <xTaskIncrementTick>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdbc:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <xPortSysTickHandler+0x40>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	f383 8811 	msr	BASEPRI, r3
}
 800bdce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bddc:	b480      	push	{r7}
 800bdde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bde0:	4b0b      	ldr	r3, [pc, #44]	; (800be10 <vPortSetupTimerInterrupt+0x34>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <vPortSetupTimerInterrupt+0x38>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdec:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <vPortSetupTimerInterrupt+0x3c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a0a      	ldr	r2, [pc, #40]	; (800be1c <vPortSetupTimerInterrupt+0x40>)
 800bdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf6:	099b      	lsrs	r3, r3, #6
 800bdf8:	4a09      	ldr	r2, [pc, #36]	; (800be20 <vPortSetupTimerInterrupt+0x44>)
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdfe:	4b04      	ldr	r3, [pc, #16]	; (800be10 <vPortSetupTimerInterrupt+0x34>)
 800be00:	2207      	movs	r2, #7
 800be02:	601a      	str	r2, [r3, #0]
}
 800be04:	bf00      	nop
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	e000e010 	.word	0xe000e010
 800be14:	e000e018 	.word	0xe000e018
 800be18:	20000008 	.word	0x20000008
 800be1c:	10624dd3 	.word	0x10624dd3
 800be20:	e000e014 	.word	0xe000e014

0800be24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be34 <vPortEnableVFP+0x10>
 800be28:	6801      	ldr	r1, [r0, #0]
 800be2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be2e:	6001      	str	r1, [r0, #0]
 800be30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be32:	bf00      	nop
 800be34:	e000ed88 	.word	0xe000ed88

0800be38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be3e:	f3ef 8305 	mrs	r3, IPSR
 800be42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b0f      	cmp	r3, #15
 800be48:	d914      	bls.n	800be74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <vPortValidateInterruptPriority+0x70>)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be54:	4b15      	ldr	r3, [pc, #84]	; (800beac <vPortValidateInterruptPriority+0x74>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	7afa      	ldrb	r2, [r7, #11]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d20a      	bcs.n	800be74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	607b      	str	r3, [r7, #4]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <vPortValidateInterruptPriority+0x78>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be7c:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <vPortValidateInterruptPriority+0x7c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d90a      	bls.n	800be9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	603b      	str	r3, [r7, #0]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <vPortValidateInterruptPriority+0x60>
	}
 800be9a:	bf00      	nop
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	e000e3f0 	.word	0xe000e3f0
 800beac:	200014d4 	.word	0x200014d4
 800beb0:	e000ed0c 	.word	0xe000ed0c
 800beb4:	200014d8 	.word	0x200014d8

0800beb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bec4:	f7fe fd96 	bl	800a9f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bec8:	4b5b      	ldr	r3, [pc, #364]	; (800c038 <pvPortMalloc+0x180>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bed0:	f000 f920 	bl	800c114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bed4:	4b59      	ldr	r3, [pc, #356]	; (800c03c <pvPortMalloc+0x184>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f040 8093 	bne.w	800c008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01d      	beq.n	800bf24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bee8:	2208      	movs	r2, #8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f003 0307 	and.w	r3, r3, #7
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d014      	beq.n	800bf24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f023 0307 	bic.w	r3, r3, #7
 800bf00:	3308      	adds	r3, #8
 800bf02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <pvPortMalloc+0x6c>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	617b      	str	r3, [r7, #20]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d06e      	beq.n	800c008 <pvPortMalloc+0x150>
 800bf2a:	4b45      	ldr	r3, [pc, #276]	; (800c040 <pvPortMalloc+0x188>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d869      	bhi.n	800c008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf34:	4b43      	ldr	r3, [pc, #268]	; (800c044 <pvPortMalloc+0x18c>)
 800bf36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf38:	4b42      	ldr	r3, [pc, #264]	; (800c044 <pvPortMalloc+0x18c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf3e:	e004      	b.n	800bf4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d903      	bls.n	800bf5c <pvPortMalloc+0xa4>
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1f1      	bne.n	800bf40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf5c:	4b36      	ldr	r3, [pc, #216]	; (800c038 <pvPortMalloc+0x180>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d050      	beq.n	800c008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	4413      	add	r3, r2
 800bf6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	1ad2      	subs	r2, r2, r3
 800bf80:	2308      	movs	r3, #8
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d91f      	bls.n	800bfc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f003 0307 	and.w	r3, r3, #7
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <pvPortMalloc+0xf8>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	613b      	str	r3, [r7, #16]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	1ad2      	subs	r2, r2, r3
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfc2:	69b8      	ldr	r0, [r7, #24]
 800bfc4:	f000 f908 	bl	800c1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfc8:	4b1d      	ldr	r3, [pc, #116]	; (800c040 <pvPortMalloc+0x188>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	4a1b      	ldr	r2, [pc, #108]	; (800c040 <pvPortMalloc+0x188>)
 800bfd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfd6:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <pvPortMalloc+0x188>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4b1b      	ldr	r3, [pc, #108]	; (800c048 <pvPortMalloc+0x190>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d203      	bcs.n	800bfea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bfe2:	4b17      	ldr	r3, [pc, #92]	; (800c040 <pvPortMalloc+0x188>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a18      	ldr	r2, [pc, #96]	; (800c048 <pvPortMalloc+0x190>)
 800bfe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	4b13      	ldr	r3, [pc, #76]	; (800c03c <pvPortMalloc+0x184>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	431a      	orrs	r2, r3
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	2200      	movs	r2, #0
 800bffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bffe:	4b13      	ldr	r3, [pc, #76]	; (800c04c <pvPortMalloc+0x194>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3301      	adds	r3, #1
 800c004:	4a11      	ldr	r2, [pc, #68]	; (800c04c <pvPortMalloc+0x194>)
 800c006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c008:	f7fe fd02 	bl	800aa10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	f003 0307 	and.w	r3, r3, #7
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <pvPortMalloc+0x174>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	60fb      	str	r3, [r7, #12]
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <pvPortMalloc+0x172>
	return pvReturn;
 800c02c:	69fb      	ldr	r3, [r7, #28]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3728      	adds	r7, #40	; 0x28
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	200050e4 	.word	0x200050e4
 800c03c:	200050f8 	.word	0x200050f8
 800c040:	200050e8 	.word	0x200050e8
 800c044:	200050dc 	.word	0x200050dc
 800c048:	200050ec 	.word	0x200050ec
 800c04c:	200050f0 	.word	0x200050f0

0800c050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d04d      	beq.n	800c0fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c062:	2308      	movs	r3, #8
 800c064:	425b      	negs	r3, r3
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4413      	add	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b24      	ldr	r3, [pc, #144]	; (800c108 <vPortFree+0xb8>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4013      	ands	r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <vPortFree+0x44>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	60fb      	str	r3, [r7, #12]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00a      	beq.n	800c0b2 <vPortFree+0x62>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60bb      	str	r3, [r7, #8]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <vPortFree+0xb8>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01e      	beq.n	800c0fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d11a      	bne.n	800c0fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <vPortFree+0xb8>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	43db      	mvns	r3, r3
 800c0d2:	401a      	ands	r2, r3
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0d8:	f7fe fc8c 	bl	800a9f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	4b0a      	ldr	r3, [pc, #40]	; (800c10c <vPortFree+0xbc>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	4a09      	ldr	r2, [pc, #36]	; (800c10c <vPortFree+0xbc>)
 800c0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f000 f874 	bl	800c1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <vPortFree+0xc0>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	4a06      	ldr	r2, [pc, #24]	; (800c110 <vPortFree+0xc0>)
 800c0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0fa:	f7fe fc89 	bl	800aa10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0fe:	bf00      	nop
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	200050f8 	.word	0x200050f8
 800c10c:	200050e8 	.word	0x200050e8
 800c110:	200050f4 	.word	0x200050f4

0800c114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c120:	4b27      	ldr	r3, [pc, #156]	; (800c1c0 <prvHeapInit+0xac>)
 800c122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3307      	adds	r3, #7
 800c132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f023 0307 	bic.w	r3, r3, #7
 800c13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	4a1f      	ldr	r2, [pc, #124]	; (800c1c0 <prvHeapInit+0xac>)
 800c144:	4413      	add	r3, r2
 800c146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c14c:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <prvHeapInit+0xb0>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <prvHeapInit+0xb0>)
 800c154:	2200      	movs	r2, #0
 800c156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c160:	2208      	movs	r2, #8
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0307 	bic.w	r3, r3, #7
 800c16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4a15      	ldr	r2, [pc, #84]	; (800c1c8 <prvHeapInit+0xb4>)
 800c174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c176:	4b14      	ldr	r3, [pc, #80]	; (800c1c8 <prvHeapInit+0xb4>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2200      	movs	r2, #0
 800c17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c17e:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <prvHeapInit+0xb4>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <prvHeapInit+0xb4>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	4a0a      	ldr	r2, [pc, #40]	; (800c1cc <prvHeapInit+0xb8>)
 800c1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	4a09      	ldr	r2, [pc, #36]	; (800c1d0 <prvHeapInit+0xbc>)
 800c1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1ac:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <prvHeapInit+0xc0>)
 800c1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c1b2:	601a      	str	r2, [r3, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	200014dc 	.word	0x200014dc
 800c1c4:	200050dc 	.word	0x200050dc
 800c1c8:	200050e4 	.word	0x200050e4
 800c1cc:	200050ec 	.word	0x200050ec
 800c1d0:	200050e8 	.word	0x200050e8
 800c1d4:	200050f8 	.word	0x200050f8

0800c1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1e0:	4b28      	ldr	r3, [pc, #160]	; (800c284 <prvInsertBlockIntoFreeList+0xac>)
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e002      	b.n	800c1ec <prvInsertBlockIntoFreeList+0x14>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d8f7      	bhi.n	800c1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	4413      	add	r3, r2
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d108      	bne.n	800c21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	441a      	add	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	441a      	add	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d118      	bne.n	800c260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b15      	ldr	r3, [pc, #84]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d00d      	beq.n	800c256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	441a      	add	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	e008      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e003      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d002      	beq.n	800c276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c276:	bf00      	nop
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	200050dc 	.word	0x200050dc
 800c288:	200050e4 	.word	0x200050e4

0800c28c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c290:	2200      	movs	r2, #0
 800c292:	4912      	ldr	r1, [pc, #72]	; (800c2dc <MX_USB_DEVICE_Init+0x50>)
 800c294:	4812      	ldr	r0, [pc, #72]	; (800c2e0 <MX_USB_DEVICE_Init+0x54>)
 800c296:	f7fc f8cb 	bl	8008430 <USBD_Init>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c2a0:	f7f5 fa72 	bl	8001788 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800c2a4:	490f      	ldr	r1, [pc, #60]	; (800c2e4 <MX_USB_DEVICE_Init+0x58>)
 800c2a6:	480e      	ldr	r0, [pc, #56]	; (800c2e0 <MX_USB_DEVICE_Init+0x54>)
 800c2a8:	f7fc f8f2 	bl	8008490 <USBD_RegisterClass>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2b2:	f7f5 fa69 	bl	8001788 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800c2b6:	490c      	ldr	r1, [pc, #48]	; (800c2e8 <MX_USB_DEVICE_Init+0x5c>)
 800c2b8:	4809      	ldr	r0, [pc, #36]	; (800c2e0 <MX_USB_DEVICE_Init+0x54>)
 800c2ba:	f7fb fd37 	bl	8007d2c <USBD_DFU_RegisterMedia>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c2c4:	f7f5 fa60 	bl	8001788 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2c8:	4805      	ldr	r0, [pc, #20]	; (800c2e0 <MX_USB_DEVICE_Init+0x54>)
 800c2ca:	f7fc f908 	bl	80084de <USBD_Start>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d001      	beq.n	800c2d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c2d4:	f7f5 fa58 	bl	8001788 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c2d8:	bf00      	nop
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	2000007c 	.word	0x2000007c
 800c2e0:	200058fc 	.word	0x200058fc
 800c2e4:	20000014 	.word	0x20000014
 800c2e8:	200000cc 	.word	0x200000cc

0800c2ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	6039      	str	r1, [r7, #0]
 800c2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2212      	movs	r2, #18
 800c2fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c2fe:	4b03      	ldr	r3, [pc, #12]	; (800c30c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	20000098 	.word	0x20000098

0800c310 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	6039      	str	r1, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2204      	movs	r2, #4
 800c320:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c322:	4b03      	ldr	r3, [pc, #12]	; (800c330 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	200000ac 	.word	0x200000ac

0800c334 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	6039      	str	r1, [r7, #0]
 800c33e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d105      	bne.n	800c352 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	4907      	ldr	r1, [pc, #28]	; (800c368 <USBD_FS_ProductStrDescriptor+0x34>)
 800c34a:	4808      	ldr	r0, [pc, #32]	; (800c36c <USBD_FS_ProductStrDescriptor+0x38>)
 800c34c:	f7fd f925 	bl	800959a <USBD_GetString>
 800c350:	e004      	b.n	800c35c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	4904      	ldr	r1, [pc, #16]	; (800c368 <USBD_FS_ProductStrDescriptor+0x34>)
 800c356:	4805      	ldr	r0, [pc, #20]	; (800c36c <USBD_FS_ProductStrDescriptor+0x38>)
 800c358:	f7fd f91f 	bl	800959a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c35c:	4b02      	ldr	r3, [pc, #8]	; (800c368 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20005bcc 	.word	0x20005bcc
 800c36c:	08012038 	.word	0x08012038

0800c370 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	6039      	str	r1, [r7, #0]
 800c37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	4904      	ldr	r1, [pc, #16]	; (800c390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c380:	4804      	ldr	r0, [pc, #16]	; (800c394 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c382:	f7fd f90a 	bl	800959a <USBD_GetString>
  return USBD_StrDesc;
 800c386:	4b02      	ldr	r3, [pc, #8]	; (800c390 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20005bcc 	.word	0x20005bcc
 800c394:	08012058 	.word	0x08012058

0800c398 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	4603      	mov	r3, r0
 800c3a0:	6039      	str	r1, [r7, #0]
 800c3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	221a      	movs	r2, #26
 800c3a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c3aa:	f000 f843 	bl	800c434 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c3ae:	4b02      	ldr	r3, [pc, #8]	; (800c3b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	200000b0 	.word	0x200000b0

0800c3bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	6039      	str	r1, [r7, #0]
 800c3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c3c8:	79fb      	ldrb	r3, [r7, #7]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d105      	bne.n	800c3da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	4907      	ldr	r1, [pc, #28]	; (800c3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3d2:	4808      	ldr	r0, [pc, #32]	; (800c3f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3d4:	f7fd f8e1 	bl	800959a <USBD_GetString>
 800c3d8:	e004      	b.n	800c3e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3da:	683a      	ldr	r2, [r7, #0]
 800c3dc:	4904      	ldr	r1, [pc, #16]	; (800c3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3de:	4805      	ldr	r0, [pc, #20]	; (800c3f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3e0:	f7fd f8db 	bl	800959a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3e4:	4b02      	ldr	r3, [pc, #8]	; (800c3f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20005bcc 	.word	0x20005bcc
 800c3f4:	0801206c 	.word	0x0801206c

0800c3f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	6039      	str	r1, [r7, #0]
 800c402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c404:	79fb      	ldrb	r3, [r7, #7]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d105      	bne.n	800c416 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	4907      	ldr	r1, [pc, #28]	; (800c42c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c40e:	4808      	ldr	r0, [pc, #32]	; (800c430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c410:	f7fd f8c3 	bl	800959a <USBD_GetString>
 800c414:	e004      	b.n	800c420 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	4904      	ldr	r1, [pc, #16]	; (800c42c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c41a:	4805      	ldr	r0, [pc, #20]	; (800c430 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c41c:	f7fd f8bd 	bl	800959a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	20005bcc 	.word	0x20005bcc
 800c430:	08012078 	.word	0x08012078

0800c434 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c43a:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <Get_SerialNum+0x44>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c440:	4b0e      	ldr	r3, [pc, #56]	; (800c47c <Get_SerialNum+0x48>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c446:	4b0e      	ldr	r3, [pc, #56]	; (800c480 <Get_SerialNum+0x4c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4413      	add	r3, r2
 800c452:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d009      	beq.n	800c46e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c45a:	2208      	movs	r2, #8
 800c45c:	4909      	ldr	r1, [pc, #36]	; (800c484 <Get_SerialNum+0x50>)
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 f814 	bl	800c48c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c464:	2204      	movs	r2, #4
 800c466:	4908      	ldr	r1, [pc, #32]	; (800c488 <Get_SerialNum+0x54>)
 800c468:	68b8      	ldr	r0, [r7, #8]
 800c46a:	f000 f80f 	bl	800c48c <IntToUnicode>
  }
}
 800c46e:	bf00      	nop
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	1fff7a10 	.word	0x1fff7a10
 800c47c:	1fff7a14 	.word	0x1fff7a14
 800c480:	1fff7a18 	.word	0x1fff7a18
 800c484:	200000b2 	.word	0x200000b2
 800c488:	200000c2 	.word	0x200000c2

0800c48c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b087      	sub	sp, #28
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	4613      	mov	r3, r2
 800c498:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c49e:	2300      	movs	r3, #0
 800c4a0:	75fb      	strb	r3, [r7, #23]
 800c4a2:	e027      	b.n	800c4f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	0f1b      	lsrs	r3, r3, #28
 800c4a8:	2b09      	cmp	r3, #9
 800c4aa:	d80b      	bhi.n	800c4c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	0f1b      	lsrs	r3, r3, #28
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	7dfb      	ldrb	r3, [r7, #23]
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	440b      	add	r3, r1
 800c4bc:	3230      	adds	r2, #48	; 0x30
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	701a      	strb	r2, [r3, #0]
 800c4c2:	e00a      	b.n	800c4da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	0f1b      	lsrs	r3, r3, #28
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	440b      	add	r3, r1
 800c4d4:	3237      	adds	r2, #55	; 0x37
 800c4d6:	b2d2      	uxtb	r2, r2
 800c4d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	011b      	lsls	r3, r3, #4
 800c4de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c4ee:	7dfb      	ldrb	r3, [r7, #23]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	75fb      	strb	r3, [r7, #23]
 800c4f4:	7dfa      	ldrb	r2, [r7, #23]
 800c4f6:	79fb      	ldrb	r3, [r7, #7]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d3d3      	bcc.n	800c4a4 <IntToUnicode+0x18>
  }
}
 800c4fc:	bf00      	nop
 800c4fe:	bf00      	nop
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800c50a:	b480      	push	{r7}
 800c50c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800c50e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800c510:	4618      	mov	r0, r3
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800c51a:	b480      	push	{r7}
 800c51c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800c51e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800c520:	4618      	mov	r0, r3
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b083      	sub	sp, #12
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800c532:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800c54c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b085      	sub	sp, #20
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800c566:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	460b      	mov	r3, r1
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800c582:	7afb      	ldrb	r3, [r7, #11]
 800c584:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800c586:	bf00      	nop
  }
  return (USBD_OK);
 800c588:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
	...

0800c598 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08a      	sub	sp, #40	; 0x28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5a0:	f107 0314 	add.w	r3, r7, #20
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	605a      	str	r2, [r3, #4]
 800c5aa:	609a      	str	r2, [r3, #8]
 800c5ac:	60da      	str	r2, [r3, #12]
 800c5ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5b8:	d13a      	bne.n	800c630 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	613b      	str	r3, [r7, #16]
 800c5be:	4b1e      	ldr	r3, [pc, #120]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c2:	4a1d      	ldr	r2, [pc, #116]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c5c4:	f043 0301 	orr.w	r3, r3, #1
 800c5c8:	6313      	str	r3, [r2, #48]	; 0x30
 800c5ca:	4b1b      	ldr	r3, [pc, #108]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	613b      	str	r3, [r7, #16]
 800c5d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c5d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c5da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5dc:	2302      	movs	r3, #2
 800c5de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c5e8:	230a      	movs	r3, #10
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5ec:	f107 0314 	add.w	r3, r7, #20
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	4812      	ldr	r0, [pc, #72]	; (800c63c <HAL_PCD_MspInit+0xa4>)
 800c5f4:	f7f6 f808 	bl	8002608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c5f8:	4b0f      	ldr	r3, [pc, #60]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fc:	4a0e      	ldr	r2, [pc, #56]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c602:	6353      	str	r3, [r2, #52]	; 0x34
 800c604:	2300      	movs	r3, #0
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	4b0b      	ldr	r3, [pc, #44]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c60c:	4a0a      	ldr	r2, [pc, #40]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c60e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c612:	6453      	str	r3, [r2, #68]	; 0x44
 800c614:	4b08      	ldr	r3, [pc, #32]	; (800c638 <HAL_PCD_MspInit+0xa0>)
 800c616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c61c:	60fb      	str	r3, [r7, #12]
 800c61e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c620:	2200      	movs	r2, #0
 800c622:	2105      	movs	r1, #5
 800c624:	2043      	movs	r0, #67	; 0x43
 800c626:	f7f5 ff33 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c62a:	2043      	movs	r0, #67	; 0x43
 800c62c:	f7f5 ff4c 	bl	80024c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c630:	bf00      	nop
 800c632:	3728      	adds	r7, #40	; 0x28
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	40023800 	.word	0x40023800
 800c63c:	40020000 	.word	0x40020000

0800c640 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c654:	4619      	mov	r1, r3
 800c656:	4610      	mov	r0, r2
 800c658:	f7fb ffa7 	bl	80085aa <USBD_LL_SetupStage>
}
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c676:	78fa      	ldrb	r2, [r7, #3]
 800c678:	6879      	ldr	r1, [r7, #4]
 800c67a:	4613      	mov	r3, r2
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	1a9b      	subs	r3, r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	440b      	add	r3, r1
 800c684:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	78fb      	ldrb	r3, [r7, #3]
 800c68c:	4619      	mov	r1, r3
 800c68e:	f7fb ffe1 	bl	8008654 <USBD_LL_DataOutStage>
}
 800c692:	bf00      	nop
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c6ac:	78fa      	ldrb	r2, [r7, #3]
 800c6ae:	6879      	ldr	r1, [r7, #4]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	00db      	lsls	r3, r3, #3
 800c6b4:	1a9b      	subs	r3, r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	440b      	add	r3, r1
 800c6ba:	3348      	adds	r3, #72	; 0x48
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	78fb      	ldrb	r3, [r7, #3]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	f7fc f82a 	bl	800871a <USBD_LL_DataInStage>
}
 800c6c6:	bf00      	nop
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fc f93e 	bl	800895e <USBD_LL_SOF>
}
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b084      	sub	sp, #16
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d001      	beq.n	800c702 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c6fe:	f7f5 f843 	bl	8001788 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c708:	7bfa      	ldrb	r2, [r7, #15]
 800c70a:	4611      	mov	r1, r2
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7fc f8e8 	bl	80088e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fc f894 	bl	8008846 <USBD_LL_Reset>
}
 800c71e:	bf00      	nop
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c736:	4618      	mov	r0, r3
 800c738:	f7fc f8e3 	bl	8008902 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	6812      	ldr	r2, [r2, #0]
 800c74a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c74e:	f043 0301 	orr.w	r3, r3, #1
 800c752:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a1b      	ldr	r3, [r3, #32]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d005      	beq.n	800c768 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c75c:	4b04      	ldr	r3, [pc, #16]	; (800c770 <HAL_PCD_SuspendCallback+0x48>)
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	4a03      	ldr	r2, [pc, #12]	; (800c770 <HAL_PCD_SuspendCallback+0x48>)
 800c762:	f043 0306 	orr.w	r3, r3, #6
 800c766:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	e000ed00 	.word	0xe000ed00

0800c774 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c782:	4618      	mov	r0, r3
 800c784:	f7fc f8d3 	bl	800892e <USBD_LL_Resume>
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7a2:	78fa      	ldrb	r2, [r7, #3]
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fc f921 	bl	80089ee <USBD_LL_IsoOUTIncomplete>
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7c6:	78fa      	ldrb	r2, [r7, #3]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fc f8e9 	bl	80089a2 <USBD_LL_IsoINIncomplete>
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fc f927 	bl	8008a3a <USBD_LL_DevConnected>
}
 800c7ec:	bf00      	nop
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c802:	4618      	mov	r0, r3
 800c804:	f7fc f924 	bl	8008a50 <USBD_LL_DevDisconnected>
}
 800c808:	bf00      	nop
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d13c      	bne.n	800c89a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c820:	4a20      	ldr	r2, [pc, #128]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a1e      	ldr	r2, [pc, #120]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c82c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c830:	4b1c      	ldr	r3, [pc, #112]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c838:	4b1a      	ldr	r3, [pc, #104]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c83a:	2204      	movs	r2, #4
 800c83c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c83e:	4b19      	ldr	r3, [pc, #100]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c840:	2202      	movs	r2, #2
 800c842:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c844:	4b17      	ldr	r3, [pc, #92]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c846:	2200      	movs	r2, #0
 800c848:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c84a:	4b16      	ldr	r3, [pc, #88]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c84c:	2202      	movs	r2, #2
 800c84e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c850:	4b14      	ldr	r3, [pc, #80]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c852:	2200      	movs	r2, #0
 800c854:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c856:	4b13      	ldr	r3, [pc, #76]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c858:	2200      	movs	r2, #0
 800c85a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c85c:	4b11      	ldr	r3, [pc, #68]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c85e:	2200      	movs	r2, #0
 800c860:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c862:	4b10      	ldr	r3, [pc, #64]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c864:	2200      	movs	r2, #0
 800c866:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c868:	4b0e      	ldr	r3, [pc, #56]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c86e:	480d      	ldr	r0, [pc, #52]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c870:	f7f6 fdfb 	bl	800346a <HAL_PCD_Init>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c87a:	f7f4 ff85 	bl	8001788 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c87e:	2180      	movs	r1, #128	; 0x80
 800c880:	4808      	ldr	r0, [pc, #32]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c882:	f7f7 ff30 	bl	80046e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c886:	2240      	movs	r2, #64	; 0x40
 800c888:	2100      	movs	r1, #0
 800c88a:	4806      	ldr	r0, [pc, #24]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c88c:	f7f7 fee4 	bl	8004658 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c890:	2280      	movs	r2, #128	; 0x80
 800c892:	2101      	movs	r1, #1
 800c894:	4803      	ldr	r0, [pc, #12]	; (800c8a4 <USBD_LL_Init+0x94>)
 800c896:	f7f7 fedf 	bl	8004658 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	20005dcc 	.word	0x20005dcc

0800c8a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f6 fef0 	bl	80036a4 <HAL_PCD_Start>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 f92c 	bl	800cb28 <USBD_Get_USB_Status>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7f6 ff08 	bl	800370a <HAL_PCD_Stop>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8fe:	7bfb      	ldrb	r3, [r7, #15]
 800c900:	4618      	mov	r0, r3
 800c902:	f000 f911 	bl	800cb28 <USBD_Get_USB_Status>
 800c906:	4603      	mov	r3, r0
 800c908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	4608      	mov	r0, r1
 800c91e:	4611      	mov	r1, r2
 800c920:	461a      	mov	r2, r3
 800c922:	4603      	mov	r3, r0
 800c924:	70fb      	strb	r3, [r7, #3]
 800c926:	460b      	mov	r3, r1
 800c928:	70bb      	strb	r3, [r7, #2]
 800c92a:	4613      	mov	r3, r2
 800c92c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c92e:	2300      	movs	r3, #0
 800c930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c93c:	78bb      	ldrb	r3, [r7, #2]
 800c93e:	883a      	ldrh	r2, [r7, #0]
 800c940:	78f9      	ldrb	r1, [r7, #3]
 800c942:	f7f7 faf2 	bl	8003f2a <HAL_PCD_EP_Open>
 800c946:	4603      	mov	r3, r0
 800c948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 f8eb 	bl	800cb28 <USBD_Get_USB_Status>
 800c952:	4603      	mov	r3, r0
 800c954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c956:	7bbb      	ldrb	r3, [r7, #14]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c97a:	78fa      	ldrb	r2, [r7, #3]
 800c97c:	4611      	mov	r1, r2
 800c97e:	4618      	mov	r0, r3
 800c980:	f7f7 fbd0 	bl	8004124 <HAL_PCD_EP_SetStall>
 800c984:	4603      	mov	r3, r0
 800c986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 f8cc 	bl	800cb28 <USBD_Get_USB_Status>
 800c990:	4603      	mov	r3, r0
 800c992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c994:	7bbb      	ldrb	r3, [r7, #14]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9b8:	78fa      	ldrb	r2, [r7, #3]
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f7 fc15 	bl	80041ec <HAL_PCD_EP_ClrStall>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f8ad 	bl	800cb28 <USBD_Get_USB_Status>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	da0b      	bge.n	800ca10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9f8:	78fb      	ldrb	r3, [r7, #3]
 800c9fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9fe:	68f9      	ldr	r1, [r7, #12]
 800ca00:	4613      	mov	r3, r2
 800ca02:	00db      	lsls	r3, r3, #3
 800ca04:	1a9b      	subs	r3, r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	440b      	add	r3, r1
 800ca0a:	333e      	adds	r3, #62	; 0x3e
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	e00b      	b.n	800ca28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca16:	68f9      	ldr	r1, [r7, #12]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	1a9b      	subs	r3, r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	440b      	add	r3, r1
 800ca22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca26:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca4e:	78fa      	ldrb	r2, [r7, #3]
 800ca50:	4611      	mov	r1, r2
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f7 fa44 	bl	8003ee0 <HAL_PCD_SetAddress>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 f862 	bl	800cb28 <USBD_Get_USB_Status>
 800ca64:	4603      	mov	r3, r0
 800ca66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b086      	sub	sp, #24
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	60f8      	str	r0, [r7, #12]
 800ca7a:	607a      	str	r2, [r7, #4]
 800ca7c:	603b      	str	r3, [r7, #0]
 800ca7e:	460b      	mov	r3, r1
 800ca80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca90:	7af9      	ldrb	r1, [r7, #11]
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	f7f7 fafb 	bl	8004090 <HAL_PCD_EP_Transmit>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 f841 	bl	800cb28 <USBD_Get_USB_Status>
 800caa6:	4603      	mov	r3, r0
 800caa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800caaa:	7dbb      	ldrb	r3, [r7, #22]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	607a      	str	r2, [r7, #4]
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	460b      	mov	r3, r1
 800cac2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cad2:	7af9      	ldrb	r1, [r7, #11]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	f7f7 fa8f 	bl	8003ffa <HAL_PCD_EP_Receive>
 800cadc:	4603      	mov	r3, r0
 800cade:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cae0:	7dfb      	ldrb	r3, [r7, #23]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f820 	bl	800cb28 <USBD_Get_USB_Status>
 800cae8:	4603      	mov	r3, r0
 800caea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800caec:	7dbb      	ldrb	r3, [r7, #22]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3718      	adds	r7, #24
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb00:	4b03      	ldr	r3, [pc, #12]	; (800cb10 <USBD_static_malloc+0x18>)
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	200050fc 	.word	0x200050fc

0800cb14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]

}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb36:	79fb      	ldrb	r3, [r7, #7]
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d817      	bhi.n	800cb6c <USBD_Get_USB_Status+0x44>
 800cb3c:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <USBD_Get_USB_Status+0x1c>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cb55 	.word	0x0800cb55
 800cb48:	0800cb5b 	.word	0x0800cb5b
 800cb4c:	0800cb61 	.word	0x0800cb61
 800cb50:	0800cb67 	.word	0x0800cb67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	e00b      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5e:	e008      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb60:	2301      	movs	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
    break;
 800cb64:	e005      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb66:	2303      	movs	r3, #3
 800cb68:	73fb      	strb	r3, [r7, #15]
    break;
 800cb6a:	e002      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb70:	bf00      	nop
  }
  return usb_status;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <__errno>:
 800cb80:	4b01      	ldr	r3, [pc, #4]	; (800cb88 <__errno+0x8>)
 800cb82:	6818      	ldr	r0, [r3, #0]
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	200000e8 	.word	0x200000e8

0800cb8c <__libc_init_array>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	4d0d      	ldr	r5, [pc, #52]	; (800cbc4 <__libc_init_array+0x38>)
 800cb90:	4c0d      	ldr	r4, [pc, #52]	; (800cbc8 <__libc_init_array+0x3c>)
 800cb92:	1b64      	subs	r4, r4, r5
 800cb94:	10a4      	asrs	r4, r4, #2
 800cb96:	2600      	movs	r6, #0
 800cb98:	42a6      	cmp	r6, r4
 800cb9a:	d109      	bne.n	800cbb0 <__libc_init_array+0x24>
 800cb9c:	4d0b      	ldr	r5, [pc, #44]	; (800cbcc <__libc_init_array+0x40>)
 800cb9e:	4c0c      	ldr	r4, [pc, #48]	; (800cbd0 <__libc_init_array+0x44>)
 800cba0:	f005 f9e4 	bl	8011f6c <_init>
 800cba4:	1b64      	subs	r4, r4, r5
 800cba6:	10a4      	asrs	r4, r4, #2
 800cba8:	2600      	movs	r6, #0
 800cbaa:	42a6      	cmp	r6, r4
 800cbac:	d105      	bne.n	800cbba <__libc_init_array+0x2e>
 800cbae:	bd70      	pop	{r4, r5, r6, pc}
 800cbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb4:	4798      	blx	r3
 800cbb6:	3601      	adds	r6, #1
 800cbb8:	e7ee      	b.n	800cb98 <__libc_init_array+0xc>
 800cbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbbe:	4798      	blx	r3
 800cbc0:	3601      	adds	r6, #1
 800cbc2:	e7f2      	b.n	800cbaa <__libc_init_array+0x1e>
 800cbc4:	080133b8 	.word	0x080133b8
 800cbc8:	080133b8 	.word	0x080133b8
 800cbcc:	080133b8 	.word	0x080133b8
 800cbd0:	080133bc 	.word	0x080133bc

0800cbd4 <memcpy>:
 800cbd4:	440a      	add	r2, r1
 800cbd6:	4291      	cmp	r1, r2
 800cbd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbdc:	d100      	bne.n	800cbe0 <memcpy+0xc>
 800cbde:	4770      	bx	lr
 800cbe0:	b510      	push	{r4, lr}
 800cbe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbea:	4291      	cmp	r1, r2
 800cbec:	d1f9      	bne.n	800cbe2 <memcpy+0xe>
 800cbee:	bd10      	pop	{r4, pc}

0800cbf0 <memset>:
 800cbf0:	4402      	add	r2, r0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d100      	bne.n	800cbfa <memset+0xa>
 800cbf8:	4770      	bx	lr
 800cbfa:	f803 1b01 	strb.w	r1, [r3], #1
 800cbfe:	e7f9      	b.n	800cbf4 <memset+0x4>

0800cc00 <__cvt>:
 800cc00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc04:	ec55 4b10 	vmov	r4, r5, d0
 800cc08:	2d00      	cmp	r5, #0
 800cc0a:	460e      	mov	r6, r1
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	462b      	mov	r3, r5
 800cc10:	bfbb      	ittet	lt
 800cc12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cc16:	461d      	movlt	r5, r3
 800cc18:	2300      	movge	r3, #0
 800cc1a:	232d      	movlt	r3, #45	; 0x2d
 800cc1c:	700b      	strb	r3, [r1, #0]
 800cc1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cc24:	4691      	mov	r9, r2
 800cc26:	f023 0820 	bic.w	r8, r3, #32
 800cc2a:	bfbc      	itt	lt
 800cc2c:	4622      	movlt	r2, r4
 800cc2e:	4614      	movlt	r4, r2
 800cc30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc34:	d005      	beq.n	800cc42 <__cvt+0x42>
 800cc36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cc3a:	d100      	bne.n	800cc3e <__cvt+0x3e>
 800cc3c:	3601      	adds	r6, #1
 800cc3e:	2102      	movs	r1, #2
 800cc40:	e000      	b.n	800cc44 <__cvt+0x44>
 800cc42:	2103      	movs	r1, #3
 800cc44:	ab03      	add	r3, sp, #12
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	ab02      	add	r3, sp, #8
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	ec45 4b10 	vmov	d0, r4, r5
 800cc50:	4653      	mov	r3, sl
 800cc52:	4632      	mov	r2, r6
 800cc54:	f001 fe5c 	bl	800e910 <_dtoa_r>
 800cc58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cc5c:	4607      	mov	r7, r0
 800cc5e:	d102      	bne.n	800cc66 <__cvt+0x66>
 800cc60:	f019 0f01 	tst.w	r9, #1
 800cc64:	d022      	beq.n	800ccac <__cvt+0xac>
 800cc66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc6a:	eb07 0906 	add.w	r9, r7, r6
 800cc6e:	d110      	bne.n	800cc92 <__cvt+0x92>
 800cc70:	783b      	ldrb	r3, [r7, #0]
 800cc72:	2b30      	cmp	r3, #48	; 0x30
 800cc74:	d10a      	bne.n	800cc8c <__cvt+0x8c>
 800cc76:	2200      	movs	r2, #0
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	f7f3 ff2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc82:	b918      	cbnz	r0, 800cc8c <__cvt+0x8c>
 800cc84:	f1c6 0601 	rsb	r6, r6, #1
 800cc88:	f8ca 6000 	str.w	r6, [sl]
 800cc8c:	f8da 3000 	ldr.w	r3, [sl]
 800cc90:	4499      	add	r9, r3
 800cc92:	2200      	movs	r2, #0
 800cc94:	2300      	movs	r3, #0
 800cc96:	4620      	mov	r0, r4
 800cc98:	4629      	mov	r1, r5
 800cc9a:	f7f3 ff1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc9e:	b108      	cbz	r0, 800cca4 <__cvt+0xa4>
 800cca0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cca4:	2230      	movs	r2, #48	; 0x30
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	454b      	cmp	r3, r9
 800ccaa:	d307      	bcc.n	800ccbc <__cvt+0xbc>
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccb0:	1bdb      	subs	r3, r3, r7
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	6013      	str	r3, [r2, #0]
 800ccb6:	b004      	add	sp, #16
 800ccb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccbc:	1c59      	adds	r1, r3, #1
 800ccbe:	9103      	str	r1, [sp, #12]
 800ccc0:	701a      	strb	r2, [r3, #0]
 800ccc2:	e7f0      	b.n	800cca6 <__cvt+0xa6>

0800ccc4 <__exponent>:
 800ccc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2900      	cmp	r1, #0
 800ccca:	bfb8      	it	lt
 800cccc:	4249      	neglt	r1, r1
 800ccce:	f803 2b02 	strb.w	r2, [r3], #2
 800ccd2:	bfb4      	ite	lt
 800ccd4:	222d      	movlt	r2, #45	; 0x2d
 800ccd6:	222b      	movge	r2, #43	; 0x2b
 800ccd8:	2909      	cmp	r1, #9
 800ccda:	7042      	strb	r2, [r0, #1]
 800ccdc:	dd2a      	ble.n	800cd34 <__exponent+0x70>
 800ccde:	f10d 0407 	add.w	r4, sp, #7
 800cce2:	46a4      	mov	ip, r4
 800cce4:	270a      	movs	r7, #10
 800cce6:	46a6      	mov	lr, r4
 800cce8:	460a      	mov	r2, r1
 800ccea:	fb91 f6f7 	sdiv	r6, r1, r7
 800ccee:	fb07 1516 	mls	r5, r7, r6, r1
 800ccf2:	3530      	adds	r5, #48	; 0x30
 800ccf4:	2a63      	cmp	r2, #99	; 0x63
 800ccf6:	f104 34ff 	add.w	r4, r4, #4294967295
 800ccfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ccfe:	4631      	mov	r1, r6
 800cd00:	dcf1      	bgt.n	800cce6 <__exponent+0x22>
 800cd02:	3130      	adds	r1, #48	; 0x30
 800cd04:	f1ae 0502 	sub.w	r5, lr, #2
 800cd08:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cd0c:	1c44      	adds	r4, r0, #1
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4561      	cmp	r1, ip
 800cd12:	d30a      	bcc.n	800cd2a <__exponent+0x66>
 800cd14:	f10d 0209 	add.w	r2, sp, #9
 800cd18:	eba2 020e 	sub.w	r2, r2, lr
 800cd1c:	4565      	cmp	r5, ip
 800cd1e:	bf88      	it	hi
 800cd20:	2200      	movhi	r2, #0
 800cd22:	4413      	add	r3, r2
 800cd24:	1a18      	subs	r0, r3, r0
 800cd26:	b003      	add	sp, #12
 800cd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cd32:	e7ed      	b.n	800cd10 <__exponent+0x4c>
 800cd34:	2330      	movs	r3, #48	; 0x30
 800cd36:	3130      	adds	r1, #48	; 0x30
 800cd38:	7083      	strb	r3, [r0, #2]
 800cd3a:	70c1      	strb	r1, [r0, #3]
 800cd3c:	1d03      	adds	r3, r0, #4
 800cd3e:	e7f1      	b.n	800cd24 <__exponent+0x60>

0800cd40 <_printf_float>:
 800cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd44:	ed2d 8b02 	vpush	{d8}
 800cd48:	b08d      	sub	sp, #52	; 0x34
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd50:	4616      	mov	r6, r2
 800cd52:	461f      	mov	r7, r3
 800cd54:	4605      	mov	r5, r0
 800cd56:	f002 ff37 	bl	800fbc8 <_localeconv_r>
 800cd5a:	f8d0 a000 	ldr.w	sl, [r0]
 800cd5e:	4650      	mov	r0, sl
 800cd60:	f7f3 fa3e 	bl	80001e0 <strlen>
 800cd64:	2300      	movs	r3, #0
 800cd66:	930a      	str	r3, [sp, #40]	; 0x28
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	9305      	str	r3, [sp, #20]
 800cd6c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd70:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cd74:	3307      	adds	r3, #7
 800cd76:	f023 0307 	bic.w	r3, r3, #7
 800cd7a:	f103 0208 	add.w	r2, r3, #8
 800cd7e:	f8c8 2000 	str.w	r2, [r8]
 800cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd92:	9307      	str	r3, [sp, #28]
 800cd94:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd98:	ee08 0a10 	vmov	s16, r0
 800cd9c:	4b9f      	ldr	r3, [pc, #636]	; (800d01c <_printf_float+0x2dc>)
 800cd9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cda2:	f04f 32ff 	mov.w	r2, #4294967295
 800cda6:	f7f3 fec9 	bl	8000b3c <__aeabi_dcmpun>
 800cdaa:	bb88      	cbnz	r0, 800ce10 <_printf_float+0xd0>
 800cdac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdb0:	4b9a      	ldr	r3, [pc, #616]	; (800d01c <_printf_float+0x2dc>)
 800cdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb6:	f7f3 fea3 	bl	8000b00 <__aeabi_dcmple>
 800cdba:	bb48      	cbnz	r0, 800ce10 <_printf_float+0xd0>
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	f7f3 fe92 	bl	8000aec <__aeabi_dcmplt>
 800cdc8:	b110      	cbz	r0, 800cdd0 <_printf_float+0x90>
 800cdca:	232d      	movs	r3, #45	; 0x2d
 800cdcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd0:	4b93      	ldr	r3, [pc, #588]	; (800d020 <_printf_float+0x2e0>)
 800cdd2:	4894      	ldr	r0, [pc, #592]	; (800d024 <_printf_float+0x2e4>)
 800cdd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cdd8:	bf94      	ite	ls
 800cdda:	4698      	movls	r8, r3
 800cddc:	4680      	movhi	r8, r0
 800cdde:	2303      	movs	r3, #3
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	9b05      	ldr	r3, [sp, #20]
 800cde4:	f023 0204 	bic.w	r2, r3, #4
 800cde8:	6022      	str	r2, [r4, #0]
 800cdea:	f04f 0900 	mov.w	r9, #0
 800cdee:	9700      	str	r7, [sp, #0]
 800cdf0:	4633      	mov	r3, r6
 800cdf2:	aa0b      	add	r2, sp, #44	; 0x2c
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f000 f9d8 	bl	800d1ac <_printf_common>
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	f040 8090 	bne.w	800cf22 <_printf_float+0x1e2>
 800ce02:	f04f 30ff 	mov.w	r0, #4294967295
 800ce06:	b00d      	add	sp, #52	; 0x34
 800ce08:	ecbd 8b02 	vpop	{d8}
 800ce0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce10:	4642      	mov	r2, r8
 800ce12:	464b      	mov	r3, r9
 800ce14:	4640      	mov	r0, r8
 800ce16:	4649      	mov	r1, r9
 800ce18:	f7f3 fe90 	bl	8000b3c <__aeabi_dcmpun>
 800ce1c:	b140      	cbz	r0, 800ce30 <_printf_float+0xf0>
 800ce1e:	464b      	mov	r3, r9
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bfbc      	itt	lt
 800ce24:	232d      	movlt	r3, #45	; 0x2d
 800ce26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce2a:	487f      	ldr	r0, [pc, #508]	; (800d028 <_printf_float+0x2e8>)
 800ce2c:	4b7f      	ldr	r3, [pc, #508]	; (800d02c <_printf_float+0x2ec>)
 800ce2e:	e7d1      	b.n	800cdd4 <_printf_float+0x94>
 800ce30:	6863      	ldr	r3, [r4, #4]
 800ce32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ce36:	9206      	str	r2, [sp, #24]
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	d13f      	bne.n	800cebc <_printf_float+0x17c>
 800ce3c:	2306      	movs	r3, #6
 800ce3e:	6063      	str	r3, [r4, #4]
 800ce40:	9b05      	ldr	r3, [sp, #20]
 800ce42:	6861      	ldr	r1, [r4, #4]
 800ce44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9303      	str	r3, [sp, #12]
 800ce4c:	ab0a      	add	r3, sp, #40	; 0x28
 800ce4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ce52:	ab09      	add	r3, sp, #36	; 0x24
 800ce54:	ec49 8b10 	vmov	d0, r8, r9
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	6022      	str	r2, [r4, #0]
 800ce5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce60:	4628      	mov	r0, r5
 800ce62:	f7ff fecd 	bl	800cc00 <__cvt>
 800ce66:	9b06      	ldr	r3, [sp, #24]
 800ce68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce6a:	2b47      	cmp	r3, #71	; 0x47
 800ce6c:	4680      	mov	r8, r0
 800ce6e:	d108      	bne.n	800ce82 <_printf_float+0x142>
 800ce70:	1cc8      	adds	r0, r1, #3
 800ce72:	db02      	blt.n	800ce7a <_printf_float+0x13a>
 800ce74:	6863      	ldr	r3, [r4, #4]
 800ce76:	4299      	cmp	r1, r3
 800ce78:	dd41      	ble.n	800cefe <_printf_float+0x1be>
 800ce7a:	f1ab 0b02 	sub.w	fp, fp, #2
 800ce7e:	fa5f fb8b 	uxtb.w	fp, fp
 800ce82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce86:	d820      	bhi.n	800ceca <_printf_float+0x18a>
 800ce88:	3901      	subs	r1, #1
 800ce8a:	465a      	mov	r2, fp
 800ce8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce90:	9109      	str	r1, [sp, #36]	; 0x24
 800ce92:	f7ff ff17 	bl	800ccc4 <__exponent>
 800ce96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce98:	1813      	adds	r3, r2, r0
 800ce9a:	2a01      	cmp	r2, #1
 800ce9c:	4681      	mov	r9, r0
 800ce9e:	6123      	str	r3, [r4, #16]
 800cea0:	dc02      	bgt.n	800cea8 <_printf_float+0x168>
 800cea2:	6822      	ldr	r2, [r4, #0]
 800cea4:	07d2      	lsls	r2, r2, #31
 800cea6:	d501      	bpl.n	800ceac <_printf_float+0x16c>
 800cea8:	3301      	adds	r3, #1
 800ceaa:	6123      	str	r3, [r4, #16]
 800ceac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d09c      	beq.n	800cdee <_printf_float+0xae>
 800ceb4:	232d      	movs	r3, #45	; 0x2d
 800ceb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceba:	e798      	b.n	800cdee <_printf_float+0xae>
 800cebc:	9a06      	ldr	r2, [sp, #24]
 800cebe:	2a47      	cmp	r2, #71	; 0x47
 800cec0:	d1be      	bne.n	800ce40 <_printf_float+0x100>
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1bc      	bne.n	800ce40 <_printf_float+0x100>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e7b9      	b.n	800ce3e <_printf_float+0xfe>
 800ceca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cece:	d118      	bne.n	800cf02 <_printf_float+0x1c2>
 800ced0:	2900      	cmp	r1, #0
 800ced2:	6863      	ldr	r3, [r4, #4]
 800ced4:	dd0b      	ble.n	800ceee <_printf_float+0x1ae>
 800ced6:	6121      	str	r1, [r4, #16]
 800ced8:	b913      	cbnz	r3, 800cee0 <_printf_float+0x1a0>
 800ceda:	6822      	ldr	r2, [r4, #0]
 800cedc:	07d0      	lsls	r0, r2, #31
 800cede:	d502      	bpl.n	800cee6 <_printf_float+0x1a6>
 800cee0:	3301      	adds	r3, #1
 800cee2:	440b      	add	r3, r1
 800cee4:	6123      	str	r3, [r4, #16]
 800cee6:	65a1      	str	r1, [r4, #88]	; 0x58
 800cee8:	f04f 0900 	mov.w	r9, #0
 800ceec:	e7de      	b.n	800ceac <_printf_float+0x16c>
 800ceee:	b913      	cbnz	r3, 800cef6 <_printf_float+0x1b6>
 800cef0:	6822      	ldr	r2, [r4, #0]
 800cef2:	07d2      	lsls	r2, r2, #31
 800cef4:	d501      	bpl.n	800cefa <_printf_float+0x1ba>
 800cef6:	3302      	adds	r3, #2
 800cef8:	e7f4      	b.n	800cee4 <_printf_float+0x1a4>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e7f2      	b.n	800cee4 <_printf_float+0x1a4>
 800cefe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cf02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf04:	4299      	cmp	r1, r3
 800cf06:	db05      	blt.n	800cf14 <_printf_float+0x1d4>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	6121      	str	r1, [r4, #16]
 800cf0c:	07d8      	lsls	r0, r3, #31
 800cf0e:	d5ea      	bpl.n	800cee6 <_printf_float+0x1a6>
 800cf10:	1c4b      	adds	r3, r1, #1
 800cf12:	e7e7      	b.n	800cee4 <_printf_float+0x1a4>
 800cf14:	2900      	cmp	r1, #0
 800cf16:	bfd4      	ite	le
 800cf18:	f1c1 0202 	rsble	r2, r1, #2
 800cf1c:	2201      	movgt	r2, #1
 800cf1e:	4413      	add	r3, r2
 800cf20:	e7e0      	b.n	800cee4 <_printf_float+0x1a4>
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	055a      	lsls	r2, r3, #21
 800cf26:	d407      	bmi.n	800cf38 <_printf_float+0x1f8>
 800cf28:	6923      	ldr	r3, [r4, #16]
 800cf2a:	4642      	mov	r2, r8
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b8      	blx	r7
 800cf32:	3001      	adds	r0, #1
 800cf34:	d12c      	bne.n	800cf90 <_printf_float+0x250>
 800cf36:	e764      	b.n	800ce02 <_printf_float+0xc2>
 800cf38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf3c:	f240 80e0 	bls.w	800d100 <_printf_float+0x3c0>
 800cf40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf44:	2200      	movs	r2, #0
 800cf46:	2300      	movs	r3, #0
 800cf48:	f7f3 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d034      	beq.n	800cfba <_printf_float+0x27a>
 800cf50:	4a37      	ldr	r2, [pc, #220]	; (800d030 <_printf_float+0x2f0>)
 800cf52:	2301      	movs	r3, #1
 800cf54:	4631      	mov	r1, r6
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	f43f af51 	beq.w	800ce02 <_printf_float+0xc2>
 800cf60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf64:	429a      	cmp	r2, r3
 800cf66:	db02      	blt.n	800cf6e <_printf_float+0x22e>
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	07d8      	lsls	r0, r3, #31
 800cf6c:	d510      	bpl.n	800cf90 <_printf_float+0x250>
 800cf6e:	ee18 3a10 	vmov	r3, s16
 800cf72:	4652      	mov	r2, sl
 800cf74:	4631      	mov	r1, r6
 800cf76:	4628      	mov	r0, r5
 800cf78:	47b8      	blx	r7
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	f43f af41 	beq.w	800ce02 <_printf_float+0xc2>
 800cf80:	f04f 0800 	mov.w	r8, #0
 800cf84:	f104 091a 	add.w	r9, r4, #26
 800cf88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	4543      	cmp	r3, r8
 800cf8e:	dc09      	bgt.n	800cfa4 <_printf_float+0x264>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	079b      	lsls	r3, r3, #30
 800cf94:	f100 8105 	bmi.w	800d1a2 <_printf_float+0x462>
 800cf98:	68e0      	ldr	r0, [r4, #12]
 800cf9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf9c:	4298      	cmp	r0, r3
 800cf9e:	bfb8      	it	lt
 800cfa0:	4618      	movlt	r0, r3
 800cfa2:	e730      	b.n	800ce06 <_printf_float+0xc6>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	464a      	mov	r2, r9
 800cfa8:	4631      	mov	r1, r6
 800cfaa:	4628      	mov	r0, r5
 800cfac:	47b8      	blx	r7
 800cfae:	3001      	adds	r0, #1
 800cfb0:	f43f af27 	beq.w	800ce02 <_printf_float+0xc2>
 800cfb4:	f108 0801 	add.w	r8, r8, #1
 800cfb8:	e7e6      	b.n	800cf88 <_printf_float+0x248>
 800cfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dc39      	bgt.n	800d034 <_printf_float+0x2f4>
 800cfc0:	4a1b      	ldr	r2, [pc, #108]	; (800d030 <_printf_float+0x2f0>)
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	4631      	mov	r1, r6
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	47b8      	blx	r7
 800cfca:	3001      	adds	r0, #1
 800cfcc:	f43f af19 	beq.w	800ce02 <_printf_float+0xc2>
 800cfd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	d102      	bne.n	800cfde <_printf_float+0x29e>
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	07d9      	lsls	r1, r3, #31
 800cfdc:	d5d8      	bpl.n	800cf90 <_printf_float+0x250>
 800cfde:	ee18 3a10 	vmov	r3, s16
 800cfe2:	4652      	mov	r2, sl
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	47b8      	blx	r7
 800cfea:	3001      	adds	r0, #1
 800cfec:	f43f af09 	beq.w	800ce02 <_printf_float+0xc2>
 800cff0:	f04f 0900 	mov.w	r9, #0
 800cff4:	f104 0a1a 	add.w	sl, r4, #26
 800cff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffa:	425b      	negs	r3, r3
 800cffc:	454b      	cmp	r3, r9
 800cffe:	dc01      	bgt.n	800d004 <_printf_float+0x2c4>
 800d000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d002:	e792      	b.n	800cf2a <_printf_float+0x1ea>
 800d004:	2301      	movs	r3, #1
 800d006:	4652      	mov	r2, sl
 800d008:	4631      	mov	r1, r6
 800d00a:	4628      	mov	r0, r5
 800d00c:	47b8      	blx	r7
 800d00e:	3001      	adds	r0, #1
 800d010:	f43f aef7 	beq.w	800ce02 <_printf_float+0xc2>
 800d014:	f109 0901 	add.w	r9, r9, #1
 800d018:	e7ee      	b.n	800cff8 <_printf_float+0x2b8>
 800d01a:	bf00      	nop
 800d01c:	7fefffff 	.word	0x7fefffff
 800d020:	08012ed8 	.word	0x08012ed8
 800d024:	08012edc 	.word	0x08012edc
 800d028:	08012ee4 	.word	0x08012ee4
 800d02c:	08012ee0 	.word	0x08012ee0
 800d030:	080132e9 	.word	0x080132e9
 800d034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d038:	429a      	cmp	r2, r3
 800d03a:	bfa8      	it	ge
 800d03c:	461a      	movge	r2, r3
 800d03e:	2a00      	cmp	r2, #0
 800d040:	4691      	mov	r9, r2
 800d042:	dc37      	bgt.n	800d0b4 <_printf_float+0x374>
 800d044:	f04f 0b00 	mov.w	fp, #0
 800d048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d04c:	f104 021a 	add.w	r2, r4, #26
 800d050:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d052:	9305      	str	r3, [sp, #20]
 800d054:	eba3 0309 	sub.w	r3, r3, r9
 800d058:	455b      	cmp	r3, fp
 800d05a:	dc33      	bgt.n	800d0c4 <_printf_float+0x384>
 800d05c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d060:	429a      	cmp	r2, r3
 800d062:	db3b      	blt.n	800d0dc <_printf_float+0x39c>
 800d064:	6823      	ldr	r3, [r4, #0]
 800d066:	07da      	lsls	r2, r3, #31
 800d068:	d438      	bmi.n	800d0dc <_printf_float+0x39c>
 800d06a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d06c:	9b05      	ldr	r3, [sp, #20]
 800d06e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	eba2 0901 	sub.w	r9, r2, r1
 800d076:	4599      	cmp	r9, r3
 800d078:	bfa8      	it	ge
 800d07a:	4699      	movge	r9, r3
 800d07c:	f1b9 0f00 	cmp.w	r9, #0
 800d080:	dc35      	bgt.n	800d0ee <_printf_float+0x3ae>
 800d082:	f04f 0800 	mov.w	r8, #0
 800d086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d08a:	f104 0a1a 	add.w	sl, r4, #26
 800d08e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d092:	1a9b      	subs	r3, r3, r2
 800d094:	eba3 0309 	sub.w	r3, r3, r9
 800d098:	4543      	cmp	r3, r8
 800d09a:	f77f af79 	ble.w	800cf90 <_printf_float+0x250>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4652      	mov	r2, sl
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	47b8      	blx	r7
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	f43f aeaa 	beq.w	800ce02 <_printf_float+0xc2>
 800d0ae:	f108 0801 	add.w	r8, r8, #1
 800d0b2:	e7ec      	b.n	800d08e <_printf_float+0x34e>
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	47b8      	blx	r7
 800d0be:	3001      	adds	r0, #1
 800d0c0:	d1c0      	bne.n	800d044 <_printf_float+0x304>
 800d0c2:	e69e      	b.n	800ce02 <_printf_float+0xc2>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	9205      	str	r2, [sp, #20]
 800d0cc:	47b8      	blx	r7
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	f43f ae97 	beq.w	800ce02 <_printf_float+0xc2>
 800d0d4:	9a05      	ldr	r2, [sp, #20]
 800d0d6:	f10b 0b01 	add.w	fp, fp, #1
 800d0da:	e7b9      	b.n	800d050 <_printf_float+0x310>
 800d0dc:	ee18 3a10 	vmov	r3, s16
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	47b8      	blx	r7
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d1be      	bne.n	800d06a <_printf_float+0x32a>
 800d0ec:	e689      	b.n	800ce02 <_printf_float+0xc2>
 800d0ee:	9a05      	ldr	r2, [sp, #20]
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	4442      	add	r2, r8
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	47b8      	blx	r7
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	d1c1      	bne.n	800d082 <_printf_float+0x342>
 800d0fe:	e680      	b.n	800ce02 <_printf_float+0xc2>
 800d100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d102:	2a01      	cmp	r2, #1
 800d104:	dc01      	bgt.n	800d10a <_printf_float+0x3ca>
 800d106:	07db      	lsls	r3, r3, #31
 800d108:	d538      	bpl.n	800d17c <_printf_float+0x43c>
 800d10a:	2301      	movs	r3, #1
 800d10c:	4642      	mov	r2, r8
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	f43f ae74 	beq.w	800ce02 <_printf_float+0xc2>
 800d11a:	ee18 3a10 	vmov	r3, s16
 800d11e:	4652      	mov	r2, sl
 800d120:	4631      	mov	r1, r6
 800d122:	4628      	mov	r0, r5
 800d124:	47b8      	blx	r7
 800d126:	3001      	adds	r0, #1
 800d128:	f43f ae6b 	beq.w	800ce02 <_printf_float+0xc2>
 800d12c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d130:	2200      	movs	r2, #0
 800d132:	2300      	movs	r3, #0
 800d134:	f7f3 fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d138:	b9d8      	cbnz	r0, 800d172 <_printf_float+0x432>
 800d13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d13c:	f108 0201 	add.w	r2, r8, #1
 800d140:	3b01      	subs	r3, #1
 800d142:	4631      	mov	r1, r6
 800d144:	4628      	mov	r0, r5
 800d146:	47b8      	blx	r7
 800d148:	3001      	adds	r0, #1
 800d14a:	d10e      	bne.n	800d16a <_printf_float+0x42a>
 800d14c:	e659      	b.n	800ce02 <_printf_float+0xc2>
 800d14e:	2301      	movs	r3, #1
 800d150:	4652      	mov	r2, sl
 800d152:	4631      	mov	r1, r6
 800d154:	4628      	mov	r0, r5
 800d156:	47b8      	blx	r7
 800d158:	3001      	adds	r0, #1
 800d15a:	f43f ae52 	beq.w	800ce02 <_printf_float+0xc2>
 800d15e:	f108 0801 	add.w	r8, r8, #1
 800d162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d164:	3b01      	subs	r3, #1
 800d166:	4543      	cmp	r3, r8
 800d168:	dcf1      	bgt.n	800d14e <_printf_float+0x40e>
 800d16a:	464b      	mov	r3, r9
 800d16c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d170:	e6dc      	b.n	800cf2c <_printf_float+0x1ec>
 800d172:	f04f 0800 	mov.w	r8, #0
 800d176:	f104 0a1a 	add.w	sl, r4, #26
 800d17a:	e7f2      	b.n	800d162 <_printf_float+0x422>
 800d17c:	2301      	movs	r3, #1
 800d17e:	4642      	mov	r2, r8
 800d180:	e7df      	b.n	800d142 <_printf_float+0x402>
 800d182:	2301      	movs	r3, #1
 800d184:	464a      	mov	r2, r9
 800d186:	4631      	mov	r1, r6
 800d188:	4628      	mov	r0, r5
 800d18a:	47b8      	blx	r7
 800d18c:	3001      	adds	r0, #1
 800d18e:	f43f ae38 	beq.w	800ce02 <_printf_float+0xc2>
 800d192:	f108 0801 	add.w	r8, r8, #1
 800d196:	68e3      	ldr	r3, [r4, #12]
 800d198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d19a:	1a5b      	subs	r3, r3, r1
 800d19c:	4543      	cmp	r3, r8
 800d19e:	dcf0      	bgt.n	800d182 <_printf_float+0x442>
 800d1a0:	e6fa      	b.n	800cf98 <_printf_float+0x258>
 800d1a2:	f04f 0800 	mov.w	r8, #0
 800d1a6:	f104 0919 	add.w	r9, r4, #25
 800d1aa:	e7f4      	b.n	800d196 <_printf_float+0x456>

0800d1ac <_printf_common>:
 800d1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b0:	4616      	mov	r6, r2
 800d1b2:	4699      	mov	r9, r3
 800d1b4:	688a      	ldr	r2, [r1, #8]
 800d1b6:	690b      	ldr	r3, [r1, #16]
 800d1b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	bfb8      	it	lt
 800d1c0:	4613      	movlt	r3, r2
 800d1c2:	6033      	str	r3, [r6, #0]
 800d1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	b10a      	cbz	r2, 800d1d2 <_printf_common+0x26>
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	6033      	str	r3, [r6, #0]
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	0699      	lsls	r1, r3, #26
 800d1d6:	bf42      	ittt	mi
 800d1d8:	6833      	ldrmi	r3, [r6, #0]
 800d1da:	3302      	addmi	r3, #2
 800d1dc:	6033      	strmi	r3, [r6, #0]
 800d1de:	6825      	ldr	r5, [r4, #0]
 800d1e0:	f015 0506 	ands.w	r5, r5, #6
 800d1e4:	d106      	bne.n	800d1f4 <_printf_common+0x48>
 800d1e6:	f104 0a19 	add.w	sl, r4, #25
 800d1ea:	68e3      	ldr	r3, [r4, #12]
 800d1ec:	6832      	ldr	r2, [r6, #0]
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	42ab      	cmp	r3, r5
 800d1f2:	dc26      	bgt.n	800d242 <_printf_common+0x96>
 800d1f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1f8:	1e13      	subs	r3, r2, #0
 800d1fa:	6822      	ldr	r2, [r4, #0]
 800d1fc:	bf18      	it	ne
 800d1fe:	2301      	movne	r3, #1
 800d200:	0692      	lsls	r2, r2, #26
 800d202:	d42b      	bmi.n	800d25c <_printf_common+0xb0>
 800d204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d208:	4649      	mov	r1, r9
 800d20a:	4638      	mov	r0, r7
 800d20c:	47c0      	blx	r8
 800d20e:	3001      	adds	r0, #1
 800d210:	d01e      	beq.n	800d250 <_printf_common+0xa4>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	68e5      	ldr	r5, [r4, #12]
 800d216:	6832      	ldr	r2, [r6, #0]
 800d218:	f003 0306 	and.w	r3, r3, #6
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	bf08      	it	eq
 800d220:	1aad      	subeq	r5, r5, r2
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	6922      	ldr	r2, [r4, #16]
 800d226:	bf0c      	ite	eq
 800d228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d22c:	2500      	movne	r5, #0
 800d22e:	4293      	cmp	r3, r2
 800d230:	bfc4      	itt	gt
 800d232:	1a9b      	subgt	r3, r3, r2
 800d234:	18ed      	addgt	r5, r5, r3
 800d236:	2600      	movs	r6, #0
 800d238:	341a      	adds	r4, #26
 800d23a:	42b5      	cmp	r5, r6
 800d23c:	d11a      	bne.n	800d274 <_printf_common+0xc8>
 800d23e:	2000      	movs	r0, #0
 800d240:	e008      	b.n	800d254 <_printf_common+0xa8>
 800d242:	2301      	movs	r3, #1
 800d244:	4652      	mov	r2, sl
 800d246:	4649      	mov	r1, r9
 800d248:	4638      	mov	r0, r7
 800d24a:	47c0      	blx	r8
 800d24c:	3001      	adds	r0, #1
 800d24e:	d103      	bne.n	800d258 <_printf_common+0xac>
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	3501      	adds	r5, #1
 800d25a:	e7c6      	b.n	800d1ea <_printf_common+0x3e>
 800d25c:	18e1      	adds	r1, r4, r3
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	2030      	movs	r0, #48	; 0x30
 800d262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d266:	4422      	add	r2, r4
 800d268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d26c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d270:	3302      	adds	r3, #2
 800d272:	e7c7      	b.n	800d204 <_printf_common+0x58>
 800d274:	2301      	movs	r3, #1
 800d276:	4622      	mov	r2, r4
 800d278:	4649      	mov	r1, r9
 800d27a:	4638      	mov	r0, r7
 800d27c:	47c0      	blx	r8
 800d27e:	3001      	adds	r0, #1
 800d280:	d0e6      	beq.n	800d250 <_printf_common+0xa4>
 800d282:	3601      	adds	r6, #1
 800d284:	e7d9      	b.n	800d23a <_printf_common+0x8e>
	...

0800d288 <_printf_i>:
 800d288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	460c      	mov	r4, r1
 800d28e:	4691      	mov	r9, r2
 800d290:	7e27      	ldrb	r7, [r4, #24]
 800d292:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d294:	2f78      	cmp	r7, #120	; 0x78
 800d296:	4680      	mov	r8, r0
 800d298:	469a      	mov	sl, r3
 800d29a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d29e:	d807      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2a0:	2f62      	cmp	r7, #98	; 0x62
 800d2a2:	d80a      	bhi.n	800d2ba <_printf_i+0x32>
 800d2a4:	2f00      	cmp	r7, #0
 800d2a6:	f000 80d8 	beq.w	800d45a <_printf_i+0x1d2>
 800d2aa:	2f58      	cmp	r7, #88	; 0x58
 800d2ac:	f000 80a3 	beq.w	800d3f6 <_printf_i+0x16e>
 800d2b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d2b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2b8:	e03a      	b.n	800d330 <_printf_i+0xa8>
 800d2ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2be:	2b15      	cmp	r3, #21
 800d2c0:	d8f6      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2c2:	a001      	add	r0, pc, #4	; (adr r0, 800d2c8 <_printf_i+0x40>)
 800d2c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d2c8:	0800d321 	.word	0x0800d321
 800d2cc:	0800d335 	.word	0x0800d335
 800d2d0:	0800d2b1 	.word	0x0800d2b1
 800d2d4:	0800d2b1 	.word	0x0800d2b1
 800d2d8:	0800d2b1 	.word	0x0800d2b1
 800d2dc:	0800d2b1 	.word	0x0800d2b1
 800d2e0:	0800d335 	.word	0x0800d335
 800d2e4:	0800d2b1 	.word	0x0800d2b1
 800d2e8:	0800d2b1 	.word	0x0800d2b1
 800d2ec:	0800d2b1 	.word	0x0800d2b1
 800d2f0:	0800d2b1 	.word	0x0800d2b1
 800d2f4:	0800d441 	.word	0x0800d441
 800d2f8:	0800d365 	.word	0x0800d365
 800d2fc:	0800d423 	.word	0x0800d423
 800d300:	0800d2b1 	.word	0x0800d2b1
 800d304:	0800d2b1 	.word	0x0800d2b1
 800d308:	0800d463 	.word	0x0800d463
 800d30c:	0800d2b1 	.word	0x0800d2b1
 800d310:	0800d365 	.word	0x0800d365
 800d314:	0800d2b1 	.word	0x0800d2b1
 800d318:	0800d2b1 	.word	0x0800d2b1
 800d31c:	0800d42b 	.word	0x0800d42b
 800d320:	680b      	ldr	r3, [r1, #0]
 800d322:	1d1a      	adds	r2, r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	600a      	str	r2, [r1, #0]
 800d328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d32c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d330:	2301      	movs	r3, #1
 800d332:	e0a3      	b.n	800d47c <_printf_i+0x1f4>
 800d334:	6825      	ldr	r5, [r4, #0]
 800d336:	6808      	ldr	r0, [r1, #0]
 800d338:	062e      	lsls	r6, r5, #24
 800d33a:	f100 0304 	add.w	r3, r0, #4
 800d33e:	d50a      	bpl.n	800d356 <_printf_i+0xce>
 800d340:	6805      	ldr	r5, [r0, #0]
 800d342:	600b      	str	r3, [r1, #0]
 800d344:	2d00      	cmp	r5, #0
 800d346:	da03      	bge.n	800d350 <_printf_i+0xc8>
 800d348:	232d      	movs	r3, #45	; 0x2d
 800d34a:	426d      	negs	r5, r5
 800d34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d350:	485e      	ldr	r0, [pc, #376]	; (800d4cc <_printf_i+0x244>)
 800d352:	230a      	movs	r3, #10
 800d354:	e019      	b.n	800d38a <_printf_i+0x102>
 800d356:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d35a:	6805      	ldr	r5, [r0, #0]
 800d35c:	600b      	str	r3, [r1, #0]
 800d35e:	bf18      	it	ne
 800d360:	b22d      	sxthne	r5, r5
 800d362:	e7ef      	b.n	800d344 <_printf_i+0xbc>
 800d364:	680b      	ldr	r3, [r1, #0]
 800d366:	6825      	ldr	r5, [r4, #0]
 800d368:	1d18      	adds	r0, r3, #4
 800d36a:	6008      	str	r0, [r1, #0]
 800d36c:	0628      	lsls	r0, r5, #24
 800d36e:	d501      	bpl.n	800d374 <_printf_i+0xec>
 800d370:	681d      	ldr	r5, [r3, #0]
 800d372:	e002      	b.n	800d37a <_printf_i+0xf2>
 800d374:	0669      	lsls	r1, r5, #25
 800d376:	d5fb      	bpl.n	800d370 <_printf_i+0xe8>
 800d378:	881d      	ldrh	r5, [r3, #0]
 800d37a:	4854      	ldr	r0, [pc, #336]	; (800d4cc <_printf_i+0x244>)
 800d37c:	2f6f      	cmp	r7, #111	; 0x6f
 800d37e:	bf0c      	ite	eq
 800d380:	2308      	moveq	r3, #8
 800d382:	230a      	movne	r3, #10
 800d384:	2100      	movs	r1, #0
 800d386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d38a:	6866      	ldr	r6, [r4, #4]
 800d38c:	60a6      	str	r6, [r4, #8]
 800d38e:	2e00      	cmp	r6, #0
 800d390:	bfa2      	ittt	ge
 800d392:	6821      	ldrge	r1, [r4, #0]
 800d394:	f021 0104 	bicge.w	r1, r1, #4
 800d398:	6021      	strge	r1, [r4, #0]
 800d39a:	b90d      	cbnz	r5, 800d3a0 <_printf_i+0x118>
 800d39c:	2e00      	cmp	r6, #0
 800d39e:	d04d      	beq.n	800d43c <_printf_i+0x1b4>
 800d3a0:	4616      	mov	r6, r2
 800d3a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3a6:	fb03 5711 	mls	r7, r3, r1, r5
 800d3aa:	5dc7      	ldrb	r7, [r0, r7]
 800d3ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3b0:	462f      	mov	r7, r5
 800d3b2:	42bb      	cmp	r3, r7
 800d3b4:	460d      	mov	r5, r1
 800d3b6:	d9f4      	bls.n	800d3a2 <_printf_i+0x11a>
 800d3b8:	2b08      	cmp	r3, #8
 800d3ba:	d10b      	bne.n	800d3d4 <_printf_i+0x14c>
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	07df      	lsls	r7, r3, #31
 800d3c0:	d508      	bpl.n	800d3d4 <_printf_i+0x14c>
 800d3c2:	6923      	ldr	r3, [r4, #16]
 800d3c4:	6861      	ldr	r1, [r4, #4]
 800d3c6:	4299      	cmp	r1, r3
 800d3c8:	bfde      	ittt	le
 800d3ca:	2330      	movle	r3, #48	; 0x30
 800d3cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3d4:	1b92      	subs	r2, r2, r6
 800d3d6:	6122      	str	r2, [r4, #16]
 800d3d8:	f8cd a000 	str.w	sl, [sp]
 800d3dc:	464b      	mov	r3, r9
 800d3de:	aa03      	add	r2, sp, #12
 800d3e0:	4621      	mov	r1, r4
 800d3e2:	4640      	mov	r0, r8
 800d3e4:	f7ff fee2 	bl	800d1ac <_printf_common>
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d14c      	bne.n	800d486 <_printf_i+0x1fe>
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	b004      	add	sp, #16
 800d3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f6:	4835      	ldr	r0, [pc, #212]	; (800d4cc <_printf_i+0x244>)
 800d3f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	680e      	ldr	r6, [r1, #0]
 800d400:	061f      	lsls	r7, r3, #24
 800d402:	f856 5b04 	ldr.w	r5, [r6], #4
 800d406:	600e      	str	r6, [r1, #0]
 800d408:	d514      	bpl.n	800d434 <_printf_i+0x1ac>
 800d40a:	07d9      	lsls	r1, r3, #31
 800d40c:	bf44      	itt	mi
 800d40e:	f043 0320 	orrmi.w	r3, r3, #32
 800d412:	6023      	strmi	r3, [r4, #0]
 800d414:	b91d      	cbnz	r5, 800d41e <_printf_i+0x196>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	f023 0320 	bic.w	r3, r3, #32
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	2310      	movs	r3, #16
 800d420:	e7b0      	b.n	800d384 <_printf_i+0xfc>
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	f043 0320 	orr.w	r3, r3, #32
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	2378      	movs	r3, #120	; 0x78
 800d42c:	4828      	ldr	r0, [pc, #160]	; (800d4d0 <_printf_i+0x248>)
 800d42e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d432:	e7e3      	b.n	800d3fc <_printf_i+0x174>
 800d434:	065e      	lsls	r6, r3, #25
 800d436:	bf48      	it	mi
 800d438:	b2ad      	uxthmi	r5, r5
 800d43a:	e7e6      	b.n	800d40a <_printf_i+0x182>
 800d43c:	4616      	mov	r6, r2
 800d43e:	e7bb      	b.n	800d3b8 <_printf_i+0x130>
 800d440:	680b      	ldr	r3, [r1, #0]
 800d442:	6826      	ldr	r6, [r4, #0]
 800d444:	6960      	ldr	r0, [r4, #20]
 800d446:	1d1d      	adds	r5, r3, #4
 800d448:	600d      	str	r5, [r1, #0]
 800d44a:	0635      	lsls	r5, r6, #24
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	d501      	bpl.n	800d454 <_printf_i+0x1cc>
 800d450:	6018      	str	r0, [r3, #0]
 800d452:	e002      	b.n	800d45a <_printf_i+0x1d2>
 800d454:	0671      	lsls	r1, r6, #25
 800d456:	d5fb      	bpl.n	800d450 <_printf_i+0x1c8>
 800d458:	8018      	strh	r0, [r3, #0]
 800d45a:	2300      	movs	r3, #0
 800d45c:	6123      	str	r3, [r4, #16]
 800d45e:	4616      	mov	r6, r2
 800d460:	e7ba      	b.n	800d3d8 <_printf_i+0x150>
 800d462:	680b      	ldr	r3, [r1, #0]
 800d464:	1d1a      	adds	r2, r3, #4
 800d466:	600a      	str	r2, [r1, #0]
 800d468:	681e      	ldr	r6, [r3, #0]
 800d46a:	6862      	ldr	r2, [r4, #4]
 800d46c:	2100      	movs	r1, #0
 800d46e:	4630      	mov	r0, r6
 800d470:	f7f2 febe 	bl	80001f0 <memchr>
 800d474:	b108      	cbz	r0, 800d47a <_printf_i+0x1f2>
 800d476:	1b80      	subs	r0, r0, r6
 800d478:	6060      	str	r0, [r4, #4]
 800d47a:	6863      	ldr	r3, [r4, #4]
 800d47c:	6123      	str	r3, [r4, #16]
 800d47e:	2300      	movs	r3, #0
 800d480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d484:	e7a8      	b.n	800d3d8 <_printf_i+0x150>
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	4632      	mov	r2, r6
 800d48a:	4649      	mov	r1, r9
 800d48c:	4640      	mov	r0, r8
 800d48e:	47d0      	blx	sl
 800d490:	3001      	adds	r0, #1
 800d492:	d0ab      	beq.n	800d3ec <_printf_i+0x164>
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	079b      	lsls	r3, r3, #30
 800d498:	d413      	bmi.n	800d4c2 <_printf_i+0x23a>
 800d49a:	68e0      	ldr	r0, [r4, #12]
 800d49c:	9b03      	ldr	r3, [sp, #12]
 800d49e:	4298      	cmp	r0, r3
 800d4a0:	bfb8      	it	lt
 800d4a2:	4618      	movlt	r0, r3
 800d4a4:	e7a4      	b.n	800d3f0 <_printf_i+0x168>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	4632      	mov	r2, r6
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	47d0      	blx	sl
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d09b      	beq.n	800d3ec <_printf_i+0x164>
 800d4b4:	3501      	adds	r5, #1
 800d4b6:	68e3      	ldr	r3, [r4, #12]
 800d4b8:	9903      	ldr	r1, [sp, #12]
 800d4ba:	1a5b      	subs	r3, r3, r1
 800d4bc:	42ab      	cmp	r3, r5
 800d4be:	dcf2      	bgt.n	800d4a6 <_printf_i+0x21e>
 800d4c0:	e7eb      	b.n	800d49a <_printf_i+0x212>
 800d4c2:	2500      	movs	r5, #0
 800d4c4:	f104 0619 	add.w	r6, r4, #25
 800d4c8:	e7f5      	b.n	800d4b6 <_printf_i+0x22e>
 800d4ca:	bf00      	nop
 800d4cc:	08012ee8 	.word	0x08012ee8
 800d4d0:	08012ef9 	.word	0x08012ef9

0800d4d4 <_scanf_float>:
 800d4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	b087      	sub	sp, #28
 800d4da:	4617      	mov	r7, r2
 800d4dc:	9303      	str	r3, [sp, #12]
 800d4de:	688b      	ldr	r3, [r1, #8]
 800d4e0:	1e5a      	subs	r2, r3, #1
 800d4e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d4e6:	bf83      	ittte	hi
 800d4e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d4ec:	195b      	addhi	r3, r3, r5
 800d4ee:	9302      	strhi	r3, [sp, #8]
 800d4f0:	2300      	movls	r3, #0
 800d4f2:	bf86      	itte	hi
 800d4f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d4f8:	608b      	strhi	r3, [r1, #8]
 800d4fa:	9302      	strls	r3, [sp, #8]
 800d4fc:	680b      	ldr	r3, [r1, #0]
 800d4fe:	468b      	mov	fp, r1
 800d500:	2500      	movs	r5, #0
 800d502:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d506:	f84b 3b1c 	str.w	r3, [fp], #28
 800d50a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d50e:	4680      	mov	r8, r0
 800d510:	460c      	mov	r4, r1
 800d512:	465e      	mov	r6, fp
 800d514:	46aa      	mov	sl, r5
 800d516:	46a9      	mov	r9, r5
 800d518:	9501      	str	r5, [sp, #4]
 800d51a:	68a2      	ldr	r2, [r4, #8]
 800d51c:	b152      	cbz	r2, 800d534 <_scanf_float+0x60>
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2b4e      	cmp	r3, #78	; 0x4e
 800d524:	d864      	bhi.n	800d5f0 <_scanf_float+0x11c>
 800d526:	2b40      	cmp	r3, #64	; 0x40
 800d528:	d83c      	bhi.n	800d5a4 <_scanf_float+0xd0>
 800d52a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d52e:	b2c8      	uxtb	r0, r1
 800d530:	280e      	cmp	r0, #14
 800d532:	d93a      	bls.n	800d5aa <_scanf_float+0xd6>
 800d534:	f1b9 0f00 	cmp.w	r9, #0
 800d538:	d003      	beq.n	800d542 <_scanf_float+0x6e>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d546:	f1ba 0f01 	cmp.w	sl, #1
 800d54a:	f200 8113 	bhi.w	800d774 <_scanf_float+0x2a0>
 800d54e:	455e      	cmp	r6, fp
 800d550:	f200 8105 	bhi.w	800d75e <_scanf_float+0x28a>
 800d554:	2501      	movs	r5, #1
 800d556:	4628      	mov	r0, r5
 800d558:	b007      	add	sp, #28
 800d55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d562:	2a0d      	cmp	r2, #13
 800d564:	d8e6      	bhi.n	800d534 <_scanf_float+0x60>
 800d566:	a101      	add	r1, pc, #4	; (adr r1, 800d56c <_scanf_float+0x98>)
 800d568:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d56c:	0800d6ab 	.word	0x0800d6ab
 800d570:	0800d535 	.word	0x0800d535
 800d574:	0800d535 	.word	0x0800d535
 800d578:	0800d535 	.word	0x0800d535
 800d57c:	0800d70b 	.word	0x0800d70b
 800d580:	0800d6e3 	.word	0x0800d6e3
 800d584:	0800d535 	.word	0x0800d535
 800d588:	0800d535 	.word	0x0800d535
 800d58c:	0800d6b9 	.word	0x0800d6b9
 800d590:	0800d535 	.word	0x0800d535
 800d594:	0800d535 	.word	0x0800d535
 800d598:	0800d535 	.word	0x0800d535
 800d59c:	0800d535 	.word	0x0800d535
 800d5a0:	0800d671 	.word	0x0800d671
 800d5a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d5a8:	e7db      	b.n	800d562 <_scanf_float+0x8e>
 800d5aa:	290e      	cmp	r1, #14
 800d5ac:	d8c2      	bhi.n	800d534 <_scanf_float+0x60>
 800d5ae:	a001      	add	r0, pc, #4	; (adr r0, 800d5b4 <_scanf_float+0xe0>)
 800d5b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d5b4:	0800d663 	.word	0x0800d663
 800d5b8:	0800d535 	.word	0x0800d535
 800d5bc:	0800d663 	.word	0x0800d663
 800d5c0:	0800d6f7 	.word	0x0800d6f7
 800d5c4:	0800d535 	.word	0x0800d535
 800d5c8:	0800d611 	.word	0x0800d611
 800d5cc:	0800d64d 	.word	0x0800d64d
 800d5d0:	0800d64d 	.word	0x0800d64d
 800d5d4:	0800d64d 	.word	0x0800d64d
 800d5d8:	0800d64d 	.word	0x0800d64d
 800d5dc:	0800d64d 	.word	0x0800d64d
 800d5e0:	0800d64d 	.word	0x0800d64d
 800d5e4:	0800d64d 	.word	0x0800d64d
 800d5e8:	0800d64d 	.word	0x0800d64d
 800d5ec:	0800d64d 	.word	0x0800d64d
 800d5f0:	2b6e      	cmp	r3, #110	; 0x6e
 800d5f2:	d809      	bhi.n	800d608 <_scanf_float+0x134>
 800d5f4:	2b60      	cmp	r3, #96	; 0x60
 800d5f6:	d8b2      	bhi.n	800d55e <_scanf_float+0x8a>
 800d5f8:	2b54      	cmp	r3, #84	; 0x54
 800d5fa:	d077      	beq.n	800d6ec <_scanf_float+0x218>
 800d5fc:	2b59      	cmp	r3, #89	; 0x59
 800d5fe:	d199      	bne.n	800d534 <_scanf_float+0x60>
 800d600:	2d07      	cmp	r5, #7
 800d602:	d197      	bne.n	800d534 <_scanf_float+0x60>
 800d604:	2508      	movs	r5, #8
 800d606:	e029      	b.n	800d65c <_scanf_float+0x188>
 800d608:	2b74      	cmp	r3, #116	; 0x74
 800d60a:	d06f      	beq.n	800d6ec <_scanf_float+0x218>
 800d60c:	2b79      	cmp	r3, #121	; 0x79
 800d60e:	e7f6      	b.n	800d5fe <_scanf_float+0x12a>
 800d610:	6821      	ldr	r1, [r4, #0]
 800d612:	05c8      	lsls	r0, r1, #23
 800d614:	d51a      	bpl.n	800d64c <_scanf_float+0x178>
 800d616:	9b02      	ldr	r3, [sp, #8]
 800d618:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d61c:	6021      	str	r1, [r4, #0]
 800d61e:	f109 0901 	add.w	r9, r9, #1
 800d622:	b11b      	cbz	r3, 800d62c <_scanf_float+0x158>
 800d624:	3b01      	subs	r3, #1
 800d626:	3201      	adds	r2, #1
 800d628:	9302      	str	r3, [sp, #8]
 800d62a:	60a2      	str	r2, [r4, #8]
 800d62c:	68a3      	ldr	r3, [r4, #8]
 800d62e:	3b01      	subs	r3, #1
 800d630:	60a3      	str	r3, [r4, #8]
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	3301      	adds	r3, #1
 800d636:	6123      	str	r3, [r4, #16]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	607b      	str	r3, [r7, #4]
 800d640:	f340 8084 	ble.w	800d74c <_scanf_float+0x278>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	3301      	adds	r3, #1
 800d648:	603b      	str	r3, [r7, #0]
 800d64a:	e766      	b.n	800d51a <_scanf_float+0x46>
 800d64c:	eb1a 0f05 	cmn.w	sl, r5
 800d650:	f47f af70 	bne.w	800d534 <_scanf_float+0x60>
 800d654:	6822      	ldr	r2, [r4, #0]
 800d656:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d65a:	6022      	str	r2, [r4, #0]
 800d65c:	f806 3b01 	strb.w	r3, [r6], #1
 800d660:	e7e4      	b.n	800d62c <_scanf_float+0x158>
 800d662:	6822      	ldr	r2, [r4, #0]
 800d664:	0610      	lsls	r0, r2, #24
 800d666:	f57f af65 	bpl.w	800d534 <_scanf_float+0x60>
 800d66a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d66e:	e7f4      	b.n	800d65a <_scanf_float+0x186>
 800d670:	f1ba 0f00 	cmp.w	sl, #0
 800d674:	d10e      	bne.n	800d694 <_scanf_float+0x1c0>
 800d676:	f1b9 0f00 	cmp.w	r9, #0
 800d67a:	d10e      	bne.n	800d69a <_scanf_float+0x1c6>
 800d67c:	6822      	ldr	r2, [r4, #0]
 800d67e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d682:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d686:	d108      	bne.n	800d69a <_scanf_float+0x1c6>
 800d688:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d68c:	6022      	str	r2, [r4, #0]
 800d68e:	f04f 0a01 	mov.w	sl, #1
 800d692:	e7e3      	b.n	800d65c <_scanf_float+0x188>
 800d694:	f1ba 0f02 	cmp.w	sl, #2
 800d698:	d055      	beq.n	800d746 <_scanf_float+0x272>
 800d69a:	2d01      	cmp	r5, #1
 800d69c:	d002      	beq.n	800d6a4 <_scanf_float+0x1d0>
 800d69e:	2d04      	cmp	r5, #4
 800d6a0:	f47f af48 	bne.w	800d534 <_scanf_float+0x60>
 800d6a4:	3501      	adds	r5, #1
 800d6a6:	b2ed      	uxtb	r5, r5
 800d6a8:	e7d8      	b.n	800d65c <_scanf_float+0x188>
 800d6aa:	f1ba 0f01 	cmp.w	sl, #1
 800d6ae:	f47f af41 	bne.w	800d534 <_scanf_float+0x60>
 800d6b2:	f04f 0a02 	mov.w	sl, #2
 800d6b6:	e7d1      	b.n	800d65c <_scanf_float+0x188>
 800d6b8:	b97d      	cbnz	r5, 800d6da <_scanf_float+0x206>
 800d6ba:	f1b9 0f00 	cmp.w	r9, #0
 800d6be:	f47f af3c 	bne.w	800d53a <_scanf_float+0x66>
 800d6c2:	6822      	ldr	r2, [r4, #0]
 800d6c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d6c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d6cc:	f47f af39 	bne.w	800d542 <_scanf_float+0x6e>
 800d6d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d6d4:	6022      	str	r2, [r4, #0]
 800d6d6:	2501      	movs	r5, #1
 800d6d8:	e7c0      	b.n	800d65c <_scanf_float+0x188>
 800d6da:	2d03      	cmp	r5, #3
 800d6dc:	d0e2      	beq.n	800d6a4 <_scanf_float+0x1d0>
 800d6de:	2d05      	cmp	r5, #5
 800d6e0:	e7de      	b.n	800d6a0 <_scanf_float+0x1cc>
 800d6e2:	2d02      	cmp	r5, #2
 800d6e4:	f47f af26 	bne.w	800d534 <_scanf_float+0x60>
 800d6e8:	2503      	movs	r5, #3
 800d6ea:	e7b7      	b.n	800d65c <_scanf_float+0x188>
 800d6ec:	2d06      	cmp	r5, #6
 800d6ee:	f47f af21 	bne.w	800d534 <_scanf_float+0x60>
 800d6f2:	2507      	movs	r5, #7
 800d6f4:	e7b2      	b.n	800d65c <_scanf_float+0x188>
 800d6f6:	6822      	ldr	r2, [r4, #0]
 800d6f8:	0591      	lsls	r1, r2, #22
 800d6fa:	f57f af1b 	bpl.w	800d534 <_scanf_float+0x60>
 800d6fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d702:	6022      	str	r2, [r4, #0]
 800d704:	f8cd 9004 	str.w	r9, [sp, #4]
 800d708:	e7a8      	b.n	800d65c <_scanf_float+0x188>
 800d70a:	6822      	ldr	r2, [r4, #0]
 800d70c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d710:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d714:	d006      	beq.n	800d724 <_scanf_float+0x250>
 800d716:	0550      	lsls	r0, r2, #21
 800d718:	f57f af0c 	bpl.w	800d534 <_scanf_float+0x60>
 800d71c:	f1b9 0f00 	cmp.w	r9, #0
 800d720:	f43f af0f 	beq.w	800d542 <_scanf_float+0x6e>
 800d724:	0591      	lsls	r1, r2, #22
 800d726:	bf58      	it	pl
 800d728:	9901      	ldrpl	r1, [sp, #4]
 800d72a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d72e:	bf58      	it	pl
 800d730:	eba9 0101 	subpl.w	r1, r9, r1
 800d734:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d738:	bf58      	it	pl
 800d73a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d73e:	6022      	str	r2, [r4, #0]
 800d740:	f04f 0900 	mov.w	r9, #0
 800d744:	e78a      	b.n	800d65c <_scanf_float+0x188>
 800d746:	f04f 0a03 	mov.w	sl, #3
 800d74a:	e787      	b.n	800d65c <_scanf_float+0x188>
 800d74c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d750:	4639      	mov	r1, r7
 800d752:	4640      	mov	r0, r8
 800d754:	4798      	blx	r3
 800d756:	2800      	cmp	r0, #0
 800d758:	f43f aedf 	beq.w	800d51a <_scanf_float+0x46>
 800d75c:	e6ea      	b.n	800d534 <_scanf_float+0x60>
 800d75e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d762:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d766:	463a      	mov	r2, r7
 800d768:	4640      	mov	r0, r8
 800d76a:	4798      	blx	r3
 800d76c:	6923      	ldr	r3, [r4, #16]
 800d76e:	3b01      	subs	r3, #1
 800d770:	6123      	str	r3, [r4, #16]
 800d772:	e6ec      	b.n	800d54e <_scanf_float+0x7a>
 800d774:	1e6b      	subs	r3, r5, #1
 800d776:	2b06      	cmp	r3, #6
 800d778:	d825      	bhi.n	800d7c6 <_scanf_float+0x2f2>
 800d77a:	2d02      	cmp	r5, #2
 800d77c:	d836      	bhi.n	800d7ec <_scanf_float+0x318>
 800d77e:	455e      	cmp	r6, fp
 800d780:	f67f aee8 	bls.w	800d554 <_scanf_float+0x80>
 800d784:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d788:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d78c:	463a      	mov	r2, r7
 800d78e:	4640      	mov	r0, r8
 800d790:	4798      	blx	r3
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	3b01      	subs	r3, #1
 800d796:	6123      	str	r3, [r4, #16]
 800d798:	e7f1      	b.n	800d77e <_scanf_float+0x2aa>
 800d79a:	9802      	ldr	r0, [sp, #8]
 800d79c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d7a4:	9002      	str	r0, [sp, #8]
 800d7a6:	463a      	mov	r2, r7
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	4798      	blx	r3
 800d7ac:	6923      	ldr	r3, [r4, #16]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	6123      	str	r3, [r4, #16]
 800d7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7b6:	fa5f fa8a 	uxtb.w	sl, sl
 800d7ba:	f1ba 0f02 	cmp.w	sl, #2
 800d7be:	d1ec      	bne.n	800d79a <_scanf_float+0x2c6>
 800d7c0:	3d03      	subs	r5, #3
 800d7c2:	b2ed      	uxtb	r5, r5
 800d7c4:	1b76      	subs	r6, r6, r5
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	05da      	lsls	r2, r3, #23
 800d7ca:	d52f      	bpl.n	800d82c <_scanf_float+0x358>
 800d7cc:	055b      	lsls	r3, r3, #21
 800d7ce:	d510      	bpl.n	800d7f2 <_scanf_float+0x31e>
 800d7d0:	455e      	cmp	r6, fp
 800d7d2:	f67f aebf 	bls.w	800d554 <_scanf_float+0x80>
 800d7d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7de:	463a      	mov	r2, r7
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4798      	blx	r3
 800d7e4:	6923      	ldr	r3, [r4, #16]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	e7f1      	b.n	800d7d0 <_scanf_float+0x2fc>
 800d7ec:	46aa      	mov	sl, r5
 800d7ee:	9602      	str	r6, [sp, #8]
 800d7f0:	e7df      	b.n	800d7b2 <_scanf_float+0x2de>
 800d7f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d7f6:	6923      	ldr	r3, [r4, #16]
 800d7f8:	2965      	cmp	r1, #101	; 0x65
 800d7fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800d802:	6123      	str	r3, [r4, #16]
 800d804:	d00c      	beq.n	800d820 <_scanf_float+0x34c>
 800d806:	2945      	cmp	r1, #69	; 0x45
 800d808:	d00a      	beq.n	800d820 <_scanf_float+0x34c>
 800d80a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d80e:	463a      	mov	r2, r7
 800d810:	4640      	mov	r0, r8
 800d812:	4798      	blx	r3
 800d814:	6923      	ldr	r3, [r4, #16]
 800d816:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d81a:	3b01      	subs	r3, #1
 800d81c:	1eb5      	subs	r5, r6, #2
 800d81e:	6123      	str	r3, [r4, #16]
 800d820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d824:	463a      	mov	r2, r7
 800d826:	4640      	mov	r0, r8
 800d828:	4798      	blx	r3
 800d82a:	462e      	mov	r6, r5
 800d82c:	6825      	ldr	r5, [r4, #0]
 800d82e:	f015 0510 	ands.w	r5, r5, #16
 800d832:	d158      	bne.n	800d8e6 <_scanf_float+0x412>
 800d834:	7035      	strb	r5, [r6, #0]
 800d836:	6823      	ldr	r3, [r4, #0]
 800d838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d83c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d840:	d11c      	bne.n	800d87c <_scanf_float+0x3a8>
 800d842:	9b01      	ldr	r3, [sp, #4]
 800d844:	454b      	cmp	r3, r9
 800d846:	eba3 0209 	sub.w	r2, r3, r9
 800d84a:	d124      	bne.n	800d896 <_scanf_float+0x3c2>
 800d84c:	2200      	movs	r2, #0
 800d84e:	4659      	mov	r1, fp
 800d850:	4640      	mov	r0, r8
 800d852:	f000 ff23 	bl	800e69c <_strtod_r>
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	6821      	ldr	r1, [r4, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f011 0f02 	tst.w	r1, #2
 800d860:	ec57 6b10 	vmov	r6, r7, d0
 800d864:	f103 0204 	add.w	r2, r3, #4
 800d868:	d020      	beq.n	800d8ac <_scanf_float+0x3d8>
 800d86a:	9903      	ldr	r1, [sp, #12]
 800d86c:	600a      	str	r2, [r1, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	e9c3 6700 	strd	r6, r7, [r3]
 800d874:	68e3      	ldr	r3, [r4, #12]
 800d876:	3301      	adds	r3, #1
 800d878:	60e3      	str	r3, [r4, #12]
 800d87a:	e66c      	b.n	800d556 <_scanf_float+0x82>
 800d87c:	9b04      	ldr	r3, [sp, #16]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0e4      	beq.n	800d84c <_scanf_float+0x378>
 800d882:	9905      	ldr	r1, [sp, #20]
 800d884:	230a      	movs	r3, #10
 800d886:	462a      	mov	r2, r5
 800d888:	3101      	adds	r1, #1
 800d88a:	4640      	mov	r0, r8
 800d88c:	f000 ff90 	bl	800e7b0 <_strtol_r>
 800d890:	9b04      	ldr	r3, [sp, #16]
 800d892:	9e05      	ldr	r6, [sp, #20]
 800d894:	1ac2      	subs	r2, r0, r3
 800d896:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d89a:	429e      	cmp	r6, r3
 800d89c:	bf28      	it	cs
 800d89e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d8a2:	4912      	ldr	r1, [pc, #72]	; (800d8ec <_scanf_float+0x418>)
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f000 f82b 	bl	800d900 <siprintf>
 800d8aa:	e7cf      	b.n	800d84c <_scanf_float+0x378>
 800d8ac:	f011 0f04 	tst.w	r1, #4
 800d8b0:	9903      	ldr	r1, [sp, #12]
 800d8b2:	600a      	str	r2, [r1, #0]
 800d8b4:	d1db      	bne.n	800d86e <_scanf_float+0x39a>
 800d8b6:	f8d3 8000 	ldr.w	r8, [r3]
 800d8ba:	ee10 2a10 	vmov	r2, s0
 800d8be:	ee10 0a10 	vmov	r0, s0
 800d8c2:	463b      	mov	r3, r7
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	f7f3 f939 	bl	8000b3c <__aeabi_dcmpun>
 800d8ca:	b128      	cbz	r0, 800d8d8 <_scanf_float+0x404>
 800d8cc:	4808      	ldr	r0, [pc, #32]	; (800d8f0 <_scanf_float+0x41c>)
 800d8ce:	f000 f811 	bl	800d8f4 <nanf>
 800d8d2:	ed88 0a00 	vstr	s0, [r8]
 800d8d6:	e7cd      	b.n	800d874 <_scanf_float+0x3a0>
 800d8d8:	4630      	mov	r0, r6
 800d8da:	4639      	mov	r1, r7
 800d8dc:	f7f3 f98c 	bl	8000bf8 <__aeabi_d2f>
 800d8e0:	f8c8 0000 	str.w	r0, [r8]
 800d8e4:	e7c6      	b.n	800d874 <_scanf_float+0x3a0>
 800d8e6:	2500      	movs	r5, #0
 800d8e8:	e635      	b.n	800d556 <_scanf_float+0x82>
 800d8ea:	bf00      	nop
 800d8ec:	08012f0a 	.word	0x08012f0a
 800d8f0:	0801333b 	.word	0x0801333b

0800d8f4 <nanf>:
 800d8f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d8fc <nanf+0x8>
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	7fc00000 	.word	0x7fc00000

0800d900 <siprintf>:
 800d900:	b40e      	push	{r1, r2, r3}
 800d902:	b500      	push	{lr}
 800d904:	b09c      	sub	sp, #112	; 0x70
 800d906:	ab1d      	add	r3, sp, #116	; 0x74
 800d908:	9002      	str	r0, [sp, #8]
 800d90a:	9006      	str	r0, [sp, #24]
 800d90c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d910:	4809      	ldr	r0, [pc, #36]	; (800d938 <siprintf+0x38>)
 800d912:	9107      	str	r1, [sp, #28]
 800d914:	9104      	str	r1, [sp, #16]
 800d916:	4909      	ldr	r1, [pc, #36]	; (800d93c <siprintf+0x3c>)
 800d918:	f853 2b04 	ldr.w	r2, [r3], #4
 800d91c:	9105      	str	r1, [sp, #20]
 800d91e:	6800      	ldr	r0, [r0, #0]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	a902      	add	r1, sp, #8
 800d924:	f002 ff50 	bl	80107c8 <_svfiprintf_r>
 800d928:	9b02      	ldr	r3, [sp, #8]
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]
 800d92e:	b01c      	add	sp, #112	; 0x70
 800d930:	f85d eb04 	ldr.w	lr, [sp], #4
 800d934:	b003      	add	sp, #12
 800d936:	4770      	bx	lr
 800d938:	200000e8 	.word	0x200000e8
 800d93c:	ffff0208 	.word	0xffff0208

0800d940 <siscanf>:
 800d940:	b40e      	push	{r1, r2, r3}
 800d942:	b510      	push	{r4, lr}
 800d944:	b09f      	sub	sp, #124	; 0x7c
 800d946:	ac21      	add	r4, sp, #132	; 0x84
 800d948:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d94c:	f854 2b04 	ldr.w	r2, [r4], #4
 800d950:	9201      	str	r2, [sp, #4]
 800d952:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d956:	9004      	str	r0, [sp, #16]
 800d958:	9008      	str	r0, [sp, #32]
 800d95a:	f7f2 fc41 	bl	80001e0 <strlen>
 800d95e:	4b0c      	ldr	r3, [pc, #48]	; (800d990 <siscanf+0x50>)
 800d960:	9005      	str	r0, [sp, #20]
 800d962:	9009      	str	r0, [sp, #36]	; 0x24
 800d964:	930d      	str	r3, [sp, #52]	; 0x34
 800d966:	480b      	ldr	r0, [pc, #44]	; (800d994 <siscanf+0x54>)
 800d968:	9a01      	ldr	r2, [sp, #4]
 800d96a:	6800      	ldr	r0, [r0, #0]
 800d96c:	9403      	str	r4, [sp, #12]
 800d96e:	2300      	movs	r3, #0
 800d970:	9311      	str	r3, [sp, #68]	; 0x44
 800d972:	9316      	str	r3, [sp, #88]	; 0x58
 800d974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d978:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d97c:	a904      	add	r1, sp, #16
 800d97e:	4623      	mov	r3, r4
 800d980:	f003 f87c 	bl	8010a7c <__ssvfiscanf_r>
 800d984:	b01f      	add	sp, #124	; 0x7c
 800d986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d98a:	b003      	add	sp, #12
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	0800d9bb 	.word	0x0800d9bb
 800d994:	200000e8 	.word	0x200000e8

0800d998 <__sread>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	460c      	mov	r4, r1
 800d99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a0:	f003 fb30 	bl	8011004 <_read_r>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	bfab      	itete	ge
 800d9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d9ac:	181b      	addge	r3, r3, r0
 800d9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9b2:	bfac      	ite	ge
 800d9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9b6:	81a3      	strhlt	r3, [r4, #12]
 800d9b8:	bd10      	pop	{r4, pc}

0800d9ba <__seofread>:
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	4770      	bx	lr

0800d9be <__swrite>:
 800d9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c2:	461f      	mov	r7, r3
 800d9c4:	898b      	ldrh	r3, [r1, #12]
 800d9c6:	05db      	lsls	r3, r3, #23
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	4616      	mov	r6, r2
 800d9ce:	d505      	bpl.n	800d9dc <__swrite+0x1e>
 800d9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f002 f8fa 	bl	800fbd0 <_lseek_r>
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9e6:	81a3      	strh	r3, [r4, #12]
 800d9e8:	4632      	mov	r2, r6
 800d9ea:	463b      	mov	r3, r7
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f2:	f000 bedf 	b.w	800e7b4 <_write_r>

0800d9f6 <__sseek>:
 800d9f6:	b510      	push	{r4, lr}
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fe:	f002 f8e7 	bl	800fbd0 <_lseek_r>
 800da02:	1c43      	adds	r3, r0, #1
 800da04:	89a3      	ldrh	r3, [r4, #12]
 800da06:	bf15      	itete	ne
 800da08:	6560      	strne	r0, [r4, #84]	; 0x54
 800da0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da12:	81a3      	strheq	r3, [r4, #12]
 800da14:	bf18      	it	ne
 800da16:	81a3      	strhne	r3, [r4, #12]
 800da18:	bd10      	pop	{r4, pc}

0800da1a <__sclose>:
 800da1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da1e:	f000 bedb 	b.w	800e7d8 <_close_r>

0800da22 <strstr>:
 800da22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da24:	780c      	ldrb	r4, [r1, #0]
 800da26:	b164      	cbz	r4, 800da42 <strstr+0x20>
 800da28:	4603      	mov	r3, r0
 800da2a:	781a      	ldrb	r2, [r3, #0]
 800da2c:	4618      	mov	r0, r3
 800da2e:	1c5e      	adds	r6, r3, #1
 800da30:	b90a      	cbnz	r2, 800da36 <strstr+0x14>
 800da32:	4610      	mov	r0, r2
 800da34:	e005      	b.n	800da42 <strstr+0x20>
 800da36:	4294      	cmp	r4, r2
 800da38:	d108      	bne.n	800da4c <strstr+0x2a>
 800da3a:	460d      	mov	r5, r1
 800da3c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800da40:	b902      	cbnz	r2, 800da44 <strstr+0x22>
 800da42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da44:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800da48:	4297      	cmp	r7, r2
 800da4a:	d0f7      	beq.n	800da3c <strstr+0x1a>
 800da4c:	4633      	mov	r3, r6
 800da4e:	e7ec      	b.n	800da2a <strstr+0x8>

0800da50 <sulp>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	4604      	mov	r4, r0
 800da54:	460d      	mov	r5, r1
 800da56:	ec45 4b10 	vmov	d0, r4, r5
 800da5a:	4616      	mov	r6, r2
 800da5c:	f002 fc50 	bl	8010300 <__ulp>
 800da60:	ec51 0b10 	vmov	r0, r1, d0
 800da64:	b17e      	cbz	r6, 800da86 <sulp+0x36>
 800da66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da6e:	2b00      	cmp	r3, #0
 800da70:	dd09      	ble.n	800da86 <sulp+0x36>
 800da72:	051b      	lsls	r3, r3, #20
 800da74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800da78:	2400      	movs	r4, #0
 800da7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800da7e:	4622      	mov	r2, r4
 800da80:	462b      	mov	r3, r5
 800da82:	f7f2 fdc1 	bl	8000608 <__aeabi_dmul>
 800da86:	bd70      	pop	{r4, r5, r6, pc}

0800da88 <_strtod_l>:
 800da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	b0a3      	sub	sp, #140	; 0x8c
 800da8e:	461f      	mov	r7, r3
 800da90:	2300      	movs	r3, #0
 800da92:	931e      	str	r3, [sp, #120]	; 0x78
 800da94:	4ba4      	ldr	r3, [pc, #656]	; (800dd28 <_strtod_l+0x2a0>)
 800da96:	9219      	str	r2, [sp, #100]	; 0x64
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	9307      	str	r3, [sp, #28]
 800da9c:	4604      	mov	r4, r0
 800da9e:	4618      	mov	r0, r3
 800daa0:	4688      	mov	r8, r1
 800daa2:	f7f2 fb9d 	bl	80001e0 <strlen>
 800daa6:	f04f 0a00 	mov.w	sl, #0
 800daaa:	4605      	mov	r5, r0
 800daac:	f04f 0b00 	mov.w	fp, #0
 800dab0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dab6:	781a      	ldrb	r2, [r3, #0]
 800dab8:	2a2b      	cmp	r2, #43	; 0x2b
 800daba:	d04c      	beq.n	800db56 <_strtod_l+0xce>
 800dabc:	d839      	bhi.n	800db32 <_strtod_l+0xaa>
 800dabe:	2a0d      	cmp	r2, #13
 800dac0:	d832      	bhi.n	800db28 <_strtod_l+0xa0>
 800dac2:	2a08      	cmp	r2, #8
 800dac4:	d832      	bhi.n	800db2c <_strtod_l+0xa4>
 800dac6:	2a00      	cmp	r2, #0
 800dac8:	d03c      	beq.n	800db44 <_strtod_l+0xbc>
 800daca:	2300      	movs	r3, #0
 800dacc:	930e      	str	r3, [sp, #56]	; 0x38
 800dace:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800dad0:	7833      	ldrb	r3, [r6, #0]
 800dad2:	2b30      	cmp	r3, #48	; 0x30
 800dad4:	f040 80b4 	bne.w	800dc40 <_strtod_l+0x1b8>
 800dad8:	7873      	ldrb	r3, [r6, #1]
 800dada:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dade:	2b58      	cmp	r3, #88	; 0x58
 800dae0:	d16c      	bne.n	800dbbc <_strtod_l+0x134>
 800dae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dae4:	9301      	str	r3, [sp, #4]
 800dae6:	ab1e      	add	r3, sp, #120	; 0x78
 800dae8:	9702      	str	r7, [sp, #8]
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	4a8f      	ldr	r2, [pc, #572]	; (800dd2c <_strtod_l+0x2a4>)
 800daee:	ab1f      	add	r3, sp, #124	; 0x7c
 800daf0:	a91d      	add	r1, sp, #116	; 0x74
 800daf2:	4620      	mov	r0, r4
 800daf4:	f001 fd60 	bl	800f5b8 <__gethex>
 800daf8:	f010 0707 	ands.w	r7, r0, #7
 800dafc:	4605      	mov	r5, r0
 800dafe:	d005      	beq.n	800db0c <_strtod_l+0x84>
 800db00:	2f06      	cmp	r7, #6
 800db02:	d12a      	bne.n	800db5a <_strtod_l+0xd2>
 800db04:	3601      	adds	r6, #1
 800db06:	2300      	movs	r3, #0
 800db08:	961d      	str	r6, [sp, #116]	; 0x74
 800db0a:	930e      	str	r3, [sp, #56]	; 0x38
 800db0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f040 8596 	bne.w	800e640 <_strtod_l+0xbb8>
 800db14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db16:	b1db      	cbz	r3, 800db50 <_strtod_l+0xc8>
 800db18:	4652      	mov	r2, sl
 800db1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db1e:	ec43 2b10 	vmov	d0, r2, r3
 800db22:	b023      	add	sp, #140	; 0x8c
 800db24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db28:	2a20      	cmp	r2, #32
 800db2a:	d1ce      	bne.n	800daca <_strtod_l+0x42>
 800db2c:	3301      	adds	r3, #1
 800db2e:	931d      	str	r3, [sp, #116]	; 0x74
 800db30:	e7c0      	b.n	800dab4 <_strtod_l+0x2c>
 800db32:	2a2d      	cmp	r2, #45	; 0x2d
 800db34:	d1c9      	bne.n	800daca <_strtod_l+0x42>
 800db36:	2201      	movs	r2, #1
 800db38:	920e      	str	r2, [sp, #56]	; 0x38
 800db3a:	1c5a      	adds	r2, r3, #1
 800db3c:	921d      	str	r2, [sp, #116]	; 0x74
 800db3e:	785b      	ldrb	r3, [r3, #1]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1c4      	bne.n	800dace <_strtod_l+0x46>
 800db44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db46:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f040 8576 	bne.w	800e63c <_strtod_l+0xbb4>
 800db50:	4652      	mov	r2, sl
 800db52:	465b      	mov	r3, fp
 800db54:	e7e3      	b.n	800db1e <_strtod_l+0x96>
 800db56:	2200      	movs	r2, #0
 800db58:	e7ee      	b.n	800db38 <_strtod_l+0xb0>
 800db5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800db5c:	b13a      	cbz	r2, 800db6e <_strtod_l+0xe6>
 800db5e:	2135      	movs	r1, #53	; 0x35
 800db60:	a820      	add	r0, sp, #128	; 0x80
 800db62:	f002 fcd8 	bl	8010516 <__copybits>
 800db66:	991e      	ldr	r1, [sp, #120]	; 0x78
 800db68:	4620      	mov	r0, r4
 800db6a:	f002 f89d 	bl	800fca8 <_Bfree>
 800db6e:	3f01      	subs	r7, #1
 800db70:	2f05      	cmp	r7, #5
 800db72:	d807      	bhi.n	800db84 <_strtod_l+0xfc>
 800db74:	e8df f007 	tbb	[pc, r7]
 800db78:	1d180b0e 	.word	0x1d180b0e
 800db7c:	030e      	.short	0x030e
 800db7e:	f04f 0b00 	mov.w	fp, #0
 800db82:	46da      	mov	sl, fp
 800db84:	0728      	lsls	r0, r5, #28
 800db86:	d5c1      	bpl.n	800db0c <_strtod_l+0x84>
 800db88:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800db8c:	e7be      	b.n	800db0c <_strtod_l+0x84>
 800db8e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800db92:	e7f7      	b.n	800db84 <_strtod_l+0xfc>
 800db94:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800db98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800db9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800db9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dba6:	e7ed      	b.n	800db84 <_strtod_l+0xfc>
 800dba8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800dd30 <_strtod_l+0x2a8>
 800dbac:	f04f 0a00 	mov.w	sl, #0
 800dbb0:	e7e8      	b.n	800db84 <_strtod_l+0xfc>
 800dbb2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dbb6:	f04f 3aff 	mov.w	sl, #4294967295
 800dbba:	e7e3      	b.n	800db84 <_strtod_l+0xfc>
 800dbbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbbe:	1c5a      	adds	r2, r3, #1
 800dbc0:	921d      	str	r2, [sp, #116]	; 0x74
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	2b30      	cmp	r3, #48	; 0x30
 800dbc6:	d0f9      	beq.n	800dbbc <_strtod_l+0x134>
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d09f      	beq.n	800db0c <_strtod_l+0x84>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f04f 0900 	mov.w	r9, #0
 800dbd2:	9304      	str	r3, [sp, #16]
 800dbd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbd6:	930a      	str	r3, [sp, #40]	; 0x28
 800dbd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dbdc:	464f      	mov	r7, r9
 800dbde:	220a      	movs	r2, #10
 800dbe0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dbe2:	7806      	ldrb	r6, [r0, #0]
 800dbe4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dbe8:	b2d9      	uxtb	r1, r3
 800dbea:	2909      	cmp	r1, #9
 800dbec:	d92a      	bls.n	800dc44 <_strtod_l+0x1bc>
 800dbee:	9907      	ldr	r1, [sp, #28]
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	f003 fa6b 	bl	80110cc <strncmp>
 800dbf6:	b398      	cbz	r0, 800dc60 <_strtod_l+0x1d8>
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	4633      	mov	r3, r6
 800dbfc:	463d      	mov	r5, r7
 800dbfe:	9007      	str	r0, [sp, #28]
 800dc00:	4602      	mov	r2, r0
 800dc02:	2b65      	cmp	r3, #101	; 0x65
 800dc04:	d001      	beq.n	800dc0a <_strtod_l+0x182>
 800dc06:	2b45      	cmp	r3, #69	; 0x45
 800dc08:	d118      	bne.n	800dc3c <_strtod_l+0x1b4>
 800dc0a:	b91d      	cbnz	r5, 800dc14 <_strtod_l+0x18c>
 800dc0c:	9b04      	ldr	r3, [sp, #16]
 800dc0e:	4303      	orrs	r3, r0
 800dc10:	d098      	beq.n	800db44 <_strtod_l+0xbc>
 800dc12:	2500      	movs	r5, #0
 800dc14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800dc18:	f108 0301 	add.w	r3, r8, #1
 800dc1c:	931d      	str	r3, [sp, #116]	; 0x74
 800dc1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dc22:	2b2b      	cmp	r3, #43	; 0x2b
 800dc24:	d075      	beq.n	800dd12 <_strtod_l+0x28a>
 800dc26:	2b2d      	cmp	r3, #45	; 0x2d
 800dc28:	d07b      	beq.n	800dd22 <_strtod_l+0x29a>
 800dc2a:	f04f 0c00 	mov.w	ip, #0
 800dc2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dc32:	2909      	cmp	r1, #9
 800dc34:	f240 8082 	bls.w	800dd3c <_strtod_l+0x2b4>
 800dc38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dc3c:	2600      	movs	r6, #0
 800dc3e:	e09d      	b.n	800dd7c <_strtod_l+0x2f4>
 800dc40:	2300      	movs	r3, #0
 800dc42:	e7c4      	b.n	800dbce <_strtod_l+0x146>
 800dc44:	2f08      	cmp	r7, #8
 800dc46:	bfd8      	it	le
 800dc48:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dc4a:	f100 0001 	add.w	r0, r0, #1
 800dc4e:	bfda      	itte	le
 800dc50:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc54:	9309      	strle	r3, [sp, #36]	; 0x24
 800dc56:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dc5a:	3701      	adds	r7, #1
 800dc5c:	901d      	str	r0, [sp, #116]	; 0x74
 800dc5e:	e7bf      	b.n	800dbe0 <_strtod_l+0x158>
 800dc60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc62:	195a      	adds	r2, r3, r5
 800dc64:	921d      	str	r2, [sp, #116]	; 0x74
 800dc66:	5d5b      	ldrb	r3, [r3, r5]
 800dc68:	2f00      	cmp	r7, #0
 800dc6a:	d037      	beq.n	800dcdc <_strtod_l+0x254>
 800dc6c:	9007      	str	r0, [sp, #28]
 800dc6e:	463d      	mov	r5, r7
 800dc70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dc74:	2a09      	cmp	r2, #9
 800dc76:	d912      	bls.n	800dc9e <_strtod_l+0x216>
 800dc78:	2201      	movs	r2, #1
 800dc7a:	e7c2      	b.n	800dc02 <_strtod_l+0x17a>
 800dc7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	921d      	str	r2, [sp, #116]	; 0x74
 800dc82:	785b      	ldrb	r3, [r3, #1]
 800dc84:	3001      	adds	r0, #1
 800dc86:	2b30      	cmp	r3, #48	; 0x30
 800dc88:	d0f8      	beq.n	800dc7c <_strtod_l+0x1f4>
 800dc8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800dc8e:	2a08      	cmp	r2, #8
 800dc90:	f200 84db 	bhi.w	800e64a <_strtod_l+0xbc2>
 800dc94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dc96:	9007      	str	r0, [sp, #28]
 800dc98:	2000      	movs	r0, #0
 800dc9a:	920a      	str	r2, [sp, #40]	; 0x28
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	3b30      	subs	r3, #48	; 0x30
 800dca0:	f100 0201 	add.w	r2, r0, #1
 800dca4:	d014      	beq.n	800dcd0 <_strtod_l+0x248>
 800dca6:	9907      	ldr	r1, [sp, #28]
 800dca8:	4411      	add	r1, r2
 800dcaa:	9107      	str	r1, [sp, #28]
 800dcac:	462a      	mov	r2, r5
 800dcae:	eb00 0e05 	add.w	lr, r0, r5
 800dcb2:	210a      	movs	r1, #10
 800dcb4:	4572      	cmp	r2, lr
 800dcb6:	d113      	bne.n	800dce0 <_strtod_l+0x258>
 800dcb8:	182a      	adds	r2, r5, r0
 800dcba:	2a08      	cmp	r2, #8
 800dcbc:	f105 0501 	add.w	r5, r5, #1
 800dcc0:	4405      	add	r5, r0
 800dcc2:	dc1c      	bgt.n	800dcfe <_strtod_l+0x276>
 800dcc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcc6:	220a      	movs	r2, #10
 800dcc8:	fb02 3301 	mla	r3, r2, r1, r3
 800dccc:	9309      	str	r3, [sp, #36]	; 0x24
 800dcce:	2200      	movs	r2, #0
 800dcd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dcd2:	1c59      	adds	r1, r3, #1
 800dcd4:	911d      	str	r1, [sp, #116]	; 0x74
 800dcd6:	785b      	ldrb	r3, [r3, #1]
 800dcd8:	4610      	mov	r0, r2
 800dcda:	e7c9      	b.n	800dc70 <_strtod_l+0x1e8>
 800dcdc:	4638      	mov	r0, r7
 800dcde:	e7d2      	b.n	800dc86 <_strtod_l+0x1fe>
 800dce0:	2a08      	cmp	r2, #8
 800dce2:	dc04      	bgt.n	800dcee <_strtod_l+0x266>
 800dce4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dce6:	434e      	muls	r6, r1
 800dce8:	9609      	str	r6, [sp, #36]	; 0x24
 800dcea:	3201      	adds	r2, #1
 800dcec:	e7e2      	b.n	800dcb4 <_strtod_l+0x22c>
 800dcee:	f102 0c01 	add.w	ip, r2, #1
 800dcf2:	f1bc 0f10 	cmp.w	ip, #16
 800dcf6:	bfd8      	it	le
 800dcf8:	fb01 f909 	mulle.w	r9, r1, r9
 800dcfc:	e7f5      	b.n	800dcea <_strtod_l+0x262>
 800dcfe:	2d10      	cmp	r5, #16
 800dd00:	bfdc      	itt	le
 800dd02:	220a      	movle	r2, #10
 800dd04:	fb02 3909 	mlale	r9, r2, r9, r3
 800dd08:	e7e1      	b.n	800dcce <_strtod_l+0x246>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9307      	str	r3, [sp, #28]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	e77c      	b.n	800dc0c <_strtod_l+0x184>
 800dd12:	f04f 0c00 	mov.w	ip, #0
 800dd16:	f108 0302 	add.w	r3, r8, #2
 800dd1a:	931d      	str	r3, [sp, #116]	; 0x74
 800dd1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dd20:	e785      	b.n	800dc2e <_strtod_l+0x1a6>
 800dd22:	f04f 0c01 	mov.w	ip, #1
 800dd26:	e7f6      	b.n	800dd16 <_strtod_l+0x28e>
 800dd28:	08013160 	.word	0x08013160
 800dd2c:	08012f10 	.word	0x08012f10
 800dd30:	7ff00000 	.word	0x7ff00000
 800dd34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd36:	1c59      	adds	r1, r3, #1
 800dd38:	911d      	str	r1, [sp, #116]	; 0x74
 800dd3a:	785b      	ldrb	r3, [r3, #1]
 800dd3c:	2b30      	cmp	r3, #48	; 0x30
 800dd3e:	d0f9      	beq.n	800dd34 <_strtod_l+0x2ac>
 800dd40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800dd44:	2908      	cmp	r1, #8
 800dd46:	f63f af79 	bhi.w	800dc3c <_strtod_l+0x1b4>
 800dd4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800dd4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd50:	9308      	str	r3, [sp, #32]
 800dd52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd54:	1c59      	adds	r1, r3, #1
 800dd56:	911d      	str	r1, [sp, #116]	; 0x74
 800dd58:	785b      	ldrb	r3, [r3, #1]
 800dd5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800dd5e:	2e09      	cmp	r6, #9
 800dd60:	d937      	bls.n	800ddd2 <_strtod_l+0x34a>
 800dd62:	9e08      	ldr	r6, [sp, #32]
 800dd64:	1b89      	subs	r1, r1, r6
 800dd66:	2908      	cmp	r1, #8
 800dd68:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800dd6c:	dc02      	bgt.n	800dd74 <_strtod_l+0x2ec>
 800dd6e:	4576      	cmp	r6, lr
 800dd70:	bfa8      	it	ge
 800dd72:	4676      	movge	r6, lr
 800dd74:	f1bc 0f00 	cmp.w	ip, #0
 800dd78:	d000      	beq.n	800dd7c <_strtod_l+0x2f4>
 800dd7a:	4276      	negs	r6, r6
 800dd7c:	2d00      	cmp	r5, #0
 800dd7e:	d14f      	bne.n	800de20 <_strtod_l+0x398>
 800dd80:	9904      	ldr	r1, [sp, #16]
 800dd82:	4301      	orrs	r1, r0
 800dd84:	f47f aec2 	bne.w	800db0c <_strtod_l+0x84>
 800dd88:	2a00      	cmp	r2, #0
 800dd8a:	f47f aedb 	bne.w	800db44 <_strtod_l+0xbc>
 800dd8e:	2b69      	cmp	r3, #105	; 0x69
 800dd90:	d027      	beq.n	800dde2 <_strtod_l+0x35a>
 800dd92:	dc24      	bgt.n	800ddde <_strtod_l+0x356>
 800dd94:	2b49      	cmp	r3, #73	; 0x49
 800dd96:	d024      	beq.n	800dde2 <_strtod_l+0x35a>
 800dd98:	2b4e      	cmp	r3, #78	; 0x4e
 800dd9a:	f47f aed3 	bne.w	800db44 <_strtod_l+0xbc>
 800dd9e:	499e      	ldr	r1, [pc, #632]	; (800e018 <_strtod_l+0x590>)
 800dda0:	a81d      	add	r0, sp, #116	; 0x74
 800dda2:	f001 fe61 	bl	800fa68 <__match>
 800dda6:	2800      	cmp	r0, #0
 800dda8:	f43f aecc 	beq.w	800db44 <_strtod_l+0xbc>
 800ddac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	2b28      	cmp	r3, #40	; 0x28
 800ddb2:	d12d      	bne.n	800de10 <_strtod_l+0x388>
 800ddb4:	4999      	ldr	r1, [pc, #612]	; (800e01c <_strtod_l+0x594>)
 800ddb6:	aa20      	add	r2, sp, #128	; 0x80
 800ddb8:	a81d      	add	r0, sp, #116	; 0x74
 800ddba:	f001 fe69 	bl	800fa90 <__hexnan>
 800ddbe:	2805      	cmp	r0, #5
 800ddc0:	d126      	bne.n	800de10 <_strtod_l+0x388>
 800ddc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddc4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ddc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ddcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ddd0:	e69c      	b.n	800db0c <_strtod_l+0x84>
 800ddd2:	210a      	movs	r1, #10
 800ddd4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ddd8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800dddc:	e7b9      	b.n	800dd52 <_strtod_l+0x2ca>
 800ddde:	2b6e      	cmp	r3, #110	; 0x6e
 800dde0:	e7db      	b.n	800dd9a <_strtod_l+0x312>
 800dde2:	498f      	ldr	r1, [pc, #572]	; (800e020 <_strtod_l+0x598>)
 800dde4:	a81d      	add	r0, sp, #116	; 0x74
 800dde6:	f001 fe3f 	bl	800fa68 <__match>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f43f aeaa 	beq.w	800db44 <_strtod_l+0xbc>
 800ddf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddf2:	498c      	ldr	r1, [pc, #560]	; (800e024 <_strtod_l+0x59c>)
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	a81d      	add	r0, sp, #116	; 0x74
 800ddf8:	931d      	str	r3, [sp, #116]	; 0x74
 800ddfa:	f001 fe35 	bl	800fa68 <__match>
 800ddfe:	b910      	cbnz	r0, 800de06 <_strtod_l+0x37e>
 800de00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de02:	3301      	adds	r3, #1
 800de04:	931d      	str	r3, [sp, #116]	; 0x74
 800de06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e034 <_strtod_l+0x5ac>
 800de0a:	f04f 0a00 	mov.w	sl, #0
 800de0e:	e67d      	b.n	800db0c <_strtod_l+0x84>
 800de10:	4885      	ldr	r0, [pc, #532]	; (800e028 <_strtod_l+0x5a0>)
 800de12:	f003 f909 	bl	8011028 <nan>
 800de16:	ed8d 0b04 	vstr	d0, [sp, #16]
 800de1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800de1e:	e675      	b.n	800db0c <_strtod_l+0x84>
 800de20:	9b07      	ldr	r3, [sp, #28]
 800de22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de24:	1af3      	subs	r3, r6, r3
 800de26:	2f00      	cmp	r7, #0
 800de28:	bf08      	it	eq
 800de2a:	462f      	moveq	r7, r5
 800de2c:	2d10      	cmp	r5, #16
 800de2e:	9308      	str	r3, [sp, #32]
 800de30:	46a8      	mov	r8, r5
 800de32:	bfa8      	it	ge
 800de34:	f04f 0810 	movge.w	r8, #16
 800de38:	f7f2 fb6c 	bl	8000514 <__aeabi_ui2d>
 800de3c:	2d09      	cmp	r5, #9
 800de3e:	4682      	mov	sl, r0
 800de40:	468b      	mov	fp, r1
 800de42:	dd13      	ble.n	800de6c <_strtod_l+0x3e4>
 800de44:	4b79      	ldr	r3, [pc, #484]	; (800e02c <_strtod_l+0x5a4>)
 800de46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800de4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800de4e:	f7f2 fbdb 	bl	8000608 <__aeabi_dmul>
 800de52:	4682      	mov	sl, r0
 800de54:	4648      	mov	r0, r9
 800de56:	468b      	mov	fp, r1
 800de58:	f7f2 fb5c 	bl	8000514 <__aeabi_ui2d>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	4650      	mov	r0, sl
 800de62:	4659      	mov	r1, fp
 800de64:	f7f2 fa1a 	bl	800029c <__adddf3>
 800de68:	4682      	mov	sl, r0
 800de6a:	468b      	mov	fp, r1
 800de6c:	2d0f      	cmp	r5, #15
 800de6e:	dc38      	bgt.n	800dee2 <_strtod_l+0x45a>
 800de70:	9b08      	ldr	r3, [sp, #32]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f43f ae4a 	beq.w	800db0c <_strtod_l+0x84>
 800de78:	dd24      	ble.n	800dec4 <_strtod_l+0x43c>
 800de7a:	2b16      	cmp	r3, #22
 800de7c:	dc0b      	bgt.n	800de96 <_strtod_l+0x40e>
 800de7e:	4d6b      	ldr	r5, [pc, #428]	; (800e02c <_strtod_l+0x5a4>)
 800de80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800de84:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de88:	4652      	mov	r2, sl
 800de8a:	465b      	mov	r3, fp
 800de8c:	f7f2 fbbc 	bl	8000608 <__aeabi_dmul>
 800de90:	4682      	mov	sl, r0
 800de92:	468b      	mov	fp, r1
 800de94:	e63a      	b.n	800db0c <_strtod_l+0x84>
 800de96:	9a08      	ldr	r2, [sp, #32]
 800de98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800de9c:	4293      	cmp	r3, r2
 800de9e:	db20      	blt.n	800dee2 <_strtod_l+0x45a>
 800dea0:	4c62      	ldr	r4, [pc, #392]	; (800e02c <_strtod_l+0x5a4>)
 800dea2:	f1c5 050f 	rsb	r5, r5, #15
 800dea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800deaa:	4652      	mov	r2, sl
 800deac:	465b      	mov	r3, fp
 800deae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deb2:	f7f2 fba9 	bl	8000608 <__aeabi_dmul>
 800deb6:	9b08      	ldr	r3, [sp, #32]
 800deb8:	1b5d      	subs	r5, r3, r5
 800deba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800debe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dec2:	e7e3      	b.n	800de8c <_strtod_l+0x404>
 800dec4:	9b08      	ldr	r3, [sp, #32]
 800dec6:	3316      	adds	r3, #22
 800dec8:	db0b      	blt.n	800dee2 <_strtod_l+0x45a>
 800deca:	9b07      	ldr	r3, [sp, #28]
 800decc:	4a57      	ldr	r2, [pc, #348]	; (800e02c <_strtod_l+0x5a4>)
 800dece:	1b9e      	subs	r6, r3, r6
 800ded0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ded4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ded8:	4650      	mov	r0, sl
 800deda:	4659      	mov	r1, fp
 800dedc:	f7f2 fcbe 	bl	800085c <__aeabi_ddiv>
 800dee0:	e7d6      	b.n	800de90 <_strtod_l+0x408>
 800dee2:	9b08      	ldr	r3, [sp, #32]
 800dee4:	eba5 0808 	sub.w	r8, r5, r8
 800dee8:	4498      	add	r8, r3
 800deea:	f1b8 0f00 	cmp.w	r8, #0
 800deee:	dd71      	ble.n	800dfd4 <_strtod_l+0x54c>
 800def0:	f018 030f 	ands.w	r3, r8, #15
 800def4:	d00a      	beq.n	800df0c <_strtod_l+0x484>
 800def6:	494d      	ldr	r1, [pc, #308]	; (800e02c <_strtod_l+0x5a4>)
 800def8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800defc:	4652      	mov	r2, sl
 800defe:	465b      	mov	r3, fp
 800df00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df04:	f7f2 fb80 	bl	8000608 <__aeabi_dmul>
 800df08:	4682      	mov	sl, r0
 800df0a:	468b      	mov	fp, r1
 800df0c:	f038 080f 	bics.w	r8, r8, #15
 800df10:	d04d      	beq.n	800dfae <_strtod_l+0x526>
 800df12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800df16:	dd22      	ble.n	800df5e <_strtod_l+0x4d6>
 800df18:	2500      	movs	r5, #0
 800df1a:	462e      	mov	r6, r5
 800df1c:	9509      	str	r5, [sp, #36]	; 0x24
 800df1e:	9507      	str	r5, [sp, #28]
 800df20:	2322      	movs	r3, #34	; 0x22
 800df22:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e034 <_strtod_l+0x5ac>
 800df26:	6023      	str	r3, [r4, #0]
 800df28:	f04f 0a00 	mov.w	sl, #0
 800df2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f43f adec 	beq.w	800db0c <_strtod_l+0x84>
 800df34:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df36:	4620      	mov	r0, r4
 800df38:	f001 feb6 	bl	800fca8 <_Bfree>
 800df3c:	9907      	ldr	r1, [sp, #28]
 800df3e:	4620      	mov	r0, r4
 800df40:	f001 feb2 	bl	800fca8 <_Bfree>
 800df44:	4631      	mov	r1, r6
 800df46:	4620      	mov	r0, r4
 800df48:	f001 feae 	bl	800fca8 <_Bfree>
 800df4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df4e:	4620      	mov	r0, r4
 800df50:	f001 feaa 	bl	800fca8 <_Bfree>
 800df54:	4629      	mov	r1, r5
 800df56:	4620      	mov	r0, r4
 800df58:	f001 fea6 	bl	800fca8 <_Bfree>
 800df5c:	e5d6      	b.n	800db0c <_strtod_l+0x84>
 800df5e:	2300      	movs	r3, #0
 800df60:	ea4f 1828 	mov.w	r8, r8, asr #4
 800df64:	4650      	mov	r0, sl
 800df66:	4659      	mov	r1, fp
 800df68:	4699      	mov	r9, r3
 800df6a:	f1b8 0f01 	cmp.w	r8, #1
 800df6e:	dc21      	bgt.n	800dfb4 <_strtod_l+0x52c>
 800df70:	b10b      	cbz	r3, 800df76 <_strtod_l+0x4ee>
 800df72:	4682      	mov	sl, r0
 800df74:	468b      	mov	fp, r1
 800df76:	4b2e      	ldr	r3, [pc, #184]	; (800e030 <_strtod_l+0x5a8>)
 800df78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800df7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800df80:	4652      	mov	r2, sl
 800df82:	465b      	mov	r3, fp
 800df84:	e9d9 0100 	ldrd	r0, r1, [r9]
 800df88:	f7f2 fb3e 	bl	8000608 <__aeabi_dmul>
 800df8c:	4b29      	ldr	r3, [pc, #164]	; (800e034 <_strtod_l+0x5ac>)
 800df8e:	460a      	mov	r2, r1
 800df90:	400b      	ands	r3, r1
 800df92:	4929      	ldr	r1, [pc, #164]	; (800e038 <_strtod_l+0x5b0>)
 800df94:	428b      	cmp	r3, r1
 800df96:	4682      	mov	sl, r0
 800df98:	d8be      	bhi.n	800df18 <_strtod_l+0x490>
 800df9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800df9e:	428b      	cmp	r3, r1
 800dfa0:	bf86      	itte	hi
 800dfa2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e03c <_strtod_l+0x5b4>
 800dfa6:	f04f 3aff 	movhi.w	sl, #4294967295
 800dfaa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dfae:	2300      	movs	r3, #0
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	e081      	b.n	800e0b8 <_strtod_l+0x630>
 800dfb4:	f018 0f01 	tst.w	r8, #1
 800dfb8:	d007      	beq.n	800dfca <_strtod_l+0x542>
 800dfba:	4b1d      	ldr	r3, [pc, #116]	; (800e030 <_strtod_l+0x5a8>)
 800dfbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f7f2 fb20 	bl	8000608 <__aeabi_dmul>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	f109 0901 	add.w	r9, r9, #1
 800dfce:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dfd2:	e7ca      	b.n	800df6a <_strtod_l+0x4e2>
 800dfd4:	d0eb      	beq.n	800dfae <_strtod_l+0x526>
 800dfd6:	f1c8 0800 	rsb	r8, r8, #0
 800dfda:	f018 020f 	ands.w	r2, r8, #15
 800dfde:	d00a      	beq.n	800dff6 <_strtod_l+0x56e>
 800dfe0:	4b12      	ldr	r3, [pc, #72]	; (800e02c <_strtod_l+0x5a4>)
 800dfe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfe6:	4650      	mov	r0, sl
 800dfe8:	4659      	mov	r1, fp
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	f7f2 fc35 	bl	800085c <__aeabi_ddiv>
 800dff2:	4682      	mov	sl, r0
 800dff4:	468b      	mov	fp, r1
 800dff6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dffa:	d0d8      	beq.n	800dfae <_strtod_l+0x526>
 800dffc:	f1b8 0f1f 	cmp.w	r8, #31
 800e000:	dd1e      	ble.n	800e040 <_strtod_l+0x5b8>
 800e002:	2500      	movs	r5, #0
 800e004:	462e      	mov	r6, r5
 800e006:	9509      	str	r5, [sp, #36]	; 0x24
 800e008:	9507      	str	r5, [sp, #28]
 800e00a:	2322      	movs	r3, #34	; 0x22
 800e00c:	f04f 0a00 	mov.w	sl, #0
 800e010:	f04f 0b00 	mov.w	fp, #0
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	e789      	b.n	800df2c <_strtod_l+0x4a4>
 800e018:	08012ee5 	.word	0x08012ee5
 800e01c:	08012f24 	.word	0x08012f24
 800e020:	08012edd 	.word	0x08012edd
 800e024:	08013064 	.word	0x08013064
 800e028:	0801333b 	.word	0x0801333b
 800e02c:	08013200 	.word	0x08013200
 800e030:	080131d8 	.word	0x080131d8
 800e034:	7ff00000 	.word	0x7ff00000
 800e038:	7ca00000 	.word	0x7ca00000
 800e03c:	7fefffff 	.word	0x7fefffff
 800e040:	f018 0310 	ands.w	r3, r8, #16
 800e044:	bf18      	it	ne
 800e046:	236a      	movne	r3, #106	; 0x6a
 800e048:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e400 <_strtod_l+0x978>
 800e04c:	9304      	str	r3, [sp, #16]
 800e04e:	4650      	mov	r0, sl
 800e050:	4659      	mov	r1, fp
 800e052:	2300      	movs	r3, #0
 800e054:	f018 0f01 	tst.w	r8, #1
 800e058:	d004      	beq.n	800e064 <_strtod_l+0x5dc>
 800e05a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e05e:	f7f2 fad3 	bl	8000608 <__aeabi_dmul>
 800e062:	2301      	movs	r3, #1
 800e064:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e068:	f109 0908 	add.w	r9, r9, #8
 800e06c:	d1f2      	bne.n	800e054 <_strtod_l+0x5cc>
 800e06e:	b10b      	cbz	r3, 800e074 <_strtod_l+0x5ec>
 800e070:	4682      	mov	sl, r0
 800e072:	468b      	mov	fp, r1
 800e074:	9b04      	ldr	r3, [sp, #16]
 800e076:	b1bb      	cbz	r3, 800e0a8 <_strtod_l+0x620>
 800e078:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e07c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e080:	2b00      	cmp	r3, #0
 800e082:	4659      	mov	r1, fp
 800e084:	dd10      	ble.n	800e0a8 <_strtod_l+0x620>
 800e086:	2b1f      	cmp	r3, #31
 800e088:	f340 8128 	ble.w	800e2dc <_strtod_l+0x854>
 800e08c:	2b34      	cmp	r3, #52	; 0x34
 800e08e:	bfde      	ittt	le
 800e090:	3b20      	suble	r3, #32
 800e092:	f04f 32ff 	movle.w	r2, #4294967295
 800e096:	fa02 f303 	lslle.w	r3, r2, r3
 800e09a:	f04f 0a00 	mov.w	sl, #0
 800e09e:	bfcc      	ite	gt
 800e0a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e0a4:	ea03 0b01 	andle.w	fp, r3, r1
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	4650      	mov	r0, sl
 800e0ae:	4659      	mov	r1, fp
 800e0b0:	f7f2 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d1a4      	bne.n	800e002 <_strtod_l+0x57a>
 800e0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e0be:	462b      	mov	r3, r5
 800e0c0:	463a      	mov	r2, r7
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f001 fe5c 	bl	800fd80 <__s2b>
 800e0c8:	9009      	str	r0, [sp, #36]	; 0x24
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	f43f af24 	beq.w	800df18 <_strtod_l+0x490>
 800e0d0:	9b07      	ldr	r3, [sp, #28]
 800e0d2:	1b9e      	subs	r6, r3, r6
 800e0d4:	9b08      	ldr	r3, [sp, #32]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	bfb4      	ite	lt
 800e0da:	4633      	movlt	r3, r6
 800e0dc:	2300      	movge	r3, #0
 800e0de:	9310      	str	r3, [sp, #64]	; 0x40
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	2500      	movs	r5, #0
 800e0e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e0e8:	9318      	str	r3, [sp, #96]	; 0x60
 800e0ea:	462e      	mov	r6, r5
 800e0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	6859      	ldr	r1, [r3, #4]
 800e0f2:	f001 fd99 	bl	800fc28 <_Balloc>
 800e0f6:	9007      	str	r0, [sp, #28]
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	f43f af11 	beq.w	800df20 <_strtod_l+0x498>
 800e0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e100:	691a      	ldr	r2, [r3, #16]
 800e102:	3202      	adds	r2, #2
 800e104:	f103 010c 	add.w	r1, r3, #12
 800e108:	0092      	lsls	r2, r2, #2
 800e10a:	300c      	adds	r0, #12
 800e10c:	f7fe fd62 	bl	800cbd4 <memcpy>
 800e110:	ec4b ab10 	vmov	d0, sl, fp
 800e114:	aa20      	add	r2, sp, #128	; 0x80
 800e116:	a91f      	add	r1, sp, #124	; 0x7c
 800e118:	4620      	mov	r0, r4
 800e11a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e11e:	f002 f96b 	bl	80103f8 <__d2b>
 800e122:	901e      	str	r0, [sp, #120]	; 0x78
 800e124:	2800      	cmp	r0, #0
 800e126:	f43f aefb 	beq.w	800df20 <_strtod_l+0x498>
 800e12a:	2101      	movs	r1, #1
 800e12c:	4620      	mov	r0, r4
 800e12e:	f001 fec1 	bl	800feb4 <__i2b>
 800e132:	4606      	mov	r6, r0
 800e134:	2800      	cmp	r0, #0
 800e136:	f43f aef3 	beq.w	800df20 <_strtod_l+0x498>
 800e13a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e13c:	9904      	ldr	r1, [sp, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	bfab      	itete	ge
 800e142:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e144:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e146:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e148:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e14c:	bfac      	ite	ge
 800e14e:	eb03 0902 	addge.w	r9, r3, r2
 800e152:	1ad7      	sublt	r7, r2, r3
 800e154:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e156:	eba3 0801 	sub.w	r8, r3, r1
 800e15a:	4490      	add	r8, r2
 800e15c:	4ba3      	ldr	r3, [pc, #652]	; (800e3ec <_strtod_l+0x964>)
 800e15e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e162:	4598      	cmp	r8, r3
 800e164:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e168:	f280 80cc 	bge.w	800e304 <_strtod_l+0x87c>
 800e16c:	eba3 0308 	sub.w	r3, r3, r8
 800e170:	2b1f      	cmp	r3, #31
 800e172:	eba2 0203 	sub.w	r2, r2, r3
 800e176:	f04f 0101 	mov.w	r1, #1
 800e17a:	f300 80b6 	bgt.w	800e2ea <_strtod_l+0x862>
 800e17e:	fa01 f303 	lsl.w	r3, r1, r3
 800e182:	9311      	str	r3, [sp, #68]	; 0x44
 800e184:	2300      	movs	r3, #0
 800e186:	930c      	str	r3, [sp, #48]	; 0x30
 800e188:	eb09 0802 	add.w	r8, r9, r2
 800e18c:	9b04      	ldr	r3, [sp, #16]
 800e18e:	45c1      	cmp	r9, r8
 800e190:	4417      	add	r7, r2
 800e192:	441f      	add	r7, r3
 800e194:	464b      	mov	r3, r9
 800e196:	bfa8      	it	ge
 800e198:	4643      	movge	r3, r8
 800e19a:	42bb      	cmp	r3, r7
 800e19c:	bfa8      	it	ge
 800e19e:	463b      	movge	r3, r7
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	bfc2      	ittt	gt
 800e1a4:	eba8 0803 	subgt.w	r8, r8, r3
 800e1a8:	1aff      	subgt	r7, r7, r3
 800e1aa:	eba9 0903 	subgt.w	r9, r9, r3
 800e1ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	dd17      	ble.n	800e1e4 <_strtod_l+0x75c>
 800e1b4:	4631      	mov	r1, r6
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f001 ff37 	bl	801002c <__pow5mult>
 800e1be:	4606      	mov	r6, r0
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	f43f aead 	beq.w	800df20 <_strtod_l+0x498>
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f001 fe88 	bl	800fee0 <__multiply>
 800e1d0:	900f      	str	r0, [sp, #60]	; 0x3c
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	f43f aea4 	beq.w	800df20 <_strtod_l+0x498>
 800e1d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f001 fd64 	bl	800fca8 <_Bfree>
 800e1e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1e2:	931e      	str	r3, [sp, #120]	; 0x78
 800e1e4:	f1b8 0f00 	cmp.w	r8, #0
 800e1e8:	f300 8091 	bgt.w	800e30e <_strtod_l+0x886>
 800e1ec:	9b08      	ldr	r3, [sp, #32]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dd08      	ble.n	800e204 <_strtod_l+0x77c>
 800e1f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e1f4:	9907      	ldr	r1, [sp, #28]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f001 ff18 	bl	801002c <__pow5mult>
 800e1fc:	9007      	str	r0, [sp, #28]
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f43f ae8e 	beq.w	800df20 <_strtod_l+0x498>
 800e204:	2f00      	cmp	r7, #0
 800e206:	dd08      	ble.n	800e21a <_strtod_l+0x792>
 800e208:	9907      	ldr	r1, [sp, #28]
 800e20a:	463a      	mov	r2, r7
 800e20c:	4620      	mov	r0, r4
 800e20e:	f001 ff67 	bl	80100e0 <__lshift>
 800e212:	9007      	str	r0, [sp, #28]
 800e214:	2800      	cmp	r0, #0
 800e216:	f43f ae83 	beq.w	800df20 <_strtod_l+0x498>
 800e21a:	f1b9 0f00 	cmp.w	r9, #0
 800e21e:	dd08      	ble.n	800e232 <_strtod_l+0x7aa>
 800e220:	4631      	mov	r1, r6
 800e222:	464a      	mov	r2, r9
 800e224:	4620      	mov	r0, r4
 800e226:	f001 ff5b 	bl	80100e0 <__lshift>
 800e22a:	4606      	mov	r6, r0
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f43f ae77 	beq.w	800df20 <_strtod_l+0x498>
 800e232:	9a07      	ldr	r2, [sp, #28]
 800e234:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e236:	4620      	mov	r0, r4
 800e238:	f001 ffda 	bl	80101f0 <__mdiff>
 800e23c:	4605      	mov	r5, r0
 800e23e:	2800      	cmp	r0, #0
 800e240:	f43f ae6e 	beq.w	800df20 <_strtod_l+0x498>
 800e244:	68c3      	ldr	r3, [r0, #12]
 800e246:	930f      	str	r3, [sp, #60]	; 0x3c
 800e248:	2300      	movs	r3, #0
 800e24a:	60c3      	str	r3, [r0, #12]
 800e24c:	4631      	mov	r1, r6
 800e24e:	f001 ffb3 	bl	80101b8 <__mcmp>
 800e252:	2800      	cmp	r0, #0
 800e254:	da65      	bge.n	800e322 <_strtod_l+0x89a>
 800e256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e258:	ea53 030a 	orrs.w	r3, r3, sl
 800e25c:	f040 8087 	bne.w	800e36e <_strtod_l+0x8e6>
 800e260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e264:	2b00      	cmp	r3, #0
 800e266:	f040 8082 	bne.w	800e36e <_strtod_l+0x8e6>
 800e26a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e26e:	0d1b      	lsrs	r3, r3, #20
 800e270:	051b      	lsls	r3, r3, #20
 800e272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e276:	d97a      	bls.n	800e36e <_strtod_l+0x8e6>
 800e278:	696b      	ldr	r3, [r5, #20]
 800e27a:	b913      	cbnz	r3, 800e282 <_strtod_l+0x7fa>
 800e27c:	692b      	ldr	r3, [r5, #16]
 800e27e:	2b01      	cmp	r3, #1
 800e280:	dd75      	ble.n	800e36e <_strtod_l+0x8e6>
 800e282:	4629      	mov	r1, r5
 800e284:	2201      	movs	r2, #1
 800e286:	4620      	mov	r0, r4
 800e288:	f001 ff2a 	bl	80100e0 <__lshift>
 800e28c:	4631      	mov	r1, r6
 800e28e:	4605      	mov	r5, r0
 800e290:	f001 ff92 	bl	80101b8 <__mcmp>
 800e294:	2800      	cmp	r0, #0
 800e296:	dd6a      	ble.n	800e36e <_strtod_l+0x8e6>
 800e298:	9904      	ldr	r1, [sp, #16]
 800e29a:	4a55      	ldr	r2, [pc, #340]	; (800e3f0 <_strtod_l+0x968>)
 800e29c:	465b      	mov	r3, fp
 800e29e:	2900      	cmp	r1, #0
 800e2a0:	f000 8085 	beq.w	800e3ae <_strtod_l+0x926>
 800e2a4:	ea02 010b 	and.w	r1, r2, fp
 800e2a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e2ac:	dc7f      	bgt.n	800e3ae <_strtod_l+0x926>
 800e2ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e2b2:	f77f aeaa 	ble.w	800e00a <_strtod_l+0x582>
 800e2b6:	4a4f      	ldr	r2, [pc, #316]	; (800e3f4 <_strtod_l+0x96c>)
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e2be:	4650      	mov	r0, sl
 800e2c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e2c4:	4659      	mov	r1, fp
 800e2c6:	f7f2 f99f 	bl	8000608 <__aeabi_dmul>
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4303      	orrs	r3, r0
 800e2ce:	bf08      	it	eq
 800e2d0:	2322      	moveq	r3, #34	; 0x22
 800e2d2:	4682      	mov	sl, r0
 800e2d4:	468b      	mov	fp, r1
 800e2d6:	bf08      	it	eq
 800e2d8:	6023      	streq	r3, [r4, #0]
 800e2da:	e62b      	b.n	800df34 <_strtod_l+0x4ac>
 800e2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2e4:	ea03 0a0a 	and.w	sl, r3, sl
 800e2e8:	e6de      	b.n	800e0a8 <_strtod_l+0x620>
 800e2ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e2ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e2f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e2f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e2fa:	fa01 f308 	lsl.w	r3, r1, r8
 800e2fe:	930c      	str	r3, [sp, #48]	; 0x30
 800e300:	9111      	str	r1, [sp, #68]	; 0x44
 800e302:	e741      	b.n	800e188 <_strtod_l+0x700>
 800e304:	2300      	movs	r3, #0
 800e306:	930c      	str	r3, [sp, #48]	; 0x30
 800e308:	2301      	movs	r3, #1
 800e30a:	9311      	str	r3, [sp, #68]	; 0x44
 800e30c:	e73c      	b.n	800e188 <_strtod_l+0x700>
 800e30e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e310:	4642      	mov	r2, r8
 800e312:	4620      	mov	r0, r4
 800e314:	f001 fee4 	bl	80100e0 <__lshift>
 800e318:	901e      	str	r0, [sp, #120]	; 0x78
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f47f af66 	bne.w	800e1ec <_strtod_l+0x764>
 800e320:	e5fe      	b.n	800df20 <_strtod_l+0x498>
 800e322:	465f      	mov	r7, fp
 800e324:	d16e      	bne.n	800e404 <_strtod_l+0x97c>
 800e326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e328:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e32c:	b342      	cbz	r2, 800e380 <_strtod_l+0x8f8>
 800e32e:	4a32      	ldr	r2, [pc, #200]	; (800e3f8 <_strtod_l+0x970>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d128      	bne.n	800e386 <_strtod_l+0x8fe>
 800e334:	9b04      	ldr	r3, [sp, #16]
 800e336:	4650      	mov	r0, sl
 800e338:	b1eb      	cbz	r3, 800e376 <_strtod_l+0x8ee>
 800e33a:	4a2d      	ldr	r2, [pc, #180]	; (800e3f0 <_strtod_l+0x968>)
 800e33c:	403a      	ands	r2, r7
 800e33e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e342:	f04f 31ff 	mov.w	r1, #4294967295
 800e346:	d819      	bhi.n	800e37c <_strtod_l+0x8f4>
 800e348:	0d12      	lsrs	r2, r2, #20
 800e34a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e34e:	fa01 f303 	lsl.w	r3, r1, r3
 800e352:	4298      	cmp	r0, r3
 800e354:	d117      	bne.n	800e386 <_strtod_l+0x8fe>
 800e356:	4b29      	ldr	r3, [pc, #164]	; (800e3fc <_strtod_l+0x974>)
 800e358:	429f      	cmp	r7, r3
 800e35a:	d102      	bne.n	800e362 <_strtod_l+0x8da>
 800e35c:	3001      	adds	r0, #1
 800e35e:	f43f addf 	beq.w	800df20 <_strtod_l+0x498>
 800e362:	4b23      	ldr	r3, [pc, #140]	; (800e3f0 <_strtod_l+0x968>)
 800e364:	403b      	ands	r3, r7
 800e366:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e36a:	f04f 0a00 	mov.w	sl, #0
 800e36e:	9b04      	ldr	r3, [sp, #16]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1a0      	bne.n	800e2b6 <_strtod_l+0x82e>
 800e374:	e5de      	b.n	800df34 <_strtod_l+0x4ac>
 800e376:	f04f 33ff 	mov.w	r3, #4294967295
 800e37a:	e7ea      	b.n	800e352 <_strtod_l+0x8ca>
 800e37c:	460b      	mov	r3, r1
 800e37e:	e7e8      	b.n	800e352 <_strtod_l+0x8ca>
 800e380:	ea53 030a 	orrs.w	r3, r3, sl
 800e384:	d088      	beq.n	800e298 <_strtod_l+0x810>
 800e386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e388:	b1db      	cbz	r3, 800e3c2 <_strtod_l+0x93a>
 800e38a:	423b      	tst	r3, r7
 800e38c:	d0ef      	beq.n	800e36e <_strtod_l+0x8e6>
 800e38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e390:	9a04      	ldr	r2, [sp, #16]
 800e392:	4650      	mov	r0, sl
 800e394:	4659      	mov	r1, fp
 800e396:	b1c3      	cbz	r3, 800e3ca <_strtod_l+0x942>
 800e398:	f7ff fb5a 	bl	800da50 <sulp>
 800e39c:	4602      	mov	r2, r0
 800e39e:	460b      	mov	r3, r1
 800e3a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e3a4:	f7f1 ff7a 	bl	800029c <__adddf3>
 800e3a8:	4682      	mov	sl, r0
 800e3aa:	468b      	mov	fp, r1
 800e3ac:	e7df      	b.n	800e36e <_strtod_l+0x8e6>
 800e3ae:	4013      	ands	r3, r2
 800e3b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e3b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e3b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e3bc:	f04f 3aff 	mov.w	sl, #4294967295
 800e3c0:	e7d5      	b.n	800e36e <_strtod_l+0x8e6>
 800e3c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3c4:	ea13 0f0a 	tst.w	r3, sl
 800e3c8:	e7e0      	b.n	800e38c <_strtod_l+0x904>
 800e3ca:	f7ff fb41 	bl	800da50 <sulp>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e3d6:	f7f1 ff5f 	bl	8000298 <__aeabi_dsub>
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2300      	movs	r3, #0
 800e3de:	4682      	mov	sl, r0
 800e3e0:	468b      	mov	fp, r1
 800e3e2:	f7f2 fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d0c1      	beq.n	800e36e <_strtod_l+0x8e6>
 800e3ea:	e60e      	b.n	800e00a <_strtod_l+0x582>
 800e3ec:	fffffc02 	.word	0xfffffc02
 800e3f0:	7ff00000 	.word	0x7ff00000
 800e3f4:	39500000 	.word	0x39500000
 800e3f8:	000fffff 	.word	0x000fffff
 800e3fc:	7fefffff 	.word	0x7fefffff
 800e400:	08012f38 	.word	0x08012f38
 800e404:	4631      	mov	r1, r6
 800e406:	4628      	mov	r0, r5
 800e408:	f002 f852 	bl	80104b0 <__ratio>
 800e40c:	ec59 8b10 	vmov	r8, r9, d0
 800e410:	ee10 0a10 	vmov	r0, s0
 800e414:	2200      	movs	r2, #0
 800e416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e41a:	4649      	mov	r1, r9
 800e41c:	f7f2 fb70 	bl	8000b00 <__aeabi_dcmple>
 800e420:	2800      	cmp	r0, #0
 800e422:	d07c      	beq.n	800e51e <_strtod_l+0xa96>
 800e424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e426:	2b00      	cmp	r3, #0
 800e428:	d04c      	beq.n	800e4c4 <_strtod_l+0xa3c>
 800e42a:	4b95      	ldr	r3, [pc, #596]	; (800e680 <_strtod_l+0xbf8>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e432:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e680 <_strtod_l+0xbf8>
 800e436:	f04f 0800 	mov.w	r8, #0
 800e43a:	4b92      	ldr	r3, [pc, #584]	; (800e684 <_strtod_l+0xbfc>)
 800e43c:	403b      	ands	r3, r7
 800e43e:	9311      	str	r3, [sp, #68]	; 0x44
 800e440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e442:	4b91      	ldr	r3, [pc, #580]	; (800e688 <_strtod_l+0xc00>)
 800e444:	429a      	cmp	r2, r3
 800e446:	f040 80b2 	bne.w	800e5ae <_strtod_l+0xb26>
 800e44a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e44e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e452:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e456:	ec4b ab10 	vmov	d0, sl, fp
 800e45a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e45e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e462:	f001 ff4d 	bl	8010300 <__ulp>
 800e466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e46a:	ec53 2b10 	vmov	r2, r3, d0
 800e46e:	f7f2 f8cb 	bl	8000608 <__aeabi_dmul>
 800e472:	4652      	mov	r2, sl
 800e474:	465b      	mov	r3, fp
 800e476:	f7f1 ff11 	bl	800029c <__adddf3>
 800e47a:	460b      	mov	r3, r1
 800e47c:	4981      	ldr	r1, [pc, #516]	; (800e684 <_strtod_l+0xbfc>)
 800e47e:	4a83      	ldr	r2, [pc, #524]	; (800e68c <_strtod_l+0xc04>)
 800e480:	4019      	ands	r1, r3
 800e482:	4291      	cmp	r1, r2
 800e484:	4682      	mov	sl, r0
 800e486:	d95e      	bls.n	800e546 <_strtod_l+0xabe>
 800e488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e48a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e48e:	4293      	cmp	r3, r2
 800e490:	d103      	bne.n	800e49a <_strtod_l+0xa12>
 800e492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e494:	3301      	adds	r3, #1
 800e496:	f43f ad43 	beq.w	800df20 <_strtod_l+0x498>
 800e49a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e698 <_strtod_l+0xc10>
 800e49e:	f04f 3aff 	mov.w	sl, #4294967295
 800e4a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f001 fbff 	bl	800fca8 <_Bfree>
 800e4aa:	9907      	ldr	r1, [sp, #28]
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f001 fbfb 	bl	800fca8 <_Bfree>
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f001 fbf7 	bl	800fca8 <_Bfree>
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f001 fbf3 	bl	800fca8 <_Bfree>
 800e4c2:	e613      	b.n	800e0ec <_strtod_l+0x664>
 800e4c4:	f1ba 0f00 	cmp.w	sl, #0
 800e4c8:	d11b      	bne.n	800e502 <_strtod_l+0xa7a>
 800e4ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4ce:	b9f3      	cbnz	r3, 800e50e <_strtod_l+0xa86>
 800e4d0:	4b6b      	ldr	r3, [pc, #428]	; (800e680 <_strtod_l+0xbf8>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4640      	mov	r0, r8
 800e4d6:	4649      	mov	r1, r9
 800e4d8:	f7f2 fb08 	bl	8000aec <__aeabi_dcmplt>
 800e4dc:	b9d0      	cbnz	r0, 800e514 <_strtod_l+0xa8c>
 800e4de:	4640      	mov	r0, r8
 800e4e0:	4649      	mov	r1, r9
 800e4e2:	4b6b      	ldr	r3, [pc, #428]	; (800e690 <_strtod_l+0xc08>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f7f2 f88f 	bl	8000608 <__aeabi_dmul>
 800e4ea:	4680      	mov	r8, r0
 800e4ec:	4689      	mov	r9, r1
 800e4ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e4f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e4f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800e4f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e4fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e500:	e79b      	b.n	800e43a <_strtod_l+0x9b2>
 800e502:	f1ba 0f01 	cmp.w	sl, #1
 800e506:	d102      	bne.n	800e50e <_strtod_l+0xa86>
 800e508:	2f00      	cmp	r7, #0
 800e50a:	f43f ad7e 	beq.w	800e00a <_strtod_l+0x582>
 800e50e:	4b61      	ldr	r3, [pc, #388]	; (800e694 <_strtod_l+0xc0c>)
 800e510:	2200      	movs	r2, #0
 800e512:	e78c      	b.n	800e42e <_strtod_l+0x9a6>
 800e514:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e690 <_strtod_l+0xc08>
 800e518:	f04f 0800 	mov.w	r8, #0
 800e51c:	e7e7      	b.n	800e4ee <_strtod_l+0xa66>
 800e51e:	4b5c      	ldr	r3, [pc, #368]	; (800e690 <_strtod_l+0xc08>)
 800e520:	4640      	mov	r0, r8
 800e522:	4649      	mov	r1, r9
 800e524:	2200      	movs	r2, #0
 800e526:	f7f2 f86f 	bl	8000608 <__aeabi_dmul>
 800e52a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e52c:	4680      	mov	r8, r0
 800e52e:	4689      	mov	r9, r1
 800e530:	b933      	cbnz	r3, 800e540 <_strtod_l+0xab8>
 800e532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e536:	9012      	str	r0, [sp, #72]	; 0x48
 800e538:	9313      	str	r3, [sp, #76]	; 0x4c
 800e53a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e53e:	e7dd      	b.n	800e4fc <_strtod_l+0xa74>
 800e540:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e544:	e7f9      	b.n	800e53a <_strtod_l+0xab2>
 800e546:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e54a:	9b04      	ldr	r3, [sp, #16]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1a8      	bne.n	800e4a2 <_strtod_l+0xa1a>
 800e550:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e554:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e556:	0d1b      	lsrs	r3, r3, #20
 800e558:	051b      	lsls	r3, r3, #20
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d1a1      	bne.n	800e4a2 <_strtod_l+0xa1a>
 800e55e:	4640      	mov	r0, r8
 800e560:	4649      	mov	r1, r9
 800e562:	f7f2 fbb1 	bl	8000cc8 <__aeabi_d2lz>
 800e566:	f7f2 f821 	bl	80005ac <__aeabi_l2d>
 800e56a:	4602      	mov	r2, r0
 800e56c:	460b      	mov	r3, r1
 800e56e:	4640      	mov	r0, r8
 800e570:	4649      	mov	r1, r9
 800e572:	f7f1 fe91 	bl	8000298 <__aeabi_dsub>
 800e576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e57c:	ea43 030a 	orr.w	r3, r3, sl
 800e580:	4313      	orrs	r3, r2
 800e582:	4680      	mov	r8, r0
 800e584:	4689      	mov	r9, r1
 800e586:	d053      	beq.n	800e630 <_strtod_l+0xba8>
 800e588:	a335      	add	r3, pc, #212	; (adr r3, 800e660 <_strtod_l+0xbd8>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f7f2 faad 	bl	8000aec <__aeabi_dcmplt>
 800e592:	2800      	cmp	r0, #0
 800e594:	f47f acce 	bne.w	800df34 <_strtod_l+0x4ac>
 800e598:	a333      	add	r3, pc, #204	; (adr r3, 800e668 <_strtod_l+0xbe0>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	4640      	mov	r0, r8
 800e5a0:	4649      	mov	r1, r9
 800e5a2:	f7f2 fac1 	bl	8000b28 <__aeabi_dcmpgt>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	f43f af7b 	beq.w	800e4a2 <_strtod_l+0xa1a>
 800e5ac:	e4c2      	b.n	800df34 <_strtod_l+0x4ac>
 800e5ae:	9b04      	ldr	r3, [sp, #16]
 800e5b0:	b333      	cbz	r3, 800e600 <_strtod_l+0xb78>
 800e5b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5b8:	d822      	bhi.n	800e600 <_strtod_l+0xb78>
 800e5ba:	a32d      	add	r3, pc, #180	; (adr r3, 800e670 <_strtod_l+0xbe8>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	4640      	mov	r0, r8
 800e5c2:	4649      	mov	r1, r9
 800e5c4:	f7f2 fa9c 	bl	8000b00 <__aeabi_dcmple>
 800e5c8:	b1a0      	cbz	r0, 800e5f4 <_strtod_l+0xb6c>
 800e5ca:	4649      	mov	r1, r9
 800e5cc:	4640      	mov	r0, r8
 800e5ce:	f7f2 faf3 	bl	8000bb8 <__aeabi_d2uiz>
 800e5d2:	2801      	cmp	r0, #1
 800e5d4:	bf38      	it	cc
 800e5d6:	2001      	movcc	r0, #1
 800e5d8:	f7f1 ff9c 	bl	8000514 <__aeabi_ui2d>
 800e5dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5de:	4680      	mov	r8, r0
 800e5e0:	4689      	mov	r9, r1
 800e5e2:	bb13      	cbnz	r3, 800e62a <_strtod_l+0xba2>
 800e5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5e8:	9014      	str	r0, [sp, #80]	; 0x50
 800e5ea:	9315      	str	r3, [sp, #84]	; 0x54
 800e5ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e5f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e5f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e5f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e5fc:	1a9b      	subs	r3, r3, r2
 800e5fe:	930d      	str	r3, [sp, #52]	; 0x34
 800e600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e604:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e608:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e60c:	f001 fe78 	bl	8010300 <__ulp>
 800e610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e614:	ec53 2b10 	vmov	r2, r3, d0
 800e618:	f7f1 fff6 	bl	8000608 <__aeabi_dmul>
 800e61c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e620:	f7f1 fe3c 	bl	800029c <__adddf3>
 800e624:	4682      	mov	sl, r0
 800e626:	468b      	mov	fp, r1
 800e628:	e78f      	b.n	800e54a <_strtod_l+0xac2>
 800e62a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e62e:	e7dd      	b.n	800e5ec <_strtod_l+0xb64>
 800e630:	a311      	add	r3, pc, #68	; (adr r3, 800e678 <_strtod_l+0xbf0>)
 800e632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e636:	f7f2 fa59 	bl	8000aec <__aeabi_dcmplt>
 800e63a:	e7b4      	b.n	800e5a6 <_strtod_l+0xb1e>
 800e63c:	2300      	movs	r3, #0
 800e63e:	930e      	str	r3, [sp, #56]	; 0x38
 800e640:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e642:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e644:	6013      	str	r3, [r2, #0]
 800e646:	f7ff ba65 	b.w	800db14 <_strtod_l+0x8c>
 800e64a:	2b65      	cmp	r3, #101	; 0x65
 800e64c:	f43f ab5d 	beq.w	800dd0a <_strtod_l+0x282>
 800e650:	2b45      	cmp	r3, #69	; 0x45
 800e652:	f43f ab5a 	beq.w	800dd0a <_strtod_l+0x282>
 800e656:	2201      	movs	r2, #1
 800e658:	f7ff bb92 	b.w	800dd80 <_strtod_l+0x2f8>
 800e65c:	f3af 8000 	nop.w
 800e660:	94a03595 	.word	0x94a03595
 800e664:	3fdfffff 	.word	0x3fdfffff
 800e668:	35afe535 	.word	0x35afe535
 800e66c:	3fe00000 	.word	0x3fe00000
 800e670:	ffc00000 	.word	0xffc00000
 800e674:	41dfffff 	.word	0x41dfffff
 800e678:	94a03595 	.word	0x94a03595
 800e67c:	3fcfffff 	.word	0x3fcfffff
 800e680:	3ff00000 	.word	0x3ff00000
 800e684:	7ff00000 	.word	0x7ff00000
 800e688:	7fe00000 	.word	0x7fe00000
 800e68c:	7c9fffff 	.word	0x7c9fffff
 800e690:	3fe00000 	.word	0x3fe00000
 800e694:	bff00000 	.word	0xbff00000
 800e698:	7fefffff 	.word	0x7fefffff

0800e69c <_strtod_r>:
 800e69c:	4b01      	ldr	r3, [pc, #4]	; (800e6a4 <_strtod_r+0x8>)
 800e69e:	f7ff b9f3 	b.w	800da88 <_strtod_l>
 800e6a2:	bf00      	nop
 800e6a4:	20000150 	.word	0x20000150

0800e6a8 <_strtol_l.isra.0>:
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ae:	d001      	beq.n	800e6b4 <_strtol_l.isra.0+0xc>
 800e6b0:	2b24      	cmp	r3, #36	; 0x24
 800e6b2:	d906      	bls.n	800e6c2 <_strtol_l.isra.0+0x1a>
 800e6b4:	f7fe fa64 	bl	800cb80 <__errno>
 800e6b8:	2316      	movs	r3, #22
 800e6ba:	6003      	str	r3, [r0, #0]
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c2:	4f3a      	ldr	r7, [pc, #232]	; (800e7ac <_strtol_l.isra.0+0x104>)
 800e6c4:	468e      	mov	lr, r1
 800e6c6:	4676      	mov	r6, lr
 800e6c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e6cc:	5de5      	ldrb	r5, [r4, r7]
 800e6ce:	f015 0508 	ands.w	r5, r5, #8
 800e6d2:	d1f8      	bne.n	800e6c6 <_strtol_l.isra.0+0x1e>
 800e6d4:	2c2d      	cmp	r4, #45	; 0x2d
 800e6d6:	d134      	bne.n	800e742 <_strtol_l.isra.0+0x9a>
 800e6d8:	f89e 4000 	ldrb.w	r4, [lr]
 800e6dc:	f04f 0801 	mov.w	r8, #1
 800e6e0:	f106 0e02 	add.w	lr, r6, #2
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d05c      	beq.n	800e7a2 <_strtol_l.isra.0+0xfa>
 800e6e8:	2b10      	cmp	r3, #16
 800e6ea:	d10c      	bne.n	800e706 <_strtol_l.isra.0+0x5e>
 800e6ec:	2c30      	cmp	r4, #48	; 0x30
 800e6ee:	d10a      	bne.n	800e706 <_strtol_l.isra.0+0x5e>
 800e6f0:	f89e 4000 	ldrb.w	r4, [lr]
 800e6f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e6f8:	2c58      	cmp	r4, #88	; 0x58
 800e6fa:	d14d      	bne.n	800e798 <_strtol_l.isra.0+0xf0>
 800e6fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e700:	2310      	movs	r3, #16
 800e702:	f10e 0e02 	add.w	lr, lr, #2
 800e706:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e70a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e70e:	2600      	movs	r6, #0
 800e710:	fbbc f9f3 	udiv	r9, ip, r3
 800e714:	4635      	mov	r5, r6
 800e716:	fb03 ca19 	mls	sl, r3, r9, ip
 800e71a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e71e:	2f09      	cmp	r7, #9
 800e720:	d818      	bhi.n	800e754 <_strtol_l.isra.0+0xac>
 800e722:	463c      	mov	r4, r7
 800e724:	42a3      	cmp	r3, r4
 800e726:	dd24      	ble.n	800e772 <_strtol_l.isra.0+0xca>
 800e728:	2e00      	cmp	r6, #0
 800e72a:	db1f      	blt.n	800e76c <_strtol_l.isra.0+0xc4>
 800e72c:	45a9      	cmp	r9, r5
 800e72e:	d31d      	bcc.n	800e76c <_strtol_l.isra.0+0xc4>
 800e730:	d101      	bne.n	800e736 <_strtol_l.isra.0+0x8e>
 800e732:	45a2      	cmp	sl, r4
 800e734:	db1a      	blt.n	800e76c <_strtol_l.isra.0+0xc4>
 800e736:	fb05 4503 	mla	r5, r5, r3, r4
 800e73a:	2601      	movs	r6, #1
 800e73c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e740:	e7eb      	b.n	800e71a <_strtol_l.isra.0+0x72>
 800e742:	2c2b      	cmp	r4, #43	; 0x2b
 800e744:	bf08      	it	eq
 800e746:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e74a:	46a8      	mov	r8, r5
 800e74c:	bf08      	it	eq
 800e74e:	f106 0e02 	addeq.w	lr, r6, #2
 800e752:	e7c7      	b.n	800e6e4 <_strtol_l.isra.0+0x3c>
 800e754:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e758:	2f19      	cmp	r7, #25
 800e75a:	d801      	bhi.n	800e760 <_strtol_l.isra.0+0xb8>
 800e75c:	3c37      	subs	r4, #55	; 0x37
 800e75e:	e7e1      	b.n	800e724 <_strtol_l.isra.0+0x7c>
 800e760:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e764:	2f19      	cmp	r7, #25
 800e766:	d804      	bhi.n	800e772 <_strtol_l.isra.0+0xca>
 800e768:	3c57      	subs	r4, #87	; 0x57
 800e76a:	e7db      	b.n	800e724 <_strtol_l.isra.0+0x7c>
 800e76c:	f04f 36ff 	mov.w	r6, #4294967295
 800e770:	e7e4      	b.n	800e73c <_strtol_l.isra.0+0x94>
 800e772:	2e00      	cmp	r6, #0
 800e774:	da05      	bge.n	800e782 <_strtol_l.isra.0+0xda>
 800e776:	2322      	movs	r3, #34	; 0x22
 800e778:	6003      	str	r3, [r0, #0]
 800e77a:	4665      	mov	r5, ip
 800e77c:	b942      	cbnz	r2, 800e790 <_strtol_l.isra.0+0xe8>
 800e77e:	4628      	mov	r0, r5
 800e780:	e79d      	b.n	800e6be <_strtol_l.isra.0+0x16>
 800e782:	f1b8 0f00 	cmp.w	r8, #0
 800e786:	d000      	beq.n	800e78a <_strtol_l.isra.0+0xe2>
 800e788:	426d      	negs	r5, r5
 800e78a:	2a00      	cmp	r2, #0
 800e78c:	d0f7      	beq.n	800e77e <_strtol_l.isra.0+0xd6>
 800e78e:	b10e      	cbz	r6, 800e794 <_strtol_l.isra.0+0xec>
 800e790:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e794:	6011      	str	r1, [r2, #0]
 800e796:	e7f2      	b.n	800e77e <_strtol_l.isra.0+0xd6>
 800e798:	2430      	movs	r4, #48	; 0x30
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1b3      	bne.n	800e706 <_strtol_l.isra.0+0x5e>
 800e79e:	2308      	movs	r3, #8
 800e7a0:	e7b1      	b.n	800e706 <_strtol_l.isra.0+0x5e>
 800e7a2:	2c30      	cmp	r4, #48	; 0x30
 800e7a4:	d0a4      	beq.n	800e6f0 <_strtol_l.isra.0+0x48>
 800e7a6:	230a      	movs	r3, #10
 800e7a8:	e7ad      	b.n	800e706 <_strtol_l.isra.0+0x5e>
 800e7aa:	bf00      	nop
 800e7ac:	08012f61 	.word	0x08012f61

0800e7b0 <_strtol_r>:
 800e7b0:	f7ff bf7a 	b.w	800e6a8 <_strtol_l.isra.0>

0800e7b4 <_write_r>:
 800e7b4:	b538      	push	{r3, r4, r5, lr}
 800e7b6:	4d07      	ldr	r5, [pc, #28]	; (800e7d4 <_write_r+0x20>)
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	4608      	mov	r0, r1
 800e7bc:	4611      	mov	r1, r2
 800e7be:	2200      	movs	r2, #0
 800e7c0:	602a      	str	r2, [r5, #0]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	f7f3 fc07 	bl	8001fd6 <_write>
 800e7c8:	1c43      	adds	r3, r0, #1
 800e7ca:	d102      	bne.n	800e7d2 <_write_r+0x1e>
 800e7cc:	682b      	ldr	r3, [r5, #0]
 800e7ce:	b103      	cbz	r3, 800e7d2 <_write_r+0x1e>
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	bd38      	pop	{r3, r4, r5, pc}
 800e7d4:	200061d4 	.word	0x200061d4

0800e7d8 <_close_r>:
 800e7d8:	b538      	push	{r3, r4, r5, lr}
 800e7da:	4d06      	ldr	r5, [pc, #24]	; (800e7f4 <_close_r+0x1c>)
 800e7dc:	2300      	movs	r3, #0
 800e7de:	4604      	mov	r4, r0
 800e7e0:	4608      	mov	r0, r1
 800e7e2:	602b      	str	r3, [r5, #0]
 800e7e4:	f7f3 fc13 	bl	800200e <_close>
 800e7e8:	1c43      	adds	r3, r0, #1
 800e7ea:	d102      	bne.n	800e7f2 <_close_r+0x1a>
 800e7ec:	682b      	ldr	r3, [r5, #0]
 800e7ee:	b103      	cbz	r3, 800e7f2 <_close_r+0x1a>
 800e7f0:	6023      	str	r3, [r4, #0]
 800e7f2:	bd38      	pop	{r3, r4, r5, pc}
 800e7f4:	200061d4 	.word	0x200061d4

0800e7f8 <quorem>:
 800e7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	6903      	ldr	r3, [r0, #16]
 800e7fe:	690c      	ldr	r4, [r1, #16]
 800e800:	42a3      	cmp	r3, r4
 800e802:	4607      	mov	r7, r0
 800e804:	f2c0 8081 	blt.w	800e90a <quorem+0x112>
 800e808:	3c01      	subs	r4, #1
 800e80a:	f101 0814 	add.w	r8, r1, #20
 800e80e:	f100 0514 	add.w	r5, r0, #20
 800e812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e81c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e820:	3301      	adds	r3, #1
 800e822:	429a      	cmp	r2, r3
 800e824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e82c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e830:	d331      	bcc.n	800e896 <quorem+0x9e>
 800e832:	f04f 0e00 	mov.w	lr, #0
 800e836:	4640      	mov	r0, r8
 800e838:	46ac      	mov	ip, r5
 800e83a:	46f2      	mov	sl, lr
 800e83c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e840:	b293      	uxth	r3, r2
 800e842:	fb06 e303 	mla	r3, r6, r3, lr
 800e846:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	ebaa 0303 	sub.w	r3, sl, r3
 800e850:	0c12      	lsrs	r2, r2, #16
 800e852:	f8dc a000 	ldr.w	sl, [ip]
 800e856:	fb06 e202 	mla	r2, r6, r2, lr
 800e85a:	fa13 f38a 	uxtah	r3, r3, sl
 800e85e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e862:	fa1f fa82 	uxth.w	sl, r2
 800e866:	f8dc 2000 	ldr.w	r2, [ip]
 800e86a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e86e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e872:	b29b      	uxth	r3, r3
 800e874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e878:	4581      	cmp	r9, r0
 800e87a:	f84c 3b04 	str.w	r3, [ip], #4
 800e87e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e882:	d2db      	bcs.n	800e83c <quorem+0x44>
 800e884:	f855 300b 	ldr.w	r3, [r5, fp]
 800e888:	b92b      	cbnz	r3, 800e896 <quorem+0x9e>
 800e88a:	9b01      	ldr	r3, [sp, #4]
 800e88c:	3b04      	subs	r3, #4
 800e88e:	429d      	cmp	r5, r3
 800e890:	461a      	mov	r2, r3
 800e892:	d32e      	bcc.n	800e8f2 <quorem+0xfa>
 800e894:	613c      	str	r4, [r7, #16]
 800e896:	4638      	mov	r0, r7
 800e898:	f001 fc8e 	bl	80101b8 <__mcmp>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	db24      	blt.n	800e8ea <quorem+0xf2>
 800e8a0:	3601      	adds	r6, #1
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f04f 0c00 	mov.w	ip, #0
 800e8a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8ac:	f8d0 e000 	ldr.w	lr, [r0]
 800e8b0:	b293      	uxth	r3, r2
 800e8b2:	ebac 0303 	sub.w	r3, ip, r3
 800e8b6:	0c12      	lsrs	r2, r2, #16
 800e8b8:	fa13 f38e 	uxtah	r3, r3, lr
 800e8bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e8c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ca:	45c1      	cmp	r9, r8
 800e8cc:	f840 3b04 	str.w	r3, [r0], #4
 800e8d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e8d4:	d2e8      	bcs.n	800e8a8 <quorem+0xb0>
 800e8d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8de:	b922      	cbnz	r2, 800e8ea <quorem+0xf2>
 800e8e0:	3b04      	subs	r3, #4
 800e8e2:	429d      	cmp	r5, r3
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	d30a      	bcc.n	800e8fe <quorem+0x106>
 800e8e8:	613c      	str	r4, [r7, #16]
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	b003      	add	sp, #12
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	6812      	ldr	r2, [r2, #0]
 800e8f4:	3b04      	subs	r3, #4
 800e8f6:	2a00      	cmp	r2, #0
 800e8f8:	d1cc      	bne.n	800e894 <quorem+0x9c>
 800e8fa:	3c01      	subs	r4, #1
 800e8fc:	e7c7      	b.n	800e88e <quorem+0x96>
 800e8fe:	6812      	ldr	r2, [r2, #0]
 800e900:	3b04      	subs	r3, #4
 800e902:	2a00      	cmp	r2, #0
 800e904:	d1f0      	bne.n	800e8e8 <quorem+0xf0>
 800e906:	3c01      	subs	r4, #1
 800e908:	e7eb      	b.n	800e8e2 <quorem+0xea>
 800e90a:	2000      	movs	r0, #0
 800e90c:	e7ee      	b.n	800e8ec <quorem+0xf4>
	...

0800e910 <_dtoa_r>:
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	ed2d 8b02 	vpush	{d8}
 800e918:	ec57 6b10 	vmov	r6, r7, d0
 800e91c:	b095      	sub	sp, #84	; 0x54
 800e91e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e920:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e924:	9105      	str	r1, [sp, #20]
 800e926:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e92a:	4604      	mov	r4, r0
 800e92c:	9209      	str	r2, [sp, #36]	; 0x24
 800e92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e930:	b975      	cbnz	r5, 800e950 <_dtoa_r+0x40>
 800e932:	2010      	movs	r0, #16
 800e934:	f001 f95e 	bl	800fbf4 <malloc>
 800e938:	4602      	mov	r2, r0
 800e93a:	6260      	str	r0, [r4, #36]	; 0x24
 800e93c:	b920      	cbnz	r0, 800e948 <_dtoa_r+0x38>
 800e93e:	4bb2      	ldr	r3, [pc, #712]	; (800ec08 <_dtoa_r+0x2f8>)
 800e940:	21ea      	movs	r1, #234	; 0xea
 800e942:	48b2      	ldr	r0, [pc, #712]	; (800ec0c <_dtoa_r+0x2fc>)
 800e944:	f002 fc9a 	bl	801127c <__assert_func>
 800e948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e94c:	6005      	str	r5, [r0, #0]
 800e94e:	60c5      	str	r5, [r0, #12]
 800e950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e952:	6819      	ldr	r1, [r3, #0]
 800e954:	b151      	cbz	r1, 800e96c <_dtoa_r+0x5c>
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	604a      	str	r2, [r1, #4]
 800e95a:	2301      	movs	r3, #1
 800e95c:	4093      	lsls	r3, r2
 800e95e:	608b      	str	r3, [r1, #8]
 800e960:	4620      	mov	r0, r4
 800e962:	f001 f9a1 	bl	800fca8 <_Bfree>
 800e966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]
 800e96c:	1e3b      	subs	r3, r7, #0
 800e96e:	bfb9      	ittee	lt
 800e970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e974:	9303      	strlt	r3, [sp, #12]
 800e976:	2300      	movge	r3, #0
 800e978:	f8c8 3000 	strge.w	r3, [r8]
 800e97c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e980:	4ba3      	ldr	r3, [pc, #652]	; (800ec10 <_dtoa_r+0x300>)
 800e982:	bfbc      	itt	lt
 800e984:	2201      	movlt	r2, #1
 800e986:	f8c8 2000 	strlt.w	r2, [r8]
 800e98a:	ea33 0309 	bics.w	r3, r3, r9
 800e98e:	d11b      	bne.n	800e9c8 <_dtoa_r+0xb8>
 800e990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e992:	f242 730f 	movw	r3, #9999	; 0x270f
 800e996:	6013      	str	r3, [r2, #0]
 800e998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e99c:	4333      	orrs	r3, r6
 800e99e:	f000 857a 	beq.w	800f496 <_dtoa_r+0xb86>
 800e9a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9a4:	b963      	cbnz	r3, 800e9c0 <_dtoa_r+0xb0>
 800e9a6:	4b9b      	ldr	r3, [pc, #620]	; (800ec14 <_dtoa_r+0x304>)
 800e9a8:	e024      	b.n	800e9f4 <_dtoa_r+0xe4>
 800e9aa:	4b9b      	ldr	r3, [pc, #620]	; (800ec18 <_dtoa_r+0x308>)
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	3308      	adds	r3, #8
 800e9b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9b2:	6013      	str	r3, [r2, #0]
 800e9b4:	9800      	ldr	r0, [sp, #0]
 800e9b6:	b015      	add	sp, #84	; 0x54
 800e9b8:	ecbd 8b02 	vpop	{d8}
 800e9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c0:	4b94      	ldr	r3, [pc, #592]	; (800ec14 <_dtoa_r+0x304>)
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	3303      	adds	r3, #3
 800e9c6:	e7f3      	b.n	800e9b0 <_dtoa_r+0xa0>
 800e9c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	ec51 0b17 	vmov	r0, r1, d7
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e9d8:	f7f2 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9dc:	4680      	mov	r8, r0
 800e9de:	b158      	cbz	r0, 800e9f8 <_dtoa_r+0xe8>
 800e9e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	6013      	str	r3, [r2, #0]
 800e9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 8551 	beq.w	800f490 <_dtoa_r+0xb80>
 800e9ee:	488b      	ldr	r0, [pc, #556]	; (800ec1c <_dtoa_r+0x30c>)
 800e9f0:	6018      	str	r0, [r3, #0]
 800e9f2:	1e43      	subs	r3, r0, #1
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	e7dd      	b.n	800e9b4 <_dtoa_r+0xa4>
 800e9f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e9fc:	aa12      	add	r2, sp, #72	; 0x48
 800e9fe:	a913      	add	r1, sp, #76	; 0x4c
 800ea00:	4620      	mov	r0, r4
 800ea02:	f001 fcf9 	bl	80103f8 <__d2b>
 800ea06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea0a:	4683      	mov	fp, r0
 800ea0c:	2d00      	cmp	r5, #0
 800ea0e:	d07c      	beq.n	800eb0a <_dtoa_r+0x1fa>
 800ea10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ea16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ea1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea2a:	4b7d      	ldr	r3, [pc, #500]	; (800ec20 <_dtoa_r+0x310>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	4630      	mov	r0, r6
 800ea30:	4639      	mov	r1, r7
 800ea32:	f7f1 fc31 	bl	8000298 <__aeabi_dsub>
 800ea36:	a36e      	add	r3, pc, #440	; (adr r3, 800ebf0 <_dtoa_r+0x2e0>)
 800ea38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3c:	f7f1 fde4 	bl	8000608 <__aeabi_dmul>
 800ea40:	a36d      	add	r3, pc, #436	; (adr r3, 800ebf8 <_dtoa_r+0x2e8>)
 800ea42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea46:	f7f1 fc29 	bl	800029c <__adddf3>
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	460f      	mov	r7, r1
 800ea50:	f7f1 fd70 	bl	8000534 <__aeabi_i2d>
 800ea54:	a36a      	add	r3, pc, #424	; (adr r3, 800ec00 <_dtoa_r+0x2f0>)
 800ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5a:	f7f1 fdd5 	bl	8000608 <__aeabi_dmul>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	460b      	mov	r3, r1
 800ea62:	4630      	mov	r0, r6
 800ea64:	4639      	mov	r1, r7
 800ea66:	f7f1 fc19 	bl	800029c <__adddf3>
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	460f      	mov	r7, r1
 800ea6e:	f7f2 f87b 	bl	8000b68 <__aeabi_d2iz>
 800ea72:	2200      	movs	r2, #0
 800ea74:	4682      	mov	sl, r0
 800ea76:	2300      	movs	r3, #0
 800ea78:	4630      	mov	r0, r6
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	f7f2 f836 	bl	8000aec <__aeabi_dcmplt>
 800ea80:	b148      	cbz	r0, 800ea96 <_dtoa_r+0x186>
 800ea82:	4650      	mov	r0, sl
 800ea84:	f7f1 fd56 	bl	8000534 <__aeabi_i2d>
 800ea88:	4632      	mov	r2, r6
 800ea8a:	463b      	mov	r3, r7
 800ea8c:	f7f2 f824 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea90:	b908      	cbnz	r0, 800ea96 <_dtoa_r+0x186>
 800ea92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea96:	f1ba 0f16 	cmp.w	sl, #22
 800ea9a:	d854      	bhi.n	800eb46 <_dtoa_r+0x236>
 800ea9c:	4b61      	ldr	r3, [pc, #388]	; (800ec24 <_dtoa_r+0x314>)
 800ea9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eaaa:	f7f2 f81f 	bl	8000aec <__aeabi_dcmplt>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d04b      	beq.n	800eb4a <_dtoa_r+0x23a>
 800eab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eab6:	2300      	movs	r3, #0
 800eab8:	930e      	str	r3, [sp, #56]	; 0x38
 800eaba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eabc:	1b5d      	subs	r5, r3, r5
 800eabe:	1e6b      	subs	r3, r5, #1
 800eac0:	9304      	str	r3, [sp, #16]
 800eac2:	bf43      	ittte	mi
 800eac4:	2300      	movmi	r3, #0
 800eac6:	f1c5 0801 	rsbmi	r8, r5, #1
 800eaca:	9304      	strmi	r3, [sp, #16]
 800eacc:	f04f 0800 	movpl.w	r8, #0
 800ead0:	f1ba 0f00 	cmp.w	sl, #0
 800ead4:	db3b      	blt.n	800eb4e <_dtoa_r+0x23e>
 800ead6:	9b04      	ldr	r3, [sp, #16]
 800ead8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800eadc:	4453      	add	r3, sl
 800eade:	9304      	str	r3, [sp, #16]
 800eae0:	2300      	movs	r3, #0
 800eae2:	9306      	str	r3, [sp, #24]
 800eae4:	9b05      	ldr	r3, [sp, #20]
 800eae6:	2b09      	cmp	r3, #9
 800eae8:	d869      	bhi.n	800ebbe <_dtoa_r+0x2ae>
 800eaea:	2b05      	cmp	r3, #5
 800eaec:	bfc4      	itt	gt
 800eaee:	3b04      	subgt	r3, #4
 800eaf0:	9305      	strgt	r3, [sp, #20]
 800eaf2:	9b05      	ldr	r3, [sp, #20]
 800eaf4:	f1a3 0302 	sub.w	r3, r3, #2
 800eaf8:	bfcc      	ite	gt
 800eafa:	2500      	movgt	r5, #0
 800eafc:	2501      	movle	r5, #1
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	d869      	bhi.n	800ebd6 <_dtoa_r+0x2c6>
 800eb02:	e8df f003 	tbb	[pc, r3]
 800eb06:	4e2c      	.short	0x4e2c
 800eb08:	5a4c      	.short	0x5a4c
 800eb0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800eb0e:	441d      	add	r5, r3
 800eb10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb14:	2b20      	cmp	r3, #32
 800eb16:	bfc1      	itttt	gt
 800eb18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb20:	fa09 f303 	lslgt.w	r3, r9, r3
 800eb24:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb28:	bfda      	itte	le
 800eb2a:	f1c3 0320 	rsble	r3, r3, #32
 800eb2e:	fa06 f003 	lslle.w	r0, r6, r3
 800eb32:	4318      	orrgt	r0, r3
 800eb34:	f7f1 fcee 	bl	8000514 <__aeabi_ui2d>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb40:	3d01      	subs	r5, #1
 800eb42:	9310      	str	r3, [sp, #64]	; 0x40
 800eb44:	e771      	b.n	800ea2a <_dtoa_r+0x11a>
 800eb46:	2301      	movs	r3, #1
 800eb48:	e7b6      	b.n	800eab8 <_dtoa_r+0x1a8>
 800eb4a:	900e      	str	r0, [sp, #56]	; 0x38
 800eb4c:	e7b5      	b.n	800eaba <_dtoa_r+0x1aa>
 800eb4e:	f1ca 0300 	rsb	r3, sl, #0
 800eb52:	9306      	str	r3, [sp, #24]
 800eb54:	2300      	movs	r3, #0
 800eb56:	eba8 080a 	sub.w	r8, r8, sl
 800eb5a:	930d      	str	r3, [sp, #52]	; 0x34
 800eb5c:	e7c2      	b.n	800eae4 <_dtoa_r+0x1d4>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	9308      	str	r3, [sp, #32]
 800eb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	dc39      	bgt.n	800ebdc <_dtoa_r+0x2cc>
 800eb68:	f04f 0901 	mov.w	r9, #1
 800eb6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb70:	464b      	mov	r3, r9
 800eb72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800eb76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eb78:	2200      	movs	r2, #0
 800eb7a:	6042      	str	r2, [r0, #4]
 800eb7c:	2204      	movs	r2, #4
 800eb7e:	f102 0614 	add.w	r6, r2, #20
 800eb82:	429e      	cmp	r6, r3
 800eb84:	6841      	ldr	r1, [r0, #4]
 800eb86:	d92f      	bls.n	800ebe8 <_dtoa_r+0x2d8>
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f001 f84d 	bl	800fc28 <_Balloc>
 800eb8e:	9000      	str	r0, [sp, #0]
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d14b      	bne.n	800ec2c <_dtoa_r+0x31c>
 800eb94:	4b24      	ldr	r3, [pc, #144]	; (800ec28 <_dtoa_r+0x318>)
 800eb96:	4602      	mov	r2, r0
 800eb98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eb9c:	e6d1      	b.n	800e942 <_dtoa_r+0x32>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e7de      	b.n	800eb60 <_dtoa_r+0x250>
 800eba2:	2300      	movs	r3, #0
 800eba4:	9308      	str	r3, [sp, #32]
 800eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba8:	eb0a 0903 	add.w	r9, sl, r3
 800ebac:	f109 0301 	add.w	r3, r9, #1
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	9301      	str	r3, [sp, #4]
 800ebb4:	bfb8      	it	lt
 800ebb6:	2301      	movlt	r3, #1
 800ebb8:	e7dd      	b.n	800eb76 <_dtoa_r+0x266>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e7f2      	b.n	800eba4 <_dtoa_r+0x294>
 800ebbe:	2501      	movs	r5, #1
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	9305      	str	r3, [sp, #20]
 800ebc4:	9508      	str	r5, [sp, #32]
 800ebc6:	f04f 39ff 	mov.w	r9, #4294967295
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ebd0:	2312      	movs	r3, #18
 800ebd2:	9209      	str	r2, [sp, #36]	; 0x24
 800ebd4:	e7cf      	b.n	800eb76 <_dtoa_r+0x266>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	9308      	str	r3, [sp, #32]
 800ebda:	e7f4      	b.n	800ebc6 <_dtoa_r+0x2b6>
 800ebdc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ebe0:	f8cd 9004 	str.w	r9, [sp, #4]
 800ebe4:	464b      	mov	r3, r9
 800ebe6:	e7c6      	b.n	800eb76 <_dtoa_r+0x266>
 800ebe8:	3101      	adds	r1, #1
 800ebea:	6041      	str	r1, [r0, #4]
 800ebec:	0052      	lsls	r2, r2, #1
 800ebee:	e7c6      	b.n	800eb7e <_dtoa_r+0x26e>
 800ebf0:	636f4361 	.word	0x636f4361
 800ebf4:	3fd287a7 	.word	0x3fd287a7
 800ebf8:	8b60c8b3 	.word	0x8b60c8b3
 800ebfc:	3fc68a28 	.word	0x3fc68a28
 800ec00:	509f79fb 	.word	0x509f79fb
 800ec04:	3fd34413 	.word	0x3fd34413
 800ec08:	0801306e 	.word	0x0801306e
 800ec0c:	08013085 	.word	0x08013085
 800ec10:	7ff00000 	.word	0x7ff00000
 800ec14:	0801306a 	.word	0x0801306a
 800ec18:	08013061 	.word	0x08013061
 800ec1c:	080132ea 	.word	0x080132ea
 800ec20:	3ff80000 	.word	0x3ff80000
 800ec24:	08013200 	.word	0x08013200
 800ec28:	080130e4 	.word	0x080130e4
 800ec2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec2e:	9a00      	ldr	r2, [sp, #0]
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	9b01      	ldr	r3, [sp, #4]
 800ec34:	2b0e      	cmp	r3, #14
 800ec36:	f200 80ad 	bhi.w	800ed94 <_dtoa_r+0x484>
 800ec3a:	2d00      	cmp	r5, #0
 800ec3c:	f000 80aa 	beq.w	800ed94 <_dtoa_r+0x484>
 800ec40:	f1ba 0f00 	cmp.w	sl, #0
 800ec44:	dd36      	ble.n	800ecb4 <_dtoa_r+0x3a4>
 800ec46:	4ac3      	ldr	r2, [pc, #780]	; (800ef54 <_dtoa_r+0x644>)
 800ec48:	f00a 030f 	and.w	r3, sl, #15
 800ec4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec50:	ed93 7b00 	vldr	d7, [r3]
 800ec54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ec58:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ec5c:	eeb0 8a47 	vmov.f32	s16, s14
 800ec60:	eef0 8a67 	vmov.f32	s17, s15
 800ec64:	d016      	beq.n	800ec94 <_dtoa_r+0x384>
 800ec66:	4bbc      	ldr	r3, [pc, #752]	; (800ef58 <_dtoa_r+0x648>)
 800ec68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec70:	f7f1 fdf4 	bl	800085c <__aeabi_ddiv>
 800ec74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec78:	f007 070f 	and.w	r7, r7, #15
 800ec7c:	2503      	movs	r5, #3
 800ec7e:	4eb6      	ldr	r6, [pc, #728]	; (800ef58 <_dtoa_r+0x648>)
 800ec80:	b957      	cbnz	r7, 800ec98 <_dtoa_r+0x388>
 800ec82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec86:	ec53 2b18 	vmov	r2, r3, d8
 800ec8a:	f7f1 fde7 	bl	800085c <__aeabi_ddiv>
 800ec8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec92:	e029      	b.n	800ece8 <_dtoa_r+0x3d8>
 800ec94:	2502      	movs	r5, #2
 800ec96:	e7f2      	b.n	800ec7e <_dtoa_r+0x36e>
 800ec98:	07f9      	lsls	r1, r7, #31
 800ec9a:	d508      	bpl.n	800ecae <_dtoa_r+0x39e>
 800ec9c:	ec51 0b18 	vmov	r0, r1, d8
 800eca0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eca4:	f7f1 fcb0 	bl	8000608 <__aeabi_dmul>
 800eca8:	ec41 0b18 	vmov	d8, r0, r1
 800ecac:	3501      	adds	r5, #1
 800ecae:	107f      	asrs	r7, r7, #1
 800ecb0:	3608      	adds	r6, #8
 800ecb2:	e7e5      	b.n	800ec80 <_dtoa_r+0x370>
 800ecb4:	f000 80a6 	beq.w	800ee04 <_dtoa_r+0x4f4>
 800ecb8:	f1ca 0600 	rsb	r6, sl, #0
 800ecbc:	4ba5      	ldr	r3, [pc, #660]	; (800ef54 <_dtoa_r+0x644>)
 800ecbe:	4fa6      	ldr	r7, [pc, #664]	; (800ef58 <_dtoa_r+0x648>)
 800ecc0:	f006 020f 	and.w	r2, r6, #15
 800ecc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ecd0:	f7f1 fc9a 	bl	8000608 <__aeabi_dmul>
 800ecd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecd8:	1136      	asrs	r6, r6, #4
 800ecda:	2300      	movs	r3, #0
 800ecdc:	2502      	movs	r5, #2
 800ecde:	2e00      	cmp	r6, #0
 800ece0:	f040 8085 	bne.w	800edee <_dtoa_r+0x4de>
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1d2      	bne.n	800ec8e <_dtoa_r+0x37e>
 800ece8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 808c 	beq.w	800ee08 <_dtoa_r+0x4f8>
 800ecf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ecf4:	4b99      	ldr	r3, [pc, #612]	; (800ef5c <_dtoa_r+0x64c>)
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4639      	mov	r1, r7
 800ecfc:	f7f1 fef6 	bl	8000aec <__aeabi_dcmplt>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	f000 8081 	beq.w	800ee08 <_dtoa_r+0x4f8>
 800ed06:	9b01      	ldr	r3, [sp, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d07d      	beq.n	800ee08 <_dtoa_r+0x4f8>
 800ed0c:	f1b9 0f00 	cmp.w	r9, #0
 800ed10:	dd3c      	ble.n	800ed8c <_dtoa_r+0x47c>
 800ed12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ed16:	9307      	str	r3, [sp, #28]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4b91      	ldr	r3, [pc, #580]	; (800ef60 <_dtoa_r+0x650>)
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	4639      	mov	r1, r7
 800ed20:	f7f1 fc72 	bl	8000608 <__aeabi_dmul>
 800ed24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed28:	3501      	adds	r5, #1
 800ed2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ed2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed32:	4628      	mov	r0, r5
 800ed34:	f7f1 fbfe 	bl	8000534 <__aeabi_i2d>
 800ed38:	4632      	mov	r2, r6
 800ed3a:	463b      	mov	r3, r7
 800ed3c:	f7f1 fc64 	bl	8000608 <__aeabi_dmul>
 800ed40:	4b88      	ldr	r3, [pc, #544]	; (800ef64 <_dtoa_r+0x654>)
 800ed42:	2200      	movs	r2, #0
 800ed44:	f7f1 faaa 	bl	800029c <__adddf3>
 800ed48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ed4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed50:	9303      	str	r3, [sp, #12]
 800ed52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d15c      	bne.n	800ee12 <_dtoa_r+0x502>
 800ed58:	4b83      	ldr	r3, [pc, #524]	; (800ef68 <_dtoa_r+0x658>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	4639      	mov	r1, r7
 800ed60:	f7f1 fa9a 	bl	8000298 <__aeabi_dsub>
 800ed64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed68:	4606      	mov	r6, r0
 800ed6a:	460f      	mov	r7, r1
 800ed6c:	f7f1 fedc 	bl	8000b28 <__aeabi_dcmpgt>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	f040 8296 	bne.w	800f2a2 <_dtoa_r+0x992>
 800ed76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed80:	4639      	mov	r1, r7
 800ed82:	f7f1 feb3 	bl	8000aec <__aeabi_dcmplt>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	f040 8288 	bne.w	800f29c <_dtoa_r+0x98c>
 800ed8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ed90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ed94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f2c0 8158 	blt.w	800f04c <_dtoa_r+0x73c>
 800ed9c:	f1ba 0f0e 	cmp.w	sl, #14
 800eda0:	f300 8154 	bgt.w	800f04c <_dtoa_r+0x73c>
 800eda4:	4b6b      	ldr	r3, [pc, #428]	; (800ef54 <_dtoa_r+0x644>)
 800eda6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800edaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f280 80e3 	bge.w	800ef7c <_dtoa_r+0x66c>
 800edb6:	9b01      	ldr	r3, [sp, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f300 80df 	bgt.w	800ef7c <_dtoa_r+0x66c>
 800edbe:	f040 826d 	bne.w	800f29c <_dtoa_r+0x98c>
 800edc2:	4b69      	ldr	r3, [pc, #420]	; (800ef68 <_dtoa_r+0x658>)
 800edc4:	2200      	movs	r2, #0
 800edc6:	4640      	mov	r0, r8
 800edc8:	4649      	mov	r1, r9
 800edca:	f7f1 fc1d 	bl	8000608 <__aeabi_dmul>
 800edce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edd2:	f7f1 fe9f 	bl	8000b14 <__aeabi_dcmpge>
 800edd6:	9e01      	ldr	r6, [sp, #4]
 800edd8:	4637      	mov	r7, r6
 800edda:	2800      	cmp	r0, #0
 800eddc:	f040 8243 	bne.w	800f266 <_dtoa_r+0x956>
 800ede0:	9d00      	ldr	r5, [sp, #0]
 800ede2:	2331      	movs	r3, #49	; 0x31
 800ede4:	f805 3b01 	strb.w	r3, [r5], #1
 800ede8:	f10a 0a01 	add.w	sl, sl, #1
 800edec:	e23f      	b.n	800f26e <_dtoa_r+0x95e>
 800edee:	07f2      	lsls	r2, r6, #31
 800edf0:	d505      	bpl.n	800edfe <_dtoa_r+0x4ee>
 800edf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edf6:	f7f1 fc07 	bl	8000608 <__aeabi_dmul>
 800edfa:	3501      	adds	r5, #1
 800edfc:	2301      	movs	r3, #1
 800edfe:	1076      	asrs	r6, r6, #1
 800ee00:	3708      	adds	r7, #8
 800ee02:	e76c      	b.n	800ecde <_dtoa_r+0x3ce>
 800ee04:	2502      	movs	r5, #2
 800ee06:	e76f      	b.n	800ece8 <_dtoa_r+0x3d8>
 800ee08:	9b01      	ldr	r3, [sp, #4]
 800ee0a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ee0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ee10:	e78d      	b.n	800ed2e <_dtoa_r+0x41e>
 800ee12:	9900      	ldr	r1, [sp, #0]
 800ee14:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ee16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee18:	4b4e      	ldr	r3, [pc, #312]	; (800ef54 <_dtoa_r+0x644>)
 800ee1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee1e:	4401      	add	r1, r0
 800ee20:	9102      	str	r1, [sp, #8]
 800ee22:	9908      	ldr	r1, [sp, #32]
 800ee24:	eeb0 8a47 	vmov.f32	s16, s14
 800ee28:	eef0 8a67 	vmov.f32	s17, s15
 800ee2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee34:	2900      	cmp	r1, #0
 800ee36:	d045      	beq.n	800eec4 <_dtoa_r+0x5b4>
 800ee38:	494c      	ldr	r1, [pc, #304]	; (800ef6c <_dtoa_r+0x65c>)
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	f7f1 fd0e 	bl	800085c <__aeabi_ddiv>
 800ee40:	ec53 2b18 	vmov	r2, r3, d8
 800ee44:	f7f1 fa28 	bl	8000298 <__aeabi_dsub>
 800ee48:	9d00      	ldr	r5, [sp, #0]
 800ee4a:	ec41 0b18 	vmov	d8, r0, r1
 800ee4e:	4639      	mov	r1, r7
 800ee50:	4630      	mov	r0, r6
 800ee52:	f7f1 fe89 	bl	8000b68 <__aeabi_d2iz>
 800ee56:	900c      	str	r0, [sp, #48]	; 0x30
 800ee58:	f7f1 fb6c 	bl	8000534 <__aeabi_i2d>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	460b      	mov	r3, r1
 800ee60:	4630      	mov	r0, r6
 800ee62:	4639      	mov	r1, r7
 800ee64:	f7f1 fa18 	bl	8000298 <__aeabi_dsub>
 800ee68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee6a:	3330      	adds	r3, #48	; 0x30
 800ee6c:	f805 3b01 	strb.w	r3, [r5], #1
 800ee70:	ec53 2b18 	vmov	r2, r3, d8
 800ee74:	4606      	mov	r6, r0
 800ee76:	460f      	mov	r7, r1
 800ee78:	f7f1 fe38 	bl	8000aec <__aeabi_dcmplt>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d165      	bne.n	800ef4c <_dtoa_r+0x63c>
 800ee80:	4632      	mov	r2, r6
 800ee82:	463b      	mov	r3, r7
 800ee84:	4935      	ldr	r1, [pc, #212]	; (800ef5c <_dtoa_r+0x64c>)
 800ee86:	2000      	movs	r0, #0
 800ee88:	f7f1 fa06 	bl	8000298 <__aeabi_dsub>
 800ee8c:	ec53 2b18 	vmov	r2, r3, d8
 800ee90:	f7f1 fe2c 	bl	8000aec <__aeabi_dcmplt>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	f040 80b9 	bne.w	800f00c <_dtoa_r+0x6fc>
 800ee9a:	9b02      	ldr	r3, [sp, #8]
 800ee9c:	429d      	cmp	r5, r3
 800ee9e:	f43f af75 	beq.w	800ed8c <_dtoa_r+0x47c>
 800eea2:	4b2f      	ldr	r3, [pc, #188]	; (800ef60 <_dtoa_r+0x650>)
 800eea4:	ec51 0b18 	vmov	r0, r1, d8
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f7f1 fbad 	bl	8000608 <__aeabi_dmul>
 800eeae:	4b2c      	ldr	r3, [pc, #176]	; (800ef60 <_dtoa_r+0x650>)
 800eeb0:	ec41 0b18 	vmov	d8, r0, r1
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	4639      	mov	r1, r7
 800eeba:	f7f1 fba5 	bl	8000608 <__aeabi_dmul>
 800eebe:	4606      	mov	r6, r0
 800eec0:	460f      	mov	r7, r1
 800eec2:	e7c4      	b.n	800ee4e <_dtoa_r+0x53e>
 800eec4:	ec51 0b17 	vmov	r0, r1, d7
 800eec8:	f7f1 fb9e 	bl	8000608 <__aeabi_dmul>
 800eecc:	9b02      	ldr	r3, [sp, #8]
 800eece:	9d00      	ldr	r5, [sp, #0]
 800eed0:	930c      	str	r3, [sp, #48]	; 0x30
 800eed2:	ec41 0b18 	vmov	d8, r0, r1
 800eed6:	4639      	mov	r1, r7
 800eed8:	4630      	mov	r0, r6
 800eeda:	f7f1 fe45 	bl	8000b68 <__aeabi_d2iz>
 800eede:	9011      	str	r0, [sp, #68]	; 0x44
 800eee0:	f7f1 fb28 	bl	8000534 <__aeabi_i2d>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	4630      	mov	r0, r6
 800eeea:	4639      	mov	r1, r7
 800eeec:	f7f1 f9d4 	bl	8000298 <__aeabi_dsub>
 800eef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eef2:	3330      	adds	r3, #48	; 0x30
 800eef4:	f805 3b01 	strb.w	r3, [r5], #1
 800eef8:	9b02      	ldr	r3, [sp, #8]
 800eefa:	429d      	cmp	r5, r3
 800eefc:	4606      	mov	r6, r0
 800eefe:	460f      	mov	r7, r1
 800ef00:	f04f 0200 	mov.w	r2, #0
 800ef04:	d134      	bne.n	800ef70 <_dtoa_r+0x660>
 800ef06:	4b19      	ldr	r3, [pc, #100]	; (800ef6c <_dtoa_r+0x65c>)
 800ef08:	ec51 0b18 	vmov	r0, r1, d8
 800ef0c:	f7f1 f9c6 	bl	800029c <__adddf3>
 800ef10:	4602      	mov	r2, r0
 800ef12:	460b      	mov	r3, r1
 800ef14:	4630      	mov	r0, r6
 800ef16:	4639      	mov	r1, r7
 800ef18:	f7f1 fe06 	bl	8000b28 <__aeabi_dcmpgt>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d175      	bne.n	800f00c <_dtoa_r+0x6fc>
 800ef20:	ec53 2b18 	vmov	r2, r3, d8
 800ef24:	4911      	ldr	r1, [pc, #68]	; (800ef6c <_dtoa_r+0x65c>)
 800ef26:	2000      	movs	r0, #0
 800ef28:	f7f1 f9b6 	bl	8000298 <__aeabi_dsub>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 fdda 	bl	8000aec <__aeabi_dcmplt>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	f43f af27 	beq.w	800ed8c <_dtoa_r+0x47c>
 800ef3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef40:	1e6b      	subs	r3, r5, #1
 800ef42:	930c      	str	r3, [sp, #48]	; 0x30
 800ef44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef48:	2b30      	cmp	r3, #48	; 0x30
 800ef4a:	d0f8      	beq.n	800ef3e <_dtoa_r+0x62e>
 800ef4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ef50:	e04a      	b.n	800efe8 <_dtoa_r+0x6d8>
 800ef52:	bf00      	nop
 800ef54:	08013200 	.word	0x08013200
 800ef58:	080131d8 	.word	0x080131d8
 800ef5c:	3ff00000 	.word	0x3ff00000
 800ef60:	40240000 	.word	0x40240000
 800ef64:	401c0000 	.word	0x401c0000
 800ef68:	40140000 	.word	0x40140000
 800ef6c:	3fe00000 	.word	0x3fe00000
 800ef70:	4baf      	ldr	r3, [pc, #700]	; (800f230 <_dtoa_r+0x920>)
 800ef72:	f7f1 fb49 	bl	8000608 <__aeabi_dmul>
 800ef76:	4606      	mov	r6, r0
 800ef78:	460f      	mov	r7, r1
 800ef7a:	e7ac      	b.n	800eed6 <_dtoa_r+0x5c6>
 800ef7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ef80:	9d00      	ldr	r5, [sp, #0]
 800ef82:	4642      	mov	r2, r8
 800ef84:	464b      	mov	r3, r9
 800ef86:	4630      	mov	r0, r6
 800ef88:	4639      	mov	r1, r7
 800ef8a:	f7f1 fc67 	bl	800085c <__aeabi_ddiv>
 800ef8e:	f7f1 fdeb 	bl	8000b68 <__aeabi_d2iz>
 800ef92:	9002      	str	r0, [sp, #8]
 800ef94:	f7f1 face 	bl	8000534 <__aeabi_i2d>
 800ef98:	4642      	mov	r2, r8
 800ef9a:	464b      	mov	r3, r9
 800ef9c:	f7f1 fb34 	bl	8000608 <__aeabi_dmul>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4630      	mov	r0, r6
 800efa6:	4639      	mov	r1, r7
 800efa8:	f7f1 f976 	bl	8000298 <__aeabi_dsub>
 800efac:	9e02      	ldr	r6, [sp, #8]
 800efae:	9f01      	ldr	r7, [sp, #4]
 800efb0:	3630      	adds	r6, #48	; 0x30
 800efb2:	f805 6b01 	strb.w	r6, [r5], #1
 800efb6:	9e00      	ldr	r6, [sp, #0]
 800efb8:	1bae      	subs	r6, r5, r6
 800efba:	42b7      	cmp	r7, r6
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	d137      	bne.n	800f032 <_dtoa_r+0x722>
 800efc2:	f7f1 f96b 	bl	800029c <__adddf3>
 800efc6:	4642      	mov	r2, r8
 800efc8:	464b      	mov	r3, r9
 800efca:	4606      	mov	r6, r0
 800efcc:	460f      	mov	r7, r1
 800efce:	f7f1 fdab 	bl	8000b28 <__aeabi_dcmpgt>
 800efd2:	b9c8      	cbnz	r0, 800f008 <_dtoa_r+0x6f8>
 800efd4:	4642      	mov	r2, r8
 800efd6:	464b      	mov	r3, r9
 800efd8:	4630      	mov	r0, r6
 800efda:	4639      	mov	r1, r7
 800efdc:	f7f1 fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800efe0:	b110      	cbz	r0, 800efe8 <_dtoa_r+0x6d8>
 800efe2:	9b02      	ldr	r3, [sp, #8]
 800efe4:	07d9      	lsls	r1, r3, #31
 800efe6:	d40f      	bmi.n	800f008 <_dtoa_r+0x6f8>
 800efe8:	4620      	mov	r0, r4
 800efea:	4659      	mov	r1, fp
 800efec:	f000 fe5c 	bl	800fca8 <_Bfree>
 800eff0:	2300      	movs	r3, #0
 800eff2:	702b      	strb	r3, [r5, #0]
 800eff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eff6:	f10a 0001 	add.w	r0, sl, #1
 800effa:	6018      	str	r0, [r3, #0]
 800effc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800effe:	2b00      	cmp	r3, #0
 800f000:	f43f acd8 	beq.w	800e9b4 <_dtoa_r+0xa4>
 800f004:	601d      	str	r5, [r3, #0]
 800f006:	e4d5      	b.n	800e9b4 <_dtoa_r+0xa4>
 800f008:	f8cd a01c 	str.w	sl, [sp, #28]
 800f00c:	462b      	mov	r3, r5
 800f00e:	461d      	mov	r5, r3
 800f010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f014:	2a39      	cmp	r2, #57	; 0x39
 800f016:	d108      	bne.n	800f02a <_dtoa_r+0x71a>
 800f018:	9a00      	ldr	r2, [sp, #0]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d1f7      	bne.n	800f00e <_dtoa_r+0x6fe>
 800f01e:	9a07      	ldr	r2, [sp, #28]
 800f020:	9900      	ldr	r1, [sp, #0]
 800f022:	3201      	adds	r2, #1
 800f024:	9207      	str	r2, [sp, #28]
 800f026:	2230      	movs	r2, #48	; 0x30
 800f028:	700a      	strb	r2, [r1, #0]
 800f02a:	781a      	ldrb	r2, [r3, #0]
 800f02c:	3201      	adds	r2, #1
 800f02e:	701a      	strb	r2, [r3, #0]
 800f030:	e78c      	b.n	800ef4c <_dtoa_r+0x63c>
 800f032:	4b7f      	ldr	r3, [pc, #508]	; (800f230 <_dtoa_r+0x920>)
 800f034:	2200      	movs	r2, #0
 800f036:	f7f1 fae7 	bl	8000608 <__aeabi_dmul>
 800f03a:	2200      	movs	r2, #0
 800f03c:	2300      	movs	r3, #0
 800f03e:	4606      	mov	r6, r0
 800f040:	460f      	mov	r7, r1
 800f042:	f7f1 fd49 	bl	8000ad8 <__aeabi_dcmpeq>
 800f046:	2800      	cmp	r0, #0
 800f048:	d09b      	beq.n	800ef82 <_dtoa_r+0x672>
 800f04a:	e7cd      	b.n	800efe8 <_dtoa_r+0x6d8>
 800f04c:	9a08      	ldr	r2, [sp, #32]
 800f04e:	2a00      	cmp	r2, #0
 800f050:	f000 80c4 	beq.w	800f1dc <_dtoa_r+0x8cc>
 800f054:	9a05      	ldr	r2, [sp, #20]
 800f056:	2a01      	cmp	r2, #1
 800f058:	f300 80a8 	bgt.w	800f1ac <_dtoa_r+0x89c>
 800f05c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f05e:	2a00      	cmp	r2, #0
 800f060:	f000 80a0 	beq.w	800f1a4 <_dtoa_r+0x894>
 800f064:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f068:	9e06      	ldr	r6, [sp, #24]
 800f06a:	4645      	mov	r5, r8
 800f06c:	9a04      	ldr	r2, [sp, #16]
 800f06e:	2101      	movs	r1, #1
 800f070:	441a      	add	r2, r3
 800f072:	4620      	mov	r0, r4
 800f074:	4498      	add	r8, r3
 800f076:	9204      	str	r2, [sp, #16]
 800f078:	f000 ff1c 	bl	800feb4 <__i2b>
 800f07c:	4607      	mov	r7, r0
 800f07e:	2d00      	cmp	r5, #0
 800f080:	dd0b      	ble.n	800f09a <_dtoa_r+0x78a>
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	dd08      	ble.n	800f09a <_dtoa_r+0x78a>
 800f088:	42ab      	cmp	r3, r5
 800f08a:	9a04      	ldr	r2, [sp, #16]
 800f08c:	bfa8      	it	ge
 800f08e:	462b      	movge	r3, r5
 800f090:	eba8 0803 	sub.w	r8, r8, r3
 800f094:	1aed      	subs	r5, r5, r3
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	9304      	str	r3, [sp, #16]
 800f09a:	9b06      	ldr	r3, [sp, #24]
 800f09c:	b1fb      	cbz	r3, 800f0de <_dtoa_r+0x7ce>
 800f09e:	9b08      	ldr	r3, [sp, #32]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 809f 	beq.w	800f1e4 <_dtoa_r+0x8d4>
 800f0a6:	2e00      	cmp	r6, #0
 800f0a8:	dd11      	ble.n	800f0ce <_dtoa_r+0x7be>
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	4632      	mov	r2, r6
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f000 ffbc 	bl	801002c <__pow5mult>
 800f0b4:	465a      	mov	r2, fp
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	4607      	mov	r7, r0
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f000 ff10 	bl	800fee0 <__multiply>
 800f0c0:	4659      	mov	r1, fp
 800f0c2:	9007      	str	r0, [sp, #28]
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f000 fdef 	bl	800fca8 <_Bfree>
 800f0ca:	9b07      	ldr	r3, [sp, #28]
 800f0cc:	469b      	mov	fp, r3
 800f0ce:	9b06      	ldr	r3, [sp, #24]
 800f0d0:	1b9a      	subs	r2, r3, r6
 800f0d2:	d004      	beq.n	800f0de <_dtoa_r+0x7ce>
 800f0d4:	4659      	mov	r1, fp
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 ffa8 	bl	801002c <__pow5mult>
 800f0dc:	4683      	mov	fp, r0
 800f0de:	2101      	movs	r1, #1
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f000 fee7 	bl	800feb4 <__i2b>
 800f0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	4606      	mov	r6, r0
 800f0ec:	dd7c      	ble.n	800f1e8 <_dtoa_r+0x8d8>
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	4601      	mov	r1, r0
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 ff9a 	bl	801002c <__pow5mult>
 800f0f8:	9b05      	ldr	r3, [sp, #20]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	4606      	mov	r6, r0
 800f0fe:	dd76      	ble.n	800f1ee <_dtoa_r+0x8de>
 800f100:	2300      	movs	r3, #0
 800f102:	9306      	str	r3, [sp, #24]
 800f104:	6933      	ldr	r3, [r6, #16]
 800f106:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f10a:	6918      	ldr	r0, [r3, #16]
 800f10c:	f000 fe82 	bl	800fe14 <__hi0bits>
 800f110:	f1c0 0020 	rsb	r0, r0, #32
 800f114:	9b04      	ldr	r3, [sp, #16]
 800f116:	4418      	add	r0, r3
 800f118:	f010 001f 	ands.w	r0, r0, #31
 800f11c:	f000 8086 	beq.w	800f22c <_dtoa_r+0x91c>
 800f120:	f1c0 0320 	rsb	r3, r0, #32
 800f124:	2b04      	cmp	r3, #4
 800f126:	dd7f      	ble.n	800f228 <_dtoa_r+0x918>
 800f128:	f1c0 001c 	rsb	r0, r0, #28
 800f12c:	9b04      	ldr	r3, [sp, #16]
 800f12e:	4403      	add	r3, r0
 800f130:	4480      	add	r8, r0
 800f132:	4405      	add	r5, r0
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	f1b8 0f00 	cmp.w	r8, #0
 800f13a:	dd05      	ble.n	800f148 <_dtoa_r+0x838>
 800f13c:	4659      	mov	r1, fp
 800f13e:	4642      	mov	r2, r8
 800f140:	4620      	mov	r0, r4
 800f142:	f000 ffcd 	bl	80100e0 <__lshift>
 800f146:	4683      	mov	fp, r0
 800f148:	9b04      	ldr	r3, [sp, #16]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	dd05      	ble.n	800f15a <_dtoa_r+0x84a>
 800f14e:	4631      	mov	r1, r6
 800f150:	461a      	mov	r2, r3
 800f152:	4620      	mov	r0, r4
 800f154:	f000 ffc4 	bl	80100e0 <__lshift>
 800f158:	4606      	mov	r6, r0
 800f15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d069      	beq.n	800f234 <_dtoa_r+0x924>
 800f160:	4631      	mov	r1, r6
 800f162:	4658      	mov	r0, fp
 800f164:	f001 f828 	bl	80101b8 <__mcmp>
 800f168:	2800      	cmp	r0, #0
 800f16a:	da63      	bge.n	800f234 <_dtoa_r+0x924>
 800f16c:	2300      	movs	r3, #0
 800f16e:	4659      	mov	r1, fp
 800f170:	220a      	movs	r2, #10
 800f172:	4620      	mov	r0, r4
 800f174:	f000 fdba 	bl	800fcec <__multadd>
 800f178:	9b08      	ldr	r3, [sp, #32]
 800f17a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f17e:	4683      	mov	fp, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	f000 818f 	beq.w	800f4a4 <_dtoa_r+0xb94>
 800f186:	4639      	mov	r1, r7
 800f188:	2300      	movs	r3, #0
 800f18a:	220a      	movs	r2, #10
 800f18c:	4620      	mov	r0, r4
 800f18e:	f000 fdad 	bl	800fcec <__multadd>
 800f192:	f1b9 0f00 	cmp.w	r9, #0
 800f196:	4607      	mov	r7, r0
 800f198:	f300 808e 	bgt.w	800f2b8 <_dtoa_r+0x9a8>
 800f19c:	9b05      	ldr	r3, [sp, #20]
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	dc50      	bgt.n	800f244 <_dtoa_r+0x934>
 800f1a2:	e089      	b.n	800f2b8 <_dtoa_r+0x9a8>
 800f1a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1aa:	e75d      	b.n	800f068 <_dtoa_r+0x758>
 800f1ac:	9b01      	ldr	r3, [sp, #4]
 800f1ae:	1e5e      	subs	r6, r3, #1
 800f1b0:	9b06      	ldr	r3, [sp, #24]
 800f1b2:	42b3      	cmp	r3, r6
 800f1b4:	bfbf      	itttt	lt
 800f1b6:	9b06      	ldrlt	r3, [sp, #24]
 800f1b8:	9606      	strlt	r6, [sp, #24]
 800f1ba:	1af2      	sublt	r2, r6, r3
 800f1bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f1be:	bfb6      	itet	lt
 800f1c0:	189b      	addlt	r3, r3, r2
 800f1c2:	1b9e      	subge	r6, r3, r6
 800f1c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	bfb8      	it	lt
 800f1ca:	2600      	movlt	r6, #0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	bfb5      	itete	lt
 800f1d0:	eba8 0503 	sublt.w	r5, r8, r3
 800f1d4:	9b01      	ldrge	r3, [sp, #4]
 800f1d6:	2300      	movlt	r3, #0
 800f1d8:	4645      	movge	r5, r8
 800f1da:	e747      	b.n	800f06c <_dtoa_r+0x75c>
 800f1dc:	9e06      	ldr	r6, [sp, #24]
 800f1de:	9f08      	ldr	r7, [sp, #32]
 800f1e0:	4645      	mov	r5, r8
 800f1e2:	e74c      	b.n	800f07e <_dtoa_r+0x76e>
 800f1e4:	9a06      	ldr	r2, [sp, #24]
 800f1e6:	e775      	b.n	800f0d4 <_dtoa_r+0x7c4>
 800f1e8:	9b05      	ldr	r3, [sp, #20]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	dc18      	bgt.n	800f220 <_dtoa_r+0x910>
 800f1ee:	9b02      	ldr	r3, [sp, #8]
 800f1f0:	b9b3      	cbnz	r3, 800f220 <_dtoa_r+0x910>
 800f1f2:	9b03      	ldr	r3, [sp, #12]
 800f1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1f8:	b9a3      	cbnz	r3, 800f224 <_dtoa_r+0x914>
 800f1fa:	9b03      	ldr	r3, [sp, #12]
 800f1fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f200:	0d1b      	lsrs	r3, r3, #20
 800f202:	051b      	lsls	r3, r3, #20
 800f204:	b12b      	cbz	r3, 800f212 <_dtoa_r+0x902>
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	3301      	adds	r3, #1
 800f20a:	9304      	str	r3, [sp, #16]
 800f20c:	f108 0801 	add.w	r8, r8, #1
 800f210:	2301      	movs	r3, #1
 800f212:	9306      	str	r3, [sp, #24]
 800f214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f216:	2b00      	cmp	r3, #0
 800f218:	f47f af74 	bne.w	800f104 <_dtoa_r+0x7f4>
 800f21c:	2001      	movs	r0, #1
 800f21e:	e779      	b.n	800f114 <_dtoa_r+0x804>
 800f220:	2300      	movs	r3, #0
 800f222:	e7f6      	b.n	800f212 <_dtoa_r+0x902>
 800f224:	9b02      	ldr	r3, [sp, #8]
 800f226:	e7f4      	b.n	800f212 <_dtoa_r+0x902>
 800f228:	d085      	beq.n	800f136 <_dtoa_r+0x826>
 800f22a:	4618      	mov	r0, r3
 800f22c:	301c      	adds	r0, #28
 800f22e:	e77d      	b.n	800f12c <_dtoa_r+0x81c>
 800f230:	40240000 	.word	0x40240000
 800f234:	9b01      	ldr	r3, [sp, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	dc38      	bgt.n	800f2ac <_dtoa_r+0x99c>
 800f23a:	9b05      	ldr	r3, [sp, #20]
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	dd35      	ble.n	800f2ac <_dtoa_r+0x99c>
 800f240:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f244:	f1b9 0f00 	cmp.w	r9, #0
 800f248:	d10d      	bne.n	800f266 <_dtoa_r+0x956>
 800f24a:	4631      	mov	r1, r6
 800f24c:	464b      	mov	r3, r9
 800f24e:	2205      	movs	r2, #5
 800f250:	4620      	mov	r0, r4
 800f252:	f000 fd4b 	bl	800fcec <__multadd>
 800f256:	4601      	mov	r1, r0
 800f258:	4606      	mov	r6, r0
 800f25a:	4658      	mov	r0, fp
 800f25c:	f000 ffac 	bl	80101b8 <__mcmp>
 800f260:	2800      	cmp	r0, #0
 800f262:	f73f adbd 	bgt.w	800ede0 <_dtoa_r+0x4d0>
 800f266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f268:	9d00      	ldr	r5, [sp, #0]
 800f26a:	ea6f 0a03 	mvn.w	sl, r3
 800f26e:	f04f 0800 	mov.w	r8, #0
 800f272:	4631      	mov	r1, r6
 800f274:	4620      	mov	r0, r4
 800f276:	f000 fd17 	bl	800fca8 <_Bfree>
 800f27a:	2f00      	cmp	r7, #0
 800f27c:	f43f aeb4 	beq.w	800efe8 <_dtoa_r+0x6d8>
 800f280:	f1b8 0f00 	cmp.w	r8, #0
 800f284:	d005      	beq.n	800f292 <_dtoa_r+0x982>
 800f286:	45b8      	cmp	r8, r7
 800f288:	d003      	beq.n	800f292 <_dtoa_r+0x982>
 800f28a:	4641      	mov	r1, r8
 800f28c:	4620      	mov	r0, r4
 800f28e:	f000 fd0b 	bl	800fca8 <_Bfree>
 800f292:	4639      	mov	r1, r7
 800f294:	4620      	mov	r0, r4
 800f296:	f000 fd07 	bl	800fca8 <_Bfree>
 800f29a:	e6a5      	b.n	800efe8 <_dtoa_r+0x6d8>
 800f29c:	2600      	movs	r6, #0
 800f29e:	4637      	mov	r7, r6
 800f2a0:	e7e1      	b.n	800f266 <_dtoa_r+0x956>
 800f2a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f2a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f2a8:	4637      	mov	r7, r6
 800f2aa:	e599      	b.n	800ede0 <_dtoa_r+0x4d0>
 800f2ac:	9b08      	ldr	r3, [sp, #32]
 800f2ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f000 80fd 	beq.w	800f4b2 <_dtoa_r+0xba2>
 800f2b8:	2d00      	cmp	r5, #0
 800f2ba:	dd05      	ble.n	800f2c8 <_dtoa_r+0x9b8>
 800f2bc:	4639      	mov	r1, r7
 800f2be:	462a      	mov	r2, r5
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f000 ff0d 	bl	80100e0 <__lshift>
 800f2c6:	4607      	mov	r7, r0
 800f2c8:	9b06      	ldr	r3, [sp, #24]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d05c      	beq.n	800f388 <_dtoa_r+0xa78>
 800f2ce:	6879      	ldr	r1, [r7, #4]
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 fca9 	bl	800fc28 <_Balloc>
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	b928      	cbnz	r0, 800f2e6 <_dtoa_r+0x9d6>
 800f2da:	4b80      	ldr	r3, [pc, #512]	; (800f4dc <_dtoa_r+0xbcc>)
 800f2dc:	4602      	mov	r2, r0
 800f2de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f2e2:	f7ff bb2e 	b.w	800e942 <_dtoa_r+0x32>
 800f2e6:	693a      	ldr	r2, [r7, #16]
 800f2e8:	3202      	adds	r2, #2
 800f2ea:	0092      	lsls	r2, r2, #2
 800f2ec:	f107 010c 	add.w	r1, r7, #12
 800f2f0:	300c      	adds	r0, #12
 800f2f2:	f7fd fc6f 	bl	800cbd4 <memcpy>
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 fef0 	bl	80100e0 <__lshift>
 800f300:	9b00      	ldr	r3, [sp, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	9301      	str	r3, [sp, #4]
 800f306:	9b00      	ldr	r3, [sp, #0]
 800f308:	444b      	add	r3, r9
 800f30a:	9307      	str	r3, [sp, #28]
 800f30c:	9b02      	ldr	r3, [sp, #8]
 800f30e:	f003 0301 	and.w	r3, r3, #1
 800f312:	46b8      	mov	r8, r7
 800f314:	9306      	str	r3, [sp, #24]
 800f316:	4607      	mov	r7, r0
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	4631      	mov	r1, r6
 800f31c:	3b01      	subs	r3, #1
 800f31e:	4658      	mov	r0, fp
 800f320:	9302      	str	r3, [sp, #8]
 800f322:	f7ff fa69 	bl	800e7f8 <quorem>
 800f326:	4603      	mov	r3, r0
 800f328:	3330      	adds	r3, #48	; 0x30
 800f32a:	9004      	str	r0, [sp, #16]
 800f32c:	4641      	mov	r1, r8
 800f32e:	4658      	mov	r0, fp
 800f330:	9308      	str	r3, [sp, #32]
 800f332:	f000 ff41 	bl	80101b8 <__mcmp>
 800f336:	463a      	mov	r2, r7
 800f338:	4681      	mov	r9, r0
 800f33a:	4631      	mov	r1, r6
 800f33c:	4620      	mov	r0, r4
 800f33e:	f000 ff57 	bl	80101f0 <__mdiff>
 800f342:	68c2      	ldr	r2, [r0, #12]
 800f344:	9b08      	ldr	r3, [sp, #32]
 800f346:	4605      	mov	r5, r0
 800f348:	bb02      	cbnz	r2, 800f38c <_dtoa_r+0xa7c>
 800f34a:	4601      	mov	r1, r0
 800f34c:	4658      	mov	r0, fp
 800f34e:	f000 ff33 	bl	80101b8 <__mcmp>
 800f352:	9b08      	ldr	r3, [sp, #32]
 800f354:	4602      	mov	r2, r0
 800f356:	4629      	mov	r1, r5
 800f358:	4620      	mov	r0, r4
 800f35a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f35e:	f000 fca3 	bl	800fca8 <_Bfree>
 800f362:	9b05      	ldr	r3, [sp, #20]
 800f364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f366:	9d01      	ldr	r5, [sp, #4]
 800f368:	ea43 0102 	orr.w	r1, r3, r2
 800f36c:	9b06      	ldr	r3, [sp, #24]
 800f36e:	430b      	orrs	r3, r1
 800f370:	9b08      	ldr	r3, [sp, #32]
 800f372:	d10d      	bne.n	800f390 <_dtoa_r+0xa80>
 800f374:	2b39      	cmp	r3, #57	; 0x39
 800f376:	d029      	beq.n	800f3cc <_dtoa_r+0xabc>
 800f378:	f1b9 0f00 	cmp.w	r9, #0
 800f37c:	dd01      	ble.n	800f382 <_dtoa_r+0xa72>
 800f37e:	9b04      	ldr	r3, [sp, #16]
 800f380:	3331      	adds	r3, #49	; 0x31
 800f382:	9a02      	ldr	r2, [sp, #8]
 800f384:	7013      	strb	r3, [r2, #0]
 800f386:	e774      	b.n	800f272 <_dtoa_r+0x962>
 800f388:	4638      	mov	r0, r7
 800f38a:	e7b9      	b.n	800f300 <_dtoa_r+0x9f0>
 800f38c:	2201      	movs	r2, #1
 800f38e:	e7e2      	b.n	800f356 <_dtoa_r+0xa46>
 800f390:	f1b9 0f00 	cmp.w	r9, #0
 800f394:	db06      	blt.n	800f3a4 <_dtoa_r+0xa94>
 800f396:	9905      	ldr	r1, [sp, #20]
 800f398:	ea41 0909 	orr.w	r9, r1, r9
 800f39c:	9906      	ldr	r1, [sp, #24]
 800f39e:	ea59 0101 	orrs.w	r1, r9, r1
 800f3a2:	d120      	bne.n	800f3e6 <_dtoa_r+0xad6>
 800f3a4:	2a00      	cmp	r2, #0
 800f3a6:	ddec      	ble.n	800f382 <_dtoa_r+0xa72>
 800f3a8:	4659      	mov	r1, fp
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	9301      	str	r3, [sp, #4]
 800f3b0:	f000 fe96 	bl	80100e0 <__lshift>
 800f3b4:	4631      	mov	r1, r6
 800f3b6:	4683      	mov	fp, r0
 800f3b8:	f000 fefe 	bl	80101b8 <__mcmp>
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	9b01      	ldr	r3, [sp, #4]
 800f3c0:	dc02      	bgt.n	800f3c8 <_dtoa_r+0xab8>
 800f3c2:	d1de      	bne.n	800f382 <_dtoa_r+0xa72>
 800f3c4:	07da      	lsls	r2, r3, #31
 800f3c6:	d5dc      	bpl.n	800f382 <_dtoa_r+0xa72>
 800f3c8:	2b39      	cmp	r3, #57	; 0x39
 800f3ca:	d1d8      	bne.n	800f37e <_dtoa_r+0xa6e>
 800f3cc:	9a02      	ldr	r2, [sp, #8]
 800f3ce:	2339      	movs	r3, #57	; 0x39
 800f3d0:	7013      	strb	r3, [r2, #0]
 800f3d2:	462b      	mov	r3, r5
 800f3d4:	461d      	mov	r5, r3
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f3dc:	2a39      	cmp	r2, #57	; 0x39
 800f3de:	d050      	beq.n	800f482 <_dtoa_r+0xb72>
 800f3e0:	3201      	adds	r2, #1
 800f3e2:	701a      	strb	r2, [r3, #0]
 800f3e4:	e745      	b.n	800f272 <_dtoa_r+0x962>
 800f3e6:	2a00      	cmp	r2, #0
 800f3e8:	dd03      	ble.n	800f3f2 <_dtoa_r+0xae2>
 800f3ea:	2b39      	cmp	r3, #57	; 0x39
 800f3ec:	d0ee      	beq.n	800f3cc <_dtoa_r+0xabc>
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	e7c7      	b.n	800f382 <_dtoa_r+0xa72>
 800f3f2:	9a01      	ldr	r2, [sp, #4]
 800f3f4:	9907      	ldr	r1, [sp, #28]
 800f3f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f3fa:	428a      	cmp	r2, r1
 800f3fc:	d02a      	beq.n	800f454 <_dtoa_r+0xb44>
 800f3fe:	4659      	mov	r1, fp
 800f400:	2300      	movs	r3, #0
 800f402:	220a      	movs	r2, #10
 800f404:	4620      	mov	r0, r4
 800f406:	f000 fc71 	bl	800fcec <__multadd>
 800f40a:	45b8      	cmp	r8, r7
 800f40c:	4683      	mov	fp, r0
 800f40e:	f04f 0300 	mov.w	r3, #0
 800f412:	f04f 020a 	mov.w	r2, #10
 800f416:	4641      	mov	r1, r8
 800f418:	4620      	mov	r0, r4
 800f41a:	d107      	bne.n	800f42c <_dtoa_r+0xb1c>
 800f41c:	f000 fc66 	bl	800fcec <__multadd>
 800f420:	4680      	mov	r8, r0
 800f422:	4607      	mov	r7, r0
 800f424:	9b01      	ldr	r3, [sp, #4]
 800f426:	3301      	adds	r3, #1
 800f428:	9301      	str	r3, [sp, #4]
 800f42a:	e775      	b.n	800f318 <_dtoa_r+0xa08>
 800f42c:	f000 fc5e 	bl	800fcec <__multadd>
 800f430:	4639      	mov	r1, r7
 800f432:	4680      	mov	r8, r0
 800f434:	2300      	movs	r3, #0
 800f436:	220a      	movs	r2, #10
 800f438:	4620      	mov	r0, r4
 800f43a:	f000 fc57 	bl	800fcec <__multadd>
 800f43e:	4607      	mov	r7, r0
 800f440:	e7f0      	b.n	800f424 <_dtoa_r+0xb14>
 800f442:	f1b9 0f00 	cmp.w	r9, #0
 800f446:	9a00      	ldr	r2, [sp, #0]
 800f448:	bfcc      	ite	gt
 800f44a:	464d      	movgt	r5, r9
 800f44c:	2501      	movle	r5, #1
 800f44e:	4415      	add	r5, r2
 800f450:	f04f 0800 	mov.w	r8, #0
 800f454:	4659      	mov	r1, fp
 800f456:	2201      	movs	r2, #1
 800f458:	4620      	mov	r0, r4
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	f000 fe40 	bl	80100e0 <__lshift>
 800f460:	4631      	mov	r1, r6
 800f462:	4683      	mov	fp, r0
 800f464:	f000 fea8 	bl	80101b8 <__mcmp>
 800f468:	2800      	cmp	r0, #0
 800f46a:	dcb2      	bgt.n	800f3d2 <_dtoa_r+0xac2>
 800f46c:	d102      	bne.n	800f474 <_dtoa_r+0xb64>
 800f46e:	9b01      	ldr	r3, [sp, #4]
 800f470:	07db      	lsls	r3, r3, #31
 800f472:	d4ae      	bmi.n	800f3d2 <_dtoa_r+0xac2>
 800f474:	462b      	mov	r3, r5
 800f476:	461d      	mov	r5, r3
 800f478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f47c:	2a30      	cmp	r2, #48	; 0x30
 800f47e:	d0fa      	beq.n	800f476 <_dtoa_r+0xb66>
 800f480:	e6f7      	b.n	800f272 <_dtoa_r+0x962>
 800f482:	9a00      	ldr	r2, [sp, #0]
 800f484:	429a      	cmp	r2, r3
 800f486:	d1a5      	bne.n	800f3d4 <_dtoa_r+0xac4>
 800f488:	f10a 0a01 	add.w	sl, sl, #1
 800f48c:	2331      	movs	r3, #49	; 0x31
 800f48e:	e779      	b.n	800f384 <_dtoa_r+0xa74>
 800f490:	4b13      	ldr	r3, [pc, #76]	; (800f4e0 <_dtoa_r+0xbd0>)
 800f492:	f7ff baaf 	b.w	800e9f4 <_dtoa_r+0xe4>
 800f496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f47f aa86 	bne.w	800e9aa <_dtoa_r+0x9a>
 800f49e:	4b11      	ldr	r3, [pc, #68]	; (800f4e4 <_dtoa_r+0xbd4>)
 800f4a0:	f7ff baa8 	b.w	800e9f4 <_dtoa_r+0xe4>
 800f4a4:	f1b9 0f00 	cmp.w	r9, #0
 800f4a8:	dc03      	bgt.n	800f4b2 <_dtoa_r+0xba2>
 800f4aa:	9b05      	ldr	r3, [sp, #20]
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	f73f aec9 	bgt.w	800f244 <_dtoa_r+0x934>
 800f4b2:	9d00      	ldr	r5, [sp, #0]
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	4658      	mov	r0, fp
 800f4b8:	f7ff f99e 	bl	800e7f8 <quorem>
 800f4bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f4c0:	f805 3b01 	strb.w	r3, [r5], #1
 800f4c4:	9a00      	ldr	r2, [sp, #0]
 800f4c6:	1aaa      	subs	r2, r5, r2
 800f4c8:	4591      	cmp	r9, r2
 800f4ca:	ddba      	ble.n	800f442 <_dtoa_r+0xb32>
 800f4cc:	4659      	mov	r1, fp
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	220a      	movs	r2, #10
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f000 fc0a 	bl	800fcec <__multadd>
 800f4d8:	4683      	mov	fp, r0
 800f4da:	e7eb      	b.n	800f4b4 <_dtoa_r+0xba4>
 800f4dc:	080130e4 	.word	0x080130e4
 800f4e0:	080132e9 	.word	0x080132e9
 800f4e4:	08013061 	.word	0x08013061

0800f4e8 <rshift>:
 800f4e8:	6903      	ldr	r3, [r0, #16]
 800f4ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f4ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f4f6:	f100 0414 	add.w	r4, r0, #20
 800f4fa:	dd45      	ble.n	800f588 <rshift+0xa0>
 800f4fc:	f011 011f 	ands.w	r1, r1, #31
 800f500:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f504:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f508:	d10c      	bne.n	800f524 <rshift+0x3c>
 800f50a:	f100 0710 	add.w	r7, r0, #16
 800f50e:	4629      	mov	r1, r5
 800f510:	42b1      	cmp	r1, r6
 800f512:	d334      	bcc.n	800f57e <rshift+0x96>
 800f514:	1a9b      	subs	r3, r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	1eea      	subs	r2, r5, #3
 800f51a:	4296      	cmp	r6, r2
 800f51c:	bf38      	it	cc
 800f51e:	2300      	movcc	r3, #0
 800f520:	4423      	add	r3, r4
 800f522:	e015      	b.n	800f550 <rshift+0x68>
 800f524:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f528:	f1c1 0820 	rsb	r8, r1, #32
 800f52c:	40cf      	lsrs	r7, r1
 800f52e:	f105 0e04 	add.w	lr, r5, #4
 800f532:	46a1      	mov	r9, r4
 800f534:	4576      	cmp	r6, lr
 800f536:	46f4      	mov	ip, lr
 800f538:	d815      	bhi.n	800f566 <rshift+0x7e>
 800f53a:	1a9b      	subs	r3, r3, r2
 800f53c:	009a      	lsls	r2, r3, #2
 800f53e:	3a04      	subs	r2, #4
 800f540:	3501      	adds	r5, #1
 800f542:	42ae      	cmp	r6, r5
 800f544:	bf38      	it	cc
 800f546:	2200      	movcc	r2, #0
 800f548:	18a3      	adds	r3, r4, r2
 800f54a:	50a7      	str	r7, [r4, r2]
 800f54c:	b107      	cbz	r7, 800f550 <rshift+0x68>
 800f54e:	3304      	adds	r3, #4
 800f550:	1b1a      	subs	r2, r3, r4
 800f552:	42a3      	cmp	r3, r4
 800f554:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f558:	bf08      	it	eq
 800f55a:	2300      	moveq	r3, #0
 800f55c:	6102      	str	r2, [r0, #16]
 800f55e:	bf08      	it	eq
 800f560:	6143      	streq	r3, [r0, #20]
 800f562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f566:	f8dc c000 	ldr.w	ip, [ip]
 800f56a:	fa0c fc08 	lsl.w	ip, ip, r8
 800f56e:	ea4c 0707 	orr.w	r7, ip, r7
 800f572:	f849 7b04 	str.w	r7, [r9], #4
 800f576:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f57a:	40cf      	lsrs	r7, r1
 800f57c:	e7da      	b.n	800f534 <rshift+0x4c>
 800f57e:	f851 cb04 	ldr.w	ip, [r1], #4
 800f582:	f847 cf04 	str.w	ip, [r7, #4]!
 800f586:	e7c3      	b.n	800f510 <rshift+0x28>
 800f588:	4623      	mov	r3, r4
 800f58a:	e7e1      	b.n	800f550 <rshift+0x68>

0800f58c <__hexdig_fun>:
 800f58c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f590:	2b09      	cmp	r3, #9
 800f592:	d802      	bhi.n	800f59a <__hexdig_fun+0xe>
 800f594:	3820      	subs	r0, #32
 800f596:	b2c0      	uxtb	r0, r0
 800f598:	4770      	bx	lr
 800f59a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f59e:	2b05      	cmp	r3, #5
 800f5a0:	d801      	bhi.n	800f5a6 <__hexdig_fun+0x1a>
 800f5a2:	3847      	subs	r0, #71	; 0x47
 800f5a4:	e7f7      	b.n	800f596 <__hexdig_fun+0xa>
 800f5a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f5aa:	2b05      	cmp	r3, #5
 800f5ac:	d801      	bhi.n	800f5b2 <__hexdig_fun+0x26>
 800f5ae:	3827      	subs	r0, #39	; 0x27
 800f5b0:	e7f1      	b.n	800f596 <__hexdig_fun+0xa>
 800f5b2:	2000      	movs	r0, #0
 800f5b4:	4770      	bx	lr
	...

0800f5b8 <__gethex>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	ed2d 8b02 	vpush	{d8}
 800f5c0:	b089      	sub	sp, #36	; 0x24
 800f5c2:	ee08 0a10 	vmov	s16, r0
 800f5c6:	9304      	str	r3, [sp, #16]
 800f5c8:	4bbc      	ldr	r3, [pc, #752]	; (800f8bc <__gethex+0x304>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	9301      	str	r3, [sp, #4]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	468b      	mov	fp, r1
 800f5d2:	4690      	mov	r8, r2
 800f5d4:	f7f0 fe04 	bl	80001e0 <strlen>
 800f5d8:	9b01      	ldr	r3, [sp, #4]
 800f5da:	f8db 2000 	ldr.w	r2, [fp]
 800f5de:	4403      	add	r3, r0
 800f5e0:	4682      	mov	sl, r0
 800f5e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f5e6:	9305      	str	r3, [sp, #20]
 800f5e8:	1c93      	adds	r3, r2, #2
 800f5ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f5ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f5f2:	32fe      	adds	r2, #254	; 0xfe
 800f5f4:	18d1      	adds	r1, r2, r3
 800f5f6:	461f      	mov	r7, r3
 800f5f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f5fc:	9100      	str	r1, [sp, #0]
 800f5fe:	2830      	cmp	r0, #48	; 0x30
 800f600:	d0f8      	beq.n	800f5f4 <__gethex+0x3c>
 800f602:	f7ff ffc3 	bl	800f58c <__hexdig_fun>
 800f606:	4604      	mov	r4, r0
 800f608:	2800      	cmp	r0, #0
 800f60a:	d13a      	bne.n	800f682 <__gethex+0xca>
 800f60c:	9901      	ldr	r1, [sp, #4]
 800f60e:	4652      	mov	r2, sl
 800f610:	4638      	mov	r0, r7
 800f612:	f001 fd5b 	bl	80110cc <strncmp>
 800f616:	4605      	mov	r5, r0
 800f618:	2800      	cmp	r0, #0
 800f61a:	d168      	bne.n	800f6ee <__gethex+0x136>
 800f61c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f620:	eb07 060a 	add.w	r6, r7, sl
 800f624:	f7ff ffb2 	bl	800f58c <__hexdig_fun>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d062      	beq.n	800f6f2 <__gethex+0x13a>
 800f62c:	4633      	mov	r3, r6
 800f62e:	7818      	ldrb	r0, [r3, #0]
 800f630:	2830      	cmp	r0, #48	; 0x30
 800f632:	461f      	mov	r7, r3
 800f634:	f103 0301 	add.w	r3, r3, #1
 800f638:	d0f9      	beq.n	800f62e <__gethex+0x76>
 800f63a:	f7ff ffa7 	bl	800f58c <__hexdig_fun>
 800f63e:	2301      	movs	r3, #1
 800f640:	fab0 f480 	clz	r4, r0
 800f644:	0964      	lsrs	r4, r4, #5
 800f646:	4635      	mov	r5, r6
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	463a      	mov	r2, r7
 800f64c:	4616      	mov	r6, r2
 800f64e:	3201      	adds	r2, #1
 800f650:	7830      	ldrb	r0, [r6, #0]
 800f652:	f7ff ff9b 	bl	800f58c <__hexdig_fun>
 800f656:	2800      	cmp	r0, #0
 800f658:	d1f8      	bne.n	800f64c <__gethex+0x94>
 800f65a:	9901      	ldr	r1, [sp, #4]
 800f65c:	4652      	mov	r2, sl
 800f65e:	4630      	mov	r0, r6
 800f660:	f001 fd34 	bl	80110cc <strncmp>
 800f664:	b980      	cbnz	r0, 800f688 <__gethex+0xd0>
 800f666:	b94d      	cbnz	r5, 800f67c <__gethex+0xc4>
 800f668:	eb06 050a 	add.w	r5, r6, sl
 800f66c:	462a      	mov	r2, r5
 800f66e:	4616      	mov	r6, r2
 800f670:	3201      	adds	r2, #1
 800f672:	7830      	ldrb	r0, [r6, #0]
 800f674:	f7ff ff8a 	bl	800f58c <__hexdig_fun>
 800f678:	2800      	cmp	r0, #0
 800f67a:	d1f8      	bne.n	800f66e <__gethex+0xb6>
 800f67c:	1bad      	subs	r5, r5, r6
 800f67e:	00ad      	lsls	r5, r5, #2
 800f680:	e004      	b.n	800f68c <__gethex+0xd4>
 800f682:	2400      	movs	r4, #0
 800f684:	4625      	mov	r5, r4
 800f686:	e7e0      	b.n	800f64a <__gethex+0x92>
 800f688:	2d00      	cmp	r5, #0
 800f68a:	d1f7      	bne.n	800f67c <__gethex+0xc4>
 800f68c:	7833      	ldrb	r3, [r6, #0]
 800f68e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f692:	2b50      	cmp	r3, #80	; 0x50
 800f694:	d13b      	bne.n	800f70e <__gethex+0x156>
 800f696:	7873      	ldrb	r3, [r6, #1]
 800f698:	2b2b      	cmp	r3, #43	; 0x2b
 800f69a:	d02c      	beq.n	800f6f6 <__gethex+0x13e>
 800f69c:	2b2d      	cmp	r3, #45	; 0x2d
 800f69e:	d02e      	beq.n	800f6fe <__gethex+0x146>
 800f6a0:	1c71      	adds	r1, r6, #1
 800f6a2:	f04f 0900 	mov.w	r9, #0
 800f6a6:	7808      	ldrb	r0, [r1, #0]
 800f6a8:	f7ff ff70 	bl	800f58c <__hexdig_fun>
 800f6ac:	1e43      	subs	r3, r0, #1
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b18      	cmp	r3, #24
 800f6b2:	d82c      	bhi.n	800f70e <__gethex+0x156>
 800f6b4:	f1a0 0210 	sub.w	r2, r0, #16
 800f6b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f6bc:	f7ff ff66 	bl	800f58c <__hexdig_fun>
 800f6c0:	1e43      	subs	r3, r0, #1
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	2b18      	cmp	r3, #24
 800f6c6:	d91d      	bls.n	800f704 <__gethex+0x14c>
 800f6c8:	f1b9 0f00 	cmp.w	r9, #0
 800f6cc:	d000      	beq.n	800f6d0 <__gethex+0x118>
 800f6ce:	4252      	negs	r2, r2
 800f6d0:	4415      	add	r5, r2
 800f6d2:	f8cb 1000 	str.w	r1, [fp]
 800f6d6:	b1e4      	cbz	r4, 800f712 <__gethex+0x15a>
 800f6d8:	9b00      	ldr	r3, [sp, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	bf14      	ite	ne
 800f6de:	2700      	movne	r7, #0
 800f6e0:	2706      	moveq	r7, #6
 800f6e2:	4638      	mov	r0, r7
 800f6e4:	b009      	add	sp, #36	; 0x24
 800f6e6:	ecbd 8b02 	vpop	{d8}
 800f6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ee:	463e      	mov	r6, r7
 800f6f0:	4625      	mov	r5, r4
 800f6f2:	2401      	movs	r4, #1
 800f6f4:	e7ca      	b.n	800f68c <__gethex+0xd4>
 800f6f6:	f04f 0900 	mov.w	r9, #0
 800f6fa:	1cb1      	adds	r1, r6, #2
 800f6fc:	e7d3      	b.n	800f6a6 <__gethex+0xee>
 800f6fe:	f04f 0901 	mov.w	r9, #1
 800f702:	e7fa      	b.n	800f6fa <__gethex+0x142>
 800f704:	230a      	movs	r3, #10
 800f706:	fb03 0202 	mla	r2, r3, r2, r0
 800f70a:	3a10      	subs	r2, #16
 800f70c:	e7d4      	b.n	800f6b8 <__gethex+0x100>
 800f70e:	4631      	mov	r1, r6
 800f710:	e7df      	b.n	800f6d2 <__gethex+0x11a>
 800f712:	1bf3      	subs	r3, r6, r7
 800f714:	3b01      	subs	r3, #1
 800f716:	4621      	mov	r1, r4
 800f718:	2b07      	cmp	r3, #7
 800f71a:	dc0b      	bgt.n	800f734 <__gethex+0x17c>
 800f71c:	ee18 0a10 	vmov	r0, s16
 800f720:	f000 fa82 	bl	800fc28 <_Balloc>
 800f724:	4604      	mov	r4, r0
 800f726:	b940      	cbnz	r0, 800f73a <__gethex+0x182>
 800f728:	4b65      	ldr	r3, [pc, #404]	; (800f8c0 <__gethex+0x308>)
 800f72a:	4602      	mov	r2, r0
 800f72c:	21de      	movs	r1, #222	; 0xde
 800f72e:	4865      	ldr	r0, [pc, #404]	; (800f8c4 <__gethex+0x30c>)
 800f730:	f001 fda4 	bl	801127c <__assert_func>
 800f734:	3101      	adds	r1, #1
 800f736:	105b      	asrs	r3, r3, #1
 800f738:	e7ee      	b.n	800f718 <__gethex+0x160>
 800f73a:	f100 0914 	add.w	r9, r0, #20
 800f73e:	f04f 0b00 	mov.w	fp, #0
 800f742:	f1ca 0301 	rsb	r3, sl, #1
 800f746:	f8cd 9008 	str.w	r9, [sp, #8]
 800f74a:	f8cd b000 	str.w	fp, [sp]
 800f74e:	9306      	str	r3, [sp, #24]
 800f750:	42b7      	cmp	r7, r6
 800f752:	d340      	bcc.n	800f7d6 <__gethex+0x21e>
 800f754:	9802      	ldr	r0, [sp, #8]
 800f756:	9b00      	ldr	r3, [sp, #0]
 800f758:	f840 3b04 	str.w	r3, [r0], #4
 800f75c:	eba0 0009 	sub.w	r0, r0, r9
 800f760:	1080      	asrs	r0, r0, #2
 800f762:	0146      	lsls	r6, r0, #5
 800f764:	6120      	str	r0, [r4, #16]
 800f766:	4618      	mov	r0, r3
 800f768:	f000 fb54 	bl	800fe14 <__hi0bits>
 800f76c:	1a30      	subs	r0, r6, r0
 800f76e:	f8d8 6000 	ldr.w	r6, [r8]
 800f772:	42b0      	cmp	r0, r6
 800f774:	dd63      	ble.n	800f83e <__gethex+0x286>
 800f776:	1b87      	subs	r7, r0, r6
 800f778:	4639      	mov	r1, r7
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 feee 	bl	801055c <__any_on>
 800f780:	4682      	mov	sl, r0
 800f782:	b1a8      	cbz	r0, 800f7b0 <__gethex+0x1f8>
 800f784:	1e7b      	subs	r3, r7, #1
 800f786:	1159      	asrs	r1, r3, #5
 800f788:	f003 021f 	and.w	r2, r3, #31
 800f78c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f790:	f04f 0a01 	mov.w	sl, #1
 800f794:	fa0a f202 	lsl.w	r2, sl, r2
 800f798:	420a      	tst	r2, r1
 800f79a:	d009      	beq.n	800f7b0 <__gethex+0x1f8>
 800f79c:	4553      	cmp	r3, sl
 800f79e:	dd05      	ble.n	800f7ac <__gethex+0x1f4>
 800f7a0:	1eb9      	subs	r1, r7, #2
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 feda 	bl	801055c <__any_on>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d145      	bne.n	800f838 <__gethex+0x280>
 800f7ac:	f04f 0a02 	mov.w	sl, #2
 800f7b0:	4639      	mov	r1, r7
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f7ff fe98 	bl	800f4e8 <rshift>
 800f7b8:	443d      	add	r5, r7
 800f7ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7be:	42ab      	cmp	r3, r5
 800f7c0:	da4c      	bge.n	800f85c <__gethex+0x2a4>
 800f7c2:	ee18 0a10 	vmov	r0, s16
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	f000 fa6e 	bl	800fca8 <_Bfree>
 800f7cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	6013      	str	r3, [r2, #0]
 800f7d2:	27a3      	movs	r7, #163	; 0xa3
 800f7d4:	e785      	b.n	800f6e2 <__gethex+0x12a>
 800f7d6:	1e73      	subs	r3, r6, #1
 800f7d8:	9a05      	ldr	r2, [sp, #20]
 800f7da:	9303      	str	r3, [sp, #12]
 800f7dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d019      	beq.n	800f818 <__gethex+0x260>
 800f7e4:	f1bb 0f20 	cmp.w	fp, #32
 800f7e8:	d107      	bne.n	800f7fa <__gethex+0x242>
 800f7ea:	9b02      	ldr	r3, [sp, #8]
 800f7ec:	9a00      	ldr	r2, [sp, #0]
 800f7ee:	f843 2b04 	str.w	r2, [r3], #4
 800f7f2:	9302      	str	r3, [sp, #8]
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	9300      	str	r3, [sp, #0]
 800f7f8:	469b      	mov	fp, r3
 800f7fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f7fe:	f7ff fec5 	bl	800f58c <__hexdig_fun>
 800f802:	9b00      	ldr	r3, [sp, #0]
 800f804:	f000 000f 	and.w	r0, r0, #15
 800f808:	fa00 f00b 	lsl.w	r0, r0, fp
 800f80c:	4303      	orrs	r3, r0
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	f10b 0b04 	add.w	fp, fp, #4
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	e00d      	b.n	800f834 <__gethex+0x27c>
 800f818:	9b03      	ldr	r3, [sp, #12]
 800f81a:	9a06      	ldr	r2, [sp, #24]
 800f81c:	4413      	add	r3, r2
 800f81e:	42bb      	cmp	r3, r7
 800f820:	d3e0      	bcc.n	800f7e4 <__gethex+0x22c>
 800f822:	4618      	mov	r0, r3
 800f824:	9901      	ldr	r1, [sp, #4]
 800f826:	9307      	str	r3, [sp, #28]
 800f828:	4652      	mov	r2, sl
 800f82a:	f001 fc4f 	bl	80110cc <strncmp>
 800f82e:	9b07      	ldr	r3, [sp, #28]
 800f830:	2800      	cmp	r0, #0
 800f832:	d1d7      	bne.n	800f7e4 <__gethex+0x22c>
 800f834:	461e      	mov	r6, r3
 800f836:	e78b      	b.n	800f750 <__gethex+0x198>
 800f838:	f04f 0a03 	mov.w	sl, #3
 800f83c:	e7b8      	b.n	800f7b0 <__gethex+0x1f8>
 800f83e:	da0a      	bge.n	800f856 <__gethex+0x29e>
 800f840:	1a37      	subs	r7, r6, r0
 800f842:	4621      	mov	r1, r4
 800f844:	ee18 0a10 	vmov	r0, s16
 800f848:	463a      	mov	r2, r7
 800f84a:	f000 fc49 	bl	80100e0 <__lshift>
 800f84e:	1bed      	subs	r5, r5, r7
 800f850:	4604      	mov	r4, r0
 800f852:	f100 0914 	add.w	r9, r0, #20
 800f856:	f04f 0a00 	mov.w	sl, #0
 800f85a:	e7ae      	b.n	800f7ba <__gethex+0x202>
 800f85c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f860:	42a8      	cmp	r0, r5
 800f862:	dd72      	ble.n	800f94a <__gethex+0x392>
 800f864:	1b45      	subs	r5, r0, r5
 800f866:	42ae      	cmp	r6, r5
 800f868:	dc36      	bgt.n	800f8d8 <__gethex+0x320>
 800f86a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d02a      	beq.n	800f8c8 <__gethex+0x310>
 800f872:	2b03      	cmp	r3, #3
 800f874:	d02c      	beq.n	800f8d0 <__gethex+0x318>
 800f876:	2b01      	cmp	r3, #1
 800f878:	d115      	bne.n	800f8a6 <__gethex+0x2ee>
 800f87a:	42ae      	cmp	r6, r5
 800f87c:	d113      	bne.n	800f8a6 <__gethex+0x2ee>
 800f87e:	2e01      	cmp	r6, #1
 800f880:	d10b      	bne.n	800f89a <__gethex+0x2e2>
 800f882:	9a04      	ldr	r2, [sp, #16]
 800f884:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f888:	6013      	str	r3, [r2, #0]
 800f88a:	2301      	movs	r3, #1
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	f8c9 3000 	str.w	r3, [r9]
 800f892:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f894:	2762      	movs	r7, #98	; 0x62
 800f896:	601c      	str	r4, [r3, #0]
 800f898:	e723      	b.n	800f6e2 <__gethex+0x12a>
 800f89a:	1e71      	subs	r1, r6, #1
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fe5d 	bl	801055c <__any_on>
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	d1ed      	bne.n	800f882 <__gethex+0x2ca>
 800f8a6:	ee18 0a10 	vmov	r0, s16
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	f000 f9fc 	bl	800fca8 <_Bfree>
 800f8b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6013      	str	r3, [r2, #0]
 800f8b6:	2750      	movs	r7, #80	; 0x50
 800f8b8:	e713      	b.n	800f6e2 <__gethex+0x12a>
 800f8ba:	bf00      	nop
 800f8bc:	08013160 	.word	0x08013160
 800f8c0:	080130e4 	.word	0x080130e4
 800f8c4:	080130f5 	.word	0x080130f5
 800f8c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d1eb      	bne.n	800f8a6 <__gethex+0x2ee>
 800f8ce:	e7d8      	b.n	800f882 <__gethex+0x2ca>
 800f8d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1d5      	bne.n	800f882 <__gethex+0x2ca>
 800f8d6:	e7e6      	b.n	800f8a6 <__gethex+0x2ee>
 800f8d8:	1e6f      	subs	r7, r5, #1
 800f8da:	f1ba 0f00 	cmp.w	sl, #0
 800f8de:	d131      	bne.n	800f944 <__gethex+0x38c>
 800f8e0:	b127      	cbz	r7, 800f8ec <__gethex+0x334>
 800f8e2:	4639      	mov	r1, r7
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f000 fe39 	bl	801055c <__any_on>
 800f8ea:	4682      	mov	sl, r0
 800f8ec:	117b      	asrs	r3, r7, #5
 800f8ee:	2101      	movs	r1, #1
 800f8f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f8f4:	f007 071f 	and.w	r7, r7, #31
 800f8f8:	fa01 f707 	lsl.w	r7, r1, r7
 800f8fc:	421f      	tst	r7, r3
 800f8fe:	4629      	mov	r1, r5
 800f900:	4620      	mov	r0, r4
 800f902:	bf18      	it	ne
 800f904:	f04a 0a02 	orrne.w	sl, sl, #2
 800f908:	1b76      	subs	r6, r6, r5
 800f90a:	f7ff fded 	bl	800f4e8 <rshift>
 800f90e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f912:	2702      	movs	r7, #2
 800f914:	f1ba 0f00 	cmp.w	sl, #0
 800f918:	d048      	beq.n	800f9ac <__gethex+0x3f4>
 800f91a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d015      	beq.n	800f94e <__gethex+0x396>
 800f922:	2b03      	cmp	r3, #3
 800f924:	d017      	beq.n	800f956 <__gethex+0x39e>
 800f926:	2b01      	cmp	r3, #1
 800f928:	d109      	bne.n	800f93e <__gethex+0x386>
 800f92a:	f01a 0f02 	tst.w	sl, #2
 800f92e:	d006      	beq.n	800f93e <__gethex+0x386>
 800f930:	f8d9 0000 	ldr.w	r0, [r9]
 800f934:	ea4a 0a00 	orr.w	sl, sl, r0
 800f938:	f01a 0f01 	tst.w	sl, #1
 800f93c:	d10e      	bne.n	800f95c <__gethex+0x3a4>
 800f93e:	f047 0710 	orr.w	r7, r7, #16
 800f942:	e033      	b.n	800f9ac <__gethex+0x3f4>
 800f944:	f04f 0a01 	mov.w	sl, #1
 800f948:	e7d0      	b.n	800f8ec <__gethex+0x334>
 800f94a:	2701      	movs	r7, #1
 800f94c:	e7e2      	b.n	800f914 <__gethex+0x35c>
 800f94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f950:	f1c3 0301 	rsb	r3, r3, #1
 800f954:	9315      	str	r3, [sp, #84]	; 0x54
 800f956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d0f0      	beq.n	800f93e <__gethex+0x386>
 800f95c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f960:	f104 0314 	add.w	r3, r4, #20
 800f964:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f968:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f96c:	f04f 0c00 	mov.w	ip, #0
 800f970:	4618      	mov	r0, r3
 800f972:	f853 2b04 	ldr.w	r2, [r3], #4
 800f976:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f97a:	d01c      	beq.n	800f9b6 <__gethex+0x3fe>
 800f97c:	3201      	adds	r2, #1
 800f97e:	6002      	str	r2, [r0, #0]
 800f980:	2f02      	cmp	r7, #2
 800f982:	f104 0314 	add.w	r3, r4, #20
 800f986:	d13f      	bne.n	800fa08 <__gethex+0x450>
 800f988:	f8d8 2000 	ldr.w	r2, [r8]
 800f98c:	3a01      	subs	r2, #1
 800f98e:	42b2      	cmp	r2, r6
 800f990:	d10a      	bne.n	800f9a8 <__gethex+0x3f0>
 800f992:	1171      	asrs	r1, r6, #5
 800f994:	2201      	movs	r2, #1
 800f996:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f99a:	f006 061f 	and.w	r6, r6, #31
 800f99e:	fa02 f606 	lsl.w	r6, r2, r6
 800f9a2:	421e      	tst	r6, r3
 800f9a4:	bf18      	it	ne
 800f9a6:	4617      	movne	r7, r2
 800f9a8:	f047 0720 	orr.w	r7, r7, #32
 800f9ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9ae:	601c      	str	r4, [r3, #0]
 800f9b0:	9b04      	ldr	r3, [sp, #16]
 800f9b2:	601d      	str	r5, [r3, #0]
 800f9b4:	e695      	b.n	800f6e2 <__gethex+0x12a>
 800f9b6:	4299      	cmp	r1, r3
 800f9b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800f9bc:	d8d8      	bhi.n	800f970 <__gethex+0x3b8>
 800f9be:	68a3      	ldr	r3, [r4, #8]
 800f9c0:	459b      	cmp	fp, r3
 800f9c2:	db19      	blt.n	800f9f8 <__gethex+0x440>
 800f9c4:	6861      	ldr	r1, [r4, #4]
 800f9c6:	ee18 0a10 	vmov	r0, s16
 800f9ca:	3101      	adds	r1, #1
 800f9cc:	f000 f92c 	bl	800fc28 <_Balloc>
 800f9d0:	4681      	mov	r9, r0
 800f9d2:	b918      	cbnz	r0, 800f9dc <__gethex+0x424>
 800f9d4:	4b1a      	ldr	r3, [pc, #104]	; (800fa40 <__gethex+0x488>)
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	2184      	movs	r1, #132	; 0x84
 800f9da:	e6a8      	b.n	800f72e <__gethex+0x176>
 800f9dc:	6922      	ldr	r2, [r4, #16]
 800f9de:	3202      	adds	r2, #2
 800f9e0:	f104 010c 	add.w	r1, r4, #12
 800f9e4:	0092      	lsls	r2, r2, #2
 800f9e6:	300c      	adds	r0, #12
 800f9e8:	f7fd f8f4 	bl	800cbd4 <memcpy>
 800f9ec:	4621      	mov	r1, r4
 800f9ee:	ee18 0a10 	vmov	r0, s16
 800f9f2:	f000 f959 	bl	800fca8 <_Bfree>
 800f9f6:	464c      	mov	r4, r9
 800f9f8:	6923      	ldr	r3, [r4, #16]
 800f9fa:	1c5a      	adds	r2, r3, #1
 800f9fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa00:	6122      	str	r2, [r4, #16]
 800fa02:	2201      	movs	r2, #1
 800fa04:	615a      	str	r2, [r3, #20]
 800fa06:	e7bb      	b.n	800f980 <__gethex+0x3c8>
 800fa08:	6922      	ldr	r2, [r4, #16]
 800fa0a:	455a      	cmp	r2, fp
 800fa0c:	dd0b      	ble.n	800fa26 <__gethex+0x46e>
 800fa0e:	2101      	movs	r1, #1
 800fa10:	4620      	mov	r0, r4
 800fa12:	f7ff fd69 	bl	800f4e8 <rshift>
 800fa16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa1a:	3501      	adds	r5, #1
 800fa1c:	42ab      	cmp	r3, r5
 800fa1e:	f6ff aed0 	blt.w	800f7c2 <__gethex+0x20a>
 800fa22:	2701      	movs	r7, #1
 800fa24:	e7c0      	b.n	800f9a8 <__gethex+0x3f0>
 800fa26:	f016 061f 	ands.w	r6, r6, #31
 800fa2a:	d0fa      	beq.n	800fa22 <__gethex+0x46a>
 800fa2c:	449a      	add	sl, r3
 800fa2e:	f1c6 0620 	rsb	r6, r6, #32
 800fa32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fa36:	f000 f9ed 	bl	800fe14 <__hi0bits>
 800fa3a:	42b0      	cmp	r0, r6
 800fa3c:	dbe7      	blt.n	800fa0e <__gethex+0x456>
 800fa3e:	e7f0      	b.n	800fa22 <__gethex+0x46a>
 800fa40:	080130e4 	.word	0x080130e4

0800fa44 <L_shift>:
 800fa44:	f1c2 0208 	rsb	r2, r2, #8
 800fa48:	0092      	lsls	r2, r2, #2
 800fa4a:	b570      	push	{r4, r5, r6, lr}
 800fa4c:	f1c2 0620 	rsb	r6, r2, #32
 800fa50:	6843      	ldr	r3, [r0, #4]
 800fa52:	6804      	ldr	r4, [r0, #0]
 800fa54:	fa03 f506 	lsl.w	r5, r3, r6
 800fa58:	432c      	orrs	r4, r5
 800fa5a:	40d3      	lsrs	r3, r2
 800fa5c:	6004      	str	r4, [r0, #0]
 800fa5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fa62:	4288      	cmp	r0, r1
 800fa64:	d3f4      	bcc.n	800fa50 <L_shift+0xc>
 800fa66:	bd70      	pop	{r4, r5, r6, pc}

0800fa68 <__match>:
 800fa68:	b530      	push	{r4, r5, lr}
 800fa6a:	6803      	ldr	r3, [r0, #0]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa72:	b914      	cbnz	r4, 800fa7a <__match+0x12>
 800fa74:	6003      	str	r3, [r0, #0]
 800fa76:	2001      	movs	r0, #1
 800fa78:	bd30      	pop	{r4, r5, pc}
 800fa7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fa82:	2d19      	cmp	r5, #25
 800fa84:	bf98      	it	ls
 800fa86:	3220      	addls	r2, #32
 800fa88:	42a2      	cmp	r2, r4
 800fa8a:	d0f0      	beq.n	800fa6e <__match+0x6>
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	e7f3      	b.n	800fa78 <__match+0x10>

0800fa90 <__hexnan>:
 800fa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa94:	680b      	ldr	r3, [r1, #0]
 800fa96:	6801      	ldr	r1, [r0, #0]
 800fa98:	115e      	asrs	r6, r3, #5
 800fa9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fa9e:	f013 031f 	ands.w	r3, r3, #31
 800faa2:	b087      	sub	sp, #28
 800faa4:	bf18      	it	ne
 800faa6:	3604      	addne	r6, #4
 800faa8:	2500      	movs	r5, #0
 800faaa:	1f37      	subs	r7, r6, #4
 800faac:	4682      	mov	sl, r0
 800faae:	4690      	mov	r8, r2
 800fab0:	9301      	str	r3, [sp, #4]
 800fab2:	f846 5c04 	str.w	r5, [r6, #-4]
 800fab6:	46b9      	mov	r9, r7
 800fab8:	463c      	mov	r4, r7
 800faba:	9502      	str	r5, [sp, #8]
 800fabc:	46ab      	mov	fp, r5
 800fabe:	784a      	ldrb	r2, [r1, #1]
 800fac0:	1c4b      	adds	r3, r1, #1
 800fac2:	9303      	str	r3, [sp, #12]
 800fac4:	b342      	cbz	r2, 800fb18 <__hexnan+0x88>
 800fac6:	4610      	mov	r0, r2
 800fac8:	9105      	str	r1, [sp, #20]
 800faca:	9204      	str	r2, [sp, #16]
 800facc:	f7ff fd5e 	bl	800f58c <__hexdig_fun>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d14f      	bne.n	800fb74 <__hexnan+0xe4>
 800fad4:	9a04      	ldr	r2, [sp, #16]
 800fad6:	9905      	ldr	r1, [sp, #20]
 800fad8:	2a20      	cmp	r2, #32
 800fada:	d818      	bhi.n	800fb0e <__hexnan+0x7e>
 800fadc:	9b02      	ldr	r3, [sp, #8]
 800fade:	459b      	cmp	fp, r3
 800fae0:	dd13      	ble.n	800fb0a <__hexnan+0x7a>
 800fae2:	454c      	cmp	r4, r9
 800fae4:	d206      	bcs.n	800faf4 <__hexnan+0x64>
 800fae6:	2d07      	cmp	r5, #7
 800fae8:	dc04      	bgt.n	800faf4 <__hexnan+0x64>
 800faea:	462a      	mov	r2, r5
 800faec:	4649      	mov	r1, r9
 800faee:	4620      	mov	r0, r4
 800faf0:	f7ff ffa8 	bl	800fa44 <L_shift>
 800faf4:	4544      	cmp	r4, r8
 800faf6:	d950      	bls.n	800fb9a <__hexnan+0x10a>
 800faf8:	2300      	movs	r3, #0
 800fafa:	f1a4 0904 	sub.w	r9, r4, #4
 800fafe:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb02:	f8cd b008 	str.w	fp, [sp, #8]
 800fb06:	464c      	mov	r4, r9
 800fb08:	461d      	mov	r5, r3
 800fb0a:	9903      	ldr	r1, [sp, #12]
 800fb0c:	e7d7      	b.n	800fabe <__hexnan+0x2e>
 800fb0e:	2a29      	cmp	r2, #41	; 0x29
 800fb10:	d156      	bne.n	800fbc0 <__hexnan+0x130>
 800fb12:	3102      	adds	r1, #2
 800fb14:	f8ca 1000 	str.w	r1, [sl]
 800fb18:	f1bb 0f00 	cmp.w	fp, #0
 800fb1c:	d050      	beq.n	800fbc0 <__hexnan+0x130>
 800fb1e:	454c      	cmp	r4, r9
 800fb20:	d206      	bcs.n	800fb30 <__hexnan+0xa0>
 800fb22:	2d07      	cmp	r5, #7
 800fb24:	dc04      	bgt.n	800fb30 <__hexnan+0xa0>
 800fb26:	462a      	mov	r2, r5
 800fb28:	4649      	mov	r1, r9
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f7ff ff8a 	bl	800fa44 <L_shift>
 800fb30:	4544      	cmp	r4, r8
 800fb32:	d934      	bls.n	800fb9e <__hexnan+0x10e>
 800fb34:	f1a8 0204 	sub.w	r2, r8, #4
 800fb38:	4623      	mov	r3, r4
 800fb3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fb3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fb42:	429f      	cmp	r7, r3
 800fb44:	d2f9      	bcs.n	800fb3a <__hexnan+0xaa>
 800fb46:	1b3b      	subs	r3, r7, r4
 800fb48:	f023 0303 	bic.w	r3, r3, #3
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	3401      	adds	r4, #1
 800fb50:	3e03      	subs	r6, #3
 800fb52:	42b4      	cmp	r4, r6
 800fb54:	bf88      	it	hi
 800fb56:	2304      	movhi	r3, #4
 800fb58:	4443      	add	r3, r8
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f843 2b04 	str.w	r2, [r3], #4
 800fb60:	429f      	cmp	r7, r3
 800fb62:	d2fb      	bcs.n	800fb5c <__hexnan+0xcc>
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	b91b      	cbnz	r3, 800fb70 <__hexnan+0xe0>
 800fb68:	4547      	cmp	r7, r8
 800fb6a:	d127      	bne.n	800fbbc <__hexnan+0x12c>
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	603b      	str	r3, [r7, #0]
 800fb70:	2005      	movs	r0, #5
 800fb72:	e026      	b.n	800fbc2 <__hexnan+0x132>
 800fb74:	3501      	adds	r5, #1
 800fb76:	2d08      	cmp	r5, #8
 800fb78:	f10b 0b01 	add.w	fp, fp, #1
 800fb7c:	dd06      	ble.n	800fb8c <__hexnan+0xfc>
 800fb7e:	4544      	cmp	r4, r8
 800fb80:	d9c3      	bls.n	800fb0a <__hexnan+0x7a>
 800fb82:	2300      	movs	r3, #0
 800fb84:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb88:	2501      	movs	r5, #1
 800fb8a:	3c04      	subs	r4, #4
 800fb8c:	6822      	ldr	r2, [r4, #0]
 800fb8e:	f000 000f 	and.w	r0, r0, #15
 800fb92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fb96:	6022      	str	r2, [r4, #0]
 800fb98:	e7b7      	b.n	800fb0a <__hexnan+0x7a>
 800fb9a:	2508      	movs	r5, #8
 800fb9c:	e7b5      	b.n	800fb0a <__hexnan+0x7a>
 800fb9e:	9b01      	ldr	r3, [sp, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d0df      	beq.n	800fb64 <__hexnan+0xd4>
 800fba4:	f04f 32ff 	mov.w	r2, #4294967295
 800fba8:	f1c3 0320 	rsb	r3, r3, #32
 800fbac:	fa22 f303 	lsr.w	r3, r2, r3
 800fbb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fbb4:	401a      	ands	r2, r3
 800fbb6:	f846 2c04 	str.w	r2, [r6, #-4]
 800fbba:	e7d3      	b.n	800fb64 <__hexnan+0xd4>
 800fbbc:	3f04      	subs	r7, #4
 800fbbe:	e7d1      	b.n	800fb64 <__hexnan+0xd4>
 800fbc0:	2004      	movs	r0, #4
 800fbc2:	b007      	add	sp, #28
 800fbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbc8 <_localeconv_r>:
 800fbc8:	4800      	ldr	r0, [pc, #0]	; (800fbcc <_localeconv_r+0x4>)
 800fbca:	4770      	bx	lr
 800fbcc:	20000240 	.word	0x20000240

0800fbd0 <_lseek_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4d07      	ldr	r5, [pc, #28]	; (800fbf0 <_lseek_r+0x20>)
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	4608      	mov	r0, r1
 800fbd8:	4611      	mov	r1, r2
 800fbda:	2200      	movs	r2, #0
 800fbdc:	602a      	str	r2, [r5, #0]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	f7f2 fa3c 	bl	800205c <_lseek>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d102      	bne.n	800fbee <_lseek_r+0x1e>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	b103      	cbz	r3, 800fbee <_lseek_r+0x1e>
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	200061d4 	.word	0x200061d4

0800fbf4 <malloc>:
 800fbf4:	4b02      	ldr	r3, [pc, #8]	; (800fc00 <malloc+0xc>)
 800fbf6:	4601      	mov	r1, r0
 800fbf8:	6818      	ldr	r0, [r3, #0]
 800fbfa:	f000 bd2f 	b.w	801065c <_malloc_r>
 800fbfe:	bf00      	nop
 800fc00:	200000e8 	.word	0x200000e8

0800fc04 <__ascii_mbtowc>:
 800fc04:	b082      	sub	sp, #8
 800fc06:	b901      	cbnz	r1, 800fc0a <__ascii_mbtowc+0x6>
 800fc08:	a901      	add	r1, sp, #4
 800fc0a:	b142      	cbz	r2, 800fc1e <__ascii_mbtowc+0x1a>
 800fc0c:	b14b      	cbz	r3, 800fc22 <__ascii_mbtowc+0x1e>
 800fc0e:	7813      	ldrb	r3, [r2, #0]
 800fc10:	600b      	str	r3, [r1, #0]
 800fc12:	7812      	ldrb	r2, [r2, #0]
 800fc14:	1e10      	subs	r0, r2, #0
 800fc16:	bf18      	it	ne
 800fc18:	2001      	movne	r0, #1
 800fc1a:	b002      	add	sp, #8
 800fc1c:	4770      	bx	lr
 800fc1e:	4610      	mov	r0, r2
 800fc20:	e7fb      	b.n	800fc1a <__ascii_mbtowc+0x16>
 800fc22:	f06f 0001 	mvn.w	r0, #1
 800fc26:	e7f8      	b.n	800fc1a <__ascii_mbtowc+0x16>

0800fc28 <_Balloc>:
 800fc28:	b570      	push	{r4, r5, r6, lr}
 800fc2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	460d      	mov	r5, r1
 800fc30:	b976      	cbnz	r6, 800fc50 <_Balloc+0x28>
 800fc32:	2010      	movs	r0, #16
 800fc34:	f7ff ffde 	bl	800fbf4 <malloc>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	6260      	str	r0, [r4, #36]	; 0x24
 800fc3c:	b920      	cbnz	r0, 800fc48 <_Balloc+0x20>
 800fc3e:	4b18      	ldr	r3, [pc, #96]	; (800fca0 <_Balloc+0x78>)
 800fc40:	4818      	ldr	r0, [pc, #96]	; (800fca4 <_Balloc+0x7c>)
 800fc42:	2166      	movs	r1, #102	; 0x66
 800fc44:	f001 fb1a 	bl	801127c <__assert_func>
 800fc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc4c:	6006      	str	r6, [r0, #0]
 800fc4e:	60c6      	str	r6, [r0, #12]
 800fc50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc52:	68f3      	ldr	r3, [r6, #12]
 800fc54:	b183      	cbz	r3, 800fc78 <_Balloc+0x50>
 800fc56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc5e:	b9b8      	cbnz	r0, 800fc90 <_Balloc+0x68>
 800fc60:	2101      	movs	r1, #1
 800fc62:	fa01 f605 	lsl.w	r6, r1, r5
 800fc66:	1d72      	adds	r2, r6, #5
 800fc68:	0092      	lsls	r2, r2, #2
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f000 fc97 	bl	801059e <_calloc_r>
 800fc70:	b160      	cbz	r0, 800fc8c <_Balloc+0x64>
 800fc72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc76:	e00e      	b.n	800fc96 <_Balloc+0x6e>
 800fc78:	2221      	movs	r2, #33	; 0x21
 800fc7a:	2104      	movs	r1, #4
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f000 fc8e 	bl	801059e <_calloc_r>
 800fc82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc84:	60f0      	str	r0, [r6, #12]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1e4      	bne.n	800fc56 <_Balloc+0x2e>
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	bd70      	pop	{r4, r5, r6, pc}
 800fc90:	6802      	ldr	r2, [r0, #0]
 800fc92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc96:	2300      	movs	r3, #0
 800fc98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc9c:	e7f7      	b.n	800fc8e <_Balloc+0x66>
 800fc9e:	bf00      	nop
 800fca0:	0801306e 	.word	0x0801306e
 800fca4:	08013174 	.word	0x08013174

0800fca8 <_Bfree>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fcac:	4605      	mov	r5, r0
 800fcae:	460c      	mov	r4, r1
 800fcb0:	b976      	cbnz	r6, 800fcd0 <_Bfree+0x28>
 800fcb2:	2010      	movs	r0, #16
 800fcb4:	f7ff ff9e 	bl	800fbf4 <malloc>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	6268      	str	r0, [r5, #36]	; 0x24
 800fcbc:	b920      	cbnz	r0, 800fcc8 <_Bfree+0x20>
 800fcbe:	4b09      	ldr	r3, [pc, #36]	; (800fce4 <_Bfree+0x3c>)
 800fcc0:	4809      	ldr	r0, [pc, #36]	; (800fce8 <_Bfree+0x40>)
 800fcc2:	218a      	movs	r1, #138	; 0x8a
 800fcc4:	f001 fada 	bl	801127c <__assert_func>
 800fcc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fccc:	6006      	str	r6, [r0, #0]
 800fcce:	60c6      	str	r6, [r0, #12]
 800fcd0:	b13c      	cbz	r4, 800fce2 <_Bfree+0x3a>
 800fcd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fcd4:	6862      	ldr	r2, [r4, #4]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcdc:	6021      	str	r1, [r4, #0]
 800fcde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fce2:	bd70      	pop	{r4, r5, r6, pc}
 800fce4:	0801306e 	.word	0x0801306e
 800fce8:	08013174 	.word	0x08013174

0800fcec <__multadd>:
 800fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	690e      	ldr	r6, [r1, #16]
 800fcf2:	4607      	mov	r7, r0
 800fcf4:	4698      	mov	r8, r3
 800fcf6:	460c      	mov	r4, r1
 800fcf8:	f101 0014 	add.w	r0, r1, #20
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	6805      	ldr	r5, [r0, #0]
 800fd00:	b2a9      	uxth	r1, r5
 800fd02:	fb02 8101 	mla	r1, r2, r1, r8
 800fd06:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fd0a:	0c2d      	lsrs	r5, r5, #16
 800fd0c:	fb02 c505 	mla	r5, r2, r5, ip
 800fd10:	b289      	uxth	r1, r1
 800fd12:	3301      	adds	r3, #1
 800fd14:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fd18:	429e      	cmp	r6, r3
 800fd1a:	f840 1b04 	str.w	r1, [r0], #4
 800fd1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fd22:	dcec      	bgt.n	800fcfe <__multadd+0x12>
 800fd24:	f1b8 0f00 	cmp.w	r8, #0
 800fd28:	d022      	beq.n	800fd70 <__multadd+0x84>
 800fd2a:	68a3      	ldr	r3, [r4, #8]
 800fd2c:	42b3      	cmp	r3, r6
 800fd2e:	dc19      	bgt.n	800fd64 <__multadd+0x78>
 800fd30:	6861      	ldr	r1, [r4, #4]
 800fd32:	4638      	mov	r0, r7
 800fd34:	3101      	adds	r1, #1
 800fd36:	f7ff ff77 	bl	800fc28 <_Balloc>
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	b928      	cbnz	r0, 800fd4a <__multadd+0x5e>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	4b0d      	ldr	r3, [pc, #52]	; (800fd78 <__multadd+0x8c>)
 800fd42:	480e      	ldr	r0, [pc, #56]	; (800fd7c <__multadd+0x90>)
 800fd44:	21b5      	movs	r1, #181	; 0xb5
 800fd46:	f001 fa99 	bl	801127c <__assert_func>
 800fd4a:	6922      	ldr	r2, [r4, #16]
 800fd4c:	3202      	adds	r2, #2
 800fd4e:	f104 010c 	add.w	r1, r4, #12
 800fd52:	0092      	lsls	r2, r2, #2
 800fd54:	300c      	adds	r0, #12
 800fd56:	f7fc ff3d 	bl	800cbd4 <memcpy>
 800fd5a:	4621      	mov	r1, r4
 800fd5c:	4638      	mov	r0, r7
 800fd5e:	f7ff ffa3 	bl	800fca8 <_Bfree>
 800fd62:	462c      	mov	r4, r5
 800fd64:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fd68:	3601      	adds	r6, #1
 800fd6a:	f8c3 8014 	str.w	r8, [r3, #20]
 800fd6e:	6126      	str	r6, [r4, #16]
 800fd70:	4620      	mov	r0, r4
 800fd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd76:	bf00      	nop
 800fd78:	080130e4 	.word	0x080130e4
 800fd7c:	08013174 	.word	0x08013174

0800fd80 <__s2b>:
 800fd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd84:	460c      	mov	r4, r1
 800fd86:	4615      	mov	r5, r2
 800fd88:	461f      	mov	r7, r3
 800fd8a:	2209      	movs	r2, #9
 800fd8c:	3308      	adds	r3, #8
 800fd8e:	4606      	mov	r6, r0
 800fd90:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd94:	2100      	movs	r1, #0
 800fd96:	2201      	movs	r2, #1
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	db09      	blt.n	800fdb0 <__s2b+0x30>
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f7ff ff43 	bl	800fc28 <_Balloc>
 800fda2:	b940      	cbnz	r0, 800fdb6 <__s2b+0x36>
 800fda4:	4602      	mov	r2, r0
 800fda6:	4b19      	ldr	r3, [pc, #100]	; (800fe0c <__s2b+0x8c>)
 800fda8:	4819      	ldr	r0, [pc, #100]	; (800fe10 <__s2b+0x90>)
 800fdaa:	21ce      	movs	r1, #206	; 0xce
 800fdac:	f001 fa66 	bl	801127c <__assert_func>
 800fdb0:	0052      	lsls	r2, r2, #1
 800fdb2:	3101      	adds	r1, #1
 800fdb4:	e7f0      	b.n	800fd98 <__s2b+0x18>
 800fdb6:	9b08      	ldr	r3, [sp, #32]
 800fdb8:	6143      	str	r3, [r0, #20]
 800fdba:	2d09      	cmp	r5, #9
 800fdbc:	f04f 0301 	mov.w	r3, #1
 800fdc0:	6103      	str	r3, [r0, #16]
 800fdc2:	dd16      	ble.n	800fdf2 <__s2b+0x72>
 800fdc4:	f104 0909 	add.w	r9, r4, #9
 800fdc8:	46c8      	mov	r8, r9
 800fdca:	442c      	add	r4, r5
 800fdcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fdd0:	4601      	mov	r1, r0
 800fdd2:	3b30      	subs	r3, #48	; 0x30
 800fdd4:	220a      	movs	r2, #10
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f7ff ff88 	bl	800fcec <__multadd>
 800fddc:	45a0      	cmp	r8, r4
 800fdde:	d1f5      	bne.n	800fdcc <__s2b+0x4c>
 800fde0:	f1a5 0408 	sub.w	r4, r5, #8
 800fde4:	444c      	add	r4, r9
 800fde6:	1b2d      	subs	r5, r5, r4
 800fde8:	1963      	adds	r3, r4, r5
 800fdea:	42bb      	cmp	r3, r7
 800fdec:	db04      	blt.n	800fdf8 <__s2b+0x78>
 800fdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdf2:	340a      	adds	r4, #10
 800fdf4:	2509      	movs	r5, #9
 800fdf6:	e7f6      	b.n	800fde6 <__s2b+0x66>
 800fdf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fdfc:	4601      	mov	r1, r0
 800fdfe:	3b30      	subs	r3, #48	; 0x30
 800fe00:	220a      	movs	r2, #10
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7ff ff72 	bl	800fcec <__multadd>
 800fe08:	e7ee      	b.n	800fde8 <__s2b+0x68>
 800fe0a:	bf00      	nop
 800fe0c:	080130e4 	.word	0x080130e4
 800fe10:	08013174 	.word	0x08013174

0800fe14 <__hi0bits>:
 800fe14:	0c03      	lsrs	r3, r0, #16
 800fe16:	041b      	lsls	r3, r3, #16
 800fe18:	b9d3      	cbnz	r3, 800fe50 <__hi0bits+0x3c>
 800fe1a:	0400      	lsls	r0, r0, #16
 800fe1c:	2310      	movs	r3, #16
 800fe1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe22:	bf04      	itt	eq
 800fe24:	0200      	lsleq	r0, r0, #8
 800fe26:	3308      	addeq	r3, #8
 800fe28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe2c:	bf04      	itt	eq
 800fe2e:	0100      	lsleq	r0, r0, #4
 800fe30:	3304      	addeq	r3, #4
 800fe32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe36:	bf04      	itt	eq
 800fe38:	0080      	lsleq	r0, r0, #2
 800fe3a:	3302      	addeq	r3, #2
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	db05      	blt.n	800fe4c <__hi0bits+0x38>
 800fe40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe44:	f103 0301 	add.w	r3, r3, #1
 800fe48:	bf08      	it	eq
 800fe4a:	2320      	moveq	r3, #32
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	4770      	bx	lr
 800fe50:	2300      	movs	r3, #0
 800fe52:	e7e4      	b.n	800fe1e <__hi0bits+0xa>

0800fe54 <__lo0bits>:
 800fe54:	6803      	ldr	r3, [r0, #0]
 800fe56:	f013 0207 	ands.w	r2, r3, #7
 800fe5a:	4601      	mov	r1, r0
 800fe5c:	d00b      	beq.n	800fe76 <__lo0bits+0x22>
 800fe5e:	07da      	lsls	r2, r3, #31
 800fe60:	d424      	bmi.n	800feac <__lo0bits+0x58>
 800fe62:	0798      	lsls	r0, r3, #30
 800fe64:	bf49      	itett	mi
 800fe66:	085b      	lsrmi	r3, r3, #1
 800fe68:	089b      	lsrpl	r3, r3, #2
 800fe6a:	2001      	movmi	r0, #1
 800fe6c:	600b      	strmi	r3, [r1, #0]
 800fe6e:	bf5c      	itt	pl
 800fe70:	600b      	strpl	r3, [r1, #0]
 800fe72:	2002      	movpl	r0, #2
 800fe74:	4770      	bx	lr
 800fe76:	b298      	uxth	r0, r3
 800fe78:	b9b0      	cbnz	r0, 800fea8 <__lo0bits+0x54>
 800fe7a:	0c1b      	lsrs	r3, r3, #16
 800fe7c:	2010      	movs	r0, #16
 800fe7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fe82:	bf04      	itt	eq
 800fe84:	0a1b      	lsreq	r3, r3, #8
 800fe86:	3008      	addeq	r0, #8
 800fe88:	071a      	lsls	r2, r3, #28
 800fe8a:	bf04      	itt	eq
 800fe8c:	091b      	lsreq	r3, r3, #4
 800fe8e:	3004      	addeq	r0, #4
 800fe90:	079a      	lsls	r2, r3, #30
 800fe92:	bf04      	itt	eq
 800fe94:	089b      	lsreq	r3, r3, #2
 800fe96:	3002      	addeq	r0, #2
 800fe98:	07da      	lsls	r2, r3, #31
 800fe9a:	d403      	bmi.n	800fea4 <__lo0bits+0x50>
 800fe9c:	085b      	lsrs	r3, r3, #1
 800fe9e:	f100 0001 	add.w	r0, r0, #1
 800fea2:	d005      	beq.n	800feb0 <__lo0bits+0x5c>
 800fea4:	600b      	str	r3, [r1, #0]
 800fea6:	4770      	bx	lr
 800fea8:	4610      	mov	r0, r2
 800feaa:	e7e8      	b.n	800fe7e <__lo0bits+0x2a>
 800feac:	2000      	movs	r0, #0
 800feae:	4770      	bx	lr
 800feb0:	2020      	movs	r0, #32
 800feb2:	4770      	bx	lr

0800feb4 <__i2b>:
 800feb4:	b510      	push	{r4, lr}
 800feb6:	460c      	mov	r4, r1
 800feb8:	2101      	movs	r1, #1
 800feba:	f7ff feb5 	bl	800fc28 <_Balloc>
 800febe:	4602      	mov	r2, r0
 800fec0:	b928      	cbnz	r0, 800fece <__i2b+0x1a>
 800fec2:	4b05      	ldr	r3, [pc, #20]	; (800fed8 <__i2b+0x24>)
 800fec4:	4805      	ldr	r0, [pc, #20]	; (800fedc <__i2b+0x28>)
 800fec6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800feca:	f001 f9d7 	bl	801127c <__assert_func>
 800fece:	2301      	movs	r3, #1
 800fed0:	6144      	str	r4, [r0, #20]
 800fed2:	6103      	str	r3, [r0, #16]
 800fed4:	bd10      	pop	{r4, pc}
 800fed6:	bf00      	nop
 800fed8:	080130e4 	.word	0x080130e4
 800fedc:	08013174 	.word	0x08013174

0800fee0 <__multiply>:
 800fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	4614      	mov	r4, r2
 800fee6:	690a      	ldr	r2, [r1, #16]
 800fee8:	6923      	ldr	r3, [r4, #16]
 800feea:	429a      	cmp	r2, r3
 800feec:	bfb8      	it	lt
 800feee:	460b      	movlt	r3, r1
 800fef0:	460d      	mov	r5, r1
 800fef2:	bfbc      	itt	lt
 800fef4:	4625      	movlt	r5, r4
 800fef6:	461c      	movlt	r4, r3
 800fef8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fefc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff00:	68ab      	ldr	r3, [r5, #8]
 800ff02:	6869      	ldr	r1, [r5, #4]
 800ff04:	eb0a 0709 	add.w	r7, sl, r9
 800ff08:	42bb      	cmp	r3, r7
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	bfb8      	it	lt
 800ff0e:	3101      	addlt	r1, #1
 800ff10:	f7ff fe8a 	bl	800fc28 <_Balloc>
 800ff14:	b930      	cbnz	r0, 800ff24 <__multiply+0x44>
 800ff16:	4602      	mov	r2, r0
 800ff18:	4b42      	ldr	r3, [pc, #264]	; (8010024 <__multiply+0x144>)
 800ff1a:	4843      	ldr	r0, [pc, #268]	; (8010028 <__multiply+0x148>)
 800ff1c:	f240 115d 	movw	r1, #349	; 0x15d
 800ff20:	f001 f9ac 	bl	801127c <__assert_func>
 800ff24:	f100 0614 	add.w	r6, r0, #20
 800ff28:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ff2c:	4633      	mov	r3, r6
 800ff2e:	2200      	movs	r2, #0
 800ff30:	4543      	cmp	r3, r8
 800ff32:	d31e      	bcc.n	800ff72 <__multiply+0x92>
 800ff34:	f105 0c14 	add.w	ip, r5, #20
 800ff38:	f104 0314 	add.w	r3, r4, #20
 800ff3c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ff40:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ff44:	9202      	str	r2, [sp, #8]
 800ff46:	ebac 0205 	sub.w	r2, ip, r5
 800ff4a:	3a15      	subs	r2, #21
 800ff4c:	f022 0203 	bic.w	r2, r2, #3
 800ff50:	3204      	adds	r2, #4
 800ff52:	f105 0115 	add.w	r1, r5, #21
 800ff56:	458c      	cmp	ip, r1
 800ff58:	bf38      	it	cc
 800ff5a:	2204      	movcc	r2, #4
 800ff5c:	9201      	str	r2, [sp, #4]
 800ff5e:	9a02      	ldr	r2, [sp, #8]
 800ff60:	9303      	str	r3, [sp, #12]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d808      	bhi.n	800ff78 <__multiply+0x98>
 800ff66:	2f00      	cmp	r7, #0
 800ff68:	dc55      	bgt.n	8010016 <__multiply+0x136>
 800ff6a:	6107      	str	r7, [r0, #16]
 800ff6c:	b005      	add	sp, #20
 800ff6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff72:	f843 2b04 	str.w	r2, [r3], #4
 800ff76:	e7db      	b.n	800ff30 <__multiply+0x50>
 800ff78:	f8b3 a000 	ldrh.w	sl, [r3]
 800ff7c:	f1ba 0f00 	cmp.w	sl, #0
 800ff80:	d020      	beq.n	800ffc4 <__multiply+0xe4>
 800ff82:	f105 0e14 	add.w	lr, r5, #20
 800ff86:	46b1      	mov	r9, r6
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ff8e:	f8d9 b000 	ldr.w	fp, [r9]
 800ff92:	b2a1      	uxth	r1, r4
 800ff94:	fa1f fb8b 	uxth.w	fp, fp
 800ff98:	fb0a b101 	mla	r1, sl, r1, fp
 800ff9c:	4411      	add	r1, r2
 800ff9e:	f8d9 2000 	ldr.w	r2, [r9]
 800ffa2:	0c24      	lsrs	r4, r4, #16
 800ffa4:	0c12      	lsrs	r2, r2, #16
 800ffa6:	fb0a 2404 	mla	r4, sl, r4, r2
 800ffaa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ffae:	b289      	uxth	r1, r1
 800ffb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ffb4:	45f4      	cmp	ip, lr
 800ffb6:	f849 1b04 	str.w	r1, [r9], #4
 800ffba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ffbe:	d8e4      	bhi.n	800ff8a <__multiply+0xaa>
 800ffc0:	9901      	ldr	r1, [sp, #4]
 800ffc2:	5072      	str	r2, [r6, r1]
 800ffc4:	9a03      	ldr	r2, [sp, #12]
 800ffc6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ffca:	3304      	adds	r3, #4
 800ffcc:	f1b9 0f00 	cmp.w	r9, #0
 800ffd0:	d01f      	beq.n	8010012 <__multiply+0x132>
 800ffd2:	6834      	ldr	r4, [r6, #0]
 800ffd4:	f105 0114 	add.w	r1, r5, #20
 800ffd8:	46b6      	mov	lr, r6
 800ffda:	f04f 0a00 	mov.w	sl, #0
 800ffde:	880a      	ldrh	r2, [r1, #0]
 800ffe0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ffe4:	fb09 b202 	mla	r2, r9, r2, fp
 800ffe8:	4492      	add	sl, r2
 800ffea:	b2a4      	uxth	r4, r4
 800ffec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fff0:	f84e 4b04 	str.w	r4, [lr], #4
 800fff4:	f851 4b04 	ldr.w	r4, [r1], #4
 800fff8:	f8be 2000 	ldrh.w	r2, [lr]
 800fffc:	0c24      	lsrs	r4, r4, #16
 800fffe:	fb09 2404 	mla	r4, r9, r4, r2
 8010002:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010006:	458c      	cmp	ip, r1
 8010008:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801000c:	d8e7      	bhi.n	800ffde <__multiply+0xfe>
 801000e:	9a01      	ldr	r2, [sp, #4]
 8010010:	50b4      	str	r4, [r6, r2]
 8010012:	3604      	adds	r6, #4
 8010014:	e7a3      	b.n	800ff5e <__multiply+0x7e>
 8010016:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1a5      	bne.n	800ff6a <__multiply+0x8a>
 801001e:	3f01      	subs	r7, #1
 8010020:	e7a1      	b.n	800ff66 <__multiply+0x86>
 8010022:	bf00      	nop
 8010024:	080130e4 	.word	0x080130e4
 8010028:	08013174 	.word	0x08013174

0801002c <__pow5mult>:
 801002c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010030:	4615      	mov	r5, r2
 8010032:	f012 0203 	ands.w	r2, r2, #3
 8010036:	4606      	mov	r6, r0
 8010038:	460f      	mov	r7, r1
 801003a:	d007      	beq.n	801004c <__pow5mult+0x20>
 801003c:	4c25      	ldr	r4, [pc, #148]	; (80100d4 <__pow5mult+0xa8>)
 801003e:	3a01      	subs	r2, #1
 8010040:	2300      	movs	r3, #0
 8010042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010046:	f7ff fe51 	bl	800fcec <__multadd>
 801004a:	4607      	mov	r7, r0
 801004c:	10ad      	asrs	r5, r5, #2
 801004e:	d03d      	beq.n	80100cc <__pow5mult+0xa0>
 8010050:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010052:	b97c      	cbnz	r4, 8010074 <__pow5mult+0x48>
 8010054:	2010      	movs	r0, #16
 8010056:	f7ff fdcd 	bl	800fbf4 <malloc>
 801005a:	4602      	mov	r2, r0
 801005c:	6270      	str	r0, [r6, #36]	; 0x24
 801005e:	b928      	cbnz	r0, 801006c <__pow5mult+0x40>
 8010060:	4b1d      	ldr	r3, [pc, #116]	; (80100d8 <__pow5mult+0xac>)
 8010062:	481e      	ldr	r0, [pc, #120]	; (80100dc <__pow5mult+0xb0>)
 8010064:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010068:	f001 f908 	bl	801127c <__assert_func>
 801006c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010070:	6004      	str	r4, [r0, #0]
 8010072:	60c4      	str	r4, [r0, #12]
 8010074:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801007c:	b94c      	cbnz	r4, 8010092 <__pow5mult+0x66>
 801007e:	f240 2171 	movw	r1, #625	; 0x271
 8010082:	4630      	mov	r0, r6
 8010084:	f7ff ff16 	bl	800feb4 <__i2b>
 8010088:	2300      	movs	r3, #0
 801008a:	f8c8 0008 	str.w	r0, [r8, #8]
 801008e:	4604      	mov	r4, r0
 8010090:	6003      	str	r3, [r0, #0]
 8010092:	f04f 0900 	mov.w	r9, #0
 8010096:	07eb      	lsls	r3, r5, #31
 8010098:	d50a      	bpl.n	80100b0 <__pow5mult+0x84>
 801009a:	4639      	mov	r1, r7
 801009c:	4622      	mov	r2, r4
 801009e:	4630      	mov	r0, r6
 80100a0:	f7ff ff1e 	bl	800fee0 <__multiply>
 80100a4:	4639      	mov	r1, r7
 80100a6:	4680      	mov	r8, r0
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7ff fdfd 	bl	800fca8 <_Bfree>
 80100ae:	4647      	mov	r7, r8
 80100b0:	106d      	asrs	r5, r5, #1
 80100b2:	d00b      	beq.n	80100cc <__pow5mult+0xa0>
 80100b4:	6820      	ldr	r0, [r4, #0]
 80100b6:	b938      	cbnz	r0, 80100c8 <__pow5mult+0x9c>
 80100b8:	4622      	mov	r2, r4
 80100ba:	4621      	mov	r1, r4
 80100bc:	4630      	mov	r0, r6
 80100be:	f7ff ff0f 	bl	800fee0 <__multiply>
 80100c2:	6020      	str	r0, [r4, #0]
 80100c4:	f8c0 9000 	str.w	r9, [r0]
 80100c8:	4604      	mov	r4, r0
 80100ca:	e7e4      	b.n	8010096 <__pow5mult+0x6a>
 80100cc:	4638      	mov	r0, r7
 80100ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d2:	bf00      	nop
 80100d4:	080132c8 	.word	0x080132c8
 80100d8:	0801306e 	.word	0x0801306e
 80100dc:	08013174 	.word	0x08013174

080100e0 <__lshift>:
 80100e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e4:	460c      	mov	r4, r1
 80100e6:	6849      	ldr	r1, [r1, #4]
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100ee:	68a3      	ldr	r3, [r4, #8]
 80100f0:	4607      	mov	r7, r0
 80100f2:	4691      	mov	r9, r2
 80100f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100f8:	f108 0601 	add.w	r6, r8, #1
 80100fc:	42b3      	cmp	r3, r6
 80100fe:	db0b      	blt.n	8010118 <__lshift+0x38>
 8010100:	4638      	mov	r0, r7
 8010102:	f7ff fd91 	bl	800fc28 <_Balloc>
 8010106:	4605      	mov	r5, r0
 8010108:	b948      	cbnz	r0, 801011e <__lshift+0x3e>
 801010a:	4602      	mov	r2, r0
 801010c:	4b28      	ldr	r3, [pc, #160]	; (80101b0 <__lshift+0xd0>)
 801010e:	4829      	ldr	r0, [pc, #164]	; (80101b4 <__lshift+0xd4>)
 8010110:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010114:	f001 f8b2 	bl	801127c <__assert_func>
 8010118:	3101      	adds	r1, #1
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	e7ee      	b.n	80100fc <__lshift+0x1c>
 801011e:	2300      	movs	r3, #0
 8010120:	f100 0114 	add.w	r1, r0, #20
 8010124:	f100 0210 	add.w	r2, r0, #16
 8010128:	4618      	mov	r0, r3
 801012a:	4553      	cmp	r3, sl
 801012c:	db33      	blt.n	8010196 <__lshift+0xb6>
 801012e:	6920      	ldr	r0, [r4, #16]
 8010130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010134:	f104 0314 	add.w	r3, r4, #20
 8010138:	f019 091f 	ands.w	r9, r9, #31
 801013c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010144:	d02b      	beq.n	801019e <__lshift+0xbe>
 8010146:	f1c9 0e20 	rsb	lr, r9, #32
 801014a:	468a      	mov	sl, r1
 801014c:	2200      	movs	r2, #0
 801014e:	6818      	ldr	r0, [r3, #0]
 8010150:	fa00 f009 	lsl.w	r0, r0, r9
 8010154:	4302      	orrs	r2, r0
 8010156:	f84a 2b04 	str.w	r2, [sl], #4
 801015a:	f853 2b04 	ldr.w	r2, [r3], #4
 801015e:	459c      	cmp	ip, r3
 8010160:	fa22 f20e 	lsr.w	r2, r2, lr
 8010164:	d8f3      	bhi.n	801014e <__lshift+0x6e>
 8010166:	ebac 0304 	sub.w	r3, ip, r4
 801016a:	3b15      	subs	r3, #21
 801016c:	f023 0303 	bic.w	r3, r3, #3
 8010170:	3304      	adds	r3, #4
 8010172:	f104 0015 	add.w	r0, r4, #21
 8010176:	4584      	cmp	ip, r0
 8010178:	bf38      	it	cc
 801017a:	2304      	movcc	r3, #4
 801017c:	50ca      	str	r2, [r1, r3]
 801017e:	b10a      	cbz	r2, 8010184 <__lshift+0xa4>
 8010180:	f108 0602 	add.w	r6, r8, #2
 8010184:	3e01      	subs	r6, #1
 8010186:	4638      	mov	r0, r7
 8010188:	612e      	str	r6, [r5, #16]
 801018a:	4621      	mov	r1, r4
 801018c:	f7ff fd8c 	bl	800fca8 <_Bfree>
 8010190:	4628      	mov	r0, r5
 8010192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010196:	f842 0f04 	str.w	r0, [r2, #4]!
 801019a:	3301      	adds	r3, #1
 801019c:	e7c5      	b.n	801012a <__lshift+0x4a>
 801019e:	3904      	subs	r1, #4
 80101a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80101a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80101a8:	459c      	cmp	ip, r3
 80101aa:	d8f9      	bhi.n	80101a0 <__lshift+0xc0>
 80101ac:	e7ea      	b.n	8010184 <__lshift+0xa4>
 80101ae:	bf00      	nop
 80101b0:	080130e4 	.word	0x080130e4
 80101b4:	08013174 	.word	0x08013174

080101b8 <__mcmp>:
 80101b8:	b530      	push	{r4, r5, lr}
 80101ba:	6902      	ldr	r2, [r0, #16]
 80101bc:	690c      	ldr	r4, [r1, #16]
 80101be:	1b12      	subs	r2, r2, r4
 80101c0:	d10e      	bne.n	80101e0 <__mcmp+0x28>
 80101c2:	f100 0314 	add.w	r3, r0, #20
 80101c6:	3114      	adds	r1, #20
 80101c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80101cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80101d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80101d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80101d8:	42a5      	cmp	r5, r4
 80101da:	d003      	beq.n	80101e4 <__mcmp+0x2c>
 80101dc:	d305      	bcc.n	80101ea <__mcmp+0x32>
 80101de:	2201      	movs	r2, #1
 80101e0:	4610      	mov	r0, r2
 80101e2:	bd30      	pop	{r4, r5, pc}
 80101e4:	4283      	cmp	r3, r0
 80101e6:	d3f3      	bcc.n	80101d0 <__mcmp+0x18>
 80101e8:	e7fa      	b.n	80101e0 <__mcmp+0x28>
 80101ea:	f04f 32ff 	mov.w	r2, #4294967295
 80101ee:	e7f7      	b.n	80101e0 <__mcmp+0x28>

080101f0 <__mdiff>:
 80101f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f4:	460c      	mov	r4, r1
 80101f6:	4606      	mov	r6, r0
 80101f8:	4611      	mov	r1, r2
 80101fa:	4620      	mov	r0, r4
 80101fc:	4617      	mov	r7, r2
 80101fe:	f7ff ffdb 	bl	80101b8 <__mcmp>
 8010202:	1e05      	subs	r5, r0, #0
 8010204:	d110      	bne.n	8010228 <__mdiff+0x38>
 8010206:	4629      	mov	r1, r5
 8010208:	4630      	mov	r0, r6
 801020a:	f7ff fd0d 	bl	800fc28 <_Balloc>
 801020e:	b930      	cbnz	r0, 801021e <__mdiff+0x2e>
 8010210:	4b39      	ldr	r3, [pc, #228]	; (80102f8 <__mdiff+0x108>)
 8010212:	4602      	mov	r2, r0
 8010214:	f240 2132 	movw	r1, #562	; 0x232
 8010218:	4838      	ldr	r0, [pc, #224]	; (80102fc <__mdiff+0x10c>)
 801021a:	f001 f82f 	bl	801127c <__assert_func>
 801021e:	2301      	movs	r3, #1
 8010220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010228:	bfa4      	itt	ge
 801022a:	463b      	movge	r3, r7
 801022c:	4627      	movge	r7, r4
 801022e:	4630      	mov	r0, r6
 8010230:	6879      	ldr	r1, [r7, #4]
 8010232:	bfa6      	itte	ge
 8010234:	461c      	movge	r4, r3
 8010236:	2500      	movge	r5, #0
 8010238:	2501      	movlt	r5, #1
 801023a:	f7ff fcf5 	bl	800fc28 <_Balloc>
 801023e:	b920      	cbnz	r0, 801024a <__mdiff+0x5a>
 8010240:	4b2d      	ldr	r3, [pc, #180]	; (80102f8 <__mdiff+0x108>)
 8010242:	4602      	mov	r2, r0
 8010244:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010248:	e7e6      	b.n	8010218 <__mdiff+0x28>
 801024a:	693e      	ldr	r6, [r7, #16]
 801024c:	60c5      	str	r5, [r0, #12]
 801024e:	6925      	ldr	r5, [r4, #16]
 8010250:	f107 0114 	add.w	r1, r7, #20
 8010254:	f104 0914 	add.w	r9, r4, #20
 8010258:	f100 0e14 	add.w	lr, r0, #20
 801025c:	f107 0210 	add.w	r2, r7, #16
 8010260:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010264:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010268:	46f2      	mov	sl, lr
 801026a:	2700      	movs	r7, #0
 801026c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010270:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010274:	fa1f f883 	uxth.w	r8, r3
 8010278:	fa17 f78b 	uxtah	r7, r7, fp
 801027c:	0c1b      	lsrs	r3, r3, #16
 801027e:	eba7 0808 	sub.w	r8, r7, r8
 8010282:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010286:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801028a:	fa1f f888 	uxth.w	r8, r8
 801028e:	141f      	asrs	r7, r3, #16
 8010290:	454d      	cmp	r5, r9
 8010292:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010296:	f84a 3b04 	str.w	r3, [sl], #4
 801029a:	d8e7      	bhi.n	801026c <__mdiff+0x7c>
 801029c:	1b2b      	subs	r3, r5, r4
 801029e:	3b15      	subs	r3, #21
 80102a0:	f023 0303 	bic.w	r3, r3, #3
 80102a4:	3304      	adds	r3, #4
 80102a6:	3415      	adds	r4, #21
 80102a8:	42a5      	cmp	r5, r4
 80102aa:	bf38      	it	cc
 80102ac:	2304      	movcc	r3, #4
 80102ae:	4419      	add	r1, r3
 80102b0:	4473      	add	r3, lr
 80102b2:	469e      	mov	lr, r3
 80102b4:	460d      	mov	r5, r1
 80102b6:	4565      	cmp	r5, ip
 80102b8:	d30e      	bcc.n	80102d8 <__mdiff+0xe8>
 80102ba:	f10c 0203 	add.w	r2, ip, #3
 80102be:	1a52      	subs	r2, r2, r1
 80102c0:	f022 0203 	bic.w	r2, r2, #3
 80102c4:	3903      	subs	r1, #3
 80102c6:	458c      	cmp	ip, r1
 80102c8:	bf38      	it	cc
 80102ca:	2200      	movcc	r2, #0
 80102cc:	441a      	add	r2, r3
 80102ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80102d2:	b17b      	cbz	r3, 80102f4 <__mdiff+0x104>
 80102d4:	6106      	str	r6, [r0, #16]
 80102d6:	e7a5      	b.n	8010224 <__mdiff+0x34>
 80102d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80102dc:	fa17 f488 	uxtah	r4, r7, r8
 80102e0:	1422      	asrs	r2, r4, #16
 80102e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80102e6:	b2a4      	uxth	r4, r4
 80102e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80102ec:	f84e 4b04 	str.w	r4, [lr], #4
 80102f0:	1417      	asrs	r7, r2, #16
 80102f2:	e7e0      	b.n	80102b6 <__mdiff+0xc6>
 80102f4:	3e01      	subs	r6, #1
 80102f6:	e7ea      	b.n	80102ce <__mdiff+0xde>
 80102f8:	080130e4 	.word	0x080130e4
 80102fc:	08013174 	.word	0x08013174

08010300 <__ulp>:
 8010300:	b082      	sub	sp, #8
 8010302:	ed8d 0b00 	vstr	d0, [sp]
 8010306:	9b01      	ldr	r3, [sp, #4]
 8010308:	4912      	ldr	r1, [pc, #72]	; (8010354 <__ulp+0x54>)
 801030a:	4019      	ands	r1, r3
 801030c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010310:	2900      	cmp	r1, #0
 8010312:	dd05      	ble.n	8010320 <__ulp+0x20>
 8010314:	2200      	movs	r2, #0
 8010316:	460b      	mov	r3, r1
 8010318:	ec43 2b10 	vmov	d0, r2, r3
 801031c:	b002      	add	sp, #8
 801031e:	4770      	bx	lr
 8010320:	4249      	negs	r1, r1
 8010322:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010326:	ea4f 5021 	mov.w	r0, r1, asr #20
 801032a:	f04f 0200 	mov.w	r2, #0
 801032e:	f04f 0300 	mov.w	r3, #0
 8010332:	da04      	bge.n	801033e <__ulp+0x3e>
 8010334:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010338:	fa41 f300 	asr.w	r3, r1, r0
 801033c:	e7ec      	b.n	8010318 <__ulp+0x18>
 801033e:	f1a0 0114 	sub.w	r1, r0, #20
 8010342:	291e      	cmp	r1, #30
 8010344:	bfda      	itte	le
 8010346:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801034a:	fa20 f101 	lsrle.w	r1, r0, r1
 801034e:	2101      	movgt	r1, #1
 8010350:	460a      	mov	r2, r1
 8010352:	e7e1      	b.n	8010318 <__ulp+0x18>
 8010354:	7ff00000 	.word	0x7ff00000

08010358 <__b2d>:
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035a:	6905      	ldr	r5, [r0, #16]
 801035c:	f100 0714 	add.w	r7, r0, #20
 8010360:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010364:	1f2e      	subs	r6, r5, #4
 8010366:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801036a:	4620      	mov	r0, r4
 801036c:	f7ff fd52 	bl	800fe14 <__hi0bits>
 8010370:	f1c0 0320 	rsb	r3, r0, #32
 8010374:	280a      	cmp	r0, #10
 8010376:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80103f4 <__b2d+0x9c>
 801037a:	600b      	str	r3, [r1, #0]
 801037c:	dc14      	bgt.n	80103a8 <__b2d+0x50>
 801037e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010382:	fa24 f10e 	lsr.w	r1, r4, lr
 8010386:	42b7      	cmp	r7, r6
 8010388:	ea41 030c 	orr.w	r3, r1, ip
 801038c:	bf34      	ite	cc
 801038e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010392:	2100      	movcs	r1, #0
 8010394:	3015      	adds	r0, #21
 8010396:	fa04 f000 	lsl.w	r0, r4, r0
 801039a:	fa21 f10e 	lsr.w	r1, r1, lr
 801039e:	ea40 0201 	orr.w	r2, r0, r1
 80103a2:	ec43 2b10 	vmov	d0, r2, r3
 80103a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a8:	42b7      	cmp	r7, r6
 80103aa:	bf3a      	itte	cc
 80103ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80103b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80103b4:	2100      	movcs	r1, #0
 80103b6:	380b      	subs	r0, #11
 80103b8:	d017      	beq.n	80103ea <__b2d+0x92>
 80103ba:	f1c0 0c20 	rsb	ip, r0, #32
 80103be:	fa04 f500 	lsl.w	r5, r4, r0
 80103c2:	42be      	cmp	r6, r7
 80103c4:	fa21 f40c 	lsr.w	r4, r1, ip
 80103c8:	ea45 0504 	orr.w	r5, r5, r4
 80103cc:	bf8c      	ite	hi
 80103ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80103d2:	2400      	movls	r4, #0
 80103d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80103d8:	fa01 f000 	lsl.w	r0, r1, r0
 80103dc:	fa24 f40c 	lsr.w	r4, r4, ip
 80103e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80103e4:	ea40 0204 	orr.w	r2, r0, r4
 80103e8:	e7db      	b.n	80103a2 <__b2d+0x4a>
 80103ea:	ea44 030c 	orr.w	r3, r4, ip
 80103ee:	460a      	mov	r2, r1
 80103f0:	e7d7      	b.n	80103a2 <__b2d+0x4a>
 80103f2:	bf00      	nop
 80103f4:	3ff00000 	.word	0x3ff00000

080103f8 <__d2b>:
 80103f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103fc:	4689      	mov	r9, r1
 80103fe:	2101      	movs	r1, #1
 8010400:	ec57 6b10 	vmov	r6, r7, d0
 8010404:	4690      	mov	r8, r2
 8010406:	f7ff fc0f 	bl	800fc28 <_Balloc>
 801040a:	4604      	mov	r4, r0
 801040c:	b930      	cbnz	r0, 801041c <__d2b+0x24>
 801040e:	4602      	mov	r2, r0
 8010410:	4b25      	ldr	r3, [pc, #148]	; (80104a8 <__d2b+0xb0>)
 8010412:	4826      	ldr	r0, [pc, #152]	; (80104ac <__d2b+0xb4>)
 8010414:	f240 310a 	movw	r1, #778	; 0x30a
 8010418:	f000 ff30 	bl	801127c <__assert_func>
 801041c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010424:	bb35      	cbnz	r5, 8010474 <__d2b+0x7c>
 8010426:	2e00      	cmp	r6, #0
 8010428:	9301      	str	r3, [sp, #4]
 801042a:	d028      	beq.n	801047e <__d2b+0x86>
 801042c:	4668      	mov	r0, sp
 801042e:	9600      	str	r6, [sp, #0]
 8010430:	f7ff fd10 	bl	800fe54 <__lo0bits>
 8010434:	9900      	ldr	r1, [sp, #0]
 8010436:	b300      	cbz	r0, 801047a <__d2b+0x82>
 8010438:	9a01      	ldr	r2, [sp, #4]
 801043a:	f1c0 0320 	rsb	r3, r0, #32
 801043e:	fa02 f303 	lsl.w	r3, r2, r3
 8010442:	430b      	orrs	r3, r1
 8010444:	40c2      	lsrs	r2, r0
 8010446:	6163      	str	r3, [r4, #20]
 8010448:	9201      	str	r2, [sp, #4]
 801044a:	9b01      	ldr	r3, [sp, #4]
 801044c:	61a3      	str	r3, [r4, #24]
 801044e:	2b00      	cmp	r3, #0
 8010450:	bf14      	ite	ne
 8010452:	2202      	movne	r2, #2
 8010454:	2201      	moveq	r2, #1
 8010456:	6122      	str	r2, [r4, #16]
 8010458:	b1d5      	cbz	r5, 8010490 <__d2b+0x98>
 801045a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801045e:	4405      	add	r5, r0
 8010460:	f8c9 5000 	str.w	r5, [r9]
 8010464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010468:	f8c8 0000 	str.w	r0, [r8]
 801046c:	4620      	mov	r0, r4
 801046e:	b003      	add	sp, #12
 8010470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010478:	e7d5      	b.n	8010426 <__d2b+0x2e>
 801047a:	6161      	str	r1, [r4, #20]
 801047c:	e7e5      	b.n	801044a <__d2b+0x52>
 801047e:	a801      	add	r0, sp, #4
 8010480:	f7ff fce8 	bl	800fe54 <__lo0bits>
 8010484:	9b01      	ldr	r3, [sp, #4]
 8010486:	6163      	str	r3, [r4, #20]
 8010488:	2201      	movs	r2, #1
 801048a:	6122      	str	r2, [r4, #16]
 801048c:	3020      	adds	r0, #32
 801048e:	e7e3      	b.n	8010458 <__d2b+0x60>
 8010490:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010494:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010498:	f8c9 0000 	str.w	r0, [r9]
 801049c:	6918      	ldr	r0, [r3, #16]
 801049e:	f7ff fcb9 	bl	800fe14 <__hi0bits>
 80104a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104a6:	e7df      	b.n	8010468 <__d2b+0x70>
 80104a8:	080130e4 	.word	0x080130e4
 80104ac:	08013174 	.word	0x08013174

080104b0 <__ratio>:
 80104b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b4:	4688      	mov	r8, r1
 80104b6:	4669      	mov	r1, sp
 80104b8:	4681      	mov	r9, r0
 80104ba:	f7ff ff4d 	bl	8010358 <__b2d>
 80104be:	a901      	add	r1, sp, #4
 80104c0:	4640      	mov	r0, r8
 80104c2:	ec55 4b10 	vmov	r4, r5, d0
 80104c6:	f7ff ff47 	bl	8010358 <__b2d>
 80104ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80104d2:	eba3 0c02 	sub.w	ip, r3, r2
 80104d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80104da:	1a9b      	subs	r3, r3, r2
 80104dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80104e0:	ec51 0b10 	vmov	r0, r1, d0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bfd6      	itet	le
 80104e8:	460a      	movle	r2, r1
 80104ea:	462a      	movgt	r2, r5
 80104ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80104f0:	468b      	mov	fp, r1
 80104f2:	462f      	mov	r7, r5
 80104f4:	bfd4      	ite	le
 80104f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80104fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80104fe:	4620      	mov	r0, r4
 8010500:	ee10 2a10 	vmov	r2, s0
 8010504:	465b      	mov	r3, fp
 8010506:	4639      	mov	r1, r7
 8010508:	f7f0 f9a8 	bl	800085c <__aeabi_ddiv>
 801050c:	ec41 0b10 	vmov	d0, r0, r1
 8010510:	b003      	add	sp, #12
 8010512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010516 <__copybits>:
 8010516:	3901      	subs	r1, #1
 8010518:	b570      	push	{r4, r5, r6, lr}
 801051a:	1149      	asrs	r1, r1, #5
 801051c:	6914      	ldr	r4, [r2, #16]
 801051e:	3101      	adds	r1, #1
 8010520:	f102 0314 	add.w	r3, r2, #20
 8010524:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010528:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801052c:	1f05      	subs	r5, r0, #4
 801052e:	42a3      	cmp	r3, r4
 8010530:	d30c      	bcc.n	801054c <__copybits+0x36>
 8010532:	1aa3      	subs	r3, r4, r2
 8010534:	3b11      	subs	r3, #17
 8010536:	f023 0303 	bic.w	r3, r3, #3
 801053a:	3211      	adds	r2, #17
 801053c:	42a2      	cmp	r2, r4
 801053e:	bf88      	it	hi
 8010540:	2300      	movhi	r3, #0
 8010542:	4418      	add	r0, r3
 8010544:	2300      	movs	r3, #0
 8010546:	4288      	cmp	r0, r1
 8010548:	d305      	bcc.n	8010556 <__copybits+0x40>
 801054a:	bd70      	pop	{r4, r5, r6, pc}
 801054c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010550:	f845 6f04 	str.w	r6, [r5, #4]!
 8010554:	e7eb      	b.n	801052e <__copybits+0x18>
 8010556:	f840 3b04 	str.w	r3, [r0], #4
 801055a:	e7f4      	b.n	8010546 <__copybits+0x30>

0801055c <__any_on>:
 801055c:	f100 0214 	add.w	r2, r0, #20
 8010560:	6900      	ldr	r0, [r0, #16]
 8010562:	114b      	asrs	r3, r1, #5
 8010564:	4298      	cmp	r0, r3
 8010566:	b510      	push	{r4, lr}
 8010568:	db11      	blt.n	801058e <__any_on+0x32>
 801056a:	dd0a      	ble.n	8010582 <__any_on+0x26>
 801056c:	f011 011f 	ands.w	r1, r1, #31
 8010570:	d007      	beq.n	8010582 <__any_on+0x26>
 8010572:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010576:	fa24 f001 	lsr.w	r0, r4, r1
 801057a:	fa00 f101 	lsl.w	r1, r0, r1
 801057e:	428c      	cmp	r4, r1
 8010580:	d10b      	bne.n	801059a <__any_on+0x3e>
 8010582:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010586:	4293      	cmp	r3, r2
 8010588:	d803      	bhi.n	8010592 <__any_on+0x36>
 801058a:	2000      	movs	r0, #0
 801058c:	bd10      	pop	{r4, pc}
 801058e:	4603      	mov	r3, r0
 8010590:	e7f7      	b.n	8010582 <__any_on+0x26>
 8010592:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010596:	2900      	cmp	r1, #0
 8010598:	d0f5      	beq.n	8010586 <__any_on+0x2a>
 801059a:	2001      	movs	r0, #1
 801059c:	e7f6      	b.n	801058c <__any_on+0x30>

0801059e <_calloc_r>:
 801059e:	b513      	push	{r0, r1, r4, lr}
 80105a0:	434a      	muls	r2, r1
 80105a2:	4611      	mov	r1, r2
 80105a4:	9201      	str	r2, [sp, #4]
 80105a6:	f000 f859 	bl	801065c <_malloc_r>
 80105aa:	4604      	mov	r4, r0
 80105ac:	b118      	cbz	r0, 80105b6 <_calloc_r+0x18>
 80105ae:	9a01      	ldr	r2, [sp, #4]
 80105b0:	2100      	movs	r1, #0
 80105b2:	f7fc fb1d 	bl	800cbf0 <memset>
 80105b6:	4620      	mov	r0, r4
 80105b8:	b002      	add	sp, #8
 80105ba:	bd10      	pop	{r4, pc}

080105bc <_free_r>:
 80105bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105be:	2900      	cmp	r1, #0
 80105c0:	d048      	beq.n	8010654 <_free_r+0x98>
 80105c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105c6:	9001      	str	r0, [sp, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f1a1 0404 	sub.w	r4, r1, #4
 80105ce:	bfb8      	it	lt
 80105d0:	18e4      	addlt	r4, r4, r3
 80105d2:	f001 f857 	bl	8011684 <__malloc_lock>
 80105d6:	4a20      	ldr	r2, [pc, #128]	; (8010658 <_free_r+0x9c>)
 80105d8:	9801      	ldr	r0, [sp, #4]
 80105da:	6813      	ldr	r3, [r2, #0]
 80105dc:	4615      	mov	r5, r2
 80105de:	b933      	cbnz	r3, 80105ee <_free_r+0x32>
 80105e0:	6063      	str	r3, [r4, #4]
 80105e2:	6014      	str	r4, [r2, #0]
 80105e4:	b003      	add	sp, #12
 80105e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105ea:	f001 b851 	b.w	8011690 <__malloc_unlock>
 80105ee:	42a3      	cmp	r3, r4
 80105f0:	d90b      	bls.n	801060a <_free_r+0x4e>
 80105f2:	6821      	ldr	r1, [r4, #0]
 80105f4:	1862      	adds	r2, r4, r1
 80105f6:	4293      	cmp	r3, r2
 80105f8:	bf04      	itt	eq
 80105fa:	681a      	ldreq	r2, [r3, #0]
 80105fc:	685b      	ldreq	r3, [r3, #4]
 80105fe:	6063      	str	r3, [r4, #4]
 8010600:	bf04      	itt	eq
 8010602:	1852      	addeq	r2, r2, r1
 8010604:	6022      	streq	r2, [r4, #0]
 8010606:	602c      	str	r4, [r5, #0]
 8010608:	e7ec      	b.n	80105e4 <_free_r+0x28>
 801060a:	461a      	mov	r2, r3
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	b10b      	cbz	r3, 8010614 <_free_r+0x58>
 8010610:	42a3      	cmp	r3, r4
 8010612:	d9fa      	bls.n	801060a <_free_r+0x4e>
 8010614:	6811      	ldr	r1, [r2, #0]
 8010616:	1855      	adds	r5, r2, r1
 8010618:	42a5      	cmp	r5, r4
 801061a:	d10b      	bne.n	8010634 <_free_r+0x78>
 801061c:	6824      	ldr	r4, [r4, #0]
 801061e:	4421      	add	r1, r4
 8010620:	1854      	adds	r4, r2, r1
 8010622:	42a3      	cmp	r3, r4
 8010624:	6011      	str	r1, [r2, #0]
 8010626:	d1dd      	bne.n	80105e4 <_free_r+0x28>
 8010628:	681c      	ldr	r4, [r3, #0]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	6053      	str	r3, [r2, #4]
 801062e:	4421      	add	r1, r4
 8010630:	6011      	str	r1, [r2, #0]
 8010632:	e7d7      	b.n	80105e4 <_free_r+0x28>
 8010634:	d902      	bls.n	801063c <_free_r+0x80>
 8010636:	230c      	movs	r3, #12
 8010638:	6003      	str	r3, [r0, #0]
 801063a:	e7d3      	b.n	80105e4 <_free_r+0x28>
 801063c:	6825      	ldr	r5, [r4, #0]
 801063e:	1961      	adds	r1, r4, r5
 8010640:	428b      	cmp	r3, r1
 8010642:	bf04      	itt	eq
 8010644:	6819      	ldreq	r1, [r3, #0]
 8010646:	685b      	ldreq	r3, [r3, #4]
 8010648:	6063      	str	r3, [r4, #4]
 801064a:	bf04      	itt	eq
 801064c:	1949      	addeq	r1, r1, r5
 801064e:	6021      	streq	r1, [r4, #0]
 8010650:	6054      	str	r4, [r2, #4]
 8010652:	e7c7      	b.n	80105e4 <_free_r+0x28>
 8010654:	b003      	add	sp, #12
 8010656:	bd30      	pop	{r4, r5, pc}
 8010658:	2000551c 	.word	0x2000551c

0801065c <_malloc_r>:
 801065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065e:	1ccd      	adds	r5, r1, #3
 8010660:	f025 0503 	bic.w	r5, r5, #3
 8010664:	3508      	adds	r5, #8
 8010666:	2d0c      	cmp	r5, #12
 8010668:	bf38      	it	cc
 801066a:	250c      	movcc	r5, #12
 801066c:	2d00      	cmp	r5, #0
 801066e:	4606      	mov	r6, r0
 8010670:	db01      	blt.n	8010676 <_malloc_r+0x1a>
 8010672:	42a9      	cmp	r1, r5
 8010674:	d903      	bls.n	801067e <_malloc_r+0x22>
 8010676:	230c      	movs	r3, #12
 8010678:	6033      	str	r3, [r6, #0]
 801067a:	2000      	movs	r0, #0
 801067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801067e:	f001 f801 	bl	8011684 <__malloc_lock>
 8010682:	4921      	ldr	r1, [pc, #132]	; (8010708 <_malloc_r+0xac>)
 8010684:	680a      	ldr	r2, [r1, #0]
 8010686:	4614      	mov	r4, r2
 8010688:	b99c      	cbnz	r4, 80106b2 <_malloc_r+0x56>
 801068a:	4f20      	ldr	r7, [pc, #128]	; (801070c <_malloc_r+0xb0>)
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	b923      	cbnz	r3, 801069a <_malloc_r+0x3e>
 8010690:	4621      	mov	r1, r4
 8010692:	4630      	mov	r0, r6
 8010694:	f000 fcd0 	bl	8011038 <_sbrk_r>
 8010698:	6038      	str	r0, [r7, #0]
 801069a:	4629      	mov	r1, r5
 801069c:	4630      	mov	r0, r6
 801069e:	f000 fccb 	bl	8011038 <_sbrk_r>
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	d123      	bne.n	80106ee <_malloc_r+0x92>
 80106a6:	230c      	movs	r3, #12
 80106a8:	6033      	str	r3, [r6, #0]
 80106aa:	4630      	mov	r0, r6
 80106ac:	f000 fff0 	bl	8011690 <__malloc_unlock>
 80106b0:	e7e3      	b.n	801067a <_malloc_r+0x1e>
 80106b2:	6823      	ldr	r3, [r4, #0]
 80106b4:	1b5b      	subs	r3, r3, r5
 80106b6:	d417      	bmi.n	80106e8 <_malloc_r+0x8c>
 80106b8:	2b0b      	cmp	r3, #11
 80106ba:	d903      	bls.n	80106c4 <_malloc_r+0x68>
 80106bc:	6023      	str	r3, [r4, #0]
 80106be:	441c      	add	r4, r3
 80106c0:	6025      	str	r5, [r4, #0]
 80106c2:	e004      	b.n	80106ce <_malloc_r+0x72>
 80106c4:	6863      	ldr	r3, [r4, #4]
 80106c6:	42a2      	cmp	r2, r4
 80106c8:	bf0c      	ite	eq
 80106ca:	600b      	streq	r3, [r1, #0]
 80106cc:	6053      	strne	r3, [r2, #4]
 80106ce:	4630      	mov	r0, r6
 80106d0:	f000 ffde 	bl	8011690 <__malloc_unlock>
 80106d4:	f104 000b 	add.w	r0, r4, #11
 80106d8:	1d23      	adds	r3, r4, #4
 80106da:	f020 0007 	bic.w	r0, r0, #7
 80106de:	1ac2      	subs	r2, r0, r3
 80106e0:	d0cc      	beq.n	801067c <_malloc_r+0x20>
 80106e2:	1a1b      	subs	r3, r3, r0
 80106e4:	50a3      	str	r3, [r4, r2]
 80106e6:	e7c9      	b.n	801067c <_malloc_r+0x20>
 80106e8:	4622      	mov	r2, r4
 80106ea:	6864      	ldr	r4, [r4, #4]
 80106ec:	e7cc      	b.n	8010688 <_malloc_r+0x2c>
 80106ee:	1cc4      	adds	r4, r0, #3
 80106f0:	f024 0403 	bic.w	r4, r4, #3
 80106f4:	42a0      	cmp	r0, r4
 80106f6:	d0e3      	beq.n	80106c0 <_malloc_r+0x64>
 80106f8:	1a21      	subs	r1, r4, r0
 80106fa:	4630      	mov	r0, r6
 80106fc:	f000 fc9c 	bl	8011038 <_sbrk_r>
 8010700:	3001      	adds	r0, #1
 8010702:	d1dd      	bne.n	80106c0 <_malloc_r+0x64>
 8010704:	e7cf      	b.n	80106a6 <_malloc_r+0x4a>
 8010706:	bf00      	nop
 8010708:	2000551c 	.word	0x2000551c
 801070c:	20005520 	.word	0x20005520

08010710 <__ssputs_r>:
 8010710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010714:	688e      	ldr	r6, [r1, #8]
 8010716:	429e      	cmp	r6, r3
 8010718:	4682      	mov	sl, r0
 801071a:	460c      	mov	r4, r1
 801071c:	4690      	mov	r8, r2
 801071e:	461f      	mov	r7, r3
 8010720:	d838      	bhi.n	8010794 <__ssputs_r+0x84>
 8010722:	898a      	ldrh	r2, [r1, #12]
 8010724:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010728:	d032      	beq.n	8010790 <__ssputs_r+0x80>
 801072a:	6825      	ldr	r5, [r4, #0]
 801072c:	6909      	ldr	r1, [r1, #16]
 801072e:	eba5 0901 	sub.w	r9, r5, r1
 8010732:	6965      	ldr	r5, [r4, #20]
 8010734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010738:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801073c:	3301      	adds	r3, #1
 801073e:	444b      	add	r3, r9
 8010740:	106d      	asrs	r5, r5, #1
 8010742:	429d      	cmp	r5, r3
 8010744:	bf38      	it	cc
 8010746:	461d      	movcc	r5, r3
 8010748:	0553      	lsls	r3, r2, #21
 801074a:	d531      	bpl.n	80107b0 <__ssputs_r+0xa0>
 801074c:	4629      	mov	r1, r5
 801074e:	f7ff ff85 	bl	801065c <_malloc_r>
 8010752:	4606      	mov	r6, r0
 8010754:	b950      	cbnz	r0, 801076c <__ssputs_r+0x5c>
 8010756:	230c      	movs	r3, #12
 8010758:	f8ca 3000 	str.w	r3, [sl]
 801075c:	89a3      	ldrh	r3, [r4, #12]
 801075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010762:	81a3      	strh	r3, [r4, #12]
 8010764:	f04f 30ff 	mov.w	r0, #4294967295
 8010768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801076c:	6921      	ldr	r1, [r4, #16]
 801076e:	464a      	mov	r2, r9
 8010770:	f7fc fa30 	bl	800cbd4 <memcpy>
 8010774:	89a3      	ldrh	r3, [r4, #12]
 8010776:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801077a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801077e:	81a3      	strh	r3, [r4, #12]
 8010780:	6126      	str	r6, [r4, #16]
 8010782:	6165      	str	r5, [r4, #20]
 8010784:	444e      	add	r6, r9
 8010786:	eba5 0509 	sub.w	r5, r5, r9
 801078a:	6026      	str	r6, [r4, #0]
 801078c:	60a5      	str	r5, [r4, #8]
 801078e:	463e      	mov	r6, r7
 8010790:	42be      	cmp	r6, r7
 8010792:	d900      	bls.n	8010796 <__ssputs_r+0x86>
 8010794:	463e      	mov	r6, r7
 8010796:	4632      	mov	r2, r6
 8010798:	6820      	ldr	r0, [r4, #0]
 801079a:	4641      	mov	r1, r8
 801079c:	f000 ff58 	bl	8011650 <memmove>
 80107a0:	68a3      	ldr	r3, [r4, #8]
 80107a2:	6822      	ldr	r2, [r4, #0]
 80107a4:	1b9b      	subs	r3, r3, r6
 80107a6:	4432      	add	r2, r6
 80107a8:	60a3      	str	r3, [r4, #8]
 80107aa:	6022      	str	r2, [r4, #0]
 80107ac:	2000      	movs	r0, #0
 80107ae:	e7db      	b.n	8010768 <__ssputs_r+0x58>
 80107b0:	462a      	mov	r2, r5
 80107b2:	f000 ff73 	bl	801169c <_realloc_r>
 80107b6:	4606      	mov	r6, r0
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d1e1      	bne.n	8010780 <__ssputs_r+0x70>
 80107bc:	6921      	ldr	r1, [r4, #16]
 80107be:	4650      	mov	r0, sl
 80107c0:	f7ff fefc 	bl	80105bc <_free_r>
 80107c4:	e7c7      	b.n	8010756 <__ssputs_r+0x46>
	...

080107c8 <_svfiprintf_r>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	4698      	mov	r8, r3
 80107ce:	898b      	ldrh	r3, [r1, #12]
 80107d0:	061b      	lsls	r3, r3, #24
 80107d2:	b09d      	sub	sp, #116	; 0x74
 80107d4:	4607      	mov	r7, r0
 80107d6:	460d      	mov	r5, r1
 80107d8:	4614      	mov	r4, r2
 80107da:	d50e      	bpl.n	80107fa <_svfiprintf_r+0x32>
 80107dc:	690b      	ldr	r3, [r1, #16]
 80107de:	b963      	cbnz	r3, 80107fa <_svfiprintf_r+0x32>
 80107e0:	2140      	movs	r1, #64	; 0x40
 80107e2:	f7ff ff3b 	bl	801065c <_malloc_r>
 80107e6:	6028      	str	r0, [r5, #0]
 80107e8:	6128      	str	r0, [r5, #16]
 80107ea:	b920      	cbnz	r0, 80107f6 <_svfiprintf_r+0x2e>
 80107ec:	230c      	movs	r3, #12
 80107ee:	603b      	str	r3, [r7, #0]
 80107f0:	f04f 30ff 	mov.w	r0, #4294967295
 80107f4:	e0d1      	b.n	801099a <_svfiprintf_r+0x1d2>
 80107f6:	2340      	movs	r3, #64	; 0x40
 80107f8:	616b      	str	r3, [r5, #20]
 80107fa:	2300      	movs	r3, #0
 80107fc:	9309      	str	r3, [sp, #36]	; 0x24
 80107fe:	2320      	movs	r3, #32
 8010800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010804:	f8cd 800c 	str.w	r8, [sp, #12]
 8010808:	2330      	movs	r3, #48	; 0x30
 801080a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80109b4 <_svfiprintf_r+0x1ec>
 801080e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010812:	f04f 0901 	mov.w	r9, #1
 8010816:	4623      	mov	r3, r4
 8010818:	469a      	mov	sl, r3
 801081a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801081e:	b10a      	cbz	r2, 8010824 <_svfiprintf_r+0x5c>
 8010820:	2a25      	cmp	r2, #37	; 0x25
 8010822:	d1f9      	bne.n	8010818 <_svfiprintf_r+0x50>
 8010824:	ebba 0b04 	subs.w	fp, sl, r4
 8010828:	d00b      	beq.n	8010842 <_svfiprintf_r+0x7a>
 801082a:	465b      	mov	r3, fp
 801082c:	4622      	mov	r2, r4
 801082e:	4629      	mov	r1, r5
 8010830:	4638      	mov	r0, r7
 8010832:	f7ff ff6d 	bl	8010710 <__ssputs_r>
 8010836:	3001      	adds	r0, #1
 8010838:	f000 80aa 	beq.w	8010990 <_svfiprintf_r+0x1c8>
 801083c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801083e:	445a      	add	r2, fp
 8010840:	9209      	str	r2, [sp, #36]	; 0x24
 8010842:	f89a 3000 	ldrb.w	r3, [sl]
 8010846:	2b00      	cmp	r3, #0
 8010848:	f000 80a2 	beq.w	8010990 <_svfiprintf_r+0x1c8>
 801084c:	2300      	movs	r3, #0
 801084e:	f04f 32ff 	mov.w	r2, #4294967295
 8010852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010856:	f10a 0a01 	add.w	sl, sl, #1
 801085a:	9304      	str	r3, [sp, #16]
 801085c:	9307      	str	r3, [sp, #28]
 801085e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010862:	931a      	str	r3, [sp, #104]	; 0x68
 8010864:	4654      	mov	r4, sl
 8010866:	2205      	movs	r2, #5
 8010868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801086c:	4851      	ldr	r0, [pc, #324]	; (80109b4 <_svfiprintf_r+0x1ec>)
 801086e:	f7ef fcbf 	bl	80001f0 <memchr>
 8010872:	9a04      	ldr	r2, [sp, #16]
 8010874:	b9d8      	cbnz	r0, 80108ae <_svfiprintf_r+0xe6>
 8010876:	06d0      	lsls	r0, r2, #27
 8010878:	bf44      	itt	mi
 801087a:	2320      	movmi	r3, #32
 801087c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010880:	0711      	lsls	r1, r2, #28
 8010882:	bf44      	itt	mi
 8010884:	232b      	movmi	r3, #43	; 0x2b
 8010886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801088a:	f89a 3000 	ldrb.w	r3, [sl]
 801088e:	2b2a      	cmp	r3, #42	; 0x2a
 8010890:	d015      	beq.n	80108be <_svfiprintf_r+0xf6>
 8010892:	9a07      	ldr	r2, [sp, #28]
 8010894:	4654      	mov	r4, sl
 8010896:	2000      	movs	r0, #0
 8010898:	f04f 0c0a 	mov.w	ip, #10
 801089c:	4621      	mov	r1, r4
 801089e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108a2:	3b30      	subs	r3, #48	; 0x30
 80108a4:	2b09      	cmp	r3, #9
 80108a6:	d94e      	bls.n	8010946 <_svfiprintf_r+0x17e>
 80108a8:	b1b0      	cbz	r0, 80108d8 <_svfiprintf_r+0x110>
 80108aa:	9207      	str	r2, [sp, #28]
 80108ac:	e014      	b.n	80108d8 <_svfiprintf_r+0x110>
 80108ae:	eba0 0308 	sub.w	r3, r0, r8
 80108b2:	fa09 f303 	lsl.w	r3, r9, r3
 80108b6:	4313      	orrs	r3, r2
 80108b8:	9304      	str	r3, [sp, #16]
 80108ba:	46a2      	mov	sl, r4
 80108bc:	e7d2      	b.n	8010864 <_svfiprintf_r+0x9c>
 80108be:	9b03      	ldr	r3, [sp, #12]
 80108c0:	1d19      	adds	r1, r3, #4
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	9103      	str	r1, [sp, #12]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	bfbb      	ittet	lt
 80108ca:	425b      	neglt	r3, r3
 80108cc:	f042 0202 	orrlt.w	r2, r2, #2
 80108d0:	9307      	strge	r3, [sp, #28]
 80108d2:	9307      	strlt	r3, [sp, #28]
 80108d4:	bfb8      	it	lt
 80108d6:	9204      	strlt	r2, [sp, #16]
 80108d8:	7823      	ldrb	r3, [r4, #0]
 80108da:	2b2e      	cmp	r3, #46	; 0x2e
 80108dc:	d10c      	bne.n	80108f8 <_svfiprintf_r+0x130>
 80108de:	7863      	ldrb	r3, [r4, #1]
 80108e0:	2b2a      	cmp	r3, #42	; 0x2a
 80108e2:	d135      	bne.n	8010950 <_svfiprintf_r+0x188>
 80108e4:	9b03      	ldr	r3, [sp, #12]
 80108e6:	1d1a      	adds	r2, r3, #4
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	9203      	str	r2, [sp, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	bfb8      	it	lt
 80108f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80108f4:	3402      	adds	r4, #2
 80108f6:	9305      	str	r3, [sp, #20]
 80108f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80109c4 <_svfiprintf_r+0x1fc>
 80108fc:	7821      	ldrb	r1, [r4, #0]
 80108fe:	2203      	movs	r2, #3
 8010900:	4650      	mov	r0, sl
 8010902:	f7ef fc75 	bl	80001f0 <memchr>
 8010906:	b140      	cbz	r0, 801091a <_svfiprintf_r+0x152>
 8010908:	2340      	movs	r3, #64	; 0x40
 801090a:	eba0 000a 	sub.w	r0, r0, sl
 801090e:	fa03 f000 	lsl.w	r0, r3, r0
 8010912:	9b04      	ldr	r3, [sp, #16]
 8010914:	4303      	orrs	r3, r0
 8010916:	3401      	adds	r4, #1
 8010918:	9304      	str	r3, [sp, #16]
 801091a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801091e:	4826      	ldr	r0, [pc, #152]	; (80109b8 <_svfiprintf_r+0x1f0>)
 8010920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010924:	2206      	movs	r2, #6
 8010926:	f7ef fc63 	bl	80001f0 <memchr>
 801092a:	2800      	cmp	r0, #0
 801092c:	d038      	beq.n	80109a0 <_svfiprintf_r+0x1d8>
 801092e:	4b23      	ldr	r3, [pc, #140]	; (80109bc <_svfiprintf_r+0x1f4>)
 8010930:	bb1b      	cbnz	r3, 801097a <_svfiprintf_r+0x1b2>
 8010932:	9b03      	ldr	r3, [sp, #12]
 8010934:	3307      	adds	r3, #7
 8010936:	f023 0307 	bic.w	r3, r3, #7
 801093a:	3308      	adds	r3, #8
 801093c:	9303      	str	r3, [sp, #12]
 801093e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010940:	4433      	add	r3, r6
 8010942:	9309      	str	r3, [sp, #36]	; 0x24
 8010944:	e767      	b.n	8010816 <_svfiprintf_r+0x4e>
 8010946:	fb0c 3202 	mla	r2, ip, r2, r3
 801094a:	460c      	mov	r4, r1
 801094c:	2001      	movs	r0, #1
 801094e:	e7a5      	b.n	801089c <_svfiprintf_r+0xd4>
 8010950:	2300      	movs	r3, #0
 8010952:	3401      	adds	r4, #1
 8010954:	9305      	str	r3, [sp, #20]
 8010956:	4619      	mov	r1, r3
 8010958:	f04f 0c0a 	mov.w	ip, #10
 801095c:	4620      	mov	r0, r4
 801095e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010962:	3a30      	subs	r2, #48	; 0x30
 8010964:	2a09      	cmp	r2, #9
 8010966:	d903      	bls.n	8010970 <_svfiprintf_r+0x1a8>
 8010968:	2b00      	cmp	r3, #0
 801096a:	d0c5      	beq.n	80108f8 <_svfiprintf_r+0x130>
 801096c:	9105      	str	r1, [sp, #20]
 801096e:	e7c3      	b.n	80108f8 <_svfiprintf_r+0x130>
 8010970:	fb0c 2101 	mla	r1, ip, r1, r2
 8010974:	4604      	mov	r4, r0
 8010976:	2301      	movs	r3, #1
 8010978:	e7f0      	b.n	801095c <_svfiprintf_r+0x194>
 801097a:	ab03      	add	r3, sp, #12
 801097c:	9300      	str	r3, [sp, #0]
 801097e:	462a      	mov	r2, r5
 8010980:	4b0f      	ldr	r3, [pc, #60]	; (80109c0 <_svfiprintf_r+0x1f8>)
 8010982:	a904      	add	r1, sp, #16
 8010984:	4638      	mov	r0, r7
 8010986:	f7fc f9db 	bl	800cd40 <_printf_float>
 801098a:	1c42      	adds	r2, r0, #1
 801098c:	4606      	mov	r6, r0
 801098e:	d1d6      	bne.n	801093e <_svfiprintf_r+0x176>
 8010990:	89ab      	ldrh	r3, [r5, #12]
 8010992:	065b      	lsls	r3, r3, #25
 8010994:	f53f af2c 	bmi.w	80107f0 <_svfiprintf_r+0x28>
 8010998:	9809      	ldr	r0, [sp, #36]	; 0x24
 801099a:	b01d      	add	sp, #116	; 0x74
 801099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a0:	ab03      	add	r3, sp, #12
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	462a      	mov	r2, r5
 80109a6:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <_svfiprintf_r+0x1f8>)
 80109a8:	a904      	add	r1, sp, #16
 80109aa:	4638      	mov	r0, r7
 80109ac:	f7fc fc6c 	bl	800d288 <_printf_i>
 80109b0:	e7eb      	b.n	801098a <_svfiprintf_r+0x1c2>
 80109b2:	bf00      	nop
 80109b4:	080132d4 	.word	0x080132d4
 80109b8:	080132de 	.word	0x080132de
 80109bc:	0800cd41 	.word	0x0800cd41
 80109c0:	08010711 	.word	0x08010711
 80109c4:	080132da 	.word	0x080132da

080109c8 <_sungetc_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	1c4b      	adds	r3, r1, #1
 80109cc:	4614      	mov	r4, r2
 80109ce:	d103      	bne.n	80109d8 <_sungetc_r+0x10>
 80109d0:	f04f 35ff 	mov.w	r5, #4294967295
 80109d4:	4628      	mov	r0, r5
 80109d6:	bd38      	pop	{r3, r4, r5, pc}
 80109d8:	8993      	ldrh	r3, [r2, #12]
 80109da:	f023 0320 	bic.w	r3, r3, #32
 80109de:	8193      	strh	r3, [r2, #12]
 80109e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109e2:	6852      	ldr	r2, [r2, #4]
 80109e4:	b2cd      	uxtb	r5, r1
 80109e6:	b18b      	cbz	r3, 8010a0c <_sungetc_r+0x44>
 80109e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109ea:	4293      	cmp	r3, r2
 80109ec:	dd08      	ble.n	8010a00 <_sungetc_r+0x38>
 80109ee:	6823      	ldr	r3, [r4, #0]
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	6022      	str	r2, [r4, #0]
 80109f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80109f8:	6863      	ldr	r3, [r4, #4]
 80109fa:	3301      	adds	r3, #1
 80109fc:	6063      	str	r3, [r4, #4]
 80109fe:	e7e9      	b.n	80109d4 <_sungetc_r+0xc>
 8010a00:	4621      	mov	r1, r4
 8010a02:	f000 fbf3 	bl	80111ec <__submore>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d0f1      	beq.n	80109ee <_sungetc_r+0x26>
 8010a0a:	e7e1      	b.n	80109d0 <_sungetc_r+0x8>
 8010a0c:	6921      	ldr	r1, [r4, #16]
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	b151      	cbz	r1, 8010a28 <_sungetc_r+0x60>
 8010a12:	4299      	cmp	r1, r3
 8010a14:	d208      	bcs.n	8010a28 <_sungetc_r+0x60>
 8010a16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010a1a:	42a9      	cmp	r1, r5
 8010a1c:	d104      	bne.n	8010a28 <_sungetc_r+0x60>
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	3201      	adds	r2, #1
 8010a22:	6023      	str	r3, [r4, #0]
 8010a24:	6062      	str	r2, [r4, #4]
 8010a26:	e7d5      	b.n	80109d4 <_sungetc_r+0xc>
 8010a28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a30:	6363      	str	r3, [r4, #52]	; 0x34
 8010a32:	2303      	movs	r3, #3
 8010a34:	63a3      	str	r3, [r4, #56]	; 0x38
 8010a36:	4623      	mov	r3, r4
 8010a38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010a3c:	6023      	str	r3, [r4, #0]
 8010a3e:	2301      	movs	r3, #1
 8010a40:	e7dc      	b.n	80109fc <_sungetc_r+0x34>

08010a42 <__ssrefill_r>:
 8010a42:	b510      	push	{r4, lr}
 8010a44:	460c      	mov	r4, r1
 8010a46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010a48:	b169      	cbz	r1, 8010a66 <__ssrefill_r+0x24>
 8010a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a4e:	4299      	cmp	r1, r3
 8010a50:	d001      	beq.n	8010a56 <__ssrefill_r+0x14>
 8010a52:	f7ff fdb3 	bl	80105bc <_free_r>
 8010a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a58:	6063      	str	r3, [r4, #4]
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8010a5e:	b113      	cbz	r3, 8010a66 <__ssrefill_r+0x24>
 8010a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010a62:	6023      	str	r3, [r4, #0]
 8010a64:	bd10      	pop	{r4, pc}
 8010a66:	6923      	ldr	r3, [r4, #16]
 8010a68:	6023      	str	r3, [r4, #0]
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	6063      	str	r3, [r4, #4]
 8010a6e:	89a3      	ldrh	r3, [r4, #12]
 8010a70:	f043 0320 	orr.w	r3, r3, #32
 8010a74:	81a3      	strh	r3, [r4, #12]
 8010a76:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7a:	e7f3      	b.n	8010a64 <__ssrefill_r+0x22>

08010a7c <__ssvfiscanf_r>:
 8010a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	460c      	mov	r4, r1
 8010a82:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8010a86:	2100      	movs	r1, #0
 8010a88:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010a8c:	49b2      	ldr	r1, [pc, #712]	; (8010d58 <__ssvfiscanf_r+0x2dc>)
 8010a8e:	91a0      	str	r1, [sp, #640]	; 0x280
 8010a90:	f10d 0804 	add.w	r8, sp, #4
 8010a94:	49b1      	ldr	r1, [pc, #708]	; (8010d5c <__ssvfiscanf_r+0x2e0>)
 8010a96:	4fb2      	ldr	r7, [pc, #712]	; (8010d60 <__ssvfiscanf_r+0x2e4>)
 8010a98:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8010d64 <__ssvfiscanf_r+0x2e8>
 8010a9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	91a1      	str	r1, [sp, #644]	; 0x284
 8010aa4:	9300      	str	r3, [sp, #0]
 8010aa6:	f892 a000 	ldrb.w	sl, [r2]
 8010aaa:	f1ba 0f00 	cmp.w	sl, #0
 8010aae:	f000 8151 	beq.w	8010d54 <__ssvfiscanf_r+0x2d8>
 8010ab2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010ab6:	f013 0308 	ands.w	r3, r3, #8
 8010aba:	f102 0501 	add.w	r5, r2, #1
 8010abe:	d019      	beq.n	8010af4 <__ssvfiscanf_r+0x78>
 8010ac0:	6863      	ldr	r3, [r4, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	dd0f      	ble.n	8010ae6 <__ssvfiscanf_r+0x6a>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	781a      	ldrb	r2, [r3, #0]
 8010aca:	5cba      	ldrb	r2, [r7, r2]
 8010acc:	0712      	lsls	r2, r2, #28
 8010ace:	d401      	bmi.n	8010ad4 <__ssvfiscanf_r+0x58>
 8010ad0:	462a      	mov	r2, r5
 8010ad2:	e7e8      	b.n	8010aa6 <__ssvfiscanf_r+0x2a>
 8010ad4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010ad6:	3201      	adds	r2, #1
 8010ad8:	9245      	str	r2, [sp, #276]	; 0x114
 8010ada:	6862      	ldr	r2, [r4, #4]
 8010adc:	3301      	adds	r3, #1
 8010ade:	3a01      	subs	r2, #1
 8010ae0:	6062      	str	r2, [r4, #4]
 8010ae2:	6023      	str	r3, [r4, #0]
 8010ae4:	e7ec      	b.n	8010ac0 <__ssvfiscanf_r+0x44>
 8010ae6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ae8:	4621      	mov	r1, r4
 8010aea:	4630      	mov	r0, r6
 8010aec:	4798      	blx	r3
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d0e9      	beq.n	8010ac6 <__ssvfiscanf_r+0x4a>
 8010af2:	e7ed      	b.n	8010ad0 <__ssvfiscanf_r+0x54>
 8010af4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8010af8:	f040 8083 	bne.w	8010c02 <__ssvfiscanf_r+0x186>
 8010afc:	9341      	str	r3, [sp, #260]	; 0x104
 8010afe:	9343      	str	r3, [sp, #268]	; 0x10c
 8010b00:	7853      	ldrb	r3, [r2, #1]
 8010b02:	2b2a      	cmp	r3, #42	; 0x2a
 8010b04:	bf02      	ittt	eq
 8010b06:	2310      	moveq	r3, #16
 8010b08:	1c95      	addeq	r5, r2, #2
 8010b0a:	9341      	streq	r3, [sp, #260]	; 0x104
 8010b0c:	220a      	movs	r2, #10
 8010b0e:	46ab      	mov	fp, r5
 8010b10:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8010b14:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010b18:	2b09      	cmp	r3, #9
 8010b1a:	d91d      	bls.n	8010b58 <__ssvfiscanf_r+0xdc>
 8010b1c:	4891      	ldr	r0, [pc, #580]	; (8010d64 <__ssvfiscanf_r+0x2e8>)
 8010b1e:	2203      	movs	r2, #3
 8010b20:	f7ef fb66 	bl	80001f0 <memchr>
 8010b24:	b140      	cbz	r0, 8010b38 <__ssvfiscanf_r+0xbc>
 8010b26:	2301      	movs	r3, #1
 8010b28:	eba0 0009 	sub.w	r0, r0, r9
 8010b2c:	fa03 f000 	lsl.w	r0, r3, r0
 8010b30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010b32:	4318      	orrs	r0, r3
 8010b34:	9041      	str	r0, [sp, #260]	; 0x104
 8010b36:	465d      	mov	r5, fp
 8010b38:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010b3c:	2b78      	cmp	r3, #120	; 0x78
 8010b3e:	d806      	bhi.n	8010b4e <__ssvfiscanf_r+0xd2>
 8010b40:	2b57      	cmp	r3, #87	; 0x57
 8010b42:	d810      	bhi.n	8010b66 <__ssvfiscanf_r+0xea>
 8010b44:	2b25      	cmp	r3, #37	; 0x25
 8010b46:	d05c      	beq.n	8010c02 <__ssvfiscanf_r+0x186>
 8010b48:	d856      	bhi.n	8010bf8 <__ssvfiscanf_r+0x17c>
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d074      	beq.n	8010c38 <__ssvfiscanf_r+0x1bc>
 8010b4e:	2303      	movs	r3, #3
 8010b50:	9347      	str	r3, [sp, #284]	; 0x11c
 8010b52:	230a      	movs	r3, #10
 8010b54:	9342      	str	r3, [sp, #264]	; 0x108
 8010b56:	e081      	b.n	8010c5c <__ssvfiscanf_r+0x1e0>
 8010b58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010b5a:	fb02 1303 	mla	r3, r2, r3, r1
 8010b5e:	3b30      	subs	r3, #48	; 0x30
 8010b60:	9343      	str	r3, [sp, #268]	; 0x10c
 8010b62:	465d      	mov	r5, fp
 8010b64:	e7d3      	b.n	8010b0e <__ssvfiscanf_r+0x92>
 8010b66:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010b6a:	2a20      	cmp	r2, #32
 8010b6c:	d8ef      	bhi.n	8010b4e <__ssvfiscanf_r+0xd2>
 8010b6e:	a101      	add	r1, pc, #4	; (adr r1, 8010b74 <__ssvfiscanf_r+0xf8>)
 8010b70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b74:	08010c47 	.word	0x08010c47
 8010b78:	08010b4f 	.word	0x08010b4f
 8010b7c:	08010b4f 	.word	0x08010b4f
 8010b80:	08010ca5 	.word	0x08010ca5
 8010b84:	08010b4f 	.word	0x08010b4f
 8010b88:	08010b4f 	.word	0x08010b4f
 8010b8c:	08010b4f 	.word	0x08010b4f
 8010b90:	08010b4f 	.word	0x08010b4f
 8010b94:	08010b4f 	.word	0x08010b4f
 8010b98:	08010b4f 	.word	0x08010b4f
 8010b9c:	08010b4f 	.word	0x08010b4f
 8010ba0:	08010cbb 	.word	0x08010cbb
 8010ba4:	08010c91 	.word	0x08010c91
 8010ba8:	08010bff 	.word	0x08010bff
 8010bac:	08010bff 	.word	0x08010bff
 8010bb0:	08010bff 	.word	0x08010bff
 8010bb4:	08010b4f 	.word	0x08010b4f
 8010bb8:	08010c95 	.word	0x08010c95
 8010bbc:	08010b4f 	.word	0x08010b4f
 8010bc0:	08010b4f 	.word	0x08010b4f
 8010bc4:	08010b4f 	.word	0x08010b4f
 8010bc8:	08010b4f 	.word	0x08010b4f
 8010bcc:	08010ccb 	.word	0x08010ccb
 8010bd0:	08010c9d 	.word	0x08010c9d
 8010bd4:	08010c3f 	.word	0x08010c3f
 8010bd8:	08010b4f 	.word	0x08010b4f
 8010bdc:	08010b4f 	.word	0x08010b4f
 8010be0:	08010cc7 	.word	0x08010cc7
 8010be4:	08010b4f 	.word	0x08010b4f
 8010be8:	08010c91 	.word	0x08010c91
 8010bec:	08010b4f 	.word	0x08010b4f
 8010bf0:	08010b4f 	.word	0x08010b4f
 8010bf4:	08010c47 	.word	0x08010c47
 8010bf8:	3b45      	subs	r3, #69	; 0x45
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d8a7      	bhi.n	8010b4e <__ssvfiscanf_r+0xd2>
 8010bfe:	2305      	movs	r3, #5
 8010c00:	e02b      	b.n	8010c5a <__ssvfiscanf_r+0x1de>
 8010c02:	6863      	ldr	r3, [r4, #4]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	dd0d      	ble.n	8010c24 <__ssvfiscanf_r+0x1a8>
 8010c08:	6823      	ldr	r3, [r4, #0]
 8010c0a:	781a      	ldrb	r2, [r3, #0]
 8010c0c:	4552      	cmp	r2, sl
 8010c0e:	f040 80a1 	bne.w	8010d54 <__ssvfiscanf_r+0x2d8>
 8010c12:	3301      	adds	r3, #1
 8010c14:	6862      	ldr	r2, [r4, #4]
 8010c16:	6023      	str	r3, [r4, #0]
 8010c18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010c1a:	3a01      	subs	r2, #1
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	6062      	str	r2, [r4, #4]
 8010c20:	9345      	str	r3, [sp, #276]	; 0x114
 8010c22:	e755      	b.n	8010ad0 <__ssvfiscanf_r+0x54>
 8010c24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c26:	4621      	mov	r1, r4
 8010c28:	4630      	mov	r0, r6
 8010c2a:	4798      	blx	r3
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	d0eb      	beq.n	8010c08 <__ssvfiscanf_r+0x18c>
 8010c30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010c32:	2800      	cmp	r0, #0
 8010c34:	f040 8084 	bne.w	8010d40 <__ssvfiscanf_r+0x2c4>
 8010c38:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3c:	e086      	b.n	8010d4c <__ssvfiscanf_r+0x2d0>
 8010c3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c40:	f042 0220 	orr.w	r2, r2, #32
 8010c44:	9241      	str	r2, [sp, #260]	; 0x104
 8010c46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c4c:	9241      	str	r2, [sp, #260]	; 0x104
 8010c4e:	2210      	movs	r2, #16
 8010c50:	2b6f      	cmp	r3, #111	; 0x6f
 8010c52:	9242      	str	r2, [sp, #264]	; 0x108
 8010c54:	bf34      	ite	cc
 8010c56:	2303      	movcc	r3, #3
 8010c58:	2304      	movcs	r3, #4
 8010c5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8010c5c:	6863      	ldr	r3, [r4, #4]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	dd41      	ble.n	8010ce6 <__ssvfiscanf_r+0x26a>
 8010c62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c64:	0659      	lsls	r1, r3, #25
 8010c66:	d404      	bmi.n	8010c72 <__ssvfiscanf_r+0x1f6>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	781a      	ldrb	r2, [r3, #0]
 8010c6c:	5cba      	ldrb	r2, [r7, r2]
 8010c6e:	0712      	lsls	r2, r2, #28
 8010c70:	d440      	bmi.n	8010cf4 <__ssvfiscanf_r+0x278>
 8010c72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010c74:	2b02      	cmp	r3, #2
 8010c76:	dc4f      	bgt.n	8010d18 <__ssvfiscanf_r+0x29c>
 8010c78:	466b      	mov	r3, sp
 8010c7a:	4622      	mov	r2, r4
 8010c7c:	a941      	add	r1, sp, #260	; 0x104
 8010c7e:	4630      	mov	r0, r6
 8010c80:	f000 f874 	bl	8010d6c <_scanf_chars>
 8010c84:	2801      	cmp	r0, #1
 8010c86:	d065      	beq.n	8010d54 <__ssvfiscanf_r+0x2d8>
 8010c88:	2802      	cmp	r0, #2
 8010c8a:	f47f af21 	bne.w	8010ad0 <__ssvfiscanf_r+0x54>
 8010c8e:	e7cf      	b.n	8010c30 <__ssvfiscanf_r+0x1b4>
 8010c90:	220a      	movs	r2, #10
 8010c92:	e7dd      	b.n	8010c50 <__ssvfiscanf_r+0x1d4>
 8010c94:	2300      	movs	r3, #0
 8010c96:	9342      	str	r3, [sp, #264]	; 0x108
 8010c98:	2303      	movs	r3, #3
 8010c9a:	e7de      	b.n	8010c5a <__ssvfiscanf_r+0x1de>
 8010c9c:	2308      	movs	r3, #8
 8010c9e:	9342      	str	r3, [sp, #264]	; 0x108
 8010ca0:	2304      	movs	r3, #4
 8010ca2:	e7da      	b.n	8010c5a <__ssvfiscanf_r+0x1de>
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	4640      	mov	r0, r8
 8010ca8:	f000 f9d6 	bl	8011058 <__sccl>
 8010cac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cb2:	9341      	str	r3, [sp, #260]	; 0x104
 8010cb4:	4605      	mov	r5, r0
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e7cf      	b.n	8010c5a <__ssvfiscanf_r+0x1de>
 8010cba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cc0:	9341      	str	r3, [sp, #260]	; 0x104
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	e7c9      	b.n	8010c5a <__ssvfiscanf_r+0x1de>
 8010cc6:	2302      	movs	r3, #2
 8010cc8:	e7c7      	b.n	8010c5a <__ssvfiscanf_r+0x1de>
 8010cca:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010ccc:	06c3      	lsls	r3, r0, #27
 8010cce:	f53f aeff 	bmi.w	8010ad0 <__ssvfiscanf_r+0x54>
 8010cd2:	9b00      	ldr	r3, [sp, #0]
 8010cd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010cd6:	1d19      	adds	r1, r3, #4
 8010cd8:	9100      	str	r1, [sp, #0]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	07c0      	lsls	r0, r0, #31
 8010cde:	bf4c      	ite	mi
 8010ce0:	801a      	strhmi	r2, [r3, #0]
 8010ce2:	601a      	strpl	r2, [r3, #0]
 8010ce4:	e6f4      	b.n	8010ad0 <__ssvfiscanf_r+0x54>
 8010ce6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ce8:	4621      	mov	r1, r4
 8010cea:	4630      	mov	r0, r6
 8010cec:	4798      	blx	r3
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	d0b7      	beq.n	8010c62 <__ssvfiscanf_r+0x1e6>
 8010cf2:	e79d      	b.n	8010c30 <__ssvfiscanf_r+0x1b4>
 8010cf4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010cf6:	3201      	adds	r2, #1
 8010cf8:	9245      	str	r2, [sp, #276]	; 0x114
 8010cfa:	6862      	ldr	r2, [r4, #4]
 8010cfc:	3a01      	subs	r2, #1
 8010cfe:	2a00      	cmp	r2, #0
 8010d00:	6062      	str	r2, [r4, #4]
 8010d02:	dd02      	ble.n	8010d0a <__ssvfiscanf_r+0x28e>
 8010d04:	3301      	adds	r3, #1
 8010d06:	6023      	str	r3, [r4, #0]
 8010d08:	e7ae      	b.n	8010c68 <__ssvfiscanf_r+0x1ec>
 8010d0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	4630      	mov	r0, r6
 8010d10:	4798      	blx	r3
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d0a8      	beq.n	8010c68 <__ssvfiscanf_r+0x1ec>
 8010d16:	e78b      	b.n	8010c30 <__ssvfiscanf_r+0x1b4>
 8010d18:	2b04      	cmp	r3, #4
 8010d1a:	dc06      	bgt.n	8010d2a <__ssvfiscanf_r+0x2ae>
 8010d1c:	466b      	mov	r3, sp
 8010d1e:	4622      	mov	r2, r4
 8010d20:	a941      	add	r1, sp, #260	; 0x104
 8010d22:	4630      	mov	r0, r6
 8010d24:	f000 f87a 	bl	8010e1c <_scanf_i>
 8010d28:	e7ac      	b.n	8010c84 <__ssvfiscanf_r+0x208>
 8010d2a:	4b0f      	ldr	r3, [pc, #60]	; (8010d68 <__ssvfiscanf_r+0x2ec>)
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f43f aecf 	beq.w	8010ad0 <__ssvfiscanf_r+0x54>
 8010d32:	466b      	mov	r3, sp
 8010d34:	4622      	mov	r2, r4
 8010d36:	a941      	add	r1, sp, #260	; 0x104
 8010d38:	4630      	mov	r0, r6
 8010d3a:	f7fc fbcb 	bl	800d4d4 <_scanf_float>
 8010d3e:	e7a1      	b.n	8010c84 <__ssvfiscanf_r+0x208>
 8010d40:	89a3      	ldrh	r3, [r4, #12]
 8010d42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010d46:	bf18      	it	ne
 8010d48:	f04f 30ff 	movne.w	r0, #4294967295
 8010d4c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8010d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d54:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010d56:	e7f9      	b.n	8010d4c <__ssvfiscanf_r+0x2d0>
 8010d58:	080109c9 	.word	0x080109c9
 8010d5c:	08010a43 	.word	0x08010a43
 8010d60:	08012f61 	.word	0x08012f61
 8010d64:	080132da 	.word	0x080132da
 8010d68:	0800d4d5 	.word	0x0800d4d5

08010d6c <_scanf_chars>:
 8010d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d70:	4615      	mov	r5, r2
 8010d72:	688a      	ldr	r2, [r1, #8]
 8010d74:	4680      	mov	r8, r0
 8010d76:	460c      	mov	r4, r1
 8010d78:	b932      	cbnz	r2, 8010d88 <_scanf_chars+0x1c>
 8010d7a:	698a      	ldr	r2, [r1, #24]
 8010d7c:	2a00      	cmp	r2, #0
 8010d7e:	bf0c      	ite	eq
 8010d80:	2201      	moveq	r2, #1
 8010d82:	f04f 32ff 	movne.w	r2, #4294967295
 8010d86:	608a      	str	r2, [r1, #8]
 8010d88:	6822      	ldr	r2, [r4, #0]
 8010d8a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010e18 <_scanf_chars+0xac>
 8010d8e:	06d1      	lsls	r1, r2, #27
 8010d90:	bf5f      	itttt	pl
 8010d92:	681a      	ldrpl	r2, [r3, #0]
 8010d94:	1d11      	addpl	r1, r2, #4
 8010d96:	6019      	strpl	r1, [r3, #0]
 8010d98:	6816      	ldrpl	r6, [r2, #0]
 8010d9a:	2700      	movs	r7, #0
 8010d9c:	69a0      	ldr	r0, [r4, #24]
 8010d9e:	b188      	cbz	r0, 8010dc4 <_scanf_chars+0x58>
 8010da0:	2801      	cmp	r0, #1
 8010da2:	d107      	bne.n	8010db4 <_scanf_chars+0x48>
 8010da4:	682b      	ldr	r3, [r5, #0]
 8010da6:	781a      	ldrb	r2, [r3, #0]
 8010da8:	6963      	ldr	r3, [r4, #20]
 8010daa:	5c9b      	ldrb	r3, [r3, r2]
 8010dac:	b953      	cbnz	r3, 8010dc4 <_scanf_chars+0x58>
 8010dae:	bb27      	cbnz	r7, 8010dfa <_scanf_chars+0x8e>
 8010db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010db4:	2802      	cmp	r0, #2
 8010db6:	d120      	bne.n	8010dfa <_scanf_chars+0x8e>
 8010db8:	682b      	ldr	r3, [r5, #0]
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010dc0:	071b      	lsls	r3, r3, #28
 8010dc2:	d41a      	bmi.n	8010dfa <_scanf_chars+0x8e>
 8010dc4:	6823      	ldr	r3, [r4, #0]
 8010dc6:	06da      	lsls	r2, r3, #27
 8010dc8:	bf5e      	ittt	pl
 8010dca:	682b      	ldrpl	r3, [r5, #0]
 8010dcc:	781b      	ldrbpl	r3, [r3, #0]
 8010dce:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010dd2:	682a      	ldr	r2, [r5, #0]
 8010dd4:	686b      	ldr	r3, [r5, #4]
 8010dd6:	3201      	adds	r2, #1
 8010dd8:	602a      	str	r2, [r5, #0]
 8010dda:	68a2      	ldr	r2, [r4, #8]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	3a01      	subs	r2, #1
 8010de0:	606b      	str	r3, [r5, #4]
 8010de2:	3701      	adds	r7, #1
 8010de4:	60a2      	str	r2, [r4, #8]
 8010de6:	b142      	cbz	r2, 8010dfa <_scanf_chars+0x8e>
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	dcd7      	bgt.n	8010d9c <_scanf_chars+0x30>
 8010dec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010df0:	4629      	mov	r1, r5
 8010df2:	4640      	mov	r0, r8
 8010df4:	4798      	blx	r3
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d0d0      	beq.n	8010d9c <_scanf_chars+0x30>
 8010dfa:	6823      	ldr	r3, [r4, #0]
 8010dfc:	f013 0310 	ands.w	r3, r3, #16
 8010e00:	d105      	bne.n	8010e0e <_scanf_chars+0xa2>
 8010e02:	68e2      	ldr	r2, [r4, #12]
 8010e04:	3201      	adds	r2, #1
 8010e06:	60e2      	str	r2, [r4, #12]
 8010e08:	69a2      	ldr	r2, [r4, #24]
 8010e0a:	b102      	cbz	r2, 8010e0e <_scanf_chars+0xa2>
 8010e0c:	7033      	strb	r3, [r6, #0]
 8010e0e:	6923      	ldr	r3, [r4, #16]
 8010e10:	441f      	add	r7, r3
 8010e12:	6127      	str	r7, [r4, #16]
 8010e14:	2000      	movs	r0, #0
 8010e16:	e7cb      	b.n	8010db0 <_scanf_chars+0x44>
 8010e18:	08012f61 	.word	0x08012f61

08010e1c <_scanf_i>:
 8010e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e20:	4698      	mov	r8, r3
 8010e22:	4b74      	ldr	r3, [pc, #464]	; (8010ff4 <_scanf_i+0x1d8>)
 8010e24:	460c      	mov	r4, r1
 8010e26:	4682      	mov	sl, r0
 8010e28:	4616      	mov	r6, r2
 8010e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e2e:	b087      	sub	sp, #28
 8010e30:	ab03      	add	r3, sp, #12
 8010e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010e36:	4b70      	ldr	r3, [pc, #448]	; (8010ff8 <_scanf_i+0x1dc>)
 8010e38:	69a1      	ldr	r1, [r4, #24]
 8010e3a:	4a70      	ldr	r2, [pc, #448]	; (8010ffc <_scanf_i+0x1e0>)
 8010e3c:	2903      	cmp	r1, #3
 8010e3e:	bf18      	it	ne
 8010e40:	461a      	movne	r2, r3
 8010e42:	68a3      	ldr	r3, [r4, #8]
 8010e44:	9201      	str	r2, [sp, #4]
 8010e46:	1e5a      	subs	r2, r3, #1
 8010e48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010e4c:	bf88      	it	hi
 8010e4e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010e52:	4627      	mov	r7, r4
 8010e54:	bf82      	ittt	hi
 8010e56:	eb03 0905 	addhi.w	r9, r3, r5
 8010e5a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010e5e:	60a3      	strhi	r3, [r4, #8]
 8010e60:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010e64:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010e68:	bf98      	it	ls
 8010e6a:	f04f 0900 	movls.w	r9, #0
 8010e6e:	6023      	str	r3, [r4, #0]
 8010e70:	463d      	mov	r5, r7
 8010e72:	f04f 0b00 	mov.w	fp, #0
 8010e76:	6831      	ldr	r1, [r6, #0]
 8010e78:	ab03      	add	r3, sp, #12
 8010e7a:	7809      	ldrb	r1, [r1, #0]
 8010e7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010e80:	2202      	movs	r2, #2
 8010e82:	f7ef f9b5 	bl	80001f0 <memchr>
 8010e86:	b328      	cbz	r0, 8010ed4 <_scanf_i+0xb8>
 8010e88:	f1bb 0f01 	cmp.w	fp, #1
 8010e8c:	d159      	bne.n	8010f42 <_scanf_i+0x126>
 8010e8e:	6862      	ldr	r2, [r4, #4]
 8010e90:	b92a      	cbnz	r2, 8010e9e <_scanf_i+0x82>
 8010e92:	6822      	ldr	r2, [r4, #0]
 8010e94:	2308      	movs	r3, #8
 8010e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e9a:	6063      	str	r3, [r4, #4]
 8010e9c:	6022      	str	r2, [r4, #0]
 8010e9e:	6822      	ldr	r2, [r4, #0]
 8010ea0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010ea4:	6022      	str	r2, [r4, #0]
 8010ea6:	68a2      	ldr	r2, [r4, #8]
 8010ea8:	1e51      	subs	r1, r2, #1
 8010eaa:	60a1      	str	r1, [r4, #8]
 8010eac:	b192      	cbz	r2, 8010ed4 <_scanf_i+0xb8>
 8010eae:	6832      	ldr	r2, [r6, #0]
 8010eb0:	1c51      	adds	r1, r2, #1
 8010eb2:	6031      	str	r1, [r6, #0]
 8010eb4:	7812      	ldrb	r2, [r2, #0]
 8010eb6:	f805 2b01 	strb.w	r2, [r5], #1
 8010eba:	6872      	ldr	r2, [r6, #4]
 8010ebc:	3a01      	subs	r2, #1
 8010ebe:	2a00      	cmp	r2, #0
 8010ec0:	6072      	str	r2, [r6, #4]
 8010ec2:	dc07      	bgt.n	8010ed4 <_scanf_i+0xb8>
 8010ec4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010ec8:	4631      	mov	r1, r6
 8010eca:	4650      	mov	r0, sl
 8010ecc:	4790      	blx	r2
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	f040 8085 	bne.w	8010fde <_scanf_i+0x1c2>
 8010ed4:	f10b 0b01 	add.w	fp, fp, #1
 8010ed8:	f1bb 0f03 	cmp.w	fp, #3
 8010edc:	d1cb      	bne.n	8010e76 <_scanf_i+0x5a>
 8010ede:	6863      	ldr	r3, [r4, #4]
 8010ee0:	b90b      	cbnz	r3, 8010ee6 <_scanf_i+0xca>
 8010ee2:	230a      	movs	r3, #10
 8010ee4:	6063      	str	r3, [r4, #4]
 8010ee6:	6863      	ldr	r3, [r4, #4]
 8010ee8:	4945      	ldr	r1, [pc, #276]	; (8011000 <_scanf_i+0x1e4>)
 8010eea:	6960      	ldr	r0, [r4, #20]
 8010eec:	1ac9      	subs	r1, r1, r3
 8010eee:	f000 f8b3 	bl	8011058 <__sccl>
 8010ef2:	f04f 0b00 	mov.w	fp, #0
 8010ef6:	68a3      	ldr	r3, [r4, #8]
 8010ef8:	6822      	ldr	r2, [r4, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d03d      	beq.n	8010f7a <_scanf_i+0x15e>
 8010efe:	6831      	ldr	r1, [r6, #0]
 8010f00:	6960      	ldr	r0, [r4, #20]
 8010f02:	f891 c000 	ldrb.w	ip, [r1]
 8010f06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d035      	beq.n	8010f7a <_scanf_i+0x15e>
 8010f0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010f12:	d124      	bne.n	8010f5e <_scanf_i+0x142>
 8010f14:	0510      	lsls	r0, r2, #20
 8010f16:	d522      	bpl.n	8010f5e <_scanf_i+0x142>
 8010f18:	f10b 0b01 	add.w	fp, fp, #1
 8010f1c:	f1b9 0f00 	cmp.w	r9, #0
 8010f20:	d003      	beq.n	8010f2a <_scanf_i+0x10e>
 8010f22:	3301      	adds	r3, #1
 8010f24:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f28:	60a3      	str	r3, [r4, #8]
 8010f2a:	6873      	ldr	r3, [r6, #4]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	6073      	str	r3, [r6, #4]
 8010f32:	dd1b      	ble.n	8010f6c <_scanf_i+0x150>
 8010f34:	6833      	ldr	r3, [r6, #0]
 8010f36:	3301      	adds	r3, #1
 8010f38:	6033      	str	r3, [r6, #0]
 8010f3a:	68a3      	ldr	r3, [r4, #8]
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	60a3      	str	r3, [r4, #8]
 8010f40:	e7d9      	b.n	8010ef6 <_scanf_i+0xda>
 8010f42:	f1bb 0f02 	cmp.w	fp, #2
 8010f46:	d1ae      	bne.n	8010ea6 <_scanf_i+0x8a>
 8010f48:	6822      	ldr	r2, [r4, #0]
 8010f4a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010f4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010f52:	d1bf      	bne.n	8010ed4 <_scanf_i+0xb8>
 8010f54:	2310      	movs	r3, #16
 8010f56:	6063      	str	r3, [r4, #4]
 8010f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f5c:	e7a2      	b.n	8010ea4 <_scanf_i+0x88>
 8010f5e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010f62:	6022      	str	r2, [r4, #0]
 8010f64:	780b      	ldrb	r3, [r1, #0]
 8010f66:	f805 3b01 	strb.w	r3, [r5], #1
 8010f6a:	e7de      	b.n	8010f2a <_scanf_i+0x10e>
 8010f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f70:	4631      	mov	r1, r6
 8010f72:	4650      	mov	r0, sl
 8010f74:	4798      	blx	r3
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d0df      	beq.n	8010f3a <_scanf_i+0x11e>
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	05d9      	lsls	r1, r3, #23
 8010f7e:	d50d      	bpl.n	8010f9c <_scanf_i+0x180>
 8010f80:	42bd      	cmp	r5, r7
 8010f82:	d909      	bls.n	8010f98 <_scanf_i+0x17c>
 8010f84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f8c:	4632      	mov	r2, r6
 8010f8e:	4650      	mov	r0, sl
 8010f90:	4798      	blx	r3
 8010f92:	f105 39ff 	add.w	r9, r5, #4294967295
 8010f96:	464d      	mov	r5, r9
 8010f98:	42bd      	cmp	r5, r7
 8010f9a:	d028      	beq.n	8010fee <_scanf_i+0x1d2>
 8010f9c:	6822      	ldr	r2, [r4, #0]
 8010f9e:	f012 0210 	ands.w	r2, r2, #16
 8010fa2:	d113      	bne.n	8010fcc <_scanf_i+0x1b0>
 8010fa4:	702a      	strb	r2, [r5, #0]
 8010fa6:	6863      	ldr	r3, [r4, #4]
 8010fa8:	9e01      	ldr	r6, [sp, #4]
 8010faa:	4639      	mov	r1, r7
 8010fac:	4650      	mov	r0, sl
 8010fae:	47b0      	blx	r6
 8010fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8010fb4:	6821      	ldr	r1, [r4, #0]
 8010fb6:	1d1a      	adds	r2, r3, #4
 8010fb8:	f8c8 2000 	str.w	r2, [r8]
 8010fbc:	f011 0f20 	tst.w	r1, #32
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	d00f      	beq.n	8010fe4 <_scanf_i+0x1c8>
 8010fc4:	6018      	str	r0, [r3, #0]
 8010fc6:	68e3      	ldr	r3, [r4, #12]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	60e3      	str	r3, [r4, #12]
 8010fcc:	1bed      	subs	r5, r5, r7
 8010fce:	44ab      	add	fp, r5
 8010fd0:	6925      	ldr	r5, [r4, #16]
 8010fd2:	445d      	add	r5, fp
 8010fd4:	6125      	str	r5, [r4, #16]
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	b007      	add	sp, #28
 8010fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fde:	f04f 0b00 	mov.w	fp, #0
 8010fe2:	e7ca      	b.n	8010f7a <_scanf_i+0x15e>
 8010fe4:	07ca      	lsls	r2, r1, #31
 8010fe6:	bf4c      	ite	mi
 8010fe8:	8018      	strhmi	r0, [r3, #0]
 8010fea:	6018      	strpl	r0, [r3, #0]
 8010fec:	e7eb      	b.n	8010fc6 <_scanf_i+0x1aa>
 8010fee:	2001      	movs	r0, #1
 8010ff0:	e7f2      	b.n	8010fd8 <_scanf_i+0x1bc>
 8010ff2:	bf00      	nop
 8010ff4:	080120e8 	.word	0x080120e8
 8010ff8:	080111e9 	.word	0x080111e9
 8010ffc:	0800e7b1 	.word	0x0800e7b1
 8011000:	080132fe 	.word	0x080132fe

08011004 <_read_r>:
 8011004:	b538      	push	{r3, r4, r5, lr}
 8011006:	4d07      	ldr	r5, [pc, #28]	; (8011024 <_read_r+0x20>)
 8011008:	4604      	mov	r4, r0
 801100a:	4608      	mov	r0, r1
 801100c:	4611      	mov	r1, r2
 801100e:	2200      	movs	r2, #0
 8011010:	602a      	str	r2, [r5, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	f7f0 ffc2 	bl	8001f9c <_read>
 8011018:	1c43      	adds	r3, r0, #1
 801101a:	d102      	bne.n	8011022 <_read_r+0x1e>
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	b103      	cbz	r3, 8011022 <_read_r+0x1e>
 8011020:	6023      	str	r3, [r4, #0]
 8011022:	bd38      	pop	{r3, r4, r5, pc}
 8011024:	200061d4 	.word	0x200061d4

08011028 <nan>:
 8011028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011030 <nan+0x8>
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	00000000 	.word	0x00000000
 8011034:	7ff80000 	.word	0x7ff80000

08011038 <_sbrk_r>:
 8011038:	b538      	push	{r3, r4, r5, lr}
 801103a:	4d06      	ldr	r5, [pc, #24]	; (8011054 <_sbrk_r+0x1c>)
 801103c:	2300      	movs	r3, #0
 801103e:	4604      	mov	r4, r0
 8011040:	4608      	mov	r0, r1
 8011042:	602b      	str	r3, [r5, #0]
 8011044:	f7f1 f818 	bl	8002078 <_sbrk>
 8011048:	1c43      	adds	r3, r0, #1
 801104a:	d102      	bne.n	8011052 <_sbrk_r+0x1a>
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	b103      	cbz	r3, 8011052 <_sbrk_r+0x1a>
 8011050:	6023      	str	r3, [r4, #0]
 8011052:	bd38      	pop	{r3, r4, r5, pc}
 8011054:	200061d4 	.word	0x200061d4

08011058 <__sccl>:
 8011058:	b570      	push	{r4, r5, r6, lr}
 801105a:	780b      	ldrb	r3, [r1, #0]
 801105c:	4604      	mov	r4, r0
 801105e:	2b5e      	cmp	r3, #94	; 0x5e
 8011060:	bf0b      	itete	eq
 8011062:	784b      	ldrbeq	r3, [r1, #1]
 8011064:	1c48      	addne	r0, r1, #1
 8011066:	1c88      	addeq	r0, r1, #2
 8011068:	2200      	movne	r2, #0
 801106a:	bf08      	it	eq
 801106c:	2201      	moveq	r2, #1
 801106e:	1e61      	subs	r1, r4, #1
 8011070:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011074:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011078:	42a9      	cmp	r1, r5
 801107a:	d1fb      	bne.n	8011074 <__sccl+0x1c>
 801107c:	b90b      	cbnz	r3, 8011082 <__sccl+0x2a>
 801107e:	3801      	subs	r0, #1
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	f082 0101 	eor.w	r1, r2, #1
 8011086:	54e1      	strb	r1, [r4, r3]
 8011088:	1c42      	adds	r2, r0, #1
 801108a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801108e:	2d2d      	cmp	r5, #45	; 0x2d
 8011090:	f102 36ff 	add.w	r6, r2, #4294967295
 8011094:	4610      	mov	r0, r2
 8011096:	d006      	beq.n	80110a6 <__sccl+0x4e>
 8011098:	2d5d      	cmp	r5, #93	; 0x5d
 801109a:	d0f1      	beq.n	8011080 <__sccl+0x28>
 801109c:	b90d      	cbnz	r5, 80110a2 <__sccl+0x4a>
 801109e:	4630      	mov	r0, r6
 80110a0:	e7ee      	b.n	8011080 <__sccl+0x28>
 80110a2:	462b      	mov	r3, r5
 80110a4:	e7ef      	b.n	8011086 <__sccl+0x2e>
 80110a6:	7816      	ldrb	r6, [r2, #0]
 80110a8:	2e5d      	cmp	r6, #93	; 0x5d
 80110aa:	d0fa      	beq.n	80110a2 <__sccl+0x4a>
 80110ac:	42b3      	cmp	r3, r6
 80110ae:	dcf8      	bgt.n	80110a2 <__sccl+0x4a>
 80110b0:	4618      	mov	r0, r3
 80110b2:	3001      	adds	r0, #1
 80110b4:	4286      	cmp	r6, r0
 80110b6:	5421      	strb	r1, [r4, r0]
 80110b8:	dcfb      	bgt.n	80110b2 <__sccl+0x5a>
 80110ba:	43d8      	mvns	r0, r3
 80110bc:	4430      	add	r0, r6
 80110be:	1c5d      	adds	r5, r3, #1
 80110c0:	42b3      	cmp	r3, r6
 80110c2:	bfa8      	it	ge
 80110c4:	2000      	movge	r0, #0
 80110c6:	182b      	adds	r3, r5, r0
 80110c8:	3202      	adds	r2, #2
 80110ca:	e7de      	b.n	801108a <__sccl+0x32>

080110cc <strncmp>:
 80110cc:	b510      	push	{r4, lr}
 80110ce:	b16a      	cbz	r2, 80110ec <strncmp+0x20>
 80110d0:	3901      	subs	r1, #1
 80110d2:	1884      	adds	r4, r0, r2
 80110d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80110d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110dc:	4293      	cmp	r3, r2
 80110de:	d103      	bne.n	80110e8 <strncmp+0x1c>
 80110e0:	42a0      	cmp	r0, r4
 80110e2:	d001      	beq.n	80110e8 <strncmp+0x1c>
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d1f5      	bne.n	80110d4 <strncmp+0x8>
 80110e8:	1a98      	subs	r0, r3, r2
 80110ea:	bd10      	pop	{r4, pc}
 80110ec:	4610      	mov	r0, r2
 80110ee:	e7fc      	b.n	80110ea <strncmp+0x1e>

080110f0 <_strtoul_l.isra.0>:
 80110f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110f4:	4e3b      	ldr	r6, [pc, #236]	; (80111e4 <_strtoul_l.isra.0+0xf4>)
 80110f6:	4686      	mov	lr, r0
 80110f8:	468c      	mov	ip, r1
 80110fa:	4660      	mov	r0, ip
 80110fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8011100:	5da5      	ldrb	r5, [r4, r6]
 8011102:	f015 0508 	ands.w	r5, r5, #8
 8011106:	d1f8      	bne.n	80110fa <_strtoul_l.isra.0+0xa>
 8011108:	2c2d      	cmp	r4, #45	; 0x2d
 801110a:	d134      	bne.n	8011176 <_strtoul_l.isra.0+0x86>
 801110c:	f89c 4000 	ldrb.w	r4, [ip]
 8011110:	f04f 0801 	mov.w	r8, #1
 8011114:	f100 0c02 	add.w	ip, r0, #2
 8011118:	2b00      	cmp	r3, #0
 801111a:	d05e      	beq.n	80111da <_strtoul_l.isra.0+0xea>
 801111c:	2b10      	cmp	r3, #16
 801111e:	d10c      	bne.n	801113a <_strtoul_l.isra.0+0x4a>
 8011120:	2c30      	cmp	r4, #48	; 0x30
 8011122:	d10a      	bne.n	801113a <_strtoul_l.isra.0+0x4a>
 8011124:	f89c 0000 	ldrb.w	r0, [ip]
 8011128:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801112c:	2858      	cmp	r0, #88	; 0x58
 801112e:	d14f      	bne.n	80111d0 <_strtoul_l.isra.0+0xe0>
 8011130:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8011134:	2310      	movs	r3, #16
 8011136:	f10c 0c02 	add.w	ip, ip, #2
 801113a:	f04f 37ff 	mov.w	r7, #4294967295
 801113e:	2500      	movs	r5, #0
 8011140:	fbb7 f7f3 	udiv	r7, r7, r3
 8011144:	fb03 f907 	mul.w	r9, r3, r7
 8011148:	ea6f 0909 	mvn.w	r9, r9
 801114c:	4628      	mov	r0, r5
 801114e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8011152:	2e09      	cmp	r6, #9
 8011154:	d818      	bhi.n	8011188 <_strtoul_l.isra.0+0x98>
 8011156:	4634      	mov	r4, r6
 8011158:	42a3      	cmp	r3, r4
 801115a:	dd24      	ble.n	80111a6 <_strtoul_l.isra.0+0xb6>
 801115c:	2d00      	cmp	r5, #0
 801115e:	db1f      	blt.n	80111a0 <_strtoul_l.isra.0+0xb0>
 8011160:	4287      	cmp	r7, r0
 8011162:	d31d      	bcc.n	80111a0 <_strtoul_l.isra.0+0xb0>
 8011164:	d101      	bne.n	801116a <_strtoul_l.isra.0+0x7a>
 8011166:	45a1      	cmp	r9, r4
 8011168:	db1a      	blt.n	80111a0 <_strtoul_l.isra.0+0xb0>
 801116a:	fb00 4003 	mla	r0, r0, r3, r4
 801116e:	2501      	movs	r5, #1
 8011170:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8011174:	e7eb      	b.n	801114e <_strtoul_l.isra.0+0x5e>
 8011176:	2c2b      	cmp	r4, #43	; 0x2b
 8011178:	bf08      	it	eq
 801117a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801117e:	46a8      	mov	r8, r5
 8011180:	bf08      	it	eq
 8011182:	f100 0c02 	addeq.w	ip, r0, #2
 8011186:	e7c7      	b.n	8011118 <_strtoul_l.isra.0+0x28>
 8011188:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801118c:	2e19      	cmp	r6, #25
 801118e:	d801      	bhi.n	8011194 <_strtoul_l.isra.0+0xa4>
 8011190:	3c37      	subs	r4, #55	; 0x37
 8011192:	e7e1      	b.n	8011158 <_strtoul_l.isra.0+0x68>
 8011194:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8011198:	2e19      	cmp	r6, #25
 801119a:	d804      	bhi.n	80111a6 <_strtoul_l.isra.0+0xb6>
 801119c:	3c57      	subs	r4, #87	; 0x57
 801119e:	e7db      	b.n	8011158 <_strtoul_l.isra.0+0x68>
 80111a0:	f04f 35ff 	mov.w	r5, #4294967295
 80111a4:	e7e4      	b.n	8011170 <_strtoul_l.isra.0+0x80>
 80111a6:	2d00      	cmp	r5, #0
 80111a8:	da07      	bge.n	80111ba <_strtoul_l.isra.0+0xca>
 80111aa:	2322      	movs	r3, #34	; 0x22
 80111ac:	f8ce 3000 	str.w	r3, [lr]
 80111b0:	f04f 30ff 	mov.w	r0, #4294967295
 80111b4:	b942      	cbnz	r2, 80111c8 <_strtoul_l.isra.0+0xd8>
 80111b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ba:	f1b8 0f00 	cmp.w	r8, #0
 80111be:	d000      	beq.n	80111c2 <_strtoul_l.isra.0+0xd2>
 80111c0:	4240      	negs	r0, r0
 80111c2:	2a00      	cmp	r2, #0
 80111c4:	d0f7      	beq.n	80111b6 <_strtoul_l.isra.0+0xc6>
 80111c6:	b10d      	cbz	r5, 80111cc <_strtoul_l.isra.0+0xdc>
 80111c8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80111cc:	6011      	str	r1, [r2, #0]
 80111ce:	e7f2      	b.n	80111b6 <_strtoul_l.isra.0+0xc6>
 80111d0:	2430      	movs	r4, #48	; 0x30
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1b1      	bne.n	801113a <_strtoul_l.isra.0+0x4a>
 80111d6:	2308      	movs	r3, #8
 80111d8:	e7af      	b.n	801113a <_strtoul_l.isra.0+0x4a>
 80111da:	2c30      	cmp	r4, #48	; 0x30
 80111dc:	d0a2      	beq.n	8011124 <_strtoul_l.isra.0+0x34>
 80111de:	230a      	movs	r3, #10
 80111e0:	e7ab      	b.n	801113a <_strtoul_l.isra.0+0x4a>
 80111e2:	bf00      	nop
 80111e4:	08012f61 	.word	0x08012f61

080111e8 <_strtoul_r>:
 80111e8:	f7ff bf82 	b.w	80110f0 <_strtoul_l.isra.0>

080111ec <__submore>:
 80111ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f0:	460c      	mov	r4, r1
 80111f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80111f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111f8:	4299      	cmp	r1, r3
 80111fa:	d11d      	bne.n	8011238 <__submore+0x4c>
 80111fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011200:	f7ff fa2c 	bl	801065c <_malloc_r>
 8011204:	b918      	cbnz	r0, 801120e <__submore+0x22>
 8011206:	f04f 30ff 	mov.w	r0, #4294967295
 801120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011212:	63a3      	str	r3, [r4, #56]	; 0x38
 8011214:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011218:	6360      	str	r0, [r4, #52]	; 0x34
 801121a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801121e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011222:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011226:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801122a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801122e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011232:	6020      	str	r0, [r4, #0]
 8011234:	2000      	movs	r0, #0
 8011236:	e7e8      	b.n	801120a <__submore+0x1e>
 8011238:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801123a:	0077      	lsls	r7, r6, #1
 801123c:	463a      	mov	r2, r7
 801123e:	f000 fa2d 	bl	801169c <_realloc_r>
 8011242:	4605      	mov	r5, r0
 8011244:	2800      	cmp	r0, #0
 8011246:	d0de      	beq.n	8011206 <__submore+0x1a>
 8011248:	eb00 0806 	add.w	r8, r0, r6
 801124c:	4601      	mov	r1, r0
 801124e:	4632      	mov	r2, r6
 8011250:	4640      	mov	r0, r8
 8011252:	f7fb fcbf 	bl	800cbd4 <memcpy>
 8011256:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801125a:	f8c4 8000 	str.w	r8, [r4]
 801125e:	e7e9      	b.n	8011234 <__submore+0x48>

08011260 <__ascii_wctomb>:
 8011260:	b149      	cbz	r1, 8011276 <__ascii_wctomb+0x16>
 8011262:	2aff      	cmp	r2, #255	; 0xff
 8011264:	bf85      	ittet	hi
 8011266:	238a      	movhi	r3, #138	; 0x8a
 8011268:	6003      	strhi	r3, [r0, #0]
 801126a:	700a      	strbls	r2, [r1, #0]
 801126c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011270:	bf98      	it	ls
 8011272:	2001      	movls	r0, #1
 8011274:	4770      	bx	lr
 8011276:	4608      	mov	r0, r1
 8011278:	4770      	bx	lr
	...

0801127c <__assert_func>:
 801127c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801127e:	4614      	mov	r4, r2
 8011280:	461a      	mov	r2, r3
 8011282:	4b09      	ldr	r3, [pc, #36]	; (80112a8 <__assert_func+0x2c>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	4605      	mov	r5, r0
 8011288:	68d8      	ldr	r0, [r3, #12]
 801128a:	b14c      	cbz	r4, 80112a0 <__assert_func+0x24>
 801128c:	4b07      	ldr	r3, [pc, #28]	; (80112ac <__assert_func+0x30>)
 801128e:	9100      	str	r1, [sp, #0]
 8011290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011294:	4906      	ldr	r1, [pc, #24]	; (80112b0 <__assert_func+0x34>)
 8011296:	462b      	mov	r3, r5
 8011298:	f000 f9a6 	bl	80115e8 <fiprintf>
 801129c:	f000 fc3e 	bl	8011b1c <abort>
 80112a0:	4b04      	ldr	r3, [pc, #16]	; (80112b4 <__assert_func+0x38>)
 80112a2:	461c      	mov	r4, r3
 80112a4:	e7f3      	b.n	801128e <__assert_func+0x12>
 80112a6:	bf00      	nop
 80112a8:	200000e8 	.word	0x200000e8
 80112ac:	08013300 	.word	0x08013300
 80112b0:	0801330d 	.word	0x0801330d
 80112b4:	0801333b 	.word	0x0801333b

080112b8 <__sflush_r>:
 80112b8:	898a      	ldrh	r2, [r1, #12]
 80112ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112be:	4605      	mov	r5, r0
 80112c0:	0710      	lsls	r0, r2, #28
 80112c2:	460c      	mov	r4, r1
 80112c4:	d458      	bmi.n	8011378 <__sflush_r+0xc0>
 80112c6:	684b      	ldr	r3, [r1, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	dc05      	bgt.n	80112d8 <__sflush_r+0x20>
 80112cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	dc02      	bgt.n	80112d8 <__sflush_r+0x20>
 80112d2:	2000      	movs	r0, #0
 80112d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112da:	2e00      	cmp	r6, #0
 80112dc:	d0f9      	beq.n	80112d2 <__sflush_r+0x1a>
 80112de:	2300      	movs	r3, #0
 80112e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112e4:	682f      	ldr	r7, [r5, #0]
 80112e6:	602b      	str	r3, [r5, #0]
 80112e8:	d032      	beq.n	8011350 <__sflush_r+0x98>
 80112ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112ec:	89a3      	ldrh	r3, [r4, #12]
 80112ee:	075a      	lsls	r2, r3, #29
 80112f0:	d505      	bpl.n	80112fe <__sflush_r+0x46>
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	1ac0      	subs	r0, r0, r3
 80112f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112f8:	b10b      	cbz	r3, 80112fe <__sflush_r+0x46>
 80112fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112fc:	1ac0      	subs	r0, r0, r3
 80112fe:	2300      	movs	r3, #0
 8011300:	4602      	mov	r2, r0
 8011302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011304:	6a21      	ldr	r1, [r4, #32]
 8011306:	4628      	mov	r0, r5
 8011308:	47b0      	blx	r6
 801130a:	1c43      	adds	r3, r0, #1
 801130c:	89a3      	ldrh	r3, [r4, #12]
 801130e:	d106      	bne.n	801131e <__sflush_r+0x66>
 8011310:	6829      	ldr	r1, [r5, #0]
 8011312:	291d      	cmp	r1, #29
 8011314:	d82c      	bhi.n	8011370 <__sflush_r+0xb8>
 8011316:	4a2a      	ldr	r2, [pc, #168]	; (80113c0 <__sflush_r+0x108>)
 8011318:	40ca      	lsrs	r2, r1
 801131a:	07d6      	lsls	r6, r2, #31
 801131c:	d528      	bpl.n	8011370 <__sflush_r+0xb8>
 801131e:	2200      	movs	r2, #0
 8011320:	6062      	str	r2, [r4, #4]
 8011322:	04d9      	lsls	r1, r3, #19
 8011324:	6922      	ldr	r2, [r4, #16]
 8011326:	6022      	str	r2, [r4, #0]
 8011328:	d504      	bpl.n	8011334 <__sflush_r+0x7c>
 801132a:	1c42      	adds	r2, r0, #1
 801132c:	d101      	bne.n	8011332 <__sflush_r+0x7a>
 801132e:	682b      	ldr	r3, [r5, #0]
 8011330:	b903      	cbnz	r3, 8011334 <__sflush_r+0x7c>
 8011332:	6560      	str	r0, [r4, #84]	; 0x54
 8011334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011336:	602f      	str	r7, [r5, #0]
 8011338:	2900      	cmp	r1, #0
 801133a:	d0ca      	beq.n	80112d2 <__sflush_r+0x1a>
 801133c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011340:	4299      	cmp	r1, r3
 8011342:	d002      	beq.n	801134a <__sflush_r+0x92>
 8011344:	4628      	mov	r0, r5
 8011346:	f7ff f939 	bl	80105bc <_free_r>
 801134a:	2000      	movs	r0, #0
 801134c:	6360      	str	r0, [r4, #52]	; 0x34
 801134e:	e7c1      	b.n	80112d4 <__sflush_r+0x1c>
 8011350:	6a21      	ldr	r1, [r4, #32]
 8011352:	2301      	movs	r3, #1
 8011354:	4628      	mov	r0, r5
 8011356:	47b0      	blx	r6
 8011358:	1c41      	adds	r1, r0, #1
 801135a:	d1c7      	bne.n	80112ec <__sflush_r+0x34>
 801135c:	682b      	ldr	r3, [r5, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d0c4      	beq.n	80112ec <__sflush_r+0x34>
 8011362:	2b1d      	cmp	r3, #29
 8011364:	d001      	beq.n	801136a <__sflush_r+0xb2>
 8011366:	2b16      	cmp	r3, #22
 8011368:	d101      	bne.n	801136e <__sflush_r+0xb6>
 801136a:	602f      	str	r7, [r5, #0]
 801136c:	e7b1      	b.n	80112d2 <__sflush_r+0x1a>
 801136e:	89a3      	ldrh	r3, [r4, #12]
 8011370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011374:	81a3      	strh	r3, [r4, #12]
 8011376:	e7ad      	b.n	80112d4 <__sflush_r+0x1c>
 8011378:	690f      	ldr	r7, [r1, #16]
 801137a:	2f00      	cmp	r7, #0
 801137c:	d0a9      	beq.n	80112d2 <__sflush_r+0x1a>
 801137e:	0793      	lsls	r3, r2, #30
 8011380:	680e      	ldr	r6, [r1, #0]
 8011382:	bf08      	it	eq
 8011384:	694b      	ldreq	r3, [r1, #20]
 8011386:	600f      	str	r7, [r1, #0]
 8011388:	bf18      	it	ne
 801138a:	2300      	movne	r3, #0
 801138c:	eba6 0807 	sub.w	r8, r6, r7
 8011390:	608b      	str	r3, [r1, #8]
 8011392:	f1b8 0f00 	cmp.w	r8, #0
 8011396:	dd9c      	ble.n	80112d2 <__sflush_r+0x1a>
 8011398:	6a21      	ldr	r1, [r4, #32]
 801139a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801139c:	4643      	mov	r3, r8
 801139e:	463a      	mov	r2, r7
 80113a0:	4628      	mov	r0, r5
 80113a2:	47b0      	blx	r6
 80113a4:	2800      	cmp	r0, #0
 80113a6:	dc06      	bgt.n	80113b6 <__sflush_r+0xfe>
 80113a8:	89a3      	ldrh	r3, [r4, #12]
 80113aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ae:	81a3      	strh	r3, [r4, #12]
 80113b0:	f04f 30ff 	mov.w	r0, #4294967295
 80113b4:	e78e      	b.n	80112d4 <__sflush_r+0x1c>
 80113b6:	4407      	add	r7, r0
 80113b8:	eba8 0800 	sub.w	r8, r8, r0
 80113bc:	e7e9      	b.n	8011392 <__sflush_r+0xda>
 80113be:	bf00      	nop
 80113c0:	20400001 	.word	0x20400001

080113c4 <_fflush_r>:
 80113c4:	b538      	push	{r3, r4, r5, lr}
 80113c6:	690b      	ldr	r3, [r1, #16]
 80113c8:	4605      	mov	r5, r0
 80113ca:	460c      	mov	r4, r1
 80113cc:	b913      	cbnz	r3, 80113d4 <_fflush_r+0x10>
 80113ce:	2500      	movs	r5, #0
 80113d0:	4628      	mov	r0, r5
 80113d2:	bd38      	pop	{r3, r4, r5, pc}
 80113d4:	b118      	cbz	r0, 80113de <_fflush_r+0x1a>
 80113d6:	6983      	ldr	r3, [r0, #24]
 80113d8:	b90b      	cbnz	r3, 80113de <_fflush_r+0x1a>
 80113da:	f000 f887 	bl	80114ec <__sinit>
 80113de:	4b14      	ldr	r3, [pc, #80]	; (8011430 <_fflush_r+0x6c>)
 80113e0:	429c      	cmp	r4, r3
 80113e2:	d11b      	bne.n	801141c <_fflush_r+0x58>
 80113e4:	686c      	ldr	r4, [r5, #4]
 80113e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d0ef      	beq.n	80113ce <_fflush_r+0xa>
 80113ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113f0:	07d0      	lsls	r0, r2, #31
 80113f2:	d404      	bmi.n	80113fe <_fflush_r+0x3a>
 80113f4:	0599      	lsls	r1, r3, #22
 80113f6:	d402      	bmi.n	80113fe <_fflush_r+0x3a>
 80113f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113fa:	f000 f927 	bl	801164c <__retarget_lock_acquire_recursive>
 80113fe:	4628      	mov	r0, r5
 8011400:	4621      	mov	r1, r4
 8011402:	f7ff ff59 	bl	80112b8 <__sflush_r>
 8011406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011408:	07da      	lsls	r2, r3, #31
 801140a:	4605      	mov	r5, r0
 801140c:	d4e0      	bmi.n	80113d0 <_fflush_r+0xc>
 801140e:	89a3      	ldrh	r3, [r4, #12]
 8011410:	059b      	lsls	r3, r3, #22
 8011412:	d4dd      	bmi.n	80113d0 <_fflush_r+0xc>
 8011414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011416:	f000 f91a 	bl	801164e <__retarget_lock_release_recursive>
 801141a:	e7d9      	b.n	80113d0 <_fflush_r+0xc>
 801141c:	4b05      	ldr	r3, [pc, #20]	; (8011434 <_fflush_r+0x70>)
 801141e:	429c      	cmp	r4, r3
 8011420:	d101      	bne.n	8011426 <_fflush_r+0x62>
 8011422:	68ac      	ldr	r4, [r5, #8]
 8011424:	e7df      	b.n	80113e6 <_fflush_r+0x22>
 8011426:	4b04      	ldr	r3, [pc, #16]	; (8011438 <_fflush_r+0x74>)
 8011428:	429c      	cmp	r4, r3
 801142a:	bf08      	it	eq
 801142c:	68ec      	ldreq	r4, [r5, #12]
 801142e:	e7da      	b.n	80113e6 <_fflush_r+0x22>
 8011430:	0801335c 	.word	0x0801335c
 8011434:	0801337c 	.word	0x0801337c
 8011438:	0801333c 	.word	0x0801333c

0801143c <std>:
 801143c:	2300      	movs	r3, #0
 801143e:	b510      	push	{r4, lr}
 8011440:	4604      	mov	r4, r0
 8011442:	e9c0 3300 	strd	r3, r3, [r0]
 8011446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801144a:	6083      	str	r3, [r0, #8]
 801144c:	8181      	strh	r1, [r0, #12]
 801144e:	6643      	str	r3, [r0, #100]	; 0x64
 8011450:	81c2      	strh	r2, [r0, #14]
 8011452:	6183      	str	r3, [r0, #24]
 8011454:	4619      	mov	r1, r3
 8011456:	2208      	movs	r2, #8
 8011458:	305c      	adds	r0, #92	; 0x5c
 801145a:	f7fb fbc9 	bl	800cbf0 <memset>
 801145e:	4b05      	ldr	r3, [pc, #20]	; (8011474 <std+0x38>)
 8011460:	6263      	str	r3, [r4, #36]	; 0x24
 8011462:	4b05      	ldr	r3, [pc, #20]	; (8011478 <std+0x3c>)
 8011464:	62a3      	str	r3, [r4, #40]	; 0x28
 8011466:	4b05      	ldr	r3, [pc, #20]	; (801147c <std+0x40>)
 8011468:	62e3      	str	r3, [r4, #44]	; 0x2c
 801146a:	4b05      	ldr	r3, [pc, #20]	; (8011480 <std+0x44>)
 801146c:	6224      	str	r4, [r4, #32]
 801146e:	6323      	str	r3, [r4, #48]	; 0x30
 8011470:	bd10      	pop	{r4, pc}
 8011472:	bf00      	nop
 8011474:	0800d999 	.word	0x0800d999
 8011478:	0800d9bf 	.word	0x0800d9bf
 801147c:	0800d9f7 	.word	0x0800d9f7
 8011480:	0800da1b 	.word	0x0800da1b

08011484 <_cleanup_r>:
 8011484:	4901      	ldr	r1, [pc, #4]	; (801148c <_cleanup_r+0x8>)
 8011486:	f000 b8c1 	b.w	801160c <_fwalk_reent>
 801148a:	bf00      	nop
 801148c:	080113c5 	.word	0x080113c5

08011490 <__sfmoreglue>:
 8011490:	b570      	push	{r4, r5, r6, lr}
 8011492:	1e4a      	subs	r2, r1, #1
 8011494:	2568      	movs	r5, #104	; 0x68
 8011496:	4355      	muls	r5, r2
 8011498:	460e      	mov	r6, r1
 801149a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801149e:	f7ff f8dd 	bl	801065c <_malloc_r>
 80114a2:	4604      	mov	r4, r0
 80114a4:	b140      	cbz	r0, 80114b8 <__sfmoreglue+0x28>
 80114a6:	2100      	movs	r1, #0
 80114a8:	e9c0 1600 	strd	r1, r6, [r0]
 80114ac:	300c      	adds	r0, #12
 80114ae:	60a0      	str	r0, [r4, #8]
 80114b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80114b4:	f7fb fb9c 	bl	800cbf0 <memset>
 80114b8:	4620      	mov	r0, r4
 80114ba:	bd70      	pop	{r4, r5, r6, pc}

080114bc <__sfp_lock_acquire>:
 80114bc:	4801      	ldr	r0, [pc, #4]	; (80114c4 <__sfp_lock_acquire+0x8>)
 80114be:	f000 b8c5 	b.w	801164c <__retarget_lock_acquire_recursive>
 80114c2:	bf00      	nop
 80114c4:	200061e0 	.word	0x200061e0

080114c8 <__sfp_lock_release>:
 80114c8:	4801      	ldr	r0, [pc, #4]	; (80114d0 <__sfp_lock_release+0x8>)
 80114ca:	f000 b8c0 	b.w	801164e <__retarget_lock_release_recursive>
 80114ce:	bf00      	nop
 80114d0:	200061e0 	.word	0x200061e0

080114d4 <__sinit_lock_acquire>:
 80114d4:	4801      	ldr	r0, [pc, #4]	; (80114dc <__sinit_lock_acquire+0x8>)
 80114d6:	f000 b8b9 	b.w	801164c <__retarget_lock_acquire_recursive>
 80114da:	bf00      	nop
 80114dc:	200061db 	.word	0x200061db

080114e0 <__sinit_lock_release>:
 80114e0:	4801      	ldr	r0, [pc, #4]	; (80114e8 <__sinit_lock_release+0x8>)
 80114e2:	f000 b8b4 	b.w	801164e <__retarget_lock_release_recursive>
 80114e6:	bf00      	nop
 80114e8:	200061db 	.word	0x200061db

080114ec <__sinit>:
 80114ec:	b510      	push	{r4, lr}
 80114ee:	4604      	mov	r4, r0
 80114f0:	f7ff fff0 	bl	80114d4 <__sinit_lock_acquire>
 80114f4:	69a3      	ldr	r3, [r4, #24]
 80114f6:	b11b      	cbz	r3, 8011500 <__sinit+0x14>
 80114f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114fc:	f7ff bff0 	b.w	80114e0 <__sinit_lock_release>
 8011500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011504:	6523      	str	r3, [r4, #80]	; 0x50
 8011506:	4b13      	ldr	r3, [pc, #76]	; (8011554 <__sinit+0x68>)
 8011508:	4a13      	ldr	r2, [pc, #76]	; (8011558 <__sinit+0x6c>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	62a2      	str	r2, [r4, #40]	; 0x28
 801150e:	42a3      	cmp	r3, r4
 8011510:	bf04      	itt	eq
 8011512:	2301      	moveq	r3, #1
 8011514:	61a3      	streq	r3, [r4, #24]
 8011516:	4620      	mov	r0, r4
 8011518:	f000 f820 	bl	801155c <__sfp>
 801151c:	6060      	str	r0, [r4, #4]
 801151e:	4620      	mov	r0, r4
 8011520:	f000 f81c 	bl	801155c <__sfp>
 8011524:	60a0      	str	r0, [r4, #8]
 8011526:	4620      	mov	r0, r4
 8011528:	f000 f818 	bl	801155c <__sfp>
 801152c:	2200      	movs	r2, #0
 801152e:	60e0      	str	r0, [r4, #12]
 8011530:	2104      	movs	r1, #4
 8011532:	6860      	ldr	r0, [r4, #4]
 8011534:	f7ff ff82 	bl	801143c <std>
 8011538:	68a0      	ldr	r0, [r4, #8]
 801153a:	2201      	movs	r2, #1
 801153c:	2109      	movs	r1, #9
 801153e:	f7ff ff7d 	bl	801143c <std>
 8011542:	68e0      	ldr	r0, [r4, #12]
 8011544:	2202      	movs	r2, #2
 8011546:	2112      	movs	r1, #18
 8011548:	f7ff ff78 	bl	801143c <std>
 801154c:	2301      	movs	r3, #1
 801154e:	61a3      	str	r3, [r4, #24]
 8011550:	e7d2      	b.n	80114f8 <__sinit+0xc>
 8011552:	bf00      	nop
 8011554:	08012ed4 	.word	0x08012ed4
 8011558:	08011485 	.word	0x08011485

0801155c <__sfp>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	4607      	mov	r7, r0
 8011560:	f7ff ffac 	bl	80114bc <__sfp_lock_acquire>
 8011564:	4b1e      	ldr	r3, [pc, #120]	; (80115e0 <__sfp+0x84>)
 8011566:	681e      	ldr	r6, [r3, #0]
 8011568:	69b3      	ldr	r3, [r6, #24]
 801156a:	b913      	cbnz	r3, 8011572 <__sfp+0x16>
 801156c:	4630      	mov	r0, r6
 801156e:	f7ff ffbd 	bl	80114ec <__sinit>
 8011572:	3648      	adds	r6, #72	; 0x48
 8011574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011578:	3b01      	subs	r3, #1
 801157a:	d503      	bpl.n	8011584 <__sfp+0x28>
 801157c:	6833      	ldr	r3, [r6, #0]
 801157e:	b30b      	cbz	r3, 80115c4 <__sfp+0x68>
 8011580:	6836      	ldr	r6, [r6, #0]
 8011582:	e7f7      	b.n	8011574 <__sfp+0x18>
 8011584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011588:	b9d5      	cbnz	r5, 80115c0 <__sfp+0x64>
 801158a:	4b16      	ldr	r3, [pc, #88]	; (80115e4 <__sfp+0x88>)
 801158c:	60e3      	str	r3, [r4, #12]
 801158e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011592:	6665      	str	r5, [r4, #100]	; 0x64
 8011594:	f000 f859 	bl	801164a <__retarget_lock_init_recursive>
 8011598:	f7ff ff96 	bl	80114c8 <__sfp_lock_release>
 801159c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80115a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80115a4:	6025      	str	r5, [r4, #0]
 80115a6:	61a5      	str	r5, [r4, #24]
 80115a8:	2208      	movs	r2, #8
 80115aa:	4629      	mov	r1, r5
 80115ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80115b0:	f7fb fb1e 	bl	800cbf0 <memset>
 80115b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115bc:	4620      	mov	r0, r4
 80115be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115c0:	3468      	adds	r4, #104	; 0x68
 80115c2:	e7d9      	b.n	8011578 <__sfp+0x1c>
 80115c4:	2104      	movs	r1, #4
 80115c6:	4638      	mov	r0, r7
 80115c8:	f7ff ff62 	bl	8011490 <__sfmoreglue>
 80115cc:	4604      	mov	r4, r0
 80115ce:	6030      	str	r0, [r6, #0]
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d1d5      	bne.n	8011580 <__sfp+0x24>
 80115d4:	f7ff ff78 	bl	80114c8 <__sfp_lock_release>
 80115d8:	230c      	movs	r3, #12
 80115da:	603b      	str	r3, [r7, #0]
 80115dc:	e7ee      	b.n	80115bc <__sfp+0x60>
 80115de:	bf00      	nop
 80115e0:	08012ed4 	.word	0x08012ed4
 80115e4:	ffff0001 	.word	0xffff0001

080115e8 <fiprintf>:
 80115e8:	b40e      	push	{r1, r2, r3}
 80115ea:	b503      	push	{r0, r1, lr}
 80115ec:	4601      	mov	r1, r0
 80115ee:	ab03      	add	r3, sp, #12
 80115f0:	4805      	ldr	r0, [pc, #20]	; (8011608 <fiprintf+0x20>)
 80115f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115f6:	6800      	ldr	r0, [r0, #0]
 80115f8:	9301      	str	r3, [sp, #4]
 80115fa:	f000 f89f 	bl	801173c <_vfiprintf_r>
 80115fe:	b002      	add	sp, #8
 8011600:	f85d eb04 	ldr.w	lr, [sp], #4
 8011604:	b003      	add	sp, #12
 8011606:	4770      	bx	lr
 8011608:	200000e8 	.word	0x200000e8

0801160c <_fwalk_reent>:
 801160c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011610:	4606      	mov	r6, r0
 8011612:	4688      	mov	r8, r1
 8011614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011618:	2700      	movs	r7, #0
 801161a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801161e:	f1b9 0901 	subs.w	r9, r9, #1
 8011622:	d505      	bpl.n	8011630 <_fwalk_reent+0x24>
 8011624:	6824      	ldr	r4, [r4, #0]
 8011626:	2c00      	cmp	r4, #0
 8011628:	d1f7      	bne.n	801161a <_fwalk_reent+0xe>
 801162a:	4638      	mov	r0, r7
 801162c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011630:	89ab      	ldrh	r3, [r5, #12]
 8011632:	2b01      	cmp	r3, #1
 8011634:	d907      	bls.n	8011646 <_fwalk_reent+0x3a>
 8011636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801163a:	3301      	adds	r3, #1
 801163c:	d003      	beq.n	8011646 <_fwalk_reent+0x3a>
 801163e:	4629      	mov	r1, r5
 8011640:	4630      	mov	r0, r6
 8011642:	47c0      	blx	r8
 8011644:	4307      	orrs	r7, r0
 8011646:	3568      	adds	r5, #104	; 0x68
 8011648:	e7e9      	b.n	801161e <_fwalk_reent+0x12>

0801164a <__retarget_lock_init_recursive>:
 801164a:	4770      	bx	lr

0801164c <__retarget_lock_acquire_recursive>:
 801164c:	4770      	bx	lr

0801164e <__retarget_lock_release_recursive>:
 801164e:	4770      	bx	lr

08011650 <memmove>:
 8011650:	4288      	cmp	r0, r1
 8011652:	b510      	push	{r4, lr}
 8011654:	eb01 0402 	add.w	r4, r1, r2
 8011658:	d902      	bls.n	8011660 <memmove+0x10>
 801165a:	4284      	cmp	r4, r0
 801165c:	4623      	mov	r3, r4
 801165e:	d807      	bhi.n	8011670 <memmove+0x20>
 8011660:	1e43      	subs	r3, r0, #1
 8011662:	42a1      	cmp	r1, r4
 8011664:	d008      	beq.n	8011678 <memmove+0x28>
 8011666:	f811 2b01 	ldrb.w	r2, [r1], #1
 801166a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801166e:	e7f8      	b.n	8011662 <memmove+0x12>
 8011670:	4402      	add	r2, r0
 8011672:	4601      	mov	r1, r0
 8011674:	428a      	cmp	r2, r1
 8011676:	d100      	bne.n	801167a <memmove+0x2a>
 8011678:	bd10      	pop	{r4, pc}
 801167a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801167e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011682:	e7f7      	b.n	8011674 <memmove+0x24>

08011684 <__malloc_lock>:
 8011684:	4801      	ldr	r0, [pc, #4]	; (801168c <__malloc_lock+0x8>)
 8011686:	f7ff bfe1 	b.w	801164c <__retarget_lock_acquire_recursive>
 801168a:	bf00      	nop
 801168c:	200061dc 	.word	0x200061dc

08011690 <__malloc_unlock>:
 8011690:	4801      	ldr	r0, [pc, #4]	; (8011698 <__malloc_unlock+0x8>)
 8011692:	f7ff bfdc 	b.w	801164e <__retarget_lock_release_recursive>
 8011696:	bf00      	nop
 8011698:	200061dc 	.word	0x200061dc

0801169c <_realloc_r>:
 801169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169e:	4607      	mov	r7, r0
 80116a0:	4614      	mov	r4, r2
 80116a2:	460e      	mov	r6, r1
 80116a4:	b921      	cbnz	r1, 80116b0 <_realloc_r+0x14>
 80116a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80116aa:	4611      	mov	r1, r2
 80116ac:	f7fe bfd6 	b.w	801065c <_malloc_r>
 80116b0:	b922      	cbnz	r2, 80116bc <_realloc_r+0x20>
 80116b2:	f7fe ff83 	bl	80105bc <_free_r>
 80116b6:	4625      	mov	r5, r4
 80116b8:	4628      	mov	r0, r5
 80116ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116bc:	f000 fa9a 	bl	8011bf4 <_malloc_usable_size_r>
 80116c0:	42a0      	cmp	r0, r4
 80116c2:	d20f      	bcs.n	80116e4 <_realloc_r+0x48>
 80116c4:	4621      	mov	r1, r4
 80116c6:	4638      	mov	r0, r7
 80116c8:	f7fe ffc8 	bl	801065c <_malloc_r>
 80116cc:	4605      	mov	r5, r0
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d0f2      	beq.n	80116b8 <_realloc_r+0x1c>
 80116d2:	4631      	mov	r1, r6
 80116d4:	4622      	mov	r2, r4
 80116d6:	f7fb fa7d 	bl	800cbd4 <memcpy>
 80116da:	4631      	mov	r1, r6
 80116dc:	4638      	mov	r0, r7
 80116de:	f7fe ff6d 	bl	80105bc <_free_r>
 80116e2:	e7e9      	b.n	80116b8 <_realloc_r+0x1c>
 80116e4:	4635      	mov	r5, r6
 80116e6:	e7e7      	b.n	80116b8 <_realloc_r+0x1c>

080116e8 <__sfputc_r>:
 80116e8:	6893      	ldr	r3, [r2, #8]
 80116ea:	3b01      	subs	r3, #1
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	b410      	push	{r4}
 80116f0:	6093      	str	r3, [r2, #8]
 80116f2:	da08      	bge.n	8011706 <__sfputc_r+0x1e>
 80116f4:	6994      	ldr	r4, [r2, #24]
 80116f6:	42a3      	cmp	r3, r4
 80116f8:	db01      	blt.n	80116fe <__sfputc_r+0x16>
 80116fa:	290a      	cmp	r1, #10
 80116fc:	d103      	bne.n	8011706 <__sfputc_r+0x1e>
 80116fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011702:	f000 b94b 	b.w	801199c <__swbuf_r>
 8011706:	6813      	ldr	r3, [r2, #0]
 8011708:	1c58      	adds	r0, r3, #1
 801170a:	6010      	str	r0, [r2, #0]
 801170c:	7019      	strb	r1, [r3, #0]
 801170e:	4608      	mov	r0, r1
 8011710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011714:	4770      	bx	lr

08011716 <__sfputs_r>:
 8011716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011718:	4606      	mov	r6, r0
 801171a:	460f      	mov	r7, r1
 801171c:	4614      	mov	r4, r2
 801171e:	18d5      	adds	r5, r2, r3
 8011720:	42ac      	cmp	r4, r5
 8011722:	d101      	bne.n	8011728 <__sfputs_r+0x12>
 8011724:	2000      	movs	r0, #0
 8011726:	e007      	b.n	8011738 <__sfputs_r+0x22>
 8011728:	f814 1b01 	ldrb.w	r1, [r4], #1
 801172c:	463a      	mov	r2, r7
 801172e:	4630      	mov	r0, r6
 8011730:	f7ff ffda 	bl	80116e8 <__sfputc_r>
 8011734:	1c43      	adds	r3, r0, #1
 8011736:	d1f3      	bne.n	8011720 <__sfputs_r+0xa>
 8011738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801173c <_vfiprintf_r>:
 801173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011740:	460d      	mov	r5, r1
 8011742:	b09d      	sub	sp, #116	; 0x74
 8011744:	4614      	mov	r4, r2
 8011746:	4698      	mov	r8, r3
 8011748:	4606      	mov	r6, r0
 801174a:	b118      	cbz	r0, 8011754 <_vfiprintf_r+0x18>
 801174c:	6983      	ldr	r3, [r0, #24]
 801174e:	b90b      	cbnz	r3, 8011754 <_vfiprintf_r+0x18>
 8011750:	f7ff fecc 	bl	80114ec <__sinit>
 8011754:	4b89      	ldr	r3, [pc, #548]	; (801197c <_vfiprintf_r+0x240>)
 8011756:	429d      	cmp	r5, r3
 8011758:	d11b      	bne.n	8011792 <_vfiprintf_r+0x56>
 801175a:	6875      	ldr	r5, [r6, #4]
 801175c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801175e:	07d9      	lsls	r1, r3, #31
 8011760:	d405      	bmi.n	801176e <_vfiprintf_r+0x32>
 8011762:	89ab      	ldrh	r3, [r5, #12]
 8011764:	059a      	lsls	r2, r3, #22
 8011766:	d402      	bmi.n	801176e <_vfiprintf_r+0x32>
 8011768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801176a:	f7ff ff6f 	bl	801164c <__retarget_lock_acquire_recursive>
 801176e:	89ab      	ldrh	r3, [r5, #12]
 8011770:	071b      	lsls	r3, r3, #28
 8011772:	d501      	bpl.n	8011778 <_vfiprintf_r+0x3c>
 8011774:	692b      	ldr	r3, [r5, #16]
 8011776:	b9eb      	cbnz	r3, 80117b4 <_vfiprintf_r+0x78>
 8011778:	4629      	mov	r1, r5
 801177a:	4630      	mov	r0, r6
 801177c:	f000 f960 	bl	8011a40 <__swsetup_r>
 8011780:	b1c0      	cbz	r0, 80117b4 <_vfiprintf_r+0x78>
 8011782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011784:	07dc      	lsls	r4, r3, #31
 8011786:	d50e      	bpl.n	80117a6 <_vfiprintf_r+0x6a>
 8011788:	f04f 30ff 	mov.w	r0, #4294967295
 801178c:	b01d      	add	sp, #116	; 0x74
 801178e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011792:	4b7b      	ldr	r3, [pc, #492]	; (8011980 <_vfiprintf_r+0x244>)
 8011794:	429d      	cmp	r5, r3
 8011796:	d101      	bne.n	801179c <_vfiprintf_r+0x60>
 8011798:	68b5      	ldr	r5, [r6, #8]
 801179a:	e7df      	b.n	801175c <_vfiprintf_r+0x20>
 801179c:	4b79      	ldr	r3, [pc, #484]	; (8011984 <_vfiprintf_r+0x248>)
 801179e:	429d      	cmp	r5, r3
 80117a0:	bf08      	it	eq
 80117a2:	68f5      	ldreq	r5, [r6, #12]
 80117a4:	e7da      	b.n	801175c <_vfiprintf_r+0x20>
 80117a6:	89ab      	ldrh	r3, [r5, #12]
 80117a8:	0598      	lsls	r0, r3, #22
 80117aa:	d4ed      	bmi.n	8011788 <_vfiprintf_r+0x4c>
 80117ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117ae:	f7ff ff4e 	bl	801164e <__retarget_lock_release_recursive>
 80117b2:	e7e9      	b.n	8011788 <_vfiprintf_r+0x4c>
 80117b4:	2300      	movs	r3, #0
 80117b6:	9309      	str	r3, [sp, #36]	; 0x24
 80117b8:	2320      	movs	r3, #32
 80117ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117be:	f8cd 800c 	str.w	r8, [sp, #12]
 80117c2:	2330      	movs	r3, #48	; 0x30
 80117c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011988 <_vfiprintf_r+0x24c>
 80117c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117cc:	f04f 0901 	mov.w	r9, #1
 80117d0:	4623      	mov	r3, r4
 80117d2:	469a      	mov	sl, r3
 80117d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117d8:	b10a      	cbz	r2, 80117de <_vfiprintf_r+0xa2>
 80117da:	2a25      	cmp	r2, #37	; 0x25
 80117dc:	d1f9      	bne.n	80117d2 <_vfiprintf_r+0x96>
 80117de:	ebba 0b04 	subs.w	fp, sl, r4
 80117e2:	d00b      	beq.n	80117fc <_vfiprintf_r+0xc0>
 80117e4:	465b      	mov	r3, fp
 80117e6:	4622      	mov	r2, r4
 80117e8:	4629      	mov	r1, r5
 80117ea:	4630      	mov	r0, r6
 80117ec:	f7ff ff93 	bl	8011716 <__sfputs_r>
 80117f0:	3001      	adds	r0, #1
 80117f2:	f000 80aa 	beq.w	801194a <_vfiprintf_r+0x20e>
 80117f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117f8:	445a      	add	r2, fp
 80117fa:	9209      	str	r2, [sp, #36]	; 0x24
 80117fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011800:	2b00      	cmp	r3, #0
 8011802:	f000 80a2 	beq.w	801194a <_vfiprintf_r+0x20e>
 8011806:	2300      	movs	r3, #0
 8011808:	f04f 32ff 	mov.w	r2, #4294967295
 801180c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011810:	f10a 0a01 	add.w	sl, sl, #1
 8011814:	9304      	str	r3, [sp, #16]
 8011816:	9307      	str	r3, [sp, #28]
 8011818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801181c:	931a      	str	r3, [sp, #104]	; 0x68
 801181e:	4654      	mov	r4, sl
 8011820:	2205      	movs	r2, #5
 8011822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011826:	4858      	ldr	r0, [pc, #352]	; (8011988 <_vfiprintf_r+0x24c>)
 8011828:	f7ee fce2 	bl	80001f0 <memchr>
 801182c:	9a04      	ldr	r2, [sp, #16]
 801182e:	b9d8      	cbnz	r0, 8011868 <_vfiprintf_r+0x12c>
 8011830:	06d1      	lsls	r1, r2, #27
 8011832:	bf44      	itt	mi
 8011834:	2320      	movmi	r3, #32
 8011836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801183a:	0713      	lsls	r3, r2, #28
 801183c:	bf44      	itt	mi
 801183e:	232b      	movmi	r3, #43	; 0x2b
 8011840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011844:	f89a 3000 	ldrb.w	r3, [sl]
 8011848:	2b2a      	cmp	r3, #42	; 0x2a
 801184a:	d015      	beq.n	8011878 <_vfiprintf_r+0x13c>
 801184c:	9a07      	ldr	r2, [sp, #28]
 801184e:	4654      	mov	r4, sl
 8011850:	2000      	movs	r0, #0
 8011852:	f04f 0c0a 	mov.w	ip, #10
 8011856:	4621      	mov	r1, r4
 8011858:	f811 3b01 	ldrb.w	r3, [r1], #1
 801185c:	3b30      	subs	r3, #48	; 0x30
 801185e:	2b09      	cmp	r3, #9
 8011860:	d94e      	bls.n	8011900 <_vfiprintf_r+0x1c4>
 8011862:	b1b0      	cbz	r0, 8011892 <_vfiprintf_r+0x156>
 8011864:	9207      	str	r2, [sp, #28]
 8011866:	e014      	b.n	8011892 <_vfiprintf_r+0x156>
 8011868:	eba0 0308 	sub.w	r3, r0, r8
 801186c:	fa09 f303 	lsl.w	r3, r9, r3
 8011870:	4313      	orrs	r3, r2
 8011872:	9304      	str	r3, [sp, #16]
 8011874:	46a2      	mov	sl, r4
 8011876:	e7d2      	b.n	801181e <_vfiprintf_r+0xe2>
 8011878:	9b03      	ldr	r3, [sp, #12]
 801187a:	1d19      	adds	r1, r3, #4
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	9103      	str	r1, [sp, #12]
 8011880:	2b00      	cmp	r3, #0
 8011882:	bfbb      	ittet	lt
 8011884:	425b      	neglt	r3, r3
 8011886:	f042 0202 	orrlt.w	r2, r2, #2
 801188a:	9307      	strge	r3, [sp, #28]
 801188c:	9307      	strlt	r3, [sp, #28]
 801188e:	bfb8      	it	lt
 8011890:	9204      	strlt	r2, [sp, #16]
 8011892:	7823      	ldrb	r3, [r4, #0]
 8011894:	2b2e      	cmp	r3, #46	; 0x2e
 8011896:	d10c      	bne.n	80118b2 <_vfiprintf_r+0x176>
 8011898:	7863      	ldrb	r3, [r4, #1]
 801189a:	2b2a      	cmp	r3, #42	; 0x2a
 801189c:	d135      	bne.n	801190a <_vfiprintf_r+0x1ce>
 801189e:	9b03      	ldr	r3, [sp, #12]
 80118a0:	1d1a      	adds	r2, r3, #4
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	9203      	str	r2, [sp, #12]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	bfb8      	it	lt
 80118aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80118ae:	3402      	adds	r4, #2
 80118b0:	9305      	str	r3, [sp, #20]
 80118b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011998 <_vfiprintf_r+0x25c>
 80118b6:	7821      	ldrb	r1, [r4, #0]
 80118b8:	2203      	movs	r2, #3
 80118ba:	4650      	mov	r0, sl
 80118bc:	f7ee fc98 	bl	80001f0 <memchr>
 80118c0:	b140      	cbz	r0, 80118d4 <_vfiprintf_r+0x198>
 80118c2:	2340      	movs	r3, #64	; 0x40
 80118c4:	eba0 000a 	sub.w	r0, r0, sl
 80118c8:	fa03 f000 	lsl.w	r0, r3, r0
 80118cc:	9b04      	ldr	r3, [sp, #16]
 80118ce:	4303      	orrs	r3, r0
 80118d0:	3401      	adds	r4, #1
 80118d2:	9304      	str	r3, [sp, #16]
 80118d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118d8:	482c      	ldr	r0, [pc, #176]	; (801198c <_vfiprintf_r+0x250>)
 80118da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118de:	2206      	movs	r2, #6
 80118e0:	f7ee fc86 	bl	80001f0 <memchr>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d03f      	beq.n	8011968 <_vfiprintf_r+0x22c>
 80118e8:	4b29      	ldr	r3, [pc, #164]	; (8011990 <_vfiprintf_r+0x254>)
 80118ea:	bb1b      	cbnz	r3, 8011934 <_vfiprintf_r+0x1f8>
 80118ec:	9b03      	ldr	r3, [sp, #12]
 80118ee:	3307      	adds	r3, #7
 80118f0:	f023 0307 	bic.w	r3, r3, #7
 80118f4:	3308      	adds	r3, #8
 80118f6:	9303      	str	r3, [sp, #12]
 80118f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118fa:	443b      	add	r3, r7
 80118fc:	9309      	str	r3, [sp, #36]	; 0x24
 80118fe:	e767      	b.n	80117d0 <_vfiprintf_r+0x94>
 8011900:	fb0c 3202 	mla	r2, ip, r2, r3
 8011904:	460c      	mov	r4, r1
 8011906:	2001      	movs	r0, #1
 8011908:	e7a5      	b.n	8011856 <_vfiprintf_r+0x11a>
 801190a:	2300      	movs	r3, #0
 801190c:	3401      	adds	r4, #1
 801190e:	9305      	str	r3, [sp, #20]
 8011910:	4619      	mov	r1, r3
 8011912:	f04f 0c0a 	mov.w	ip, #10
 8011916:	4620      	mov	r0, r4
 8011918:	f810 2b01 	ldrb.w	r2, [r0], #1
 801191c:	3a30      	subs	r2, #48	; 0x30
 801191e:	2a09      	cmp	r2, #9
 8011920:	d903      	bls.n	801192a <_vfiprintf_r+0x1ee>
 8011922:	2b00      	cmp	r3, #0
 8011924:	d0c5      	beq.n	80118b2 <_vfiprintf_r+0x176>
 8011926:	9105      	str	r1, [sp, #20]
 8011928:	e7c3      	b.n	80118b2 <_vfiprintf_r+0x176>
 801192a:	fb0c 2101 	mla	r1, ip, r1, r2
 801192e:	4604      	mov	r4, r0
 8011930:	2301      	movs	r3, #1
 8011932:	e7f0      	b.n	8011916 <_vfiprintf_r+0x1da>
 8011934:	ab03      	add	r3, sp, #12
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	462a      	mov	r2, r5
 801193a:	4b16      	ldr	r3, [pc, #88]	; (8011994 <_vfiprintf_r+0x258>)
 801193c:	a904      	add	r1, sp, #16
 801193e:	4630      	mov	r0, r6
 8011940:	f7fb f9fe 	bl	800cd40 <_printf_float>
 8011944:	4607      	mov	r7, r0
 8011946:	1c78      	adds	r0, r7, #1
 8011948:	d1d6      	bne.n	80118f8 <_vfiprintf_r+0x1bc>
 801194a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801194c:	07d9      	lsls	r1, r3, #31
 801194e:	d405      	bmi.n	801195c <_vfiprintf_r+0x220>
 8011950:	89ab      	ldrh	r3, [r5, #12]
 8011952:	059a      	lsls	r2, r3, #22
 8011954:	d402      	bmi.n	801195c <_vfiprintf_r+0x220>
 8011956:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011958:	f7ff fe79 	bl	801164e <__retarget_lock_release_recursive>
 801195c:	89ab      	ldrh	r3, [r5, #12]
 801195e:	065b      	lsls	r3, r3, #25
 8011960:	f53f af12 	bmi.w	8011788 <_vfiprintf_r+0x4c>
 8011964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011966:	e711      	b.n	801178c <_vfiprintf_r+0x50>
 8011968:	ab03      	add	r3, sp, #12
 801196a:	9300      	str	r3, [sp, #0]
 801196c:	462a      	mov	r2, r5
 801196e:	4b09      	ldr	r3, [pc, #36]	; (8011994 <_vfiprintf_r+0x258>)
 8011970:	a904      	add	r1, sp, #16
 8011972:	4630      	mov	r0, r6
 8011974:	f7fb fc88 	bl	800d288 <_printf_i>
 8011978:	e7e4      	b.n	8011944 <_vfiprintf_r+0x208>
 801197a:	bf00      	nop
 801197c:	0801335c 	.word	0x0801335c
 8011980:	0801337c 	.word	0x0801337c
 8011984:	0801333c 	.word	0x0801333c
 8011988:	080132d4 	.word	0x080132d4
 801198c:	080132de 	.word	0x080132de
 8011990:	0800cd41 	.word	0x0800cd41
 8011994:	08011717 	.word	0x08011717
 8011998:	080132da 	.word	0x080132da

0801199c <__swbuf_r>:
 801199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801199e:	460e      	mov	r6, r1
 80119a0:	4614      	mov	r4, r2
 80119a2:	4605      	mov	r5, r0
 80119a4:	b118      	cbz	r0, 80119ae <__swbuf_r+0x12>
 80119a6:	6983      	ldr	r3, [r0, #24]
 80119a8:	b90b      	cbnz	r3, 80119ae <__swbuf_r+0x12>
 80119aa:	f7ff fd9f 	bl	80114ec <__sinit>
 80119ae:	4b21      	ldr	r3, [pc, #132]	; (8011a34 <__swbuf_r+0x98>)
 80119b0:	429c      	cmp	r4, r3
 80119b2:	d12b      	bne.n	8011a0c <__swbuf_r+0x70>
 80119b4:	686c      	ldr	r4, [r5, #4]
 80119b6:	69a3      	ldr	r3, [r4, #24]
 80119b8:	60a3      	str	r3, [r4, #8]
 80119ba:	89a3      	ldrh	r3, [r4, #12]
 80119bc:	071a      	lsls	r2, r3, #28
 80119be:	d52f      	bpl.n	8011a20 <__swbuf_r+0x84>
 80119c0:	6923      	ldr	r3, [r4, #16]
 80119c2:	b36b      	cbz	r3, 8011a20 <__swbuf_r+0x84>
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	6820      	ldr	r0, [r4, #0]
 80119c8:	1ac0      	subs	r0, r0, r3
 80119ca:	6963      	ldr	r3, [r4, #20]
 80119cc:	b2f6      	uxtb	r6, r6
 80119ce:	4283      	cmp	r3, r0
 80119d0:	4637      	mov	r7, r6
 80119d2:	dc04      	bgt.n	80119de <__swbuf_r+0x42>
 80119d4:	4621      	mov	r1, r4
 80119d6:	4628      	mov	r0, r5
 80119d8:	f7ff fcf4 	bl	80113c4 <_fflush_r>
 80119dc:	bb30      	cbnz	r0, 8011a2c <__swbuf_r+0x90>
 80119de:	68a3      	ldr	r3, [r4, #8]
 80119e0:	3b01      	subs	r3, #1
 80119e2:	60a3      	str	r3, [r4, #8]
 80119e4:	6823      	ldr	r3, [r4, #0]
 80119e6:	1c5a      	adds	r2, r3, #1
 80119e8:	6022      	str	r2, [r4, #0]
 80119ea:	701e      	strb	r6, [r3, #0]
 80119ec:	6963      	ldr	r3, [r4, #20]
 80119ee:	3001      	adds	r0, #1
 80119f0:	4283      	cmp	r3, r0
 80119f2:	d004      	beq.n	80119fe <__swbuf_r+0x62>
 80119f4:	89a3      	ldrh	r3, [r4, #12]
 80119f6:	07db      	lsls	r3, r3, #31
 80119f8:	d506      	bpl.n	8011a08 <__swbuf_r+0x6c>
 80119fa:	2e0a      	cmp	r6, #10
 80119fc:	d104      	bne.n	8011a08 <__swbuf_r+0x6c>
 80119fe:	4621      	mov	r1, r4
 8011a00:	4628      	mov	r0, r5
 8011a02:	f7ff fcdf 	bl	80113c4 <_fflush_r>
 8011a06:	b988      	cbnz	r0, 8011a2c <__swbuf_r+0x90>
 8011a08:	4638      	mov	r0, r7
 8011a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a0c:	4b0a      	ldr	r3, [pc, #40]	; (8011a38 <__swbuf_r+0x9c>)
 8011a0e:	429c      	cmp	r4, r3
 8011a10:	d101      	bne.n	8011a16 <__swbuf_r+0x7a>
 8011a12:	68ac      	ldr	r4, [r5, #8]
 8011a14:	e7cf      	b.n	80119b6 <__swbuf_r+0x1a>
 8011a16:	4b09      	ldr	r3, [pc, #36]	; (8011a3c <__swbuf_r+0xa0>)
 8011a18:	429c      	cmp	r4, r3
 8011a1a:	bf08      	it	eq
 8011a1c:	68ec      	ldreq	r4, [r5, #12]
 8011a1e:	e7ca      	b.n	80119b6 <__swbuf_r+0x1a>
 8011a20:	4621      	mov	r1, r4
 8011a22:	4628      	mov	r0, r5
 8011a24:	f000 f80c 	bl	8011a40 <__swsetup_r>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	d0cb      	beq.n	80119c4 <__swbuf_r+0x28>
 8011a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8011a30:	e7ea      	b.n	8011a08 <__swbuf_r+0x6c>
 8011a32:	bf00      	nop
 8011a34:	0801335c 	.word	0x0801335c
 8011a38:	0801337c 	.word	0x0801337c
 8011a3c:	0801333c 	.word	0x0801333c

08011a40 <__swsetup_r>:
 8011a40:	4b32      	ldr	r3, [pc, #200]	; (8011b0c <__swsetup_r+0xcc>)
 8011a42:	b570      	push	{r4, r5, r6, lr}
 8011a44:	681d      	ldr	r5, [r3, #0]
 8011a46:	4606      	mov	r6, r0
 8011a48:	460c      	mov	r4, r1
 8011a4a:	b125      	cbz	r5, 8011a56 <__swsetup_r+0x16>
 8011a4c:	69ab      	ldr	r3, [r5, #24]
 8011a4e:	b913      	cbnz	r3, 8011a56 <__swsetup_r+0x16>
 8011a50:	4628      	mov	r0, r5
 8011a52:	f7ff fd4b 	bl	80114ec <__sinit>
 8011a56:	4b2e      	ldr	r3, [pc, #184]	; (8011b10 <__swsetup_r+0xd0>)
 8011a58:	429c      	cmp	r4, r3
 8011a5a:	d10f      	bne.n	8011a7c <__swsetup_r+0x3c>
 8011a5c:	686c      	ldr	r4, [r5, #4]
 8011a5e:	89a3      	ldrh	r3, [r4, #12]
 8011a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a64:	0719      	lsls	r1, r3, #28
 8011a66:	d42c      	bmi.n	8011ac2 <__swsetup_r+0x82>
 8011a68:	06dd      	lsls	r5, r3, #27
 8011a6a:	d411      	bmi.n	8011a90 <__swsetup_r+0x50>
 8011a6c:	2309      	movs	r3, #9
 8011a6e:	6033      	str	r3, [r6, #0]
 8011a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a74:	81a3      	strh	r3, [r4, #12]
 8011a76:	f04f 30ff 	mov.w	r0, #4294967295
 8011a7a:	e03e      	b.n	8011afa <__swsetup_r+0xba>
 8011a7c:	4b25      	ldr	r3, [pc, #148]	; (8011b14 <__swsetup_r+0xd4>)
 8011a7e:	429c      	cmp	r4, r3
 8011a80:	d101      	bne.n	8011a86 <__swsetup_r+0x46>
 8011a82:	68ac      	ldr	r4, [r5, #8]
 8011a84:	e7eb      	b.n	8011a5e <__swsetup_r+0x1e>
 8011a86:	4b24      	ldr	r3, [pc, #144]	; (8011b18 <__swsetup_r+0xd8>)
 8011a88:	429c      	cmp	r4, r3
 8011a8a:	bf08      	it	eq
 8011a8c:	68ec      	ldreq	r4, [r5, #12]
 8011a8e:	e7e6      	b.n	8011a5e <__swsetup_r+0x1e>
 8011a90:	0758      	lsls	r0, r3, #29
 8011a92:	d512      	bpl.n	8011aba <__swsetup_r+0x7a>
 8011a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a96:	b141      	cbz	r1, 8011aaa <__swsetup_r+0x6a>
 8011a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a9c:	4299      	cmp	r1, r3
 8011a9e:	d002      	beq.n	8011aa6 <__swsetup_r+0x66>
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	f7fe fd8b 	bl	80105bc <_free_r>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8011aaa:	89a3      	ldrh	r3, [r4, #12]
 8011aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ab0:	81a3      	strh	r3, [r4, #12]
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	6063      	str	r3, [r4, #4]
 8011ab6:	6923      	ldr	r3, [r4, #16]
 8011ab8:	6023      	str	r3, [r4, #0]
 8011aba:	89a3      	ldrh	r3, [r4, #12]
 8011abc:	f043 0308 	orr.w	r3, r3, #8
 8011ac0:	81a3      	strh	r3, [r4, #12]
 8011ac2:	6923      	ldr	r3, [r4, #16]
 8011ac4:	b94b      	cbnz	r3, 8011ada <__swsetup_r+0x9a>
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ad0:	d003      	beq.n	8011ada <__swsetup_r+0x9a>
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	f000 f84d 	bl	8011b74 <__smakebuf_r>
 8011ada:	89a0      	ldrh	r0, [r4, #12]
 8011adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ae0:	f010 0301 	ands.w	r3, r0, #1
 8011ae4:	d00a      	beq.n	8011afc <__swsetup_r+0xbc>
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	60a3      	str	r3, [r4, #8]
 8011aea:	6963      	ldr	r3, [r4, #20]
 8011aec:	425b      	negs	r3, r3
 8011aee:	61a3      	str	r3, [r4, #24]
 8011af0:	6923      	ldr	r3, [r4, #16]
 8011af2:	b943      	cbnz	r3, 8011b06 <__swsetup_r+0xc6>
 8011af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011af8:	d1ba      	bne.n	8011a70 <__swsetup_r+0x30>
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	0781      	lsls	r1, r0, #30
 8011afe:	bf58      	it	pl
 8011b00:	6963      	ldrpl	r3, [r4, #20]
 8011b02:	60a3      	str	r3, [r4, #8]
 8011b04:	e7f4      	b.n	8011af0 <__swsetup_r+0xb0>
 8011b06:	2000      	movs	r0, #0
 8011b08:	e7f7      	b.n	8011afa <__swsetup_r+0xba>
 8011b0a:	bf00      	nop
 8011b0c:	200000e8 	.word	0x200000e8
 8011b10:	0801335c 	.word	0x0801335c
 8011b14:	0801337c 	.word	0x0801337c
 8011b18:	0801333c 	.word	0x0801333c

08011b1c <abort>:
 8011b1c:	b508      	push	{r3, lr}
 8011b1e:	2006      	movs	r0, #6
 8011b20:	f000 f898 	bl	8011c54 <raise>
 8011b24:	2001      	movs	r0, #1
 8011b26:	f7f0 fa2f 	bl	8001f88 <_exit>

08011b2a <__swhatbuf_r>:
 8011b2a:	b570      	push	{r4, r5, r6, lr}
 8011b2c:	460e      	mov	r6, r1
 8011b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b32:	2900      	cmp	r1, #0
 8011b34:	b096      	sub	sp, #88	; 0x58
 8011b36:	4614      	mov	r4, r2
 8011b38:	461d      	mov	r5, r3
 8011b3a:	da07      	bge.n	8011b4c <__swhatbuf_r+0x22>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	602b      	str	r3, [r5, #0]
 8011b40:	89b3      	ldrh	r3, [r6, #12]
 8011b42:	061a      	lsls	r2, r3, #24
 8011b44:	d410      	bmi.n	8011b68 <__swhatbuf_r+0x3e>
 8011b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b4a:	e00e      	b.n	8011b6a <__swhatbuf_r+0x40>
 8011b4c:	466a      	mov	r2, sp
 8011b4e:	f000 f89d 	bl	8011c8c <_fstat_r>
 8011b52:	2800      	cmp	r0, #0
 8011b54:	dbf2      	blt.n	8011b3c <__swhatbuf_r+0x12>
 8011b56:	9a01      	ldr	r2, [sp, #4]
 8011b58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b60:	425a      	negs	r2, r3
 8011b62:	415a      	adcs	r2, r3
 8011b64:	602a      	str	r2, [r5, #0]
 8011b66:	e7ee      	b.n	8011b46 <__swhatbuf_r+0x1c>
 8011b68:	2340      	movs	r3, #64	; 0x40
 8011b6a:	2000      	movs	r0, #0
 8011b6c:	6023      	str	r3, [r4, #0]
 8011b6e:	b016      	add	sp, #88	; 0x58
 8011b70:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b74 <__smakebuf_r>:
 8011b74:	898b      	ldrh	r3, [r1, #12]
 8011b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b78:	079d      	lsls	r5, r3, #30
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	460c      	mov	r4, r1
 8011b7e:	d507      	bpl.n	8011b90 <__smakebuf_r+0x1c>
 8011b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b84:	6023      	str	r3, [r4, #0]
 8011b86:	6123      	str	r3, [r4, #16]
 8011b88:	2301      	movs	r3, #1
 8011b8a:	6163      	str	r3, [r4, #20]
 8011b8c:	b002      	add	sp, #8
 8011b8e:	bd70      	pop	{r4, r5, r6, pc}
 8011b90:	ab01      	add	r3, sp, #4
 8011b92:	466a      	mov	r2, sp
 8011b94:	f7ff ffc9 	bl	8011b2a <__swhatbuf_r>
 8011b98:	9900      	ldr	r1, [sp, #0]
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	f7fe fd5d 	bl	801065c <_malloc_r>
 8011ba2:	b948      	cbnz	r0, 8011bb8 <__smakebuf_r+0x44>
 8011ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ba8:	059a      	lsls	r2, r3, #22
 8011baa:	d4ef      	bmi.n	8011b8c <__smakebuf_r+0x18>
 8011bac:	f023 0303 	bic.w	r3, r3, #3
 8011bb0:	f043 0302 	orr.w	r3, r3, #2
 8011bb4:	81a3      	strh	r3, [r4, #12]
 8011bb6:	e7e3      	b.n	8011b80 <__smakebuf_r+0xc>
 8011bb8:	4b0d      	ldr	r3, [pc, #52]	; (8011bf0 <__smakebuf_r+0x7c>)
 8011bba:	62b3      	str	r3, [r6, #40]	; 0x28
 8011bbc:	89a3      	ldrh	r3, [r4, #12]
 8011bbe:	6020      	str	r0, [r4, #0]
 8011bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bc4:	81a3      	strh	r3, [r4, #12]
 8011bc6:	9b00      	ldr	r3, [sp, #0]
 8011bc8:	6163      	str	r3, [r4, #20]
 8011bca:	9b01      	ldr	r3, [sp, #4]
 8011bcc:	6120      	str	r0, [r4, #16]
 8011bce:	b15b      	cbz	r3, 8011be8 <__smakebuf_r+0x74>
 8011bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	f000 f86b 	bl	8011cb0 <_isatty_r>
 8011bda:	b128      	cbz	r0, 8011be8 <__smakebuf_r+0x74>
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	f023 0303 	bic.w	r3, r3, #3
 8011be2:	f043 0301 	orr.w	r3, r3, #1
 8011be6:	81a3      	strh	r3, [r4, #12]
 8011be8:	89a0      	ldrh	r0, [r4, #12]
 8011bea:	4305      	orrs	r5, r0
 8011bec:	81a5      	strh	r5, [r4, #12]
 8011bee:	e7cd      	b.n	8011b8c <__smakebuf_r+0x18>
 8011bf0:	08011485 	.word	0x08011485

08011bf4 <_malloc_usable_size_r>:
 8011bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bf8:	1f18      	subs	r0, r3, #4
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	bfbc      	itt	lt
 8011bfe:	580b      	ldrlt	r3, [r1, r0]
 8011c00:	18c0      	addlt	r0, r0, r3
 8011c02:	4770      	bx	lr

08011c04 <_raise_r>:
 8011c04:	291f      	cmp	r1, #31
 8011c06:	b538      	push	{r3, r4, r5, lr}
 8011c08:	4604      	mov	r4, r0
 8011c0a:	460d      	mov	r5, r1
 8011c0c:	d904      	bls.n	8011c18 <_raise_r+0x14>
 8011c0e:	2316      	movs	r3, #22
 8011c10:	6003      	str	r3, [r0, #0]
 8011c12:	f04f 30ff 	mov.w	r0, #4294967295
 8011c16:	bd38      	pop	{r3, r4, r5, pc}
 8011c18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011c1a:	b112      	cbz	r2, 8011c22 <_raise_r+0x1e>
 8011c1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c20:	b94b      	cbnz	r3, 8011c36 <_raise_r+0x32>
 8011c22:	4620      	mov	r0, r4
 8011c24:	f000 f830 	bl	8011c88 <_getpid_r>
 8011c28:	462a      	mov	r2, r5
 8011c2a:	4601      	mov	r1, r0
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c32:	f000 b817 	b.w	8011c64 <_kill_r>
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d00a      	beq.n	8011c50 <_raise_r+0x4c>
 8011c3a:	1c59      	adds	r1, r3, #1
 8011c3c:	d103      	bne.n	8011c46 <_raise_r+0x42>
 8011c3e:	2316      	movs	r3, #22
 8011c40:	6003      	str	r3, [r0, #0]
 8011c42:	2001      	movs	r0, #1
 8011c44:	e7e7      	b.n	8011c16 <_raise_r+0x12>
 8011c46:	2400      	movs	r4, #0
 8011c48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	4798      	blx	r3
 8011c50:	2000      	movs	r0, #0
 8011c52:	e7e0      	b.n	8011c16 <_raise_r+0x12>

08011c54 <raise>:
 8011c54:	4b02      	ldr	r3, [pc, #8]	; (8011c60 <raise+0xc>)
 8011c56:	4601      	mov	r1, r0
 8011c58:	6818      	ldr	r0, [r3, #0]
 8011c5a:	f7ff bfd3 	b.w	8011c04 <_raise_r>
 8011c5e:	bf00      	nop
 8011c60:	200000e8 	.word	0x200000e8

08011c64 <_kill_r>:
 8011c64:	b538      	push	{r3, r4, r5, lr}
 8011c66:	4d07      	ldr	r5, [pc, #28]	; (8011c84 <_kill_r+0x20>)
 8011c68:	2300      	movs	r3, #0
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	4608      	mov	r0, r1
 8011c6e:	4611      	mov	r1, r2
 8011c70:	602b      	str	r3, [r5, #0]
 8011c72:	f7f0 f979 	bl	8001f68 <_kill>
 8011c76:	1c43      	adds	r3, r0, #1
 8011c78:	d102      	bne.n	8011c80 <_kill_r+0x1c>
 8011c7a:	682b      	ldr	r3, [r5, #0]
 8011c7c:	b103      	cbz	r3, 8011c80 <_kill_r+0x1c>
 8011c7e:	6023      	str	r3, [r4, #0]
 8011c80:	bd38      	pop	{r3, r4, r5, pc}
 8011c82:	bf00      	nop
 8011c84:	200061d4 	.word	0x200061d4

08011c88 <_getpid_r>:
 8011c88:	f7f0 b966 	b.w	8001f58 <_getpid>

08011c8c <_fstat_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	4d07      	ldr	r5, [pc, #28]	; (8011cac <_fstat_r+0x20>)
 8011c90:	2300      	movs	r3, #0
 8011c92:	4604      	mov	r4, r0
 8011c94:	4608      	mov	r0, r1
 8011c96:	4611      	mov	r1, r2
 8011c98:	602b      	str	r3, [r5, #0]
 8011c9a:	f7f0 f9c4 	bl	8002026 <_fstat>
 8011c9e:	1c43      	adds	r3, r0, #1
 8011ca0:	d102      	bne.n	8011ca8 <_fstat_r+0x1c>
 8011ca2:	682b      	ldr	r3, [r5, #0]
 8011ca4:	b103      	cbz	r3, 8011ca8 <_fstat_r+0x1c>
 8011ca6:	6023      	str	r3, [r4, #0]
 8011ca8:	bd38      	pop	{r3, r4, r5, pc}
 8011caa:	bf00      	nop
 8011cac:	200061d4 	.word	0x200061d4

08011cb0 <_isatty_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4d06      	ldr	r5, [pc, #24]	; (8011ccc <_isatty_r+0x1c>)
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	4608      	mov	r0, r1
 8011cba:	602b      	str	r3, [r5, #0]
 8011cbc:	f7f0 f9c3 	bl	8002046 <_isatty>
 8011cc0:	1c43      	adds	r3, r0, #1
 8011cc2:	d102      	bne.n	8011cca <_isatty_r+0x1a>
 8011cc4:	682b      	ldr	r3, [r5, #0]
 8011cc6:	b103      	cbz	r3, 8011cca <_isatty_r+0x1a>
 8011cc8:	6023      	str	r3, [r4, #0]
 8011cca:	bd38      	pop	{r3, r4, r5, pc}
 8011ccc:	200061d4 	.word	0x200061d4

08011cd0 <fmod>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	ed2d 8b02 	vpush	{d8}
 8011cd6:	ec57 6b10 	vmov	r6, r7, d0
 8011cda:	ec55 4b11 	vmov	r4, r5, d1
 8011cde:	f000 f833 	bl	8011d48 <__ieee754_fmod>
 8011ce2:	4b18      	ldr	r3, [pc, #96]	; (8011d44 <fmod+0x74>)
 8011ce4:	eeb0 8a40 	vmov.f32	s16, s0
 8011ce8:	eef0 8a60 	vmov.f32	s17, s1
 8011cec:	f993 3000 	ldrsb.w	r3, [r3]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	d020      	beq.n	8011d36 <fmod+0x66>
 8011cf4:	4622      	mov	r2, r4
 8011cf6:	462b      	mov	r3, r5
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	4629      	mov	r1, r5
 8011cfc:	f7ee ff1e 	bl	8000b3c <__aeabi_dcmpun>
 8011d00:	b9c8      	cbnz	r0, 8011d36 <fmod+0x66>
 8011d02:	4632      	mov	r2, r6
 8011d04:	463b      	mov	r3, r7
 8011d06:	4630      	mov	r0, r6
 8011d08:	4639      	mov	r1, r7
 8011d0a:	f7ee ff17 	bl	8000b3c <__aeabi_dcmpun>
 8011d0e:	b990      	cbnz	r0, 8011d36 <fmod+0x66>
 8011d10:	2200      	movs	r2, #0
 8011d12:	2300      	movs	r3, #0
 8011d14:	4620      	mov	r0, r4
 8011d16:	4629      	mov	r1, r5
 8011d18:	f7ee fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8011d1c:	b158      	cbz	r0, 8011d36 <fmod+0x66>
 8011d1e:	f7fa ff2f 	bl	800cb80 <__errno>
 8011d22:	2321      	movs	r3, #33	; 0x21
 8011d24:	6003      	str	r3, [r0, #0]
 8011d26:	2200      	movs	r2, #0
 8011d28:	2300      	movs	r3, #0
 8011d2a:	4610      	mov	r0, r2
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	f7ee fd95 	bl	800085c <__aeabi_ddiv>
 8011d32:	ec41 0b18 	vmov	d8, r0, r1
 8011d36:	eeb0 0a48 	vmov.f32	s0, s16
 8011d3a:	eef0 0a68 	vmov.f32	s1, s17
 8011d3e:	ecbd 8b02 	vpop	{d8}
 8011d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d44:	200002bc 	.word	0x200002bc

08011d48 <__ieee754_fmod>:
 8011d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4c:	ec53 2b11 	vmov	r2, r3, d1
 8011d50:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8011d54:	ea5e 0402 	orrs.w	r4, lr, r2
 8011d58:	ec51 0b10 	vmov	r0, r1, d0
 8011d5c:	ee11 7a10 	vmov	r7, s2
 8011d60:	ee11 ca10 	vmov	ip, s2
 8011d64:	461e      	mov	r6, r3
 8011d66:	d00d      	beq.n	8011d84 <__ieee754_fmod+0x3c>
 8011d68:	4c7a      	ldr	r4, [pc, #488]	; (8011f54 <__ieee754_fmod+0x20c>)
 8011d6a:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8011d6e:	45a0      	cmp	r8, r4
 8011d70:	4689      	mov	r9, r1
 8011d72:	dc07      	bgt.n	8011d84 <__ieee754_fmod+0x3c>
 8011d74:	4254      	negs	r4, r2
 8011d76:	4d78      	ldr	r5, [pc, #480]	; (8011f58 <__ieee754_fmod+0x210>)
 8011d78:	4314      	orrs	r4, r2
 8011d7a:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8011d7e:	42ac      	cmp	r4, r5
 8011d80:	46ab      	mov	fp, r5
 8011d82:	d909      	bls.n	8011d98 <__ieee754_fmod+0x50>
 8011d84:	f7ee fc40 	bl	8000608 <__aeabi_dmul>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	f7ee fd66 	bl	800085c <__aeabi_ddiv>
 8011d90:	ec41 0b10 	vmov	d0, r0, r1
 8011d94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d98:	45f0      	cmp	r8, lr
 8011d9a:	ee10 aa10 	vmov	sl, s0
 8011d9e:	ee10 4a10 	vmov	r4, s0
 8011da2:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8011da6:	dc0a      	bgt.n	8011dbe <__ieee754_fmod+0x76>
 8011da8:	dbf2      	blt.n	8011d90 <__ieee754_fmod+0x48>
 8011daa:	4290      	cmp	r0, r2
 8011dac:	d3f0      	bcc.n	8011d90 <__ieee754_fmod+0x48>
 8011dae:	d106      	bne.n	8011dbe <__ieee754_fmod+0x76>
 8011db0:	4a6a      	ldr	r2, [pc, #424]	; (8011f5c <__ieee754_fmod+0x214>)
 8011db2:	0fed      	lsrs	r5, r5, #31
 8011db4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011db8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011dbc:	e7e8      	b.n	8011d90 <__ieee754_fmod+0x48>
 8011dbe:	ea19 0f0b 	tst.w	r9, fp
 8011dc2:	d14a      	bne.n	8011e5a <__ieee754_fmod+0x112>
 8011dc4:	f1b8 0f00 	cmp.w	r8, #0
 8011dc8:	d13f      	bne.n	8011e4a <__ieee754_fmod+0x102>
 8011dca:	4965      	ldr	r1, [pc, #404]	; (8011f60 <__ieee754_fmod+0x218>)
 8011dcc:	4653      	mov	r3, sl
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	dc38      	bgt.n	8011e44 <__ieee754_fmod+0xfc>
 8011dd2:	4b61      	ldr	r3, [pc, #388]	; (8011f58 <__ieee754_fmod+0x210>)
 8011dd4:	4033      	ands	r3, r6
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d14f      	bne.n	8011e7a <__ieee754_fmod+0x132>
 8011dda:	f1be 0f00 	cmp.w	lr, #0
 8011dde:	d144      	bne.n	8011e6a <__ieee754_fmod+0x122>
 8011de0:	4a5f      	ldr	r2, [pc, #380]	; (8011f60 <__ieee754_fmod+0x218>)
 8011de2:	463b      	mov	r3, r7
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	dc3d      	bgt.n	8011e64 <__ieee754_fmod+0x11c>
 8011de8:	4b5e      	ldr	r3, [pc, #376]	; (8011f64 <__ieee754_fmod+0x21c>)
 8011dea:	4299      	cmp	r1, r3
 8011dec:	db4a      	blt.n	8011e84 <__ieee754_fmod+0x13c>
 8011dee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011df6:	485b      	ldr	r0, [pc, #364]	; (8011f64 <__ieee754_fmod+0x21c>)
 8011df8:	4282      	cmp	r2, r0
 8011dfa:	db57      	blt.n	8011eac <__ieee754_fmod+0x164>
 8011dfc:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8011e00:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8011e04:	1a89      	subs	r1, r1, r2
 8011e06:	1b98      	subs	r0, r3, r6
 8011e08:	eba4 070c 	sub.w	r7, r4, ip
 8011e0c:	2900      	cmp	r1, #0
 8011e0e:	d164      	bne.n	8011eda <__ieee754_fmod+0x192>
 8011e10:	4564      	cmp	r4, ip
 8011e12:	bf38      	it	cc
 8011e14:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	bfa4      	itt	ge
 8011e1c:	463c      	movge	r4, r7
 8011e1e:	4603      	movge	r3, r0
 8011e20:	ea53 0104 	orrs.w	r1, r3, r4
 8011e24:	d0c4      	beq.n	8011db0 <__ieee754_fmod+0x68>
 8011e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e2a:	db6b      	blt.n	8011f04 <__ieee754_fmod+0x1bc>
 8011e2c:	494d      	ldr	r1, [pc, #308]	; (8011f64 <__ieee754_fmod+0x21c>)
 8011e2e:	428a      	cmp	r2, r1
 8011e30:	db6e      	blt.n	8011f10 <__ieee754_fmod+0x1c8>
 8011e32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011e36:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8011e3a:	431d      	orrs	r5, r3
 8011e3c:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8011e40:	4620      	mov	r0, r4
 8011e42:	e7a5      	b.n	8011d90 <__ieee754_fmod+0x48>
 8011e44:	3901      	subs	r1, #1
 8011e46:	005b      	lsls	r3, r3, #1
 8011e48:	e7c1      	b.n	8011dce <__ieee754_fmod+0x86>
 8011e4a:	4946      	ldr	r1, [pc, #280]	; (8011f64 <__ieee754_fmod+0x21c>)
 8011e4c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	ddbe      	ble.n	8011dd2 <__ieee754_fmod+0x8a>
 8011e54:	3901      	subs	r1, #1
 8011e56:	005b      	lsls	r3, r3, #1
 8011e58:	e7fa      	b.n	8011e50 <__ieee754_fmod+0x108>
 8011e5a:	ea4f 5128 	mov.w	r1, r8, asr #20
 8011e5e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011e62:	e7b6      	b.n	8011dd2 <__ieee754_fmod+0x8a>
 8011e64:	3a01      	subs	r2, #1
 8011e66:	005b      	lsls	r3, r3, #1
 8011e68:	e7bc      	b.n	8011de4 <__ieee754_fmod+0x9c>
 8011e6a:	4a3e      	ldr	r2, [pc, #248]	; (8011f64 <__ieee754_fmod+0x21c>)
 8011e6c:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	ddb9      	ble.n	8011de8 <__ieee754_fmod+0xa0>
 8011e74:	3a01      	subs	r2, #1
 8011e76:	005b      	lsls	r3, r3, #1
 8011e78:	e7fa      	b.n	8011e70 <__ieee754_fmod+0x128>
 8011e7a:	ea4f 522e 	mov.w	r2, lr, asr #20
 8011e7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011e82:	e7b1      	b.n	8011de8 <__ieee754_fmod+0xa0>
 8011e84:	1a5c      	subs	r4, r3, r1
 8011e86:	2c1f      	cmp	r4, #31
 8011e88:	dc0a      	bgt.n	8011ea0 <__ieee754_fmod+0x158>
 8011e8a:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8011e8e:	fa08 f804 	lsl.w	r8, r8, r4
 8011e92:	fa2a f303 	lsr.w	r3, sl, r3
 8011e96:	ea43 0308 	orr.w	r3, r3, r8
 8011e9a:	fa0a f404 	lsl.w	r4, sl, r4
 8011e9e:	e7aa      	b.n	8011df6 <__ieee754_fmod+0xae>
 8011ea0:	4b31      	ldr	r3, [pc, #196]	; (8011f68 <__ieee754_fmod+0x220>)
 8011ea2:	1a5b      	subs	r3, r3, r1
 8011ea4:	fa0a f303 	lsl.w	r3, sl, r3
 8011ea8:	2400      	movs	r4, #0
 8011eaa:	e7a4      	b.n	8011df6 <__ieee754_fmod+0xae>
 8011eac:	eba0 0c02 	sub.w	ip, r0, r2
 8011eb0:	f1bc 0f1f 	cmp.w	ip, #31
 8011eb4:	dc0a      	bgt.n	8011ecc <__ieee754_fmod+0x184>
 8011eb6:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8011eba:	fa0e fe0c 	lsl.w	lr, lr, ip
 8011ebe:	fa27 f606 	lsr.w	r6, r7, r6
 8011ec2:	ea46 060e 	orr.w	r6, r6, lr
 8011ec6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8011eca:	e79b      	b.n	8011e04 <__ieee754_fmod+0xbc>
 8011ecc:	4e26      	ldr	r6, [pc, #152]	; (8011f68 <__ieee754_fmod+0x220>)
 8011ece:	1ab6      	subs	r6, r6, r2
 8011ed0:	fa07 f606 	lsl.w	r6, r7, r6
 8011ed4:	f04f 0c00 	mov.w	ip, #0
 8011ed8:	e794      	b.n	8011e04 <__ieee754_fmod+0xbc>
 8011eda:	4564      	cmp	r4, ip
 8011edc:	bf38      	it	cc
 8011ede:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	da05      	bge.n	8011ef2 <__ieee754_fmod+0x1aa>
 8011ee6:	0fe0      	lsrs	r0, r4, #31
 8011ee8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011eec:	0064      	lsls	r4, r4, #1
 8011eee:	3901      	subs	r1, #1
 8011ef0:	e789      	b.n	8011e06 <__ieee754_fmod+0xbe>
 8011ef2:	ea50 0307 	orrs.w	r3, r0, r7
 8011ef6:	f43f af5b 	beq.w	8011db0 <__ieee754_fmod+0x68>
 8011efa:	0ffb      	lsrs	r3, r7, #31
 8011efc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011f00:	007c      	lsls	r4, r7, #1
 8011f02:	e7f4      	b.n	8011eee <__ieee754_fmod+0x1a6>
 8011f04:	0fe1      	lsrs	r1, r4, #31
 8011f06:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011f0a:	0064      	lsls	r4, r4, #1
 8011f0c:	3a01      	subs	r2, #1
 8011f0e:	e78a      	b.n	8011e26 <__ieee754_fmod+0xde>
 8011f10:	1a89      	subs	r1, r1, r2
 8011f12:	2914      	cmp	r1, #20
 8011f14:	dc0a      	bgt.n	8011f2c <__ieee754_fmod+0x1e4>
 8011f16:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011f1a:	fa03 f202 	lsl.w	r2, r3, r2
 8011f1e:	40cc      	lsrs	r4, r1
 8011f20:	4322      	orrs	r2, r4
 8011f22:	410b      	asrs	r3, r1
 8011f24:	ea43 0105 	orr.w	r1, r3, r5
 8011f28:	4610      	mov	r0, r2
 8011f2a:	e731      	b.n	8011d90 <__ieee754_fmod+0x48>
 8011f2c:	291f      	cmp	r1, #31
 8011f2e:	dc07      	bgt.n	8011f40 <__ieee754_fmod+0x1f8>
 8011f30:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011f34:	40cc      	lsrs	r4, r1
 8011f36:	fa03 f202 	lsl.w	r2, r3, r2
 8011f3a:	4322      	orrs	r2, r4
 8011f3c:	462b      	mov	r3, r5
 8011f3e:	e7f1      	b.n	8011f24 <__ieee754_fmod+0x1dc>
 8011f40:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8011f44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011f48:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8011f4c:	32e2      	adds	r2, #226	; 0xe2
 8011f4e:	fa43 f202 	asr.w	r2, r3, r2
 8011f52:	e7f3      	b.n	8011f3c <__ieee754_fmod+0x1f4>
 8011f54:	7fefffff 	.word	0x7fefffff
 8011f58:	7ff00000 	.word	0x7ff00000
 8011f5c:	080133a0 	.word	0x080133a0
 8011f60:	fffffbed 	.word	0xfffffbed
 8011f64:	fffffc02 	.word	0xfffffc02
 8011f68:	fffffbe2 	.word	0xfffffbe2

08011f6c <_init>:
 8011f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f6e:	bf00      	nop
 8011f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f72:	bc08      	pop	{r3}
 8011f74:	469e      	mov	lr, r3
 8011f76:	4770      	bx	lr

08011f78 <_fini>:
 8011f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7a:	bf00      	nop
 8011f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f7e:	bc08      	pop	{r3}
 8011f80:	469e      	mov	lr, r3
 8011f82:	4770      	bx	lr
