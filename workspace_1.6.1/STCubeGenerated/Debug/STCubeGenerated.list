
STCubeGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001173c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  080118e0  080118e0  000218e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127e4  080127e4  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  080127e4  080127e4  000227e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127ec  080127ec  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127ec  080127ec  000227ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127f0  080127f0  000227f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080127f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005694  20000204  080129f8  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005898  080129f8  00035898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef8a  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006163  00000000  00000000  0005f1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002148  00000000  00000000  00065328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee8  00000000  00000000  00067470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f96a  00000000  00000000  00069358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b284  00000000  00000000  00088cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab751  00000000  00000000  000b3f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1e0  00000000  00000000  0015f6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080118c4 	.word	0x080118c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	080118c4 	.word	0x080118c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC1_Init+0x98>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <MX_ADC1_Init+0x9c>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_ADC1_Init+0x98>)
 8001016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_ADC1_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_ADC1_Init+0x98>)
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <MX_ADC1_Init+0xa0>)
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_ADC1_Init+0x98>)
 800104a:	2201      	movs	r2, #1
 800104c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_ADC1_Init+0x98>)
 800105e:	f001 fc03 	bl	8002868 <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001068:	f000 fd98 	bl	8001b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106c:	2301      	movs	r3, #1
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001070:	2301      	movs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_ADC1_Init+0x98>)
 800107e:	f001 fe57 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001088:	f000 fd88 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20004c84 	.word	0x20004c84
 8001098:	40012000 	.word	0x40012000
 800109c:	0f000001 	.word	0x0f000001

080010a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_ADC_MspInit+0x7c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d127      	bne.n	8001112 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_ADC_MspInit+0x80>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fa:	2302      	movs	r3, #2
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_ADC_MspInit+0x84>)
 800110e:	f002 f9ab 	bl	8003468 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012000 	.word	0x40012000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    ADCValue = HAL_ADC_GetValue(&hadc1);
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_ADC_ConvCpltCallback+0x20>)
 8001132:	f001 fddc 	bl	8002cee <HAL_ADC_GetValue>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_ADC_ConvCpltCallback+0x24>)
 800113c:	801a      	strh	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20004c84 	.word	0x20004c84
 800114c:	20000220 	.word	0x20000220

08001150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ADCSemaphore */
  ADCSemaphoreHandle = osSemaphoreNew(1, 1, &ADCSemaphore_attributes);
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <MX_FREERTOS_Init+0x38>)
 8001156:	2101      	movs	r1, #1
 8001158:	2001      	movs	r0, #1
 800115a:	f008 f956 	bl	800940a <osSemaphoreNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <MX_FREERTOS_Init+0x3c>)
 8001162:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <MX_FREERTOS_Init+0x40>)
 8001166:	2100      	movs	r1, #0
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <MX_FREERTOS_Init+0x44>)
 800116a:	f008 f8a1 	bl	80092b0 <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <MX_FREERTOS_Init+0x48>)
 8001172:	6013      	str	r3, [r2, #0]

  /* creation of Gps */
  GpsHandle = osThreadNew(GpsTask, NULL, &Gps_attributes);
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <MX_FREERTOS_Init+0x4c>)
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_FREERTOS_Init+0x50>)
 800117a:	f008 f899 	bl	80092b0 <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <MX_FREERTOS_Init+0x54>)
 8001182:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	08012274 	.word	0x08012274
 800118c:	20004ccc 	.word	0x20004ccc
 8001190:	0801222c 	.word	0x0801222c
 8001194:	080011a9 	.word	0x080011a9
 8001198:	20004cd0 	.word	0x20004cd0
 800119c:	08012250 	.word	0x08012250
 80011a0:	080012e5 	.word	0x080012e5
 80011a4:	20004cd4 	.word	0x20004cd4

080011a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  uint16_t localADC = ADCValue;
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <StartDefaultTask+0x118>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  SSD1306_Clear();
 80011b6:	f001 f83e 	bl	8002236 <SSD1306_Clear>
	  char numbers[16];
	  char battNumber[16];
	  float battVoltage = 0.0;
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28

	  SSD1306_GotoXY (0,0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 ff7c 	bl	80020c0 <SSD1306_GotoXY>
	  SSD1306_Puts ("ADC:", &Font_7x10, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	493e      	ldr	r1, [pc, #248]	; (80012c4 <StartDefaultTask+0x11c>)
 80011cc:	483e      	ldr	r0, [pc, #248]	; (80012c8 <StartDefaultTask+0x120>)
 80011ce:	f001 f80d 	bl	80021ec <SSD1306_Puts>

	  sprintf(numbers, "%d", localADC);
 80011d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	493c      	ldr	r1, [pc, #240]	; (80012cc <StartDefaultTask+0x124>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f00c f98e 	bl	800d4fc <siprintf>

	  SSD1306_GotoXY (40, 0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2028      	movs	r0, #40	; 0x28
 80011e4:	f000 ff6c 	bl	80020c0 <SSD1306_GotoXY>
	  SSD1306_Puts(numbers, &Font_7x10, 1);
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2201      	movs	r2, #1
 80011ee:	4935      	ldr	r1, [pc, #212]	; (80012c4 <StartDefaultTask+0x11c>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fffb 	bl	80021ec <SSD1306_Puts>

	  SSD1306_GotoXY (0,20);
 80011f6:	2114      	movs	r1, #20
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 ff61 	bl	80020c0 <SSD1306_GotoXY>
	  SSD1306_Puts ("BattADC:", &Font_7x10, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	4930      	ldr	r1, [pc, #192]	; (80012c4 <StartDefaultTask+0x11c>)
 8001202:	4833      	ldr	r0, [pc, #204]	; (80012d0 <StartDefaultTask+0x128>)
 8001204:	f000 fff2 	bl	80021ec <SSD1306_Puts>
	  battVoltage = localADC / (float)4095;
 8001208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	eddf 6a30 	vldr	s13, [pc, #192]	; 80012d4 <StartDefaultTask+0x12c>
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  sprintf(battNumber, "%0.2f", battVoltage);
 800121e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001220:	f7ff f99a 	bl	8000558 <__aeabi_f2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	f107 0008 	add.w	r0, r7, #8
 800122c:	492a      	ldr	r1, [pc, #168]	; (80012d8 <StartDefaultTask+0x130>)
 800122e:	f00c f965 	bl	800d4fc <siprintf>
	  SSD1306_GotoXY (40, 20);
 8001232:	2114      	movs	r1, #20
 8001234:	2028      	movs	r0, #40	; 0x28
 8001236:	f000 ff43 	bl	80020c0 <SSD1306_GotoXY>
	  SSD1306_Puts(battNumber, &Font_7x10, 1);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2201      	movs	r2, #1
 8001240:	4920      	ldr	r1, [pc, #128]	; (80012c4 <StartDefaultTask+0x11c>)
 8001242:	4618      	mov	r0, r3
 8001244:	f000 ffd2 	bl	80021ec <SSD1306_Puts>

	  SSD1306_GotoXY (0,40);
 8001248:	2128      	movs	r1, #40	; 0x28
 800124a:	2000      	movs	r0, #0
 800124c:	f000 ff38 	bl	80020c0 <SSD1306_GotoXY>
	  SSD1306_Puts ("Batt:", &Font_7x10, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	491c      	ldr	r1, [pc, #112]	; (80012c4 <StartDefaultTask+0x11c>)
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <StartDefaultTask+0x134>)
 8001256:	f000 ffc9 	bl	80021ec <SSD1306_Puts>
	  battVoltage = battVoltage * 4.2;
 800125a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800125c:	f7ff f97c 	bl	8000558 <__aeabi_f2d>
 8001260:	a315      	add	r3, pc, #84	; (adr r3, 80012b8 <StartDefaultTask+0x110>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9cf 	bl	8000608 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fcc1 	bl	8000bf8 <__aeabi_d2f>
 8001276:	4603      	mov	r3, r0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
	  sprintf(battNumber, "%.2f", battVoltage);
 800127a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800127c:	f7ff f96c 	bl	8000558 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	f107 0008 	add.w	r0, r7, #8
 8001288:	4915      	ldr	r1, [pc, #84]	; (80012e0 <StartDefaultTask+0x138>)
 800128a:	f00c f937 	bl	800d4fc <siprintf>
	  SSD1306_GotoXY (40, 40);
 800128e:	2128      	movs	r1, #40	; 0x28
 8001290:	2028      	movs	r0, #40	; 0x28
 8001292:	f000 ff15 	bl	80020c0 <SSD1306_GotoXY>
	  SSD1306_Puts(battNumber, &Font_7x10, 1);
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	2201      	movs	r2, #1
 800129c:	4909      	ldr	r1, [pc, #36]	; (80012c4 <StartDefaultTask+0x11c>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 ffa4 	bl	80021ec <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80012a4:	f000 fe66 	bl	8001f74 <SSD1306_UpdateScreen>
	  //HAL_ADC_Start_IT(&hadc1);
	  osDelay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ac:	f008 f892 	bl	80093d4 <osDelay>
  {
 80012b0:	e77e      	b.n	80011b0 <StartDefaultTask+0x8>
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	cccccccd 	.word	0xcccccccd
 80012bc:	4010cccc 	.word	0x4010cccc
 80012c0:	20000220 	.word	0x20000220
 80012c4:	20000000 	.word	0x20000000
 80012c8:	08011900 	.word	0x08011900
 80012cc:	08011908 	.word	0x08011908
 80012d0:	0801190c 	.word	0x0801190c
 80012d4:	457ff000 	.word	0x457ff000
 80012d8:	08011918 	.word	0x08011918
 80012dc:	08011920 	.word	0x08011920
 80012e0:	08011928 	.word	0x08011928

080012e4 <GpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GpsTask */
void GpsTask(void *argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  static uint16_t counter = 0;
	  char numbers[15];
	  sprintf(numbers, "%d", counter);
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <GpsTask+0xcc>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	492f      	ldr	r1, [pc, #188]	; (80013b4 <GpsTask+0xd0>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00c f8ff 	bl	800d4fc <siprintf>
	  	  if(writeFile("CSVTest.csv", numbers))
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4619      	mov	r1, r3
 8001304:	482c      	ldr	r0, [pc, #176]	; (80013b8 <GpsTask+0xd4>)
 8001306:	f000 fc69 	bl	8001bdc <writeFile>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d038      	beq.n	8001382 <GpsTask+0x9e>
	  	  {
	  		  writeFile("CSVTest.csv", ", ");
 8001310:	492a      	ldr	r1, [pc, #168]	; (80013bc <GpsTask+0xd8>)
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <GpsTask+0xd4>)
 8001314:	f000 fc62 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", numbers);
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4619      	mov	r1, r3
 800131e:	4826      	ldr	r0, [pc, #152]	; (80013b8 <GpsTask+0xd4>)
 8001320:	f000 fc5c 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", ", ");
 8001324:	4925      	ldr	r1, [pc, #148]	; (80013bc <GpsTask+0xd8>)
 8001326:	4824      	ldr	r0, [pc, #144]	; (80013b8 <GpsTask+0xd4>)
 8001328:	f000 fc58 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", numbers);
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4619      	mov	r1, r3
 8001332:	4821      	ldr	r0, [pc, #132]	; (80013b8 <GpsTask+0xd4>)
 8001334:	f000 fc52 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", ", ");
 8001338:	4920      	ldr	r1, [pc, #128]	; (80013bc <GpsTask+0xd8>)
 800133a:	481f      	ldr	r0, [pc, #124]	; (80013b8 <GpsTask+0xd4>)
 800133c:	f000 fc4e 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", numbers);
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	481c      	ldr	r0, [pc, #112]	; (80013b8 <GpsTask+0xd4>)
 8001348:	f000 fc48 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", ", ");
 800134c:	491b      	ldr	r1, [pc, #108]	; (80013bc <GpsTask+0xd8>)
 800134e:	481a      	ldr	r0, [pc, #104]	; (80013b8 <GpsTask+0xd4>)
 8001350:	f000 fc44 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", numbers);
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4619      	mov	r1, r3
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <GpsTask+0xd4>)
 800135c:	f000 fc3e 	bl	8001bdc <writeFile>
	  		  writeFile("CSVTest.csv", "\n");
 8001360:	4917      	ldr	r1, [pc, #92]	; (80013c0 <GpsTask+0xdc>)
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <GpsTask+0xd4>)
 8001364:	f000 fc3a 	bl	8001bdc <writeFile>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <GpsTask+0xe0>)
 8001370:	f002 f9fe 	bl	8003770 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137a:	4812      	ldr	r0, [pc, #72]	; (80013c4 <GpsTask+0xe0>)
 800137c:	f002 f9f8 	bl	8003770 <HAL_GPIO_WritePin>
 8001380:	e00b      	b.n	800139a <GpsTask+0xb6>
	  	  } else
	  	  {
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	480e      	ldr	r0, [pc, #56]	; (80013c4 <GpsTask+0xe0>)
 800138a:	f002 f9f1 	bl	8003770 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <GpsTask+0xe0>)
 8001396:	f002 f9eb 	bl	8003770 <HAL_GPIO_WritePin>
	  	  }
	  	  counter++;
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <GpsTask+0xcc>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <GpsTask+0xcc>)
 80013a4:	801a      	strh	r2, [r3, #0]
	  	osDelay(1000);
 80013a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013aa:	f008 f813 	bl	80093d4 <osDelay>
  {
 80013ae:	e79d      	b.n	80012ec <GpsTask+0x8>
 80013b0:	20000222 	.word	0x20000222
 80013b4:	08011908 	.word	0x08011908
 80013b8:	08011930 	.word	0x08011930
 80013bc:	0801193c 	.word	0x0801193c
 80013c0:	08011940 	.word	0x08011940
 80013c4:	40020400 	.word	0x40020400

080013c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <MX_GPIO_Init+0x110>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a3c      	ldr	r2, [pc, #240]	; (80014d8 <MX_GPIO_Init+0x110>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <MX_GPIO_Init+0x110>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_GPIO_Init+0x110>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a35      	ldr	r2, [pc, #212]	; (80014d8 <MX_GPIO_Init+0x110>)
 8001404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_GPIO_Init+0x110>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_GPIO_Init+0x110>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a2e      	ldr	r2, [pc, #184]	; (80014d8 <MX_GPIO_Init+0x110>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_GPIO_Init+0x110>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_GPIO_Init+0x110>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <MX_GPIO_Init+0x110>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_GPIO_Init+0x110>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2110      	movs	r1, #16
 8001452:	4822      	ldr	r0, [pc, #136]	; (80014dc <MX_GPIO_Init+0x114>)
 8001454:	f002 f98c 	bl	8003770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f240 3102 	movw	r1, #770	; 0x302
 800145e:	4820      	ldr	r0, [pc, #128]	; (80014e0 <MX_GPIO_Init+0x118>)
 8001460:	f002 f986 	bl	8003770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001464:	2310      	movs	r3, #16
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_GPIO_Init+0x114>)
 800147c:	f001 fff4 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001480:	f240 3302 	movw	r3, #770	; 0x302
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <MX_GPIO_Init+0x118>)
 800149a:	f001 ffe5 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149e:	2304      	movs	r3, #4
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <MX_GPIO_Init+0x118>)
 80014b2:	f001 ffd9 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CardDetection_Pin;
 80014b6:	2308      	movs	r3, #8
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CardDetection_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_GPIO_Init+0x118>)
 80014ca:	f001 ffcd 	bl	8003468 <HAL_GPIO_Init>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400

080014e4 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80014e8:	2201      	movs	r2, #1
 80014ea:	4903      	ldr	r1, [pc, #12]	; (80014f8 <GPS_Init+0x14>)
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <GPS_Init+0x18>)
 80014ee:	f004 f910 	bl	8005712 <HAL_UART_Receive_IT>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000224 	.word	0x20000224
 80014fc:	2000538c 	.word	0x2000538c

08001500 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <GPS_UART_CallBack+0x9c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d010      	beq.n	8001530 <GPS_UART_CallBack+0x30>
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <GPS_UART_CallBack+0xa0>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b25b      	sxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0b      	blt.n	8001530 <GPS_UART_CallBack+0x30>
		rx_buffer[rx_index++] = rx_data;
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <GPS_UART_CallBack+0xa0>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	b2d1      	uxtb	r1, r2
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <GPS_UART_CallBack+0xa0>)
 8001522:	7011      	strb	r1, [r2, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <GPS_UART_CallBack+0x9c>)
 8001528:	7819      	ldrb	r1, [r3, #0]
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <GPS_UART_CallBack+0xa4>)
 800152c:	5499      	strb	r1, [r3, r2]
 800152e:	e02c      	b.n	800158a <GPS_UART_CallBack+0x8a>
	} else {

		uint8_t j = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	71fb      	strb	r3, [r7, #7]
		for(uint8_t i = 0; i < sizeof(rx_buffer); i++)
 8001534:	2300      	movs	r3, #0
 8001536:	71bb      	strb	r3, [r7, #6]
 8001538:	e010      	b.n	800155c <GPS_UART_CallBack+0x5c>
		{
			rx_buffer_single[i] = rx_buffer[j];
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	4919      	ldr	r1, [pc, #100]	; (80015a4 <GPS_UART_CallBack+0xa4>)
 8001540:	5c89      	ldrb	r1, [r1, r2]
 8001542:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <GPS_UART_CallBack+0xa8>)
 8001544:	54d1      	strb	r1, [r2, r3]
			j += 2;
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	3302      	adds	r3, #2
 800154a:	71fb      	strb	r3, [r7, #7]
			if(rx_buffer[j] == '\n') break;
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <GPS_UART_CallBack+0xa4>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	2b0a      	cmp	r3, #10
 8001554:	d007      	beq.n	8001566 <GPS_UART_CallBack+0x66>
		for(uint8_t i = 0; i < sizeof(rx_buffer); i++)
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	3301      	adds	r3, #1
 800155a:	71bb      	strb	r3, [r7, #6]
 800155c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001560:	2b00      	cmp	r3, #0
 8001562:	daea      	bge.n	800153a <GPS_UART_CallBack+0x3a>
 8001564:	e000      	b.n	8001568 <GPS_UART_CallBack+0x68>
			if(rx_buffer[j] == '\n') break;
 8001566:	bf00      	nop

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer_single);
		#endif

		if(GPS_validate((char*) rx_buffer_single))
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <GPS_UART_CallBack+0xa8>)
 800156a:	f000 f821 	bl	80015b0 <GPS_validate>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <GPS_UART_CallBack+0x7a>
			GPS_parse((char*) rx_buffer_single);
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <GPS_UART_CallBack+0xa8>)
 8001576:	f000 f87d 	bl	8001674 <GPS_parse>
		rx_index = 0;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <GPS_UART_CallBack+0xa0>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer_single, 0, sizeof(rx_buffer_single));
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	2100      	movs	r1, #0
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <GPS_UART_CallBack+0xa8>)
 8001586:	f00b f931 	bl	800c7ec <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	4903      	ldr	r1, [pc, #12]	; (800159c <GPS_UART_CallBack+0x9c>)
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <GPS_UART_CallBack+0xac>)
 8001590:	f004 f8bf 	bl	8005712 <HAL_UART_Receive_IT>

}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000224 	.word	0x20000224
 80015a0:	20000225 	.word	0x20000225
 80015a4:	20004d30 	.word	0x20004d30
 80015a8:	20004db0 	.word	0x20004db0
 80015ac:	2000538c 	.word	0x2000538c

080015b0 <GPS_validate>:


int GPS_validate(char *nmeastr){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b24      	cmp	r3, #36	; 0x24
 80015ca:	d103      	bne.n	80015d4 <GPS_validate+0x24>
        i++;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80015d2:	e00c      	b.n	80015ee <GPS_validate+0x3e>
        return 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e047      	b.n	8001668 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4053      	eors	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        i++;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <GPS_validate+0x5c>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b2a      	cmp	r3, #42	; 0x2a
 8001604:	d002      	beq.n	800160c <GPS_validate+0x5c>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b4a      	cmp	r3, #74	; 0x4a
 800160a:	dde5      	ble.n	80015d8 <GPS_validate+0x28>
    }

    if(i >= 75){
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b4a      	cmp	r3, #74	; 0x4a
 8001610:	dd01      	ble.n	8001616 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001612:	2300      	movs	r3, #0
 8001614:	e028      	b.n	8001668 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b2a      	cmp	r3, #42	; 0x2a
 8001620:	d119      	bne.n	8001656 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3302      	adds	r3, #2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	490a      	ldr	r1, [pc, #40]	; (8001670 <GPS_validate+0xc0>)
 8001646:	4618      	mov	r0, r3
 8001648:	f00b ff58 	bl	800d4fc <siprintf>

    return((checkcalcstr[0] == check[0])
 800164c:	7a3a      	ldrb	r2, [r7, #8]
 800164e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001650:	429a      	cmp	r2, r3
 8001652:	d108      	bne.n	8001666 <GPS_validate+0xb6>
 8001654:	e001      	b.n	800165a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001656:	2300      	movs	r3, #0
 8001658:	e006      	b.n	8001668 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800165a:	7a7a      	ldrb	r2, [r7, #9]
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	429a      	cmp	r2, r3
 8001660:	d101      	bne.n	8001666 <GPS_validate+0xb6>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <GPS_validate+0xb8>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08011944 	.word	0x08011944

08001674 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af08      	add	r7, sp, #32
 800167a:	6078      	str	r0, [r7, #4]

    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800167c:	2206      	movs	r2, #6
 800167e:	4953      	ldr	r1, [pc, #332]	; (80017cc <GPS_parse+0x158>)
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f00b ffcc 	bl	800d61e <strncmp>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d118      	bne.n	80016be <GPS_parse+0x4a>

    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <GPS_parse+0x15c>)
 800168e:	9307      	str	r3, [sp, #28]
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <GPS_parse+0x160>)
 8001692:	9306      	str	r3, [sp, #24]
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <GPS_parse+0x164>)
 8001696:	9305      	str	r3, [sp, #20]
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <GPS_parse+0x168>)
 800169a:	9304      	str	r3, [sp, #16]
 800169c:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <GPS_parse+0x16c>)
 800169e:	9303      	str	r3, [sp, #12]
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <GPS_parse+0x170>)
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <GPS_parse+0x174>)
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <GPS_parse+0x178>)
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <GPS_parse+0x17c>)
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <GPS_parse+0x180>)
 80016b0:	4951      	ldr	r1, [pc, #324]	; (80017f8 <GPS_parse+0x184>)
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f00b ff42 	bl	800d53c <siscanf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	e082      	b.n	80017c4 <GPS_parse+0x150>
    		return;
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80016be:	2206      	movs	r2, #6
 80016c0:	494e      	ldr	r1, [pc, #312]	; (80017fc <GPS_parse+0x188>)
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f00b ffab 	bl	800d61e <strncmp>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d114      	bne.n	80016f8 <GPS_parse+0x84>

    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <GPS_parse+0x18c>)
 80016d0:	9305      	str	r3, [sp, #20]
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <GPS_parse+0x190>)
 80016d4:	9304      	str	r3, [sp, #16]
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <GPS_parse+0x194>)
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <GPS_parse+0x170>)
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <GPS_parse+0x174>)
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	4b42      	ldr	r3, [pc, #264]	; (80017ec <GPS_parse+0x178>)
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <GPS_parse+0x17c>)
 80016e8:	4a42      	ldr	r2, [pc, #264]	; (80017f4 <GPS_parse+0x180>)
 80016ea:	4948      	ldr	r1, [pc, #288]	; (800180c <GPS_parse+0x198>)
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f00b ff25 	bl	800d53c <siscanf>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	e065      	b.n	80017c4 <GPS_parse+0x150>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80016f8:	2206      	movs	r2, #6
 80016fa:	4945      	ldr	r1, [pc, #276]	; (8001810 <GPS_parse+0x19c>)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f00b ff8e 	bl	800d61e <strncmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12f      	bne.n	8001768 <GPS_parse+0xf4>

        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <GPS_parse+0x1a0>)
 800170a:	9303      	str	r3, [sp, #12]
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <GPS_parse+0x180>)
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <GPS_parse+0x170>)
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <GPS_parse+0x174>)
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4b34      	ldr	r3, [pc, #208]	; (80017ec <GPS_parse+0x178>)
 800171a:	4a35      	ldr	r2, [pc, #212]	; (80017f0 <GPS_parse+0x17c>)
 800171c:	493e      	ldr	r1, [pc, #248]	; (8001818 <GPS_parse+0x1a4>)
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f00b ff0c 	bl	800d53c <siscanf>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	dd0e      	ble.n	8001748 <GPS_parse+0xd4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <GPS_parse+0x1a8>)
 800172c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <GPS_parse+0x1a8>)
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	4618      	mov	r0, r3
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	f000 f883 	bl	8001844 <GPS_nmea_to_dec>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <GPS_parse+0x1a8>)
 8001744:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <GPS_parse+0x1a8>)
 800174a:	edd3 7a03 	vldr	s15, [r3, #12]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <GPS_parse+0x1a8>)
 8001750:	7e5b      	ldrb	r3, [r3, #25]
 8001752:	4618      	mov	r0, r3
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	f000 f874 	bl	8001844 <GPS_nmea_to_dec>
 800175c:	eef0 7a40 	vmov.f32	s15, s0
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <GPS_parse+0x1a8>)
 8001762:	edc3 7a00 	vstr	s15, [r3]
        	return;
 8001766:	e02d      	b.n	80017c4 <GPS_parse+0x150>
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001768:	2206      	movs	r2, #6
 800176a:	492d      	ldr	r1, [pc, #180]	; (8001820 <GPS_parse+0x1ac>)
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f00b ff56 	bl	800d61e <strncmp>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d125      	bne.n	80017c4 <GPS_parse+0x150>

        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <GPS_parse+0x1b0>)
 800177a:	9305      	str	r3, [sp, #20]
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <GPS_parse+0x1b4>)
 800177e:	9304      	str	r3, [sp, #16]
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <GPS_parse+0x1b8>)
 8001782:	9303      	str	r3, [sp, #12]
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <GPS_parse+0x194>)
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <GPS_parse+0x1bc>)
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <GPS_parse+0x1c0>)
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <GPS_parse+0x1c4>)
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <GPS_parse+0x1c8>)
 8001794:	492a      	ldr	r1, [pc, #168]	; (8001840 <GPS_parse+0x1cc>)
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f00b fed0 	bl	800d53c <siscanf>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	dd0f      	ble.n	80017c2 <GPS_parse+0x14e>
            GPS.speed_km = GPS_nmea_to_dec(GPS.speed_km, GPS.speed_km_unit);
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <GPS_parse+0x1a8>)
 80017a4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <GPS_parse+0x1a8>)
 80017aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017ae:	4618      	mov	r0, r3
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	f000 f846 	bl	8001844 <GPS_nmea_to_dec>
 80017b8:	eef0 7a40 	vmov.f32	s15, s0
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <GPS_parse+0x1a8>)
 80017be:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
        	return;
 80017c2:	bf00      	nop
    }
}
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	0801194c 	.word	0x0801194c
 80017d0:	20004d04 	.word	0x20004d04
 80017d4:	20004d00 	.word	0x20004d00
 80017d8:	20004cfc 	.word	0x20004cfc
 80017dc:	20004cf8 	.word	0x20004cf8
 80017e0:	20004cf4 	.word	0x20004cf4
 80017e4:	20004cf1 	.word	0x20004cf1
 80017e8:	20004ce4 	.word	0x20004ce4
 80017ec:	20004cf0 	.word	0x20004cf0
 80017f0:	20004ce8 	.word	0x20004ce8
 80017f4:	20004cec 	.word	0x20004cec
 80017f8:	08011954 	.word	0x08011954
 80017fc:	0801197c 	.word	0x0801197c
 8001800:	20004d10 	.word	0x20004d10
 8001804:	20004d0c 	.word	0x20004d0c
 8001808:	20004d08 	.word	0x20004d08
 800180c:	08011984 	.word	0x08011984
 8001810:	080119a4 	.word	0x080119a4
 8001814:	20004d14 	.word	0x20004d14
 8001818:	080119ac 	.word	0x080119ac
 800181c:	20004cd8 	.word	0x20004cd8
 8001820:	080119c8 	.word	0x080119c8
 8001824:	20004d2c 	.word	0x20004d2c
 8001828:	20004d28 	.word	0x20004d28
 800182c:	20004d25 	.word	0x20004d25
 8001830:	20004d24 	.word	0x20004d24
 8001834:	20004d20 	.word	0x20004d20
 8001838:	20004d1c 	.word	0x20004d1c
 800183c:	20004d18 	.word	0x20004d18
 8001840:	080119d0 	.word	0x080119d0

08001844 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	ed87 0a01 	vstr	s0, [r7, #4]
 800184e:	4603      	mov	r3, r0
 8001850:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001852:	ed97 7a01 	vldr	s14, [r7, #4]
 8001856:	eddf 6a20 	vldr	s13, [pc, #128]	; 80018d8 <GPS_nmea_to_dec+0x94>
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001862:	ee17 3a90 	vmov	r3, s15
 8001866:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2264      	movs	r2, #100	; 0x64
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001878:	ed97 7a01 	vldr	s14, [r7, #4]
 800187c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001880:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001884:	ed97 7a03 	vldr	s14, [r7, #12]
 8001888:	eddf 6a14 	vldr	s13, [pc, #80]	; 80018dc <GPS_nmea_to_dec+0x98>
 800188c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001890:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	ed97 7a02 	vldr	s14, [r7, #8]
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b53      	cmp	r3, #83	; 0x53
 80018ae:	d002      	beq.n	80018b6 <GPS_nmea_to_dec+0x72>
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2b57      	cmp	r3, #87	; 0x57
 80018b4:	d105      	bne.n	80018c2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80018b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ba:	eef1 7a67 	vneg.f32	s15, s15
 80018be:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	ee07 3a90 	vmov	s15, r3
}
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	42c80000 	.word	0x42c80000
 80018dc:	42700000 	.word	0x42700000

080018e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C1_Init+0x50>)
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <MX_I2C1_Init+0x54>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C1_Init+0x50>)
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_I2C1_Init+0x58>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_I2C1_Init+0x50>)
 80018fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001902:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <MX_I2C1_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_I2C1_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_I2C1_Init+0x50>)
 800191e:	f001 ff41 	bl	80037a4 <HAL_I2C_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001928:	f000 f938 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20004e30 	.word	0x20004e30
 8001934:	40005400 	.word	0x40005400
 8001938:	00061a80 	.word	0x00061a80

0800193c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12b      	bne.n	80019b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197e:	2312      	movs	r3, #18
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001982:	2301      	movs	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800198a:	2304      	movs	r3, #4
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <HAL_I2C_MspInit+0x8c>)
 8001996:	f001 fd67 	bl	8003468 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 80019a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40005400 	.word	0x40005400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400

080019cc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 80019d4:	f7ff fd94 	bl	8001500 <GPS_UART_CallBack>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e4:	f000 feda 	bl	800279c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e8:	f000 f852 	bl	8001a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ec:	f7ff fcec 	bl	80013c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019f0:	f7ff ff76 	bl	80018e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80019f4:	f000 f97c 	bl	8001cf0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80019f8:	f000 fe34 	bl	8002664 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80019fc:	f004 fbc8 	bl	8006190 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001a00:	f7ff fafc 	bl	8000ffc <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a04:	f000 f8a4 	bl	8001b50 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001a08:	f7ff fd6c 	bl	80014e4 <GPS_Init>
  SSD1306_Init();
 8001a0c:	f000 f9ee 	bl	8001dec <SSD1306_Init>
  SSD1306_Clear();
 8001a10:	f000 fc11 	bl	8002236 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8001a14:	f000 faae 	bl	8001f74 <SSD1306_UpdateScreen>
  initSdCard();
 8001a18:	f000 f8c6 	bl	8001ba8 <initSdCard>
  __HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <main+0x98>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <main+0x98>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0220 	orr.w	r2, r2, #32
 8001a2a:	615a      	str	r2, [r3, #20]
  __HAL_ADC_ENABLE_IT(&hadc1, ADC_FLAG_EOC);
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <main+0x9c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <main+0x9c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0202 	orr.w	r2, r2, #2
 8001a3a:	605a      	str	r2, [r3, #4]
  HAL_ADC_Start_IT(&hadc1);
 8001a3c:	480f      	ldr	r0, [pc, #60]	; (8001a7c <main+0x9c>)
 8001a3e:	f000 ff57 	bl	80028f0 <HAL_ADC_Start_IT>
  //HAL_ADCEx_Calibration_Start(&hadc1);

  SSD1306_GotoXY (0,0);
 8001a42:	2100      	movs	r1, #0
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 fb3b 	bl	80020c0 <SSD1306_GotoXY>
  SSD1306_Puts ("SD:", &Font_7x10, 1);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <main+0xa0>)
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <main+0xa4>)
 8001a50:	f000 fbcc 	bl	80021ec <SSD1306_Puts>

  SSD1306_UpdateScreen();
 8001a54:	f000 fa8e 	bl	8001f74 <SSD1306_UpdateScreen>

  HAL_Delay(1000);
 8001a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5c:	f000 fee0 	bl	8002820 <HAL_Delay>
  writeFile("CSVTest.csv", "One, Two, Three, Four, Five\n");
 8001a60:	4909      	ldr	r1, [pc, #36]	; (8001a88 <main+0xa8>)
 8001a62:	480a      	ldr	r0, [pc, #40]	; (8001a8c <main+0xac>)
 8001a64:	f000 f8ba 	bl	8001bdc <writeFile>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001a68:	f007 fbd8 	bl	800921c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001a6c:	f7ff fb70 	bl	8001150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001a70:	f007 fbf8 	bl	8009264 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <main+0x94>
 8001a76:	bf00      	nop
 8001a78:	2000538c 	.word	0x2000538c
 8001a7c:	20004c84 	.word	0x20004c84
 8001a80:	20000000 	.word	0x20000000
 8001a84:	080119f0 	.word	0x080119f0
 8001a88:	080119f4 	.word	0x080119f4
 8001a8c:	08011a14 	.word	0x08011a14

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b094      	sub	sp, #80	; 0x50
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 0320 	add.w	r3, r7, #32
 8001a9a:	2230      	movs	r2, #48	; 0x30
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00a fea4 	bl	800c7ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <SystemClock_Config+0xb8>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	4a22      	ldr	r2, [pc, #136]	; (8001b48 <SystemClock_Config+0xb8>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <SystemClock_Config+0xb8>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <SystemClock_Config+0xbc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001adc:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <SystemClock_Config+0xbc>)
 8001ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <SystemClock_Config+0xbc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af4:	2301      	movs	r3, #1
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af8:	2310      	movs	r3, #16
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fbc7 	bl	8004298 <HAL_RCC_OscConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b10:	f000 f844 	bl	8001b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b14:	230f      	movs	r3, #15
 8001b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fe2a 	bl	8004788 <HAL_RCC_ClockConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b3a:	f000 f82f 	bl	8001b9c <Error_Handler>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3750      	adds	r7, #80	; 0x50
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40007000 	.word	0x40007000

08001b50 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2025      	movs	r0, #37	; 0x25
 8001b5a:	f001 fbc9 	bl	80032f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b5e:	2025      	movs	r0, #37	; 0x25
 8001b60:	f001 fbe2 	bl	8003328 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2106      	movs	r1, #6
 8001b68:	2012      	movs	r0, #18
 8001b6a:	f001 fbc1 	bl	80032f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b6e:	2012      	movs	r0, #18
 8001b70:	f001 fbda 	bl	8003328 <HAL_NVIC_EnableIRQ>
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8a:	f000 fe29 	bl	80027e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40000400 	.word	0x40000400

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <initSdCard>:
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

bool initSdCard()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001bac:	2201      	movs	r2, #1
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <initSdCard+0x28>)
 8001bb0:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <initSdCard+0x2c>)
 8001bb2:	f006 fdc7 	bl	8008744 <f_mount>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <initSdCard+0x30>)
 8001bbc:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <initSdCard+0x30>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <initSdCard+0x22>
	{
	   	return false;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <initSdCard+0x24>
	} else
	{
	   	return true;
 8001bca:	2301      	movs	r3, #1
	}
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	08011a20 	.word	0x08011a20
 8001bd4:	20004e84 	.word	0x20004e84
 8001bd8:	200050b8 	.word	0x200050b8

08001bdc <writeFile>:


bool writeFile(char* fileName, char* string)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	if(openFileRead(fileName))
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f846 	bl	8001c78 <openFileRead>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <writeFile+0x1e>
	{
		f_close(&fil);
 8001bf2:	481e      	ldr	r0, [pc, #120]	; (8001c6c <writeFile+0x90>)
 8001bf4:	f007 f9fc 	bl	8008ff0 <f_close>
 8001bf8:	e002      	b.n	8001c00 <writeFile+0x24>
	} else
	{
		makeNewFile(fileName);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f858 	bl	8001cb0 <makeNewFile>
	}

	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_APPEND);
 8001c00:	2232      	movs	r2, #50	; 0x32
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4819      	ldr	r0, [pc, #100]	; (8001c6c <writeFile+0x90>)
 8001c06:	f006 fe01 	bl	800880c <f_open>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <writeFile+0x94>)
 8001c10:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <writeFile+0x94>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d123      	bne.n	8001c62 <writeFile+0x86>
		//Copy in a string
		uint16_t stringLength = strlen(string);
 8001c1a:	6838      	ldr	r0, [r7, #0]
 8001c1c:	f7fe fae0 	bl	80001e0 <strlen>
 8001c20:	4603      	mov	r3, r0
 8001c22:	81fb      	strh	r3, [r7, #14]
	    strncpy((char*)string, "a new file is made!\n", stringLength);
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4912      	ldr	r1, [pc, #72]	; (8001c74 <writeFile+0x98>)
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f00b fd09 	bl	800d642 <strncpy>
	    UINT bytesWrote;
	    fres = f_write(&fil, string, stringLength, &bytesWrote);
 8001c30:	89fa      	ldrh	r2, [r7, #14]
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <writeFile+0x90>)
 8001c3a:	f006 ffac 	bl	8008b96 <f_write>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <writeFile+0x94>)
 8001c44:	701a      	strb	r2, [r3, #0]
	    if(fres == FR_OK) {
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <writeFile+0x94>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <writeFile+0x7c>
	    	f_close(&fil);
 8001c4e:	4807      	ldr	r0, [pc, #28]	; (8001c6c <writeFile+0x90>)
 8001c50:	f007 f9ce 	bl	8008ff0 <f_close>
	    	return true;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e005      	b.n	8001c64 <writeFile+0x88>
	    } else {
	    	f_close(&fil);
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <writeFile+0x90>)
 8001c5a:	f007 f9c9 	bl	8008ff0 <f_close>
	    	return false;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <writeFile+0x88>
	    }
	} else {
	   	return false;
 8001c62:	2300      	movs	r3, #0
	}
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200050bc 	.word	0x200050bc
 8001c70:	200050b8 	.word	0x200050b8
 8001c74:	08011a24 	.word	0x08011a24

08001c78 <openFileRead>:

bool openFileRead(char* fileName)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	fres = f_open(&fil, fileName, FA_READ);
 8001c80:	2201      	movs	r2, #1
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <openFileRead+0x30>)
 8001c86:	f006 fdc1 	bl	800880c <f_open>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <openFileRead+0x34>)
 8001c90:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <openFileRead+0x34>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <openFileRead+0x26>
	    return false;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <openFileRead+0x28>
    } else
    {
    	return true;
 8001c9e:	2301      	movs	r3, #1
    }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200050bc 	.word	0x200050bc
 8001cac:	200050b8 	.word	0x200050b8

08001cb0 <makeNewFile>:
		return "file error";
	}
}

bool makeNewFile(char* fileName)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	//Make a new file with the "fileName", make sure ".txt" is included in the fileName
	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 8001cb8:	2216      	movs	r2, #22
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <makeNewFile+0x38>)
 8001cbe:	f006 fda5 	bl	800880c <f_open>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <makeNewFile+0x3c>)
 8001cc8:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <makeNewFile+0x3c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d104      	bne.n	8001cdc <makeNewFile+0x2c>
		f_close(&fil);
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <makeNewFile+0x38>)
 8001cd4:	f007 f98c 	bl	8008ff0 <f_close>
		return true;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <makeNewFile+0x2e>
	} else {
	   	return false;
 8001cdc:	2300      	movs	r3, #0
	}
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200050bc 	.word	0x200050bc
 8001cec:	200050b8 	.word	0x200050b8

08001cf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_SPI1_Init+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d24:	2230      	movs	r2, #48	; 0x30
 8001d26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d3c:	220a      	movs	r2, #10
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_SPI1_Init+0x64>)
 8001d42:	f002 ff23 	bl	8004b8c <HAL_SPI_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d4c:	f7ff ff26 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200052ec 	.word	0x200052ec
 8001d58:	40013000 	.word	0x40013000

08001d5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_SPI_MspInit+0x84>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12b      	bne.n	8001dd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001db6:	23e0      	movs	r3, #224	; 0xe0
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001dd2:	f001 fb49 	bl	8003468 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40013000 	.word	0x40013000
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000

08001dec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001df2:	f000 fa29 	bl	8002248 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001df6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2178      	movs	r1, #120	; 0x78
 8001dfe:	485b      	ldr	r0, [pc, #364]	; (8001f6c <SSD1306_Init+0x180>)
 8001e00:	f001 ff12 	bl	8003c28 <HAL_I2C_IsDeviceReady>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e0a9      	b.n	8001f62 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001e0e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001e12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e14:	e002      	b.n	8001e1c <SSD1306_Init+0x30>
		p--;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f9      	bne.n	8001e16 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001e22:	22ae      	movs	r2, #174	; 0xae
 8001e24:	2100      	movs	r1, #0
 8001e26:	2078      	movs	r0, #120	; 0x78
 8001e28:	f000 fa6c 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2078      	movs	r0, #120	; 0x78
 8001e32:	f000 fa67 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e36:	2210      	movs	r2, #16
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2078      	movs	r0, #120	; 0x78
 8001e3c:	f000 fa62 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e40:	22b0      	movs	r2, #176	; 0xb0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2078      	movs	r0, #120	; 0x78
 8001e46:	f000 fa5d 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e4a:	22c8      	movs	r2, #200	; 0xc8
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2078      	movs	r0, #120	; 0x78
 8001e50:	f000 fa58 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	2078      	movs	r0, #120	; 0x78
 8001e5a:	f000 fa53 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e5e:	2210      	movs	r2, #16
 8001e60:	2100      	movs	r1, #0
 8001e62:	2078      	movs	r0, #120	; 0x78
 8001e64:	f000 fa4e 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2078      	movs	r0, #120	; 0x78
 8001e6e:	f000 fa49 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e72:	2281      	movs	r2, #129	; 0x81
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	; 0x78
 8001e78:	f000 fa44 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2078      	movs	r0, #120	; 0x78
 8001e82:	f000 fa3f 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e86:	22a1      	movs	r2, #161	; 0xa1
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2078      	movs	r0, #120	; 0x78
 8001e8c:	f000 fa3a 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e90:	22a6      	movs	r2, #166	; 0xa6
 8001e92:	2100      	movs	r1, #0
 8001e94:	2078      	movs	r0, #120	; 0x78
 8001e96:	f000 fa35 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e9a:	22a8      	movs	r2, #168	; 0xa8
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	; 0x78
 8001ea0:	f000 fa30 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ea4:	223f      	movs	r2, #63	; 0x3f
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2078      	movs	r0, #120	; 0x78
 8001eaa:	f000 fa2b 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001eae:	22a4      	movs	r2, #164	; 0xa4
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2078      	movs	r0, #120	; 0x78
 8001eb4:	f000 fa26 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001eb8:	22d3      	movs	r2, #211	; 0xd3
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2078      	movs	r0, #120	; 0x78
 8001ebe:	f000 fa21 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2078      	movs	r0, #120	; 0x78
 8001ec8:	f000 fa1c 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ecc:	22d5      	movs	r2, #213	; 0xd5
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2078      	movs	r0, #120	; 0x78
 8001ed2:	f000 fa17 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ed6:	22f0      	movs	r2, #240	; 0xf0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2078      	movs	r0, #120	; 0x78
 8001edc:	f000 fa12 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001ee0:	22d9      	movs	r2, #217	; 0xd9
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2078      	movs	r0, #120	; 0x78
 8001ee6:	f000 fa0d 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001eea:	2222      	movs	r2, #34	; 0x22
 8001eec:	2100      	movs	r1, #0
 8001eee:	2078      	movs	r0, #120	; 0x78
 8001ef0:	f000 fa08 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ef4:	22da      	movs	r2, #218	; 0xda
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2078      	movs	r0, #120	; 0x78
 8001efa:	f000 fa03 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001efe:	2212      	movs	r2, #18
 8001f00:	2100      	movs	r1, #0
 8001f02:	2078      	movs	r0, #120	; 0x78
 8001f04:	f000 f9fe 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f08:	22db      	movs	r2, #219	; 0xdb
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2078      	movs	r0, #120	; 0x78
 8001f0e:	f000 f9f9 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001f12:	2220      	movs	r2, #32
 8001f14:	2100      	movs	r1, #0
 8001f16:	2078      	movs	r0, #120	; 0x78
 8001f18:	f000 f9f4 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001f1c:	228d      	movs	r2, #141	; 0x8d
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2078      	movs	r0, #120	; 0x78
 8001f22:	f000 f9ef 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001f26:	2214      	movs	r2, #20
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2078      	movs	r0, #120	; 0x78
 8001f2c:	f000 f9ea 	bl	8002304 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f30:	22af      	movs	r2, #175	; 0xaf
 8001f32:	2100      	movs	r1, #0
 8001f34:	2078      	movs	r0, #120	; 0x78
 8001f36:	f000 f9e5 	bl	8002304 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f3a:	222e      	movs	r2, #46	; 0x2e
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2078      	movs	r0, #120	; 0x78
 8001f40:	f000 f9e0 	bl	8002304 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 f843 	bl	8001fd0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001f4a:	f000 f813 	bl	8001f74 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <SSD1306_Init+0x184>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SSD1306_Init+0x184>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SSD1306_Init+0x184>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20004e30 	.word	0x20004e30
 8001f70:	20000628 	.word	0x20000628

08001f74 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	e01d      	b.n	8001fbc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	3b50      	subs	r3, #80	; 0x50
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 f9ba 	bl	8002304 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 f9b5 	bl	8002304 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 f9b0 	bl	8002304 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <SSD1306_UpdateScreen+0x58>)
 8001faa:	441a      	add	r2, r3
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	2078      	movs	r0, #120	; 0x78
 8001fb2:	f000 f95f 	bl	8002274 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b07      	cmp	r3, #7
 8001fc0:	d9de      	bls.n	8001f80 <SSD1306_UpdateScreen+0xc>
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000228 	.word	0x20000228

08001fd0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <SSD1306_Fill+0x14>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <SSD1306_Fill+0x16>
 8001fe4:	23ff      	movs	r3, #255	; 0xff
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	4619      	mov	r1, r3
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <SSD1306_Fill+0x2c>)
 8001fee:	f00a fbfd 	bl	800c7ec <memset>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000228 	.word	0x20000228

08002000 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
 800200a:	460b      	mov	r3, r1
 800200c:	80bb      	strh	r3, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	70fb      	strb	r3, [r7, #3]
	if (
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	2b7f      	cmp	r3, #127	; 0x7f
 8002016:	d848      	bhi.n	80020aa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	2b3f      	cmp	r3, #63	; 0x3f
 800201c:	d845      	bhi.n	80020aa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <SSD1306_DrawPixel+0xb8>)
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d11a      	bne.n	8002070 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	88bb      	ldrh	r3, [r7, #4]
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	b298      	uxth	r0, r3
 8002042:	4603      	mov	r3, r0
 8002044:	01db      	lsls	r3, r3, #7
 8002046:	4413      	add	r3, r2
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	b25a      	sxtb	r2, r3
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	b25b      	sxtb	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b259      	sxtb	r1, r3
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	4603      	mov	r3, r0
 8002064:	01db      	lsls	r3, r3, #7
 8002066:	4413      	add	r3, r2
 8002068:	b2c9      	uxtb	r1, r1
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 800206c:	54d1      	strb	r1, [r2, r3]
 800206e:	e01d      	b.n	80020ac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	b298      	uxth	r0, r3
 8002078:	4603      	mov	r3, r0
 800207a:	01db      	lsls	r3, r3, #7
 800207c:	4413      	add	r3, r2
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	b25a      	sxtb	r2, r3
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	b25b      	sxtb	r3, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	b25b      	sxtb	r3, r3
 8002096:	4013      	ands	r3, r2
 8002098:	b259      	sxtb	r1, r3
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	4603      	mov	r3, r0
 800209e:	01db      	lsls	r3, r3, #7
 80020a0:	4413      	add	r3, r2
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 80020a6:	54d1      	strb	r1, [r2, r3]
 80020a8:	e000      	b.n	80020ac <SSD1306_DrawPixel+0xac>
		return;
 80020aa:	bf00      	nop
	}
}
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000628 	.word	0x20000628
 80020bc:	20000228 	.word	0x20000228

080020c0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	460a      	mov	r2, r1
 80020ca:	80fb      	strh	r3, [r7, #6]
 80020cc:	4613      	mov	r3, r2
 80020ce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80020d0:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <SSD1306_GotoXY+0x28>)
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <SSD1306_GotoXY+0x28>)
 80020d8:	88bb      	ldrh	r3, [r7, #4]
 80020da:	8053      	strh	r3, [r2, #2]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20000628 	.word	0x20000628

080020ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <SSD1306_Putc+0xfc>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
	if (
 8002108:	2b7f      	cmp	r3, #127	; 0x7f
 800210a:	dc07      	bgt.n	800211c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <SSD1306_Putc+0xfc>)
 800210e:	885b      	ldrh	r3, [r3, #2]
 8002110:	461a      	mov	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002118:	2b3f      	cmp	r3, #63	; 0x3f
 800211a:	dd01      	ble.n	8002120 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800211c:	2300      	movs	r3, #0
 800211e:	e05e      	b.n	80021de <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e04b      	b.n	80021be <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	3b20      	subs	r3, #32
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	7849      	ldrb	r1, [r1, #1]
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4619      	mov	r1, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	440b      	add	r3, r1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e030      	b.n	80021ac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <SSD1306_Putc+0xfc>)
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	b29b      	uxth	r3, r3
 8002162:	4413      	add	r3, r2
 8002164:	b298      	uxth	r0, r3
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <SSD1306_Putc+0xfc>)
 8002168:	885a      	ldrh	r2, [r3, #2]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	79ba      	ldrb	r2, [r7, #6]
 8002174:	4619      	mov	r1, r3
 8002176:	f7ff ff43 	bl	8002000 <SSD1306_DrawPixel>
 800217a:	e014      	b.n	80021a6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <SSD1306_Putc+0xfc>)
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4413      	add	r3, r2
 8002186:	b298      	uxth	r0, r3
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <SSD1306_Putc+0xfc>)
 800218a:	885a      	ldrh	r2, [r3, #2]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4413      	add	r3, r2
 8002192:	b299      	uxth	r1, r3
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	f7ff ff2d 	bl	8002000 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	3301      	adds	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d3c8      	bcc.n	800214a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	461a      	mov	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d3ad      	bcc.n	8002126 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <SSD1306_Putc+0xfc>)
 80021cc:	881a      	ldrh	r2, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <SSD1306_Putc+0xfc>)
 80021da:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80021dc:	79fb      	ldrb	r3, [r7, #7]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000628 	.word	0x20000628

080021ec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	4613      	mov	r3, r2
 80021f8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80021fa:	e012      	b.n	8002222 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	79fa      	ldrb	r2, [r7, #7]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff71 	bl	80020ec <SSD1306_Putc>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d002      	beq.n	800221c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	e008      	b.n	800222e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e8      	bne.n	80021fc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	781b      	ldrb	r3, [r3, #0]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff fec8 	bl	8001fd0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002240:	f7ff fe98 	bl	8001f74 <SSD1306_UpdateScreen>
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <ssd1306_I2C_Init+0x28>)
 8002250:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002252:	e002      	b.n	800225a <ssd1306_I2C_Init+0x12>
		p--;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
	while(p>0)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	0003d090 	.word	0x0003d090

08002274 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b0c7      	sub	sp, #284	; 0x11c
 8002278:	af02      	add	r7, sp, #8
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	4639      	mov	r1, r7
 8002280:	600a      	str	r2, [r1, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	4622      	mov	r2, r4
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	1dbb      	adds	r3, r7, #6
 800228c:	4602      	mov	r2, r0
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	460a      	mov	r2, r1
 8002294:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	1dba      	adds	r2, r7, #6
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022a6:	e010      	b.n	80022ca <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80022a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022ac:	463a      	mov	r2, r7
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	441a      	add	r2, r3
 80022b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022b6:	3301      	adds	r3, #1
 80022b8:	7811      	ldrb	r1, [r2, #0]
 80022ba:	f107 020c 	add.w	r2, r7, #12
 80022be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80022c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022c4:	3301      	adds	r3, #1
 80022c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	1d3a      	adds	r2, r7, #4
 80022d2:	8812      	ldrh	r2, [r2, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8e7      	bhi.n	80022a8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80022d8:	1dfb      	adds	r3, r7, #7
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b299      	uxth	r1, r3
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f107 020c 	add.w	r2, r7, #12
 80022ea:	200a      	movs	r0, #10
 80022ec:	9000      	str	r0, [sp, #0]
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <ssd1306_I2C_WriteMulti+0x8c>)
 80022f0:	f001 fb9c 	bl	8003a2c <HAL_I2C_Master_Transmit>
}
 80022f4:	bf00      	nop
 80022f6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop
 8002300:	20004e30 	.word	0x20004e30

08002304 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af02      	add	r7, sp, #8
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	460b      	mov	r3, r1
 8002310:	71bb      	strb	r3, [r7, #6]
 8002312:	4613      	mov	r3, r2
 8002314:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800231a:	797b      	ldrb	r3, [r7, #5]
 800231c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	b299      	uxth	r1, r3
 8002322:	f107 020c 	add.w	r2, r7, #12
 8002326:	230a      	movs	r3, #10
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2302      	movs	r3, #2
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <ssd1306_I2C_Write+0x38>)
 800232e:	f001 fb7d 	bl	8003a2c <HAL_I2C_Master_Transmit>
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20004e30 	.word	0x20004e30

08002340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_MspInit+0x54>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_MspInit+0x54>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_MspInit+0x54>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_MspInit+0x54>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_MspInit+0x54>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_MspInit+0x54>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	210f      	movs	r1, #15
 8002382:	f06f 0001 	mvn.w	r0, #1
 8002386:	f000 ffb3 	bl	80032f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	201d      	movs	r0, #29
 80023ae:	f000 ff9f 	bl	80032f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023b2:	201d      	movs	r0, #29
 80023b4:	f000 ffb8 	bl	8003328 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_InitTick+0xa0>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_InitTick+0xa0>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	6413      	str	r3, [r2, #64]	; 0x40
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_InitTick+0xa0>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023d4:	f107 0210 	add.w	r2, r7, #16
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 fba2 	bl	8004b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023e4:	f002 fb78 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 80023e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_InitTick+0xa4>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0c9b      	lsrs	r3, r3, #18
 80023f4:	3b01      	subs	r3, #1
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_InitTick+0xa8>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_InitTick+0xac>)
 80023fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_InitTick+0xa8>)
 8002400:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002404:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_InitTick+0xa8>)
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_InitTick+0xa8>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_InitTick+0xa8>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002418:	4809      	ldr	r0, [pc, #36]	; (8002440 <HAL_InitTick+0xa8>)
 800241a:	f002 fead 	bl	8005178 <HAL_TIM_Base_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <HAL_InitTick+0xa8>)
 8002426:	f002 ff01 	bl	800522c <HAL_TIM_Base_Start_IT>
 800242a:	4603      	mov	r3, r0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3730      	adds	r7, #48	; 0x30
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	431bde83 	.word	0x431bde83
 8002440:	20005344 	.word	0x20005344
 8002444:	40000400 	.word	0x40000400

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800244c:	e7fe      	b.n	800244c <NMI_Handler+0x4>

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler+0x4>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <UsageFault_Handler+0x4>

08002466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <ADC_IRQHandler+0x10>)
 800247a:	f000 faf7 	bl	8002a6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20004c84 	.word	0x20004c84

08002488 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM3_IRQHandler+0x10>)
 800248e:	f002 ff2f 	bl	80052f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20005344 	.word	0x20005344

0800249c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_RxCpltCallback(&huart1);
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <USART1_IRQHandler+0x14>)
 80024a2:	f7ff fa93 	bl	80019cc <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a6:	4802      	ldr	r0, [pc, #8]	; (80024b0 <USART1_IRQHandler+0x14>)
 80024a8:	f003 f964 	bl	8005774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	2000538c 	.word	0x2000538c

080024b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_kill>:

int _kill(int pid, int sig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ce:	f00a f955 	bl	800c77c <__errno>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2216      	movs	r2, #22
 80024d6:	601a      	str	r2, [r3, #0]
	return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_exit>:

void _exit (int status)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe7 	bl	80024c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f6:	e7fe      	b.n	80024f6 <_exit+0x12>

080024f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e00a      	b.n	8002520 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800250a:	f3af 8000 	nop.w
 800250e:	4601      	mov	r1, r0
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	60ba      	str	r2, [r7, #8]
 8002516:	b2ca      	uxtb	r2, r1
 8002518:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf0      	blt.n	800250a <_read+0x12>
	}

return len;
 8002528:	687b      	ldr	r3, [r7, #4]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e009      	b.n	8002558 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	60ba      	str	r2, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3301      	adds	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	dbf1      	blt.n	8002544 <_write+0x12>
	}
	return len;
 8002560:	687b      	ldr	r3, [r7, #4]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <_close>:

int _close(int file)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
	return -1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002592:	605a      	str	r2, [r3, #4]
	return 0;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <_isatty>:

int _isatty(int file)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
	return 1;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	return 0;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f00a f8ba 	bl	800c77c <__errno>
 8002608:	4603      	mov	r3, r0
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <_sbrk+0x64>)
 8002624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20010000 	.word	0x20010000
 8002634:	00000400 	.word	0x00000400
 8002638:	20000630 	.word	0x20000630
 800263c:	20005898 	.word	0x20005898

08002640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <SystemInit+0x20>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <SystemInit+0x20>)
 800264c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <MX_USART1_UART_Init+0x50>)
 800266c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 8002670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 800268a:	220c      	movs	r2, #12
 800268c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800269a:	4805      	ldr	r0, [pc, #20]	; (80026b0 <MX_USART1_UART_Init+0x4c>)
 800269c:	f002 ffec 	bl	8005678 <HAL_UART_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026a6:	f7ff fa79 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000538c 	.word	0x2000538c
 80026b4:	40011000 	.word	0x40011000

080026b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_UART_MspInit+0x84>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12c      	bne.n	8002734 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026e4:	f043 0310 	orr.w	r3, r3, #16
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a10      	ldr	r2, [pc, #64]	; (8002740 <HAL_UART_MspInit+0x88>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_UART_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002712:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002724:	2307      	movs	r3, #7
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_UART_MspInit+0x8c>)
 8002730:	f000 fe9a 	bl	8003468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40011000 	.word	0x40011000
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000

08002748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800274e:	490e      	ldr	r1, [pc, #56]	; (8002788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002754:	e002      	b.n	800275c <LoopCopyDataInit>

08002756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275a:	3304      	adds	r3, #4

0800275c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800275c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002760:	d3f9      	bcc.n	8002756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002764:	4c0b      	ldr	r4, [pc, #44]	; (8002794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002768:	e001      	b.n	800276e <LoopFillZerobss>

0800276a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800276c:	3204      	adds	r2, #4

0800276e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002770:	d3fb      	bcc.n	800276a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002772:	f7ff ff65 	bl	8002640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002776:	f00a f807 	bl	800c788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277a:	f7ff f931 	bl	80019e0 <main>
  bx  lr    
 800277e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002780:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002788:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800278c:	080127f4 	.word	0x080127f4
  ldr r2, =_sbss
 8002790:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002794:	20005898 	.word	0x20005898

08002798 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <DMA1_Stream0_IRQHandler>
	...

0800279c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_Init+0x40>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_Init+0x40>)
 80027b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_Init+0x40>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c4:	2003      	movs	r0, #3
 80027c6:	f000 fd88 	bl	80032da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff fde4 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d0:	f7ff fdb6 	bl	8002340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00

080027e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_IncTick+0x20>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_IncTick+0x24>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HAL_IncTick+0x24>)
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000010 	.word	0x20000010
 8002804:	200053d0 	.word	0x200053d0

08002808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return uwTick;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_GetTick+0x14>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	200053d0 	.word	0x200053d0

08002820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff ffee 	bl	8002808 <HAL_GetTick>
 800282c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d005      	beq.n	8002846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_Delay+0x44>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002846:	bf00      	nop
 8002848:	f7ff ffde 	bl	8002808 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d8f7      	bhi.n	8002848 <HAL_Delay+0x28>
  {
  }
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000010 	.word	0x20000010

08002868 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e033      	b.n	80028e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fc0a 	bl	80010a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ae:	f023 0302 	bic.w	r3, r3, #2
 80028b2:	f043 0202 	orr.w	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fb5a 	bl	8002f74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	f043 0201 	orr.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
 80028d6:	e001      	b.n	80028dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADC_Start_IT+0x1a>
 8002906:	2302      	movs	r3, #2
 8002908:	e0a1      	b.n	8002a4e <HAL_ADC_Start_IT+0x15e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d018      	beq.n	8002952 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002930:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_ADC_Start_IT+0x16c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_ADC_Start_IT+0x170>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9a      	lsrs	r2, r3, #18
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002944:	e002      	b.n	800294c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3b01      	subs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f9      	bne.n	8002946 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d169      	bne.n	8002a34 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800298a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	d106      	bne.n	80029ae <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f023 0206 	bic.w	r2, r3, #6
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_ADC_Start_IT+0x174>)
 80029be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029c8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d8:	f043 0320 	orr.w	r3, r3, #32
 80029dc:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d129      	bne.n	8002a4c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e020      	b.n	8002a4c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_ADC_Start_IT+0x178>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d11b      	bne.n	8002a4c <HAL_ADC_Start_IT+0x15c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d114      	bne.n	8002a4c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	e00b      	b.n	8002a4c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0210 	orr.w	r2, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	431bde83 	.word	0x431bde83
 8002a64:	40012300 	.word	0x40012300
 8002a68:	40012000 	.word	0x40012000

08002a6c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d049      	beq.n	8002b42 <HAL_ADC_IRQHandler+0xd6>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d046      	beq.n	8002b42 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d12b      	bne.n	8002b32 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d127      	bne.n	8002b32 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d006      	beq.n	8002afe <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0220 	bic.w	r2, r2, #32
 8002b0c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe faf8 	bl	8001128 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0212 	mvn.w	r2, #18
 8002b40:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d057      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x1b8>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d054      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d139      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d12b      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d124      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11d      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d119      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 faa9 	bl	800316c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 020c 	mvn.w	r2, #12
 8002c22:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x21a>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d014      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10d      	bne.n	8002c86 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f846 	bl	8002d08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0201 	mvn.w	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x27a>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	f043 0202 	orr.w	r2, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0220 	mvn.w	r2, #32
 8002cd4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f820 	bl	8002d1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0220 	mvn.w	r2, #32
 8002ce4:	601a      	str	r2, [r3, #0]
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1c>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e105      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x228>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	d925      	bls.n	8002da8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b1e      	subs	r3, #30
 8002d72:	2207      	movs	r2, #7
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	400a      	ands	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68d9      	ldr	r1, [r3, #12]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4618      	mov	r0, r3
 8002d94:	4603      	mov	r3, r0
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4403      	add	r3, r0
 8002d9a:	3b1e      	subs	r3, #30
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	e022      	b.n	8002dee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6919      	ldr	r1, [r3, #16]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	400a      	ands	r2, r1
 8002dca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6919      	ldr	r1, [r3, #16]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4403      	add	r3, r0
 8002de4:	409a      	lsls	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d824      	bhi.n	8002e40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3b05      	subs	r3, #5
 8002e08:	221f      	movs	r2, #31
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	400a      	ands	r2, r1
 8002e16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	4618      	mov	r0, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b05      	subs	r3, #5
 8002e32:	fa00 f203 	lsl.w	r2, r0, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e3e:	e04c      	b.n	8002eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d824      	bhi.n	8002e92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	3b23      	subs	r3, #35	; 0x23
 8002e5a:	221f      	movs	r2, #31
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43da      	mvns	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	400a      	ands	r2, r1
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	3b23      	subs	r3, #35	; 0x23
 8002e84:	fa00 f203 	lsl.w	r2, r0, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e90:	e023      	b.n	8002eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3b41      	subs	r3, #65	; 0x41
 8002ea4:	221f      	movs	r2, #31
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b41      	subs	r3, #65	; 0x41
 8002ece:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_ADC_ConfigChannel+0x234>)
 8002edc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_ADC_ConfigChannel+0x238>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d109      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1cc>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b12      	cmp	r3, #18
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_ADC_ConfigChannel+0x238>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d123      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x21e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d003      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x1e6>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b11      	cmp	r3, #17
 8002f14:	d11b      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d111      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_ADC_ConfigChannel+0x23c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_ADC_ConfigChannel+0x240>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	0c9a      	lsrs	r2, r3, #18
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012300 	.word	0x40012300
 8002f68:	40012000 	.word	0x40012000
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	431bde83 	.word	0x431bde83

08002f74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f7c:	4b79      	ldr	r3, [pc, #484]	; (8003164 <ADC_Init+0x1f0>)
 8002f7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	021a      	lsls	r2, r3, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	4a58      	ldr	r2, [pc, #352]	; (8003168 <ADC_Init+0x1f4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800301a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6899      	ldr	r1, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800303c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6899      	ldr	r1, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	e00f      	b.n	8003072 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003070:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0202 	bic.w	r2, r2, #2
 8003080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7e1b      	ldrb	r3, [r3, #24]
 800308c:	005a      	lsls	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	3b01      	subs	r3, #1
 80030cc:	035a      	lsls	r2, r3, #13
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	e007      	b.n	80030e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	3b01      	subs	r3, #1
 8003104:	051a      	lsls	r2, r3, #20
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800311c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800312a:	025a      	lsls	r2, r3, #9
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	029a      	lsls	r2, r3, #10
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40012300 	.word	0x40012300
 8003168:	0f000001 	.word	0x0f000001

0800316c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60d3      	str	r3, [r2, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0b      	blt.n	800320e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <__NVIC_EnableIRQ+0x38>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff4c 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003302:	f7ff ff61 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 8003306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f7ff ffb1 	bl	8003274 <NVIC_EncodePriority>
 8003312:	4602      	mov	r2, r0
 8003314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff80 	bl	8003220 <__NVIC_SetPriority>
}
 8003320:	bf00      	nop
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ff54 	bl	80031e4 <__NVIC_EnableIRQ>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003352:	f7ff fa59 	bl	8002808 <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e052      	b.n	800341c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_Abort+0x62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c6:	e013      	b.n	80033f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c8:	f7ff fa1e 	bl	8002808 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d90c      	bls.n	80033f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2203      	movs	r2, #3
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e015      	b.n	800341c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e4      	bne.n	80033c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	223f      	movs	r2, #63	; 0x3f
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00c      	b.n	800345c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2205      	movs	r2, #5
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e159      	b.n	8003738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003484:	2201      	movs	r2, #1
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	429a      	cmp	r2, r3
 800349e:	f040 8148 	bne.w	8003732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d005      	beq.n	80034ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d130      	bne.n	800351c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 0201 	and.w	r2, r3, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b03      	cmp	r3, #3
 8003526:	d017      	beq.n	8003558 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d123      	bne.n	80035ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	08da      	lsrs	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3208      	adds	r2, #8
 80035a6:	69b9      	ldr	r1, [r7, #24]
 80035a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0203 	and.w	r2, r3, #3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a2 	beq.w	8003732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b57      	ldr	r3, [pc, #348]	; (8003750 <HAL_GPIO_Init+0x2e8>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	4a56      	ldr	r2, [pc, #344]	; (8003750 <HAL_GPIO_Init+0x2e8>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fc:	6453      	str	r3, [r2, #68]	; 0x44
 80035fe:	4b54      	ldr	r3, [pc, #336]	; (8003750 <HAL_GPIO_Init+0x2e8>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360a:	4a52      	ldr	r2, [pc, #328]	; (8003754 <HAL_GPIO_Init+0x2ec>)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	220f      	movs	r2, #15
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a49      	ldr	r2, [pc, #292]	; (8003758 <HAL_GPIO_Init+0x2f0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d019      	beq.n	800366a <HAL_GPIO_Init+0x202>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a48      	ldr	r2, [pc, #288]	; (800375c <HAL_GPIO_Init+0x2f4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_GPIO_Init+0x1fe>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a47      	ldr	r2, [pc, #284]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00d      	beq.n	8003662 <HAL_GPIO_Init+0x1fa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a46      	ldr	r2, [pc, #280]	; (8003764 <HAL_GPIO_Init+0x2fc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <HAL_GPIO_Init+0x1f6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a45      	ldr	r2, [pc, #276]	; (8003768 <HAL_GPIO_Init+0x300>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_GPIO_Init+0x1f2>
 8003656:	2304      	movs	r3, #4
 8003658:	e008      	b.n	800366c <HAL_GPIO_Init+0x204>
 800365a:	2307      	movs	r3, #7
 800365c:	e006      	b.n	800366c <HAL_GPIO_Init+0x204>
 800365e:	2303      	movs	r3, #3
 8003660:	e004      	b.n	800366c <HAL_GPIO_Init+0x204>
 8003662:	2302      	movs	r3, #2
 8003664:	e002      	b.n	800366c <HAL_GPIO_Init+0x204>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_GPIO_Init+0x204>
 800366a:	2300      	movs	r3, #0
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f002 0203 	and.w	r2, r2, #3
 8003672:	0092      	lsls	r2, r2, #2
 8003674:	4093      	lsls	r3, r2
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800367c:	4935      	ldr	r1, [pc, #212]	; (8003754 <HAL_GPIO_Init+0x2ec>)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	3302      	adds	r3, #2
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_GPIO_Init+0x304>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ae:	4a2f      	ldr	r2, [pc, #188]	; (800376c <HAL_GPIO_Init+0x304>)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036b4:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HAL_GPIO_Init+0x304>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d8:	4a24      	ldr	r2, [pc, #144]	; (800376c <HAL_GPIO_Init+0x304>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_GPIO_Init+0x304>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <HAL_GPIO_Init+0x304>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003708:	4b18      	ldr	r3, [pc, #96]	; (800376c <HAL_GPIO_Init+0x304>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800372c:	4a0f      	ldr	r2, [pc, #60]	; (800376c <HAL_GPIO_Init+0x304>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3301      	adds	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	f67f aea2 	bls.w	8003484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3724      	adds	r7, #36	; 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40013800 	.word	0x40013800
 8003758:	40020000 	.word	0x40020000
 800375c:	40020400 	.word	0x40020400
 8003760:	40020800 	.word	0x40020800
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40021000 	.word	0x40021000
 800376c:	40013c00 	.word	0x40013c00

08003770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003780:	787b      	ldrb	r3, [r7, #1]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800378c:	e003      	b.n	8003796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	041a      	lsls	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	619a      	str	r2, [r3, #24]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e12b      	b.n	8003a0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe f8b6 	bl	800193c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003806:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003808:	f001 f966 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 800380c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4a81      	ldr	r2, [pc, #516]	; (8003a18 <HAL_I2C_Init+0x274>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d807      	bhi.n	8003828 <HAL_I2C_Init+0x84>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a80      	ldr	r2, [pc, #512]	; (8003a1c <HAL_I2C_Init+0x278>)
 800381c:	4293      	cmp	r3, r2
 800381e:	bf94      	ite	ls
 8003820:	2301      	movls	r3, #1
 8003822:	2300      	movhi	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e006      	b.n	8003836 <HAL_I2C_Init+0x92>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a7d      	ldr	r2, [pc, #500]	; (8003a20 <HAL_I2C_Init+0x27c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	bf94      	ite	ls
 8003830:	2301      	movls	r3, #1
 8003832:	2300      	movhi	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0e7      	b.n	8003a0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a78      	ldr	r2, [pc, #480]	; (8003a24 <HAL_I2C_Init+0x280>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0c9b      	lsrs	r3, r3, #18
 8003848:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a6a      	ldr	r2, [pc, #424]	; (8003a18 <HAL_I2C_Init+0x274>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d802      	bhi.n	8003878 <HAL_I2C_Init+0xd4>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3301      	adds	r3, #1
 8003876:	e009      	b.n	800388c <HAL_I2C_Init+0xe8>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	4a69      	ldr	r2, [pc, #420]	; (8003a28 <HAL_I2C_Init+0x284>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	3301      	adds	r3, #1
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	430b      	orrs	r3, r1
 8003892:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800389e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	495c      	ldr	r1, [pc, #368]	; (8003a18 <HAL_I2C_Init+0x274>)
 80038a8:	428b      	cmp	r3, r1
 80038aa:	d819      	bhi.n	80038e0 <HAL_I2C_Init+0x13c>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e59      	subs	r1, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ba:	1c59      	adds	r1, r3, #1
 80038bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038c0:	400b      	ands	r3, r1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_I2C_Init+0x138>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1e59      	subs	r1, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038da:	e051      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 80038dc:	2304      	movs	r3, #4
 80038de:	e04f      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d111      	bne.n	800390c <HAL_I2C_Init+0x168>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e58      	subs	r0, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	440b      	add	r3, r1
 80038f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fa:	3301      	adds	r3, #1
 80038fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e012      	b.n	8003932 <HAL_I2C_Init+0x18e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1e58      	subs	r0, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	0099      	lsls	r1, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003922:	3301      	adds	r3, #1
 8003924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Init+0x196>
 8003936:	2301      	movs	r3, #1
 8003938:	e022      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10e      	bne.n	8003960 <HAL_I2C_Init+0x1bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1e58      	subs	r0, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6859      	ldr	r1, [r3, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	440b      	add	r3, r1
 8003950:	fbb0 f3f3 	udiv	r3, r0, r3
 8003954:	3301      	adds	r3, #1
 8003956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e58      	subs	r0, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	0099      	lsls	r1, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	6809      	ldr	r1, [r1, #0]
 8003984:	4313      	orrs	r3, r2
 8003986:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6911      	ldr	r1, [r2, #16]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68d2      	ldr	r2, [r2, #12]
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	000186a0 	.word	0x000186a0
 8003a1c:	001e847f 	.word	0x001e847f
 8003a20:	003d08ff 	.word	0x003d08ff
 8003a24:	431bde83 	.word	0x431bde83
 8003a28:	10624dd3 	.word	0x10624dd3

08003a2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	461a      	mov	r2, r3
 8003a38:	460b      	mov	r3, r1
 8003a3a:	817b      	strh	r3, [r7, #10]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a40:	f7fe fee2 	bl	8002808 <HAL_GetTick>
 8003a44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	f040 80e0 	bne.w	8003c14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2319      	movs	r3, #25
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4970      	ldr	r1, [pc, #448]	; (8003c20 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fa92 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0d3      	b.n	8003c16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_I2C_Master_Transmit+0x50>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e0cc      	b.n	8003c16 <HAL_I2C_Master_Transmit+0x1ea>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d007      	beq.n	8003aa2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2221      	movs	r2, #33	; 0x21
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2210      	movs	r2, #16
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	893a      	ldrh	r2, [r7, #8]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a50      	ldr	r2, [pc, #320]	; (8003c24 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ae4:	8979      	ldrh	r1, [r7, #10]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f9ca 	bl	8003e84 <I2C_MasterRequestWrite>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e08d      	b.n	8003c16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b10:	e066      	b.n	8003be0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	6a39      	ldr	r1, [r7, #32]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fb0c 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06b      	b.n	8003c16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_I2C_Master_Transmit+0x188>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d017      	beq.n	8003bb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	6a39      	ldr	r1, [r7, #32]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fafc 	bl	80041b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d107      	bne.n	8003bdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e01a      	b.n	8003c16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d194      	bne.n	8003b12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	00100002 	.word	0x00100002
 8003c24:	ffff0000 	.word	0xffff0000

08003c28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	460b      	mov	r3, r1
 8003c36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c38:	f7fe fde6 	bl	8002808 <HAL_GetTick>
 8003c3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	f040 8111 	bne.w	8003e72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2319      	movs	r3, #25
 8003c56:	2201      	movs	r2, #1
 8003c58:	4988      	ldr	r1, [pc, #544]	; (8003e7c <HAL_I2C_IsDeviceReady+0x254>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f994 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
 8003c68:	e104      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_I2C_IsDeviceReady+0x50>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0fd      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x24c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d007      	beq.n	8003c9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2224      	movs	r2, #36	; 0x24
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a70      	ldr	r2, [pc, #448]	; (8003e80 <HAL_I2C_IsDeviceReady+0x258>)
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f952 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf8:	d103      	bne.n	8003d02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0b6      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fe fd77 	bl	8002808 <HAL_GetTick>
 8003d1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d4a:	e025      	b.n	8003d98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d4c:	f7fe fd5c 	bl	8002808 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d302      	bcc.n	8003d62 <HAL_I2C_IsDeviceReady+0x13a>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	22a0      	movs	r2, #160	; 0xa0
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2ba0      	cmp	r3, #160	; 0xa0
 8003da2:	d005      	beq.n	8003db0 <HAL_I2C_IsDeviceReady+0x188>
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <HAL_I2C_IsDeviceReady+0x188>
 8003daa:	7dbb      	ldrb	r3, [r7, #22]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0cd      	beq.n	8003d4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d129      	bne.n	8003e1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2319      	movs	r3, #25
 8003df2:	2201      	movs	r2, #1
 8003df4:	4921      	ldr	r1, [pc, #132]	; (8003e7c <HAL_I2C_IsDeviceReady+0x254>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8c6 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e036      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e02c      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2319      	movs	r3, #25
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	490f      	ldr	r1, [pc, #60]	; (8003e7c <HAL_I2C_IsDeviceReady+0x254>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f8a2 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e012      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	3301      	adds	r3, #1
 8003e52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	f4ff af32 	bcc.w	8003cc2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	00100002 	.word	0x00100002
 8003e80:	ffff0000 	.word	0xffff0000

08003e84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	460b      	mov	r3, r1
 8003e92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d006      	beq.n	8003eae <I2C_MasterRequestWrite+0x2a>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d003      	beq.n	8003eae <I2C_MasterRequestWrite+0x2a>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eac:	d108      	bne.n	8003ec0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e00b      	b.n	8003ed8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	2b12      	cmp	r3, #18
 8003ec6:	d107      	bne.n	8003ed8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f84f 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efe:	d103      	bne.n	8003f08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e035      	b.n	8003f78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f14:	d108      	bne.n	8003f28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f24:	611a      	str	r2, [r3, #16]
 8003f26:	e01b      	b.n	8003f60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f28:	897b      	ldrh	r3, [r7, #10]
 8003f2a:	11db      	asrs	r3, r3, #7
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f003 0306 	and.w	r3, r3, #6
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f063 030f 	orn	r3, r3, #15
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	490e      	ldr	r1, [pc, #56]	; (8003f80 <I2C_MasterRequestWrite+0xfc>)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f875 	bl	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e010      	b.n	8003f78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4907      	ldr	r1, [pc, #28]	; (8003f84 <I2C_MasterRequestWrite+0x100>)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f865 	bl	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	00010008 	.word	0x00010008
 8003f84:	00010002 	.word	0x00010002

08003f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f98:	e025      	b.n	8003fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d021      	beq.n	8003fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa2:	f7fe fc31 	bl	8002808 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d116      	bne.n	8003fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e023      	b.n	800402e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10d      	bne.n	800400c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf0c      	ite	eq
 8004002:	2301      	moveq	r3, #1
 8004004:	2300      	movne	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	e00c      	b.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	43da      	mvns	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d0b6      	beq.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004044:	e051      	b.n	80040ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004054:	d123      	bne.n	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004064:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800406e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f043 0204 	orr.w	r2, r3, #4
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e046      	b.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d021      	beq.n	80040ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fe fbaf 	bl	8002808 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e020      	b.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10c      	bne.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	e00b      	b.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	43da      	mvns	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d18d      	bne.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004140:	e02d      	b.n	800419e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f878 	bl	8004238 <I2C_IsAcknowledgeFailed>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e02d      	b.n	80041ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d021      	beq.n	800419e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fb55 	bl	8002808 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d116      	bne.n	800419e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e007      	b.n	80041ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d1ca      	bne.n	8004142 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041c2:	e02d      	b.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f837 	bl	8004238 <I2C_IsAcknowledgeFailed>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e02d      	b.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d021      	beq.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041dc:	f7fe fb14 	bl	8002808 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d302      	bcc.n	80041f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d116      	bne.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e007      	b.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b04      	cmp	r3, #4
 800422c:	d1ca      	bne.n	80041c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424e:	d11b      	bne.n	8004288 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004258:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f043 0204 	orr.w	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e264      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d075      	beq.n	80043a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	4ba3      	ldr	r3, [pc, #652]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00c      	beq.n	80042dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d112      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ce:	4b9d      	ldr	r3, [pc, #628]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d05b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d157      	bne.n	80043a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e23f      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x74>
 80042fe:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a90      	ldr	r2, [pc, #576]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e01d      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a87      	ldr	r2, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a83      	ldr	r2, [pc, #524]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fe fa5a 	bl	8002808 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7fe fa56 	bl	8002808 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e204      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xc0>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe fa46 	bl	8002808 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7fe fa42 	bl	8002808 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1f0      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0xe8>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d063      	beq.n	8004476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d11c      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b5f      	ldr	r3, [pc, #380]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e1c4      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b56      	ldr	r3, [pc, #344]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4952      	ldr	r1, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	e03a      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004408:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fe f9fb 	bl	8002808 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004416:	f7fe f9f7 	bl	8002808 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1a5      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4940      	ldr	r1, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
 8004448:	e015      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444a:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fe f9da 	bl	8002808 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004458:	f7fe f9d6 	bl	8002808 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e184      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d030      	beq.n	80044e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448a:	4b30      	ldr	r3, [pc, #192]	; (800454c <HAL_RCC_OscConfig+0x2b4>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fe f9ba 	bl	8002808 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004498:	f7fe f9b6 	bl	8002808 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e164      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044aa:	4b26      	ldr	r3, [pc, #152]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x200>
 80044b6:	e015      	b.n	80044e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x2b4>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fe f9a3 	bl	8002808 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fe f99f 	bl	8002808 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e14d      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a0 	beq.w	8004632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d121      	bne.n	8004572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fe f965 	bl	8002808 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e011      	b.n	8004566 <HAL_RCC_OscConfig+0x2ce>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	42470000 	.word	0x42470000
 800454c:	42470e80 	.word	0x42470e80
 8004550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7fe f958 	bl	8002808 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e106      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	4b85      	ldr	r3, [pc, #532]	; (800477c <HAL_RCC_OscConfig+0x4e4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x2f0>
 800457a:	4b81      	ldr	r3, [pc, #516]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a80      	ldr	r2, [pc, #512]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
 8004586:	e01c      	b.n	80045c2 <HAL_RCC_OscConfig+0x32a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d10c      	bne.n	80045aa <HAL_RCC_OscConfig+0x312>
 8004590:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a7a      	ldr	r2, [pc, #488]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	4b78      	ldr	r3, [pc, #480]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a77      	ldr	r2, [pc, #476]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e00b      	b.n	80045c2 <HAL_RCC_OscConfig+0x32a>
 80045aa:	4b75      	ldr	r3, [pc, #468]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a74      	ldr	r2, [pc, #464]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	4b72      	ldr	r3, [pc, #456]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a71      	ldr	r2, [pc, #452]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d015      	beq.n	80045f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fe f91d 	bl	8002808 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fe f919 	bl	8002808 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e0c5      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	4b65      	ldr	r3, [pc, #404]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ee      	beq.n	80045d2 <HAL_RCC_OscConfig+0x33a>
 80045f4:	e014      	b.n	8004620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fe f907 	bl	8002808 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fe f903 	bl	8002808 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0af      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ee      	bne.n	80045fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b56      	ldr	r3, [pc, #344]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a55      	ldr	r2, [pc, #340]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 809b 	beq.w	8004772 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d05c      	beq.n	8004702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d141      	bne.n	80046d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b4c      	ldr	r3, [pc, #304]	; (8004784 <HAL_RCC_OscConfig+0x4ec>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fe f8d7 	bl	8002808 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465e:	f7fe f8d3 	bl	8002808 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e081      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004670:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	019b      	lsls	r3, r3, #6
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	4937      	ldr	r1, [pc, #220]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <HAL_RCC_OscConfig+0x4ec>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe f8ac 	bl	8002808 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe f8a8 	bl	8002808 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e056      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x41c>
 80046d2:	e04e      	b.n	8004772 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_OscConfig+0x4ec>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fe f895 	bl	8002808 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fe f891 	bl	8002808 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e03f      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f4:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x44a>
 8004700:	e037      	b.n	8004772 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e032      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800470e:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d028      	beq.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d121      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d11a      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004744:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004746:	4293      	cmp	r3, r2
 8004748:	d111      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d107      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d001      	beq.n	8004772 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40007000 	.word	0x40007000
 8004780:	40023800 	.word	0x40023800
 8004784:	42470060 	.word	0x42470060

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0cc      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b68      	ldr	r3, [pc, #416]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d90c      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b65      	ldr	r3, [pc, #404]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b63      	ldr	r3, [pc, #396]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0b8      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047dc:	4b59      	ldr	r3, [pc, #356]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a58      	ldr	r2, [pc, #352]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f4:	4b53      	ldr	r3, [pc, #332]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a52      	ldr	r2, [pc, #328]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	494d      	ldr	r1, [pc, #308]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d044      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d119      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e07f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d003      	beq.n	8004846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004842:	2b03      	cmp	r3, #3
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e06f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e067      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b37      	ldr	r3, [pc, #220]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4934      	ldr	r1, [pc, #208]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004878:	f7fd ffc6 	bl	8002808 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fd ffc2 	bl	8002808 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e04f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d20c      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b22      	ldr	r3, [pc, #136]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e032      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4916      	ldr	r1, [pc, #88]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	490e      	ldr	r1, [pc, #56]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800490e:	f000 f821 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	490a      	ldr	r1, [pc, #40]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd fd32 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023c00 	.word	0x40023c00
 8004944:	40023800 	.word	0x40023800
 8004948:	08012284 	.word	0x08012284
 800494c:	20000008 	.word	0x20000008
 8004950:	2000000c 	.word	0x2000000c

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	b5b0      	push	{r4, r5, r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800495a:	2100      	movs	r1, #0
 800495c:	6079      	str	r1, [r7, #4]
 800495e:	2100      	movs	r1, #0
 8004960:	60f9      	str	r1, [r7, #12]
 8004962:	2100      	movs	r1, #0
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004966:	2100      	movs	r1, #0
 8004968:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496a:	4952      	ldr	r1, [pc, #328]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800496c:	6889      	ldr	r1, [r1, #8]
 800496e:	f001 010c 	and.w	r1, r1, #12
 8004972:	2908      	cmp	r1, #8
 8004974:	d00d      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x3e>
 8004976:	2908      	cmp	r1, #8
 8004978:	f200 8094 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x150>
 800497c:	2900      	cmp	r1, #0
 800497e:	d002      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x32>
 8004980:	2904      	cmp	r1, #4
 8004982:	d003      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x38>
 8004984:	e08e      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004988:	60bb      	str	r3, [r7, #8]
       break;
 800498a:	e08e      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800498c:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCC_GetSysClockFreq+0x168>)
 800498e:	60bb      	str	r3, [r7, #8]
      break;
 8004990:	e08b      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004992:	4948      	ldr	r1, [pc, #288]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004994:	6849      	ldr	r1, [r1, #4]
 8004996:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800499a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800499c:	4945      	ldr	r1, [pc, #276]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800499e:	6849      	ldr	r1, [r1, #4]
 80049a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80049a4:	2900      	cmp	r1, #0
 80049a6:	d024      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a8:	4942      	ldr	r1, [pc, #264]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049aa:	6849      	ldr	r1, [r1, #4]
 80049ac:	0989      	lsrs	r1, r1, #6
 80049ae:	4608      	mov	r0, r1
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80049b8:	f04f 0500 	mov.w	r5, #0
 80049bc:	ea00 0204 	and.w	r2, r0, r4
 80049c0:	ea01 0305 	and.w	r3, r1, r5
 80049c4:	493d      	ldr	r1, [pc, #244]	; (8004abc <HAL_RCC_GetSysClockFreq+0x168>)
 80049c6:	fb01 f003 	mul.w	r0, r1, r3
 80049ca:	2100      	movs	r1, #0
 80049cc:	fb01 f102 	mul.w	r1, r1, r2
 80049d0:	1844      	adds	r4, r0, r1
 80049d2:	493a      	ldr	r1, [pc, #232]	; (8004abc <HAL_RCC_GetSysClockFreq+0x168>)
 80049d4:	fba2 0101 	umull	r0, r1, r2, r1
 80049d8:	1863      	adds	r3, r4, r1
 80049da:	4619      	mov	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f7fc f958 	bl	8000c98 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e04a      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	ea02 0400 	and.w	r4, r2, r0
 8004a0a:	ea03 0501 	and.w	r5, r3, r1
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	014b      	lsls	r3, r1, #5
 8004a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a20:	0142      	lsls	r2, r0, #5
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	1b00      	subs	r0, r0, r4
 8004a28:	eb61 0105 	sbc.w	r1, r1, r5
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	018b      	lsls	r3, r1, #6
 8004a36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a3a:	0182      	lsls	r2, r0, #6
 8004a3c:	1a12      	subs	r2, r2, r0
 8004a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	00d9      	lsls	r1, r3, #3
 8004a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a50:	00d0      	lsls	r0, r2, #3
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	1912      	adds	r2, r2, r4
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0299      	lsls	r1, r3, #10
 8004a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a6a:	0290      	lsls	r0, r2, #10
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	f7fc f90c 	bl	8000c98 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004aa6:	60bb      	str	r3, [r7, #8]
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	00f42400 	.word	0x00f42400
 8004abc:	017d7840 	.word	0x017d7840

08004ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000008 	.word	0x20000008

08004ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004adc:	f7ff fff0 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	08012294 	.word	0x08012294

08004b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b04:	f7ff ffdc 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0b5b      	lsrs	r3, r3, #13
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4903      	ldr	r1, [pc, #12]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	08012294 	.word	0x08012294

08004b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	220f      	movs	r2, #15
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0203 	and.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <HAL_RCC_GetClockConfig+0x60>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0207 	and.w	r2, r3, #7
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40023c00 	.word	0x40023c00

08004b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e07b      	b.n	8004c96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d009      	beq.n	8004bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
 8004bb6:	e005      	b.n	8004bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd f8bc 	bl	8001d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	ea42 0103 	orr.w	r1, r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	f003 0104 	and.w	r1, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0210 	and.w	r2, r3, #16
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08c      	sub	sp, #48	; 0x30
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cac:	2301      	movs	r3, #1
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x26>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e18a      	b.n	8004fda <HAL_SPI_TransmitReceive+0x33c>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ccc:	f7fd fd9c 	bl	8002808 <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ce2:	887b      	ldrh	r3, [r7, #2]
 8004ce4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d00f      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x70>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf4:	d107      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0x68>
 8004cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d003      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
 8004d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d0c:	e15b      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x82>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x82>
 8004d1a:	887b      	ldrh	r3, [r7, #2]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d26:	e14e      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d003      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2205      	movs	r2, #5
 8004d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	887a      	ldrh	r2, [r7, #2]
 8004d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	887a      	ldrh	r2, [r7, #2]
 8004d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	887a      	ldrh	r2, [r7, #2]
 8004d5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d007      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d98:	d178      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x10a>
 8004da2:	8b7b      	ldrh	r3, [r7, #26]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d166      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dcc:	e053      	b.n	8004e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d11b      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x176>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d016      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x176>
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d113      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	881a      	ldrh	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d119      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x1b8>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d014      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	b292      	uxth	r2, r2
 8004e38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	1c9a      	adds	r2, r3, #2
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e52:	2301      	movs	r3, #1
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e56:	f7fd fcd7 	bl	8002808 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d807      	bhi.n	8004e76 <HAL_SPI_TransmitReceive+0x1d8>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d003      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e74:	e0a7      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1a6      	bne.n	8004dce <HAL_SPI_TransmitReceive+0x130>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1a1      	bne.n	8004dce <HAL_SPI_TransmitReceive+0x130>
 8004e8a:	e07c      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x1fc>
 8004e94:	8b7b      	ldrh	r3, [r7, #26]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d16b      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	330c      	adds	r3, #12
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec0:	e057      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d11c      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x26c>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d017      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x26c>
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d114      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d119      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x2ae>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d014      	beq.n	8004f4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f4c:	f7fd fc5c 	bl	8002808 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d803      	bhi.n	8004f64 <HAL_SPI_TransmitReceive+0x2c6>
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d102      	bne.n	8004f6a <HAL_SPI_TransmitReceive+0x2cc>
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f70:	e029      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1a2      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x224>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d19d      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f8b2 	bl	80050f4 <SPI_EndRxTxTransaction>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d006      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fa2:	e010      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	e000      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3730      	adds	r7, #48	; 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff4:	f7fd fc08 	bl	8002808 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005004:	f7fd fc00 	bl	8002808 <HAL_GetTick>
 8005008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	015b      	lsls	r3, r3, #5
 8005010:	0d1b      	lsrs	r3, r3, #20
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800501a:	e054      	b.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d050      	beq.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005024:	f7fd fbf0 	bl	8002808 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	429a      	cmp	r2, r3
 8005032:	d902      	bls.n	800503a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d13d      	bne.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005052:	d111      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505c:	d004      	beq.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	d107      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005080:	d10f      	bne.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e017      	b.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4013      	ands	r3, r2
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d19b      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000008 	.word	0x20000008

080050f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <SPI_EndRxTxTransaction+0x7c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <SPI_EndRxTxTransaction+0x80>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	0d5b      	lsrs	r3, r3, #21
 800510c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005110:	fb02 f303 	mul.w	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511e:	d112      	bne.n	8005146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff ff5a 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e00f      	b.n	8005166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3b01      	subs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515c:	2b80      	cmp	r3, #128	; 0x80
 800515e:	d0f2      	beq.n	8005146 <SPI_EndRxTxTransaction+0x52>
 8005160:	e000      	b.n	8005164 <SPI_EndRxTxTransaction+0x70>
        break;
 8005162:	bf00      	nop
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000008 	.word	0x20000008
 8005174:	165e9f81 	.word	0x165e9f81

08005178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e041      	b.n	800520e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f839 	bl	8005216 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 f9ca 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e044      	b.n	80052ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_TIM_Base_Start_IT+0xb0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526e:	d013      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1a      	ldr	r2, [pc, #104]	; (80052e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <HAL_TIM_Base_Start_IT+0xc0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d111      	bne.n	80052bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d010      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	e007      	b.n	80052cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40014000 	.word	0x40014000

080052f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0202 	mvn.w	r2, #2
 800531c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8ee 	bl	8005514 <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8e0 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8f1 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d122      	bne.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b04      	cmp	r3, #4
 8005366:	d11b      	bne.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0204 	mvn.w	r2, #4
 8005370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8c4 	bl	8005514 <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8b6 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8c7 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0208 	mvn.w	r2, #8
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2204      	movs	r2, #4
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f89a 	bl	8005514 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f88c 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f89d 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b10      	cmp	r3, #16
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0210 	mvn.w	r2, #16
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2208      	movs	r2, #8
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f870 	bl	8005514 <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f862 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f873 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d10e      	bne.n	8005474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d107      	bne.n	8005474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0201 	mvn.w	r2, #1
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fc fb82 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d10e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8e2 	bl	8005664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f838 	bl	800553c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0220 	mvn.w	r2, #32
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8ac 	bl	8005650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a34      	ldr	r2, [pc, #208]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00f      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d00b      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a31      	ldr	r2, [pc, #196]	; (8005638 <TIM_Base_SetConfig+0xe8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <TIM_Base_SetConfig+0xec>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a2f      	ldr	r2, [pc, #188]	; (8005640 <TIM_Base_SetConfig+0xf0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d108      	bne.n	800559a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a25      	ldr	r2, [pc, #148]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01b      	beq.n	80055da <TIM_Base_SetConfig+0x8a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d017      	beq.n	80055da <TIM_Base_SetConfig+0x8a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a22      	ldr	r2, [pc, #136]	; (8005638 <TIM_Base_SetConfig+0xe8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <TIM_Base_SetConfig+0x8a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a21      	ldr	r2, [pc, #132]	; (800563c <TIM_Base_SetConfig+0xec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_Base_SetConfig+0x8a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a20      	ldr	r2, [pc, #128]	; (8005640 <TIM_Base_SetConfig+0xf0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_Base_SetConfig+0x8a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <TIM_Base_SetConfig+0xf4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_Base_SetConfig+0x8a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <TIM_Base_SetConfig+0xf8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_Base_SetConfig+0x8a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1d      	ldr	r2, [pc, #116]	; (800564c <TIM_Base_SetConfig+0xfc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d108      	bne.n	80055ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	615a      	str	r2, [r3, #20]
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800

08005650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e03f      	b.n	800570a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fd f80a 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	; 0x24
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb9f 	bl	8005e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	4613      	mov	r3, r2
 800571e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b20      	cmp	r3, #32
 800572a:	d11d      	bne.n	8005768 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_UART_Receive_IT+0x26>
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e016      	b.n	800576a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UART_Receive_IT+0x38>
 8005746:	2302      	movs	r3, #2
 8005748:	e00f      	b.n	800576a <HAL_UART_Receive_IT+0x58>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	461a      	mov	r2, r3
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f9d4 	bl	8005b0c <UART_Start_Receive_IT>
 8005764:	4603      	mov	r3, r0
 8005766:	e000      	b.n	800576a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005768:	2302      	movs	r3, #2
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10d      	bne.n	80057c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_UART_IRQHandler+0x52>
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa87 	bl	8005cd2 <UART_Receive_IT>
      return;
 80057c4:	e17c      	b.n	8005ac0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80b1 	beq.w	8005930 <HAL_UART_IRQHandler+0x1bc>
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <HAL_UART_IRQHandler+0x70>
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80a6 	beq.w	8005930 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_UART_IRQHandler+0x90>
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f043 0201 	orr.w	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_UART_IRQHandler+0xb0>
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f043 0202 	orr.w	r2, r3, #2
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_UART_IRQHandler+0xd0>
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f043 0204 	orr.w	r2, r3, #4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00f      	beq.n	800586e <HAL_UART_IRQHandler+0xfa>
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_UART_IRQHandler+0xee>
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0208 	orr.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 811f 	beq.w	8005ab6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <HAL_UART_IRQHandler+0x11e>
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa20 	bl	8005cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <HAL_UART_IRQHandler+0x146>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d031      	beq.n	800591e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f960 	bl	8005b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d123      	bne.n	8005916 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d013      	beq.n	800590e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	4a77      	ldr	r2, [pc, #476]	; (8005ac8 <HAL_UART_IRQHandler+0x354>)
 80058ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd fd96 	bl	8003424 <HAL_DMA_Abort_IT>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005908:	4610      	mov	r0, r2
 800590a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	e00e      	b.n	800592c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8e6 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e00a      	b.n	800592c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8e2 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	e006      	b.n	800592c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8de 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800592a:	e0c4      	b.n	8005ab6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	bf00      	nop
    return;
 800592e:	e0c2      	b.n	8005ab6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	2b01      	cmp	r3, #1
 8005936:	f040 80a2 	bne.w	8005a7e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 809c 	beq.w	8005a7e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8096 	beq.w	8005a7e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d14f      	bne.n	8005a16 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005980:	8a3b      	ldrh	r3, [r7, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8099 	beq.w	8005aba <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800598c:	8a3a      	ldrh	r2, [r7, #16]
 800598e:	429a      	cmp	r2, r3
 8005990:	f080 8093 	bcs.w	8005aba <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8a3a      	ldrh	r2, [r7, #16]
 8005998:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d02b      	beq.n	80059fe <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0210 	bic.w	r2, r2, #16
 80059f2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fd fca3 	bl	8003344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f870 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a14:	e051      	b.n	8005aba <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d047      	beq.n	8005abe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005a2e:	8a7b      	ldrh	r3, [r7, #18]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d044      	beq.n	8005abe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a42:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0210 	bic.w	r2, r2, #16
 8005a70:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a72:	8a7b      	ldrh	r3, [r7, #18]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f83c 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a7c:	e01f      	b.n	8005abe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_UART_IRQHandler+0x326>
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8b5 	bl	8005c02 <UART_Transmit_IT>
    return;
 8005a98:	e012      	b.n	8005ac0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x34c>
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d008      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f8f7 	bl	8005ca2 <UART_EndTransmit_IT>
    return;
 8005ab4:	e004      	b.n	8005ac0 <HAL_UART_IRQHandler+0x34c>
    return;
 8005ab6:	bf00      	nop
 8005ab8:	e002      	b.n	8005ac0 <HAL_UART_IRQHandler+0x34c>
      return;
 8005aba:	bf00      	nop
 8005abc:	e000      	b.n	8005ac0 <HAL_UART_IRQHandler+0x34c>
      return;
 8005abe:	bf00      	nop
  }
}
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	08005bdb 	.word	0x08005bdb

08005acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	88fa      	ldrh	r2, [r7, #6]
 8005b2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2222      	movs	r2, #34	; 0x22
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b50:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0220 	orr.w	r2, r2, #32
 8005b70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0201 	bic.w	r2, r2, #1
 8005ba6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0210 	bic.w	r2, r2, #16
 8005bbe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ff73 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b21      	cmp	r3, #33	; 0x21
 8005c14:	d13e      	bne.n	8005c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1e:	d114      	bne.n	8005c4a <UART_Transmit_IT+0x48>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d110      	bne.n	8005c4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	1c9a      	adds	r2, r3, #2
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]
 8005c48:	e008      	b.n	8005c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6211      	str	r1, [r2, #32]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10f      	bne.n	8005c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ff02 	bl	8005acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b22      	cmp	r3, #34	; 0x22
 8005ce4:	f040 8087 	bne.w	8005df6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf0:	d117      	bne.n	8005d22 <UART_Receive_IT+0x50>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d113      	bne.n	8005d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	1c9a      	adds	r2, r3, #2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d20:	e026      	b.n	8005d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d007      	beq.n	8005d46 <UART_Receive_IT+0x74>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <UART_Receive_IT+0x82>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e008      	b.n	8005d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d136      	bne.n	8005df2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0220 	bic.w	r2, r2, #32
 8005d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10e      	bne.n	8005de2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0210 	bic.w	r2, r2, #16
 8005dd2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fe8a 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
 8005de0:	e002      	b.n	8005de8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fb fdf2 	bl	80019cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e002      	b.n	8005df8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e000      	b.n	8005df8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
  }
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	b09f      	sub	sp, #124	; 0x7c
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e16:	68d9      	ldr	r1, [r3, #12]
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	ea40 0301 	orr.w	r3, r0, r1
 8005e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e44:	f021 010c 	bic.w	r1, r1, #12
 8005e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5e:	6999      	ldr	r1, [r3, #24]
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	ea40 0301 	orr.w	r3, r0, r1
 8005e68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4bc5      	ldr	r3, [pc, #788]	; (8006184 <UART_SetConfig+0x384>)
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d004      	beq.n	8005e7e <UART_SetConfig+0x7e>
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4bc3      	ldr	r3, [pc, #780]	; (8006188 <UART_SetConfig+0x388>)
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d103      	bne.n	8005e86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e7e:	f7fe fe3f 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8005e82:	6778      	str	r0, [r7, #116]	; 0x74
 8005e84:	e002      	b.n	8005e8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e86:	f7fe fe27 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8005e8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e94:	f040 80b6 	bne.w	8006004 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9a:	461c      	mov	r4, r3
 8005e9c:	f04f 0500 	mov.w	r5, #0
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	1891      	adds	r1, r2, r2
 8005ea6:	6439      	str	r1, [r7, #64]	; 0x40
 8005ea8:	415b      	adcs	r3, r3
 8005eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8005eac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eb0:	1912      	adds	r2, r2, r4
 8005eb2:	eb45 0303 	adc.w	r3, r5, r3
 8005eb6:	f04f 0000 	mov.w	r0, #0
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	00d9      	lsls	r1, r3, #3
 8005ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec4:	00d0      	lsls	r0, r2, #3
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	1911      	adds	r1, r2, r4
 8005ecc:	6639      	str	r1, [r7, #96]	; 0x60
 8005ece:	416b      	adcs	r3, r5
 8005ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	1891      	adds	r1, r2, r2
 8005ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ee0:	415b      	adcs	r3, r3
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ee8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005eec:	f7fa fed4 	bl	8000c98 <__aeabi_uldivmod>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4ba5      	ldr	r3, [pc, #660]	; (800618c <UART_SetConfig+0x38c>)
 8005ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	011e      	lsls	r6, r3, #4
 8005efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f00:	461c      	mov	r4, r3
 8005f02:	f04f 0500 	mov.w	r5, #0
 8005f06:	4622      	mov	r2, r4
 8005f08:	462b      	mov	r3, r5
 8005f0a:	1891      	adds	r1, r2, r2
 8005f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f16:	1912      	adds	r2, r2, r4
 8005f18:	eb45 0303 	adc.w	r3, r5, r3
 8005f1c:	f04f 0000 	mov.w	r0, #0
 8005f20:	f04f 0100 	mov.w	r1, #0
 8005f24:	00d9      	lsls	r1, r3, #3
 8005f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f2a:	00d0      	lsls	r0, r2, #3
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	1911      	adds	r1, r2, r4
 8005f32:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f34:	416b      	adcs	r3, r5
 8005f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	1891      	adds	r1, r2, r2
 8005f44:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f46:	415b      	adcs	r3, r3
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f52:	f7fa fea1 	bl	8000c98 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4b8c      	ldr	r3, [pc, #560]	; (800618c <UART_SetConfig+0x38c>)
 8005f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	2164      	movs	r1, #100	; 0x64
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	3332      	adds	r3, #50	; 0x32
 8005f6e:	4a87      	ldr	r2, [pc, #540]	; (800618c <UART_SetConfig+0x38c>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f7c:	441e      	add	r6, r3
 8005f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f80:	4618      	mov	r0, r3
 8005f82:	f04f 0100 	mov.w	r1, #0
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	1894      	adds	r4, r2, r2
 8005f8c:	623c      	str	r4, [r7, #32]
 8005f8e:	415b      	adcs	r3, r3
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
 8005f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f96:	1812      	adds	r2, r2, r0
 8005f98:	eb41 0303 	adc.w	r3, r1, r3
 8005f9c:	f04f 0400 	mov.w	r4, #0
 8005fa0:	f04f 0500 	mov.w	r5, #0
 8005fa4:	00dd      	lsls	r5, r3, #3
 8005fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005faa:	00d4      	lsls	r4, r2, #3
 8005fac:	4622      	mov	r2, r4
 8005fae:	462b      	mov	r3, r5
 8005fb0:	1814      	adds	r4, r2, r0
 8005fb2:	653c      	str	r4, [r7, #80]	; 0x50
 8005fb4:	414b      	adcs	r3, r1
 8005fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	1891      	adds	r1, r2, r2
 8005fc4:	61b9      	str	r1, [r7, #24]
 8005fc6:	415b      	adcs	r3, r3
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fd2:	f7fa fe61 	bl	8000c98 <__aeabi_uldivmod>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4b6c      	ldr	r3, [pc, #432]	; (800618c <UART_SetConfig+0x38c>)
 8005fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2164      	movs	r1, #100	; 0x64
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	3332      	adds	r3, #50	; 0x32
 8005fee:	4a67      	ldr	r2, [pc, #412]	; (800618c <UART_SetConfig+0x38c>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4432      	add	r2, r6
 8006000:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006002:	e0b9      	b.n	8006178 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006006:	461c      	mov	r4, r3
 8006008:	f04f 0500 	mov.w	r5, #0
 800600c:	4622      	mov	r2, r4
 800600e:	462b      	mov	r3, r5
 8006010:	1891      	adds	r1, r2, r2
 8006012:	6139      	str	r1, [r7, #16]
 8006014:	415b      	adcs	r3, r3
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800601c:	1912      	adds	r2, r2, r4
 800601e:	eb45 0303 	adc.w	r3, r5, r3
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f04f 0100 	mov.w	r1, #0
 800602a:	00d9      	lsls	r1, r3, #3
 800602c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006030:	00d0      	lsls	r0, r2, #3
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	eb12 0804 	adds.w	r8, r2, r4
 800603a:	eb43 0905 	adc.w	r9, r3, r5
 800603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	f04f 0100 	mov.w	r1, #0
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	008b      	lsls	r3, r1, #2
 8006052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006056:	0082      	lsls	r2, r0, #2
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa fe1c 	bl	8000c98 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4b49      	ldr	r3, [pc, #292]	; (800618c <UART_SetConfig+0x38c>)
 8006066:	fba3 2302 	umull	r2, r3, r3, r2
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	011e      	lsls	r6, r3, #4
 800606e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006070:	4618      	mov	r0, r3
 8006072:	f04f 0100 	mov.w	r1, #0
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	1894      	adds	r4, r2, r2
 800607c:	60bc      	str	r4, [r7, #8]
 800607e:	415b      	adcs	r3, r3
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006086:	1812      	adds	r2, r2, r0
 8006088:	eb41 0303 	adc.w	r3, r1, r3
 800608c:	f04f 0400 	mov.w	r4, #0
 8006090:	f04f 0500 	mov.w	r5, #0
 8006094:	00dd      	lsls	r5, r3, #3
 8006096:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800609a:	00d4      	lsls	r4, r2, #3
 800609c:	4622      	mov	r2, r4
 800609e:	462b      	mov	r3, r5
 80060a0:	1814      	adds	r4, r2, r0
 80060a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80060a4:	414b      	adcs	r3, r1
 80060a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f04f 0100 	mov.w	r1, #0
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	008b      	lsls	r3, r1, #2
 80060bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060c0:	0082      	lsls	r2, r0, #2
 80060c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060c6:	f7fa fde7 	bl	8000c98 <__aeabi_uldivmod>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4b2f      	ldr	r3, [pc, #188]	; (800618c <UART_SetConfig+0x38c>)
 80060d0:	fba3 1302 	umull	r1, r3, r3, r2
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	2164      	movs	r1, #100	; 0x64
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	3332      	adds	r3, #50	; 0x32
 80060e2:	4a2a      	ldr	r2, [pc, #168]	; (800618c <UART_SetConfig+0x38c>)
 80060e4:	fba2 2303 	umull	r2, r3, r2, r3
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ee:	441e      	add	r6, r3
 80060f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f2:	4618      	mov	r0, r3
 80060f4:	f04f 0100 	mov.w	r1, #0
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	1894      	adds	r4, r2, r2
 80060fe:	603c      	str	r4, [r7, #0]
 8006100:	415b      	adcs	r3, r3
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006108:	1812      	adds	r2, r2, r0
 800610a:	eb41 0303 	adc.w	r3, r1, r3
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	f04f 0500 	mov.w	r5, #0
 8006116:	00dd      	lsls	r5, r3, #3
 8006118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800611c:	00d4      	lsls	r4, r2, #3
 800611e:	4622      	mov	r2, r4
 8006120:	462b      	mov	r3, r5
 8006122:	eb12 0a00 	adds.w	sl, r2, r0
 8006126:	eb43 0b01 	adc.w	fp, r3, r1
 800612a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4618      	mov	r0, r3
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	008b      	lsls	r3, r1, #2
 800613e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006142:	0082      	lsls	r2, r0, #2
 8006144:	4650      	mov	r0, sl
 8006146:	4659      	mov	r1, fp
 8006148:	f7fa fda6 	bl	8000c98 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4b0e      	ldr	r3, [pc, #56]	; (800618c <UART_SetConfig+0x38c>)
 8006152:	fba3 1302 	umull	r1, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2164      	movs	r1, #100	; 0x64
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	3332      	adds	r3, #50	; 0x32
 8006164:	4a09      	ldr	r2, [pc, #36]	; (800618c <UART_SetConfig+0x38c>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4432      	add	r2, r6
 8006176:	609a      	str	r2, [r3, #8]
}
 8006178:	bf00      	nop
 800617a:	377c      	adds	r7, #124	; 0x7c
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	bf00      	nop
 8006184:	40011000 	.word	0x40011000
 8006188:	40011400 	.word	0x40011400
 800618c:	51eb851f 	.word	0x51eb851f

08006190 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006194:	4904      	ldr	r1, [pc, #16]	; (80061a8 <MX_FATFS_Init+0x18>)
 8006196:	4805      	ldr	r0, [pc, #20]	; (80061ac <MX_FATFS_Init+0x1c>)
 8006198:	f002 ffa6 	bl	80090e8 <FATFS_LinkDriver>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <MX_FATFS_Init+0x20>)
 80061a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061a4:	bf00      	nop
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	200053d4 	.word	0x200053d4
 80061ac:	20000014 	.word	0x20000014
 80061b0:	200053d8 	.word	0x200053d8

080061b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 f9d9 	bl	8006588 <USER_SPI_initialize>
 80061d6:	4603      	mov	r3, r0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END INIT */
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fab7 	bl	8006760 <USER_SPI_status>
 80061f2:	4603      	mov	r3, r0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END STATUS */
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800620c:	7bf8      	ldrb	r0, [r7, #15]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	f000 faba 	bl	800678c <USER_SPI_read>
 8006218:	4603      	mov	r3, r0
    return RES_OK;
  /* USER CODE END READ */
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006232:	7bf8      	ldrb	r0, [r7, #15]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	f000 fb0d 	bl	8006858 <USER_SPI_write>
 800623e:	4603      	mov	r3, r0
    return RES_OK;
  /* USER CODE END WRITE */
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	603a      	str	r2, [r7, #0]
 8006252:	71fb      	strb	r3, [r7, #7]
 8006254:	460b      	mov	r3, r1
 8006256:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006258:	79b9      	ldrb	r1, [r7, #6]
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fb76 	bl	8006950 <USER_SPI_ioctl>
 8006264:	4603      	mov	r3, r0
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006278:	f7fc fac6 	bl	8002808 <HAL_GetTick>
 800627c:	4603      	mov	r3, r0
 800627e:	4a04      	ldr	r2, [pc, #16]	; (8006290 <SPI_Timer_On+0x20>)
 8006280:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <SPI_Timer_On+0x24>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6013      	str	r3, [r2, #0]
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20005840 	.word	0x20005840
 8006294:	20005844 	.word	0x20005844

08006298 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800629c:	f7fc fab4 	bl	8002808 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <SPI_Timer_Status+0x24>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <SPI_Timer_Status+0x28>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	bf34      	ite	cc
 80062b0:	2301      	movcc	r3, #1
 80062b2:	2300      	movcs	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20005840 	.word	0x20005840
 80062c0:	20005844 	.word	0x20005844

080062c4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80062ce:	f107 020f 	add.w	r2, r7, #15
 80062d2:	1df9      	adds	r1, r7, #7
 80062d4:	2332      	movs	r3, #50	; 0x32
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2301      	movs	r3, #1
 80062da:	4804      	ldr	r0, [pc, #16]	; (80062ec <xchg_spi+0x28>)
 80062dc:	f7fe fcdf 	bl	8004c9e <HAL_SPI_TransmitReceive>
    return rxDat;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	200052ec 	.word	0x200052ec

080062f0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e00a      	b.n	8006316 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	18d4      	adds	r4, r2, r3
 8006306:	20ff      	movs	r0, #255	; 0xff
 8006308:	f7ff ffdc 	bl	80062c4 <xchg_spi>
 800630c:	4603      	mov	r3, r0
 800630e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d3f0      	bcc.n	8006300 <rcvr_spi_multi+0x10>
	}
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	bd90      	pop	{r4, r7, pc}

08006328 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e009      	b.n	800634c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff ffbf 	bl	80062c4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d3f1      	bcc.n	8006338 <xmit_spi_multi+0x10>
	}
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006366:	f7fc fa4f 	bl	8002808 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006370:	20ff      	movs	r0, #255	; 0xff
 8006372:	f7ff ffa7 	bl	80062c4 <xchg_spi>
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2bff      	cmp	r3, #255	; 0xff
 800637e:	d007      	beq.n	8006390 <wait_ready+0x32>
 8006380:	f7fc fa42 	bl	8002808 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	429a      	cmp	r2, r3
 800638e:	d8ef      	bhi.n	8006370 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	2bff      	cmp	r3, #255	; 0xff
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80063a8:	2201      	movs	r2, #1
 80063aa:	2110      	movs	r1, #16
 80063ac:	4803      	ldr	r0, [pc, #12]	; (80063bc <despiselect+0x18>)
 80063ae:	f7fd f9df 	bl	8003770 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80063b2:	20ff      	movs	r0, #255	; 0xff
 80063b4:	f7ff ff86 	bl	80062c4 <xchg_spi>

}
 80063b8:	bf00      	nop
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40020000 	.word	0x40020000

080063c0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80063c4:	2200      	movs	r2, #0
 80063c6:	2110      	movs	r1, #16
 80063c8:	4809      	ldr	r0, [pc, #36]	; (80063f0 <spiselect+0x30>)
 80063ca:	f7fd f9d1 	bl	8003770 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80063ce:	20ff      	movs	r0, #255	; 0xff
 80063d0:	f7ff ff78 	bl	80062c4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80063d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063d8:	f7ff ffc1 	bl	800635e <wait_ready>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <spiselect+0x26>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e002      	b.n	80063ec <spiselect+0x2c>

	despiselect();
 80063e6:	f7ff ffdd 	bl	80063a4 <despiselect>
	return 0;	/* Timeout */
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40020000 	.word	0x40020000

080063f4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80063fe:	20c8      	movs	r0, #200	; 0xc8
 8006400:	f7ff ff36 	bl	8006270 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006404:	20ff      	movs	r0, #255	; 0xff
 8006406:	f7ff ff5d 	bl	80062c4 <xchg_spi>
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2bff      	cmp	r3, #255	; 0xff
 8006412:	d104      	bne.n	800641e <rcvr_datablock+0x2a>
 8006414:	f7ff ff40 	bl	8006298 <SPI_Timer_Status>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f2      	bne.n	8006404 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2bfe      	cmp	r3, #254	; 0xfe
 8006422:	d001      	beq.n	8006428 <rcvr_datablock+0x34>
 8006424:	2300      	movs	r3, #0
 8006426:	e00a      	b.n	800643e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff ff60 	bl	80062f0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006430:	20ff      	movs	r0, #255	; 0xff
 8006432:	f7ff ff47 	bl	80062c4 <xchg_spi>
 8006436:	20ff      	movs	r0, #255	; 0xff
 8006438:	f7ff ff44 	bl	80062c4 <xchg_spi>

	return 1;						/* Function succeeded */
 800643c:	2301      	movs	r3, #1
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006456:	f7ff ff82 	bl	800635e <wait_ready>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <xmit_datablock+0x1e>
 8006460:	2300      	movs	r3, #0
 8006462:	e01e      	b.n	80064a2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ff2c 	bl	80062c4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	2bfd      	cmp	r3, #253	; 0xfd
 8006470:	d016      	beq.n	80064a0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff ff56 	bl	8006328 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800647c:	20ff      	movs	r0, #255	; 0xff
 800647e:	f7ff ff21 	bl	80062c4 <xchg_spi>
 8006482:	20ff      	movs	r0, #255	; 0xff
 8006484:	f7ff ff1e 	bl	80062c4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006488:	20ff      	movs	r0, #255	; 0xff
 800648a:	f7ff ff1b 	bl	80062c4 <xchg_spi>
 800648e:	4603      	mov	r3, r0
 8006490:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	2b05      	cmp	r3, #5
 800649a:	d001      	beq.n	80064a0 <xmit_datablock+0x5a>
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <xmit_datablock+0x5c>
	}
	return 1;
 80064a0:	2301      	movs	r3, #1
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	4603      	mov	r3, r0
 80064b2:	6039      	str	r1, [r7, #0]
 80064b4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80064b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da0e      	bge.n	80064dc <send_cmd+0x32>
		cmd &= 0x7F;
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80064c6:	2100      	movs	r1, #0
 80064c8:	2037      	movs	r0, #55	; 0x37
 80064ca:	f7ff ffee 	bl	80064aa <send_cmd>
 80064ce:	4603      	mov	r3, r0
 80064d0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d901      	bls.n	80064dc <send_cmd+0x32>
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	e051      	b.n	8006580 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	2b0c      	cmp	r3, #12
 80064e0:	d008      	beq.n	80064f4 <send_cmd+0x4a>
		despiselect();
 80064e2:	f7ff ff5f 	bl	80063a4 <despiselect>
		if (!spiselect()) return 0xFF;
 80064e6:	f7ff ff6b 	bl	80063c0 <spiselect>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <send_cmd+0x4a>
 80064f0:	23ff      	movs	r3, #255	; 0xff
 80064f2:	e045      	b.n	8006580 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fee1 	bl	80062c4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	0e1b      	lsrs	r3, r3, #24
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fedb 	bl	80062c4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b2db      	uxtb	r3, r3
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fed5 	bl	80062c4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	b2db      	uxtb	r3, r3
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fecf 	bl	80062c4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff feca 	bl	80062c4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006530:	2301      	movs	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <send_cmd+0x94>
 800653a:	2395      	movs	r3, #149	; 0x95
 800653c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d101      	bne.n	8006548 <send_cmd+0x9e>
 8006544:	2387      	movs	r3, #135	; 0x87
 8006546:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff feba 	bl	80062c4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b0c      	cmp	r3, #12
 8006554:	d102      	bne.n	800655c <send_cmd+0xb2>
 8006556:	20ff      	movs	r0, #255	; 0xff
 8006558:	f7ff feb4 	bl	80062c4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800655c:	230a      	movs	r3, #10
 800655e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006560:	20ff      	movs	r0, #255	; 0xff
 8006562:	f7ff feaf 	bl	80062c4 <xchg_spi>
 8006566:	4603      	mov	r3, r0
 8006568:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800656a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800656e:	2b00      	cmp	r3, #0
 8006570:	da05      	bge.n	800657e <send_cmd+0xd4>
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	3b01      	subs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <send_cmd+0xb6>

	return res;							/* Return received response */
 800657e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <USER_SPI_initialize+0x14>
 8006598:	2301      	movs	r3, #1
 800659a:	e0d6      	b.n	800674a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800659c:	4b6d      	ldr	r3, [pc, #436]	; (8006754 <USER_SPI_initialize+0x1cc>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <USER_SPI_initialize+0x2a>
 80065aa:	4b6a      	ldr	r3, [pc, #424]	; (8006754 <USER_SPI_initialize+0x1cc>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	e0cb      	b.n	800674a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80065b2:	4b69      	ldr	r3, [pc, #420]	; (8006758 <USER_SPI_initialize+0x1d0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80065bc:	4b66      	ldr	r3, [pc, #408]	; (8006758 <USER_SPI_initialize+0x1d0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80065c4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80065c6:	230a      	movs	r3, #10
 80065c8:	73fb      	strb	r3, [r7, #15]
 80065ca:	e005      	b.n	80065d8 <USER_SPI_initialize+0x50>
 80065cc:	20ff      	movs	r0, #255	; 0xff
 80065ce:	f7ff fe79 	bl	80062c4 <xchg_spi>
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f6      	bne.n	80065cc <USER_SPI_initialize+0x44>

	ty = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80065e2:	2100      	movs	r1, #0
 80065e4:	2000      	movs	r0, #0
 80065e6:	f7ff ff60 	bl	80064aa <send_cmd>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	f040 808b 	bne.w	8006708 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80065f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065f6:	f7ff fe3b 	bl	8006270 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80065fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80065fe:	2008      	movs	r0, #8
 8006600:	f7ff ff53 	bl	80064aa <send_cmd>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d151      	bne.n	80066ae <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e00d      	b.n	800662c <USER_SPI_initialize+0xa4>
 8006610:	7bfc      	ldrb	r4, [r7, #15]
 8006612:	20ff      	movs	r0, #255	; 0xff
 8006614:	f7ff fe56 	bl	80062c4 <xchg_spi>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	f107 0310 	add.w	r3, r7, #16
 8006620:	4423      	add	r3, r4
 8006622:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	3301      	adds	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d9ee      	bls.n	8006610 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006632:	7abb      	ldrb	r3, [r7, #10]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d167      	bne.n	8006708 <USER_SPI_initialize+0x180>
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	2baa      	cmp	r3, #170	; 0xaa
 800663c:	d164      	bne.n	8006708 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800663e:	bf00      	nop
 8006640:	f7ff fe2a 	bl	8006298 <SPI_Timer_Status>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <USER_SPI_initialize+0xd2>
 800664a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800664e:	20a9      	movs	r0, #169	; 0xa9
 8006650:	f7ff ff2b 	bl	80064aa <send_cmd>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f2      	bne.n	8006640 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800665a:	f7ff fe1d 	bl	8006298 <SPI_Timer_Status>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d051      	beq.n	8006708 <USER_SPI_initialize+0x180>
 8006664:	2100      	movs	r1, #0
 8006666:	203a      	movs	r0, #58	; 0x3a
 8006668:	f7ff ff1f 	bl	80064aa <send_cmd>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d14a      	bne.n	8006708 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
 8006676:	e00d      	b.n	8006694 <USER_SPI_initialize+0x10c>
 8006678:	7bfc      	ldrb	r4, [r7, #15]
 800667a:	20ff      	movs	r0, #255	; 0xff
 800667c:	f7ff fe22 	bl	80062c4 <xchg_spi>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	f107 0310 	add.w	r3, r7, #16
 8006688:	4423      	add	r3, r4
 800668a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	3301      	adds	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d9ee      	bls.n	8006678 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800669a:	7a3b      	ldrb	r3, [r7, #8]
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <USER_SPI_initialize+0x120>
 80066a4:	230c      	movs	r3, #12
 80066a6:	e000      	b.n	80066aa <USER_SPI_initialize+0x122>
 80066a8:	2304      	movs	r3, #4
 80066aa:	737b      	strb	r3, [r7, #13]
 80066ac:	e02c      	b.n	8006708 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80066ae:	2100      	movs	r1, #0
 80066b0:	20a9      	movs	r0, #169	; 0xa9
 80066b2:	f7ff fefa 	bl	80064aa <send_cmd>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d804      	bhi.n	80066c6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80066bc:	2302      	movs	r3, #2
 80066be:	737b      	strb	r3, [r7, #13]
 80066c0:	23a9      	movs	r3, #169	; 0xa9
 80066c2:	73bb      	strb	r3, [r7, #14]
 80066c4:	e003      	b.n	80066ce <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80066c6:	2301      	movs	r3, #1
 80066c8:	737b      	strb	r3, [r7, #13]
 80066ca:	2301      	movs	r3, #1
 80066cc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80066ce:	bf00      	nop
 80066d0:	f7ff fde2 	bl	8006298 <SPI_Timer_Status>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <USER_SPI_initialize+0x162>
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2100      	movs	r1, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fee3 	bl	80064aa <send_cmd>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f2      	bne.n	80066d0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80066ea:	f7ff fdd5 	bl	8006298 <SPI_Timer_Status>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <USER_SPI_initialize+0x17c>
 80066f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066f8:	2010      	movs	r0, #16
 80066fa:	f7ff fed6 	bl	80064aa <send_cmd>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <USER_SPI_initialize+0x180>
				ty = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006708:	4a14      	ldr	r2, [pc, #80]	; (800675c <USER_SPI_initialize+0x1d4>)
 800670a:	7b7b      	ldrb	r3, [r7, #13]
 800670c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800670e:	f7ff fe49 	bl	80063a4 <despiselect>

	if (ty) {			/* OK */
 8006712:	7b7b      	ldrb	r3, [r7, #13]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d012      	beq.n	800673e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006718:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <USER_SPI_initialize+0x1d0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <USER_SPI_initialize+0x1d0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0210 	orr.w	r2, r2, #16
 800672a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <USER_SPI_initialize+0x1cc>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <USER_SPI_initialize+0x1cc>)
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	e002      	b.n	8006744 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <USER_SPI_initialize+0x1cc>)
 8006740:	2201      	movs	r2, #1
 8006742:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006744:	4b03      	ldr	r3, [pc, #12]	; (8006754 <USER_SPI_initialize+0x1cc>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b2db      	uxtb	r3, r3
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bd90      	pop	{r4, r7, pc}
 8006752:	bf00      	nop
 8006754:	20000028 	.word	0x20000028
 8006758:	200052ec 	.word	0x200052ec
 800675c:	20000634 	.word	0x20000634

08006760 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USER_SPI_status+0x14>
 8006770:	2301      	movs	r3, #1
 8006772:	e002      	b.n	800677a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <USER_SPI_status+0x28>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	b2db      	uxtb	r3, r3
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000028 	.word	0x20000028

0800678c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4603      	mov	r3, r0
 800679a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <USER_SPI_read+0x1c>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USER_SPI_read+0x20>
 80067a8:	2304      	movs	r3, #4
 80067aa:	e04d      	b.n	8006848 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <USER_SPI_read+0xc4>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <USER_SPI_read+0x32>
 80067ba:	2303      	movs	r3, #3
 80067bc:	e044      	b.n	8006848 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80067be:	4b25      	ldr	r3, [pc, #148]	; (8006854 <USER_SPI_read+0xc8>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <USER_SPI_read+0x44>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	025b      	lsls	r3, r3, #9
 80067ce:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d111      	bne.n	80067fa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	2011      	movs	r0, #17
 80067da:	f7ff fe66 	bl	80064aa <send_cmd>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d129      	bne.n	8006838 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80067e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067e8:	68b8      	ldr	r0, [r7, #8]
 80067ea:	f7ff fe03 	bl	80063f4 <rcvr_datablock>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d021      	beq.n	8006838 <USER_SPI_read+0xac>
			count = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	e01e      	b.n	8006838 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	2012      	movs	r0, #18
 80067fe:	f7ff fe54 	bl	80064aa <send_cmd>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d117      	bne.n	8006838 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800680c:	68b8      	ldr	r0, [r7, #8]
 800680e:	f7ff fdf1 	bl	80063f4 <rcvr_datablock>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <USER_SPI_read+0xa2>
				buff += 512;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800681e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	3b01      	subs	r3, #1
 8006824:	603b      	str	r3, [r7, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1ed      	bne.n	8006808 <USER_SPI_read+0x7c>
 800682c:	e000      	b.n	8006830 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800682e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006830:	2100      	movs	r1, #0
 8006832:	200c      	movs	r0, #12
 8006834:	f7ff fe39 	bl	80064aa <send_cmd>
		}
	}
	despiselect();
 8006838:	f7ff fdb4 	bl	80063a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf14      	ite	ne
 8006842:	2301      	movne	r3, #1
 8006844:	2300      	moveq	r3, #0
 8006846:	b2db      	uxtb	r3, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000028 	.word	0x20000028
 8006854:	20000634 	.word	0x20000634

08006858 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <USER_SPI_write+0x1c>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <USER_SPI_write+0x20>
 8006874:	2304      	movs	r3, #4
 8006876:	e063      	b.n	8006940 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006878:	4b33      	ldr	r3, [pc, #204]	; (8006948 <USER_SPI_write+0xf0>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <USER_SPI_write+0x32>
 8006886:	2303      	movs	r3, #3
 8006888:	e05a      	b.n	8006940 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <USER_SPI_write+0xf0>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USER_SPI_write+0x44>
 8006898:	2302      	movs	r3, #2
 800689a:	e051      	b.n	8006940 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800689c:	4b2b      	ldr	r3, [pc, #172]	; (800694c <USER_SPI_write+0xf4>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <USER_SPI_write+0x56>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	025b      	lsls	r3, r3, #9
 80068ac:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d110      	bne.n	80068d6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	2018      	movs	r0, #24
 80068b8:	f7ff fdf7 	bl	80064aa <send_cmd>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d136      	bne.n	8006930 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80068c2:	21fe      	movs	r1, #254	; 0xfe
 80068c4:	68b8      	ldr	r0, [r7, #8]
 80068c6:	f7ff fdbe 	bl	8006446 <xmit_datablock>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d02f      	beq.n	8006930 <USER_SPI_write+0xd8>
			count = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	e02c      	b.n	8006930 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80068d6:	4b1d      	ldr	r3, [pc, #116]	; (800694c <USER_SPI_write+0xf4>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 0306 	and.w	r3, r3, #6
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <USER_SPI_write+0x92>
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	2097      	movs	r0, #151	; 0x97
 80068e6:	f7ff fde0 	bl	80064aa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	2019      	movs	r0, #25
 80068ee:	f7ff fddc 	bl	80064aa <send_cmd>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d11b      	bne.n	8006930 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80068f8:	21fc      	movs	r1, #252	; 0xfc
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f7ff fda3 	bl	8006446 <xmit_datablock>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <USER_SPI_write+0xc4>
				buff += 512;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800690c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	3b01      	subs	r3, #1
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ee      	bne.n	80068f8 <USER_SPI_write+0xa0>
 800691a:	e000      	b.n	800691e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800691c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800691e:	21fd      	movs	r1, #253	; 0xfd
 8006920:	2000      	movs	r0, #0
 8006922:	f7ff fd90 	bl	8006446 <xmit_datablock>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <USER_SPI_write+0xd8>
 800692c:	2301      	movs	r3, #1
 800692e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006930:	f7ff fd38 	bl	80063a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000028 	.word	0x20000028
 800694c:	20000634 	.word	0x20000634

08006950 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	; 0x30
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	603a      	str	r2, [r7, #0]
 800695a:	71fb      	strb	r3, [r7, #7]
 800695c:	460b      	mov	r3, r1
 800695e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <USER_SPI_ioctl+0x1a>
 8006966:	2304      	movs	r3, #4
 8006968:	e15a      	b.n	8006c20 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800696a:	4baf      	ldr	r3, [pc, #700]	; (8006c28 <USER_SPI_ioctl+0x2d8>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <USER_SPI_ioctl+0x2c>
 8006978:	2303      	movs	r3, #3
 800697a:	e151      	b.n	8006c20 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006982:	79bb      	ldrb	r3, [r7, #6]
 8006984:	2b04      	cmp	r3, #4
 8006986:	f200 8136 	bhi.w	8006bf6 <USER_SPI_ioctl+0x2a6>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <USER_SPI_ioctl+0x40>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069a5 	.word	0x080069a5
 8006994:	080069b9 	.word	0x080069b9
 8006998:	08006bf7 	.word	0x08006bf7
 800699c:	08006a65 	.word	0x08006a65
 80069a0:	08006b5b 	.word	0x08006b5b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80069a4:	f7ff fd0c 	bl	80063c0 <spiselect>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 8127 	beq.w	8006bfe <USER_SPI_ioctl+0x2ae>
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80069b6:	e122      	b.n	8006bfe <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80069b8:	2100      	movs	r1, #0
 80069ba:	2009      	movs	r0, #9
 80069bc:	f7ff fd75 	bl	80064aa <send_cmd>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 811d 	bne.w	8006c02 <USER_SPI_ioctl+0x2b2>
 80069c8:	f107 030c 	add.w	r3, r7, #12
 80069cc:	2110      	movs	r1, #16
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fd10 	bl	80063f4 <rcvr_datablock>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8113 	beq.w	8006c02 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80069dc:	7b3b      	ldrb	r3, [r7, #12]
 80069de:	099b      	lsrs	r3, r3, #6
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d111      	bne.n	8006a0a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80069e6:	7d7b      	ldrb	r3, [r7, #21]
 80069e8:	461a      	mov	r2, r3
 80069ea:	7d3b      	ldrb	r3, [r7, #20]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	4413      	add	r3, r2
 80069f0:	461a      	mov	r2, r3
 80069f2:	7cfb      	ldrb	r3, [r7, #19]
 80069f4:	041b      	lsls	r3, r3, #16
 80069f6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80069fa:	4413      	add	r3, r2
 80069fc:	3301      	adds	r3, #1
 80069fe:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	029a      	lsls	r2, r3, #10
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e028      	b.n	8006a5c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006a0a:	7c7b      	ldrb	r3, [r7, #17]
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	7dbb      	ldrb	r3, [r7, #22]
 8006a14:	09db      	lsrs	r3, r3, #7
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	4413      	add	r3, r2
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	7d7b      	ldrb	r3, [r7, #21]
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0306 	and.w	r3, r3, #6
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006a32:	7d3b      	ldrb	r3, [r7, #20]
 8006a34:	099b      	lsrs	r3, r3, #6
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	7cfb      	ldrb	r3, [r7, #19]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	7cbb      	ldrb	r3, [r7, #18]
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a48:	4413      	add	r3, r2
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006a4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a52:	3b09      	subs	r3, #9
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	409a      	lsls	r2, r3
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006a62:	e0ce      	b.n	8006c02 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006a64:	4b71      	ldr	r3, [pc, #452]	; (8006c2c <USER_SPI_ioctl+0x2dc>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d031      	beq.n	8006ad4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006a70:	2100      	movs	r1, #0
 8006a72:	208d      	movs	r0, #141	; 0x8d
 8006a74:	f7ff fd19 	bl	80064aa <send_cmd>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 80c3 	bne.w	8006c06 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006a80:	20ff      	movs	r0, #255	; 0xff
 8006a82:	f7ff fc1f 	bl	80062c4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	2110      	movs	r1, #16
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fcb1 	bl	80063f4 <rcvr_datablock>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80b6 	beq.w	8006c06 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006a9a:	2330      	movs	r3, #48	; 0x30
 8006a9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006aa0:	e007      	b.n	8006ab2 <USER_SPI_ioctl+0x162>
 8006aa2:	20ff      	movs	r0, #255	; 0xff
 8006aa4:	f7ff fc0e 	bl	80062c4 <xchg_spi>
 8006aa8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006ab2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f3      	bne.n	8006aa2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006aba:	7dbb      	ldrb	r3, [r7, #22]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	fa03 f202 	lsl.w	r2, r3, r2
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006ad2:	e098      	b.n	8006c06 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	2009      	movs	r0, #9
 8006ad8:	f7ff fce7 	bl	80064aa <send_cmd>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 8091 	bne.w	8006c06 <USER_SPI_ioctl+0x2b6>
 8006ae4:	f107 030c 	add.w	r3, r7, #12
 8006ae8:	2110      	movs	r1, #16
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fc82 	bl	80063f4 <rcvr_datablock>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8087 	beq.w	8006c06 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006af8:	4b4c      	ldr	r3, [pc, #304]	; (8006c2c <USER_SPI_ioctl+0x2dc>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d012      	beq.n	8006b2a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006b04:	7dbb      	ldrb	r3, [r7, #22]
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006b0c:	7dfa      	ldrb	r2, [r7, #23]
 8006b0e:	09d2      	lsrs	r2, r2, #7
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	4413      	add	r3, r2
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	7e7b      	ldrb	r3, [r7, #25]
 8006b18:	099b      	lsrs	r3, r3, #6
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	e013      	b.n	8006b52 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006b2a:	7dbb      	ldrb	r3, [r7, #22]
 8006b2c:	109b      	asrs	r3, r3, #2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	3301      	adds	r3, #1
 8006b36:	7dfa      	ldrb	r2, [r7, #23]
 8006b38:	00d2      	lsls	r2, r2, #3
 8006b3a:	f002 0218 	and.w	r2, r2, #24
 8006b3e:	7df9      	ldrb	r1, [r7, #23]
 8006b40:	0949      	lsrs	r1, r1, #5
 8006b42:	b2c9      	uxtb	r1, r1
 8006b44:	440a      	add	r2, r1
 8006b46:	3201      	adds	r2, #1
 8006b48:	fb02 f303 	mul.w	r3, r2, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006b58:	e055      	b.n	8006c06 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006b5a:	4b34      	ldr	r3, [pc, #208]	; (8006c2c <USER_SPI_ioctl+0x2dc>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f003 0306 	and.w	r3, r3, #6
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d051      	beq.n	8006c0a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006b66:	f107 020c 	add.w	r2, r7, #12
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	210b      	movs	r1, #11
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff feee 	bl	8006950 <USER_SPI_ioctl>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d149      	bne.n	8006c0e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006b7a:	7b3b      	ldrb	r3, [r7, #12]
 8006b7c:	099b      	lsrs	r3, r3, #6
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <USER_SPI_ioctl+0x23e>
 8006b84:	7dbb      	ldrb	r3, [r7, #22]
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d041      	beq.n	8006c12 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	623b      	str	r3, [r7, #32]
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006b9e:	4b23      	ldr	r3, [pc, #140]	; (8006c2c <USER_SPI_ioctl+0x2dc>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	025b      	lsls	r3, r3, #9
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb8:	2020      	movs	r0, #32
 8006bba:	f7ff fc76 	bl	80064aa <send_cmd>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d128      	bne.n	8006c16 <USER_SPI_ioctl+0x2c6>
 8006bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bc6:	2021      	movs	r0, #33	; 0x21
 8006bc8:	f7ff fc6f 	bl	80064aa <send_cmd>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d121      	bne.n	8006c16 <USER_SPI_ioctl+0x2c6>
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	2026      	movs	r0, #38	; 0x26
 8006bd6:	f7ff fc68 	bl	80064aa <send_cmd>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d11a      	bne.n	8006c16 <USER_SPI_ioctl+0x2c6>
 8006be0:	f247 5030 	movw	r0, #30000	; 0x7530
 8006be4:	f7ff fbbb 	bl	800635e <wait_ready>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d013      	beq.n	8006c16 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006bf4:	e00f      	b.n	8006c16 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006bf6:	2304      	movs	r3, #4
 8006bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006bfc:	e00c      	b.n	8006c18 <USER_SPI_ioctl+0x2c8>
		break;
 8006bfe:	bf00      	nop
 8006c00:	e00a      	b.n	8006c18 <USER_SPI_ioctl+0x2c8>
		break;
 8006c02:	bf00      	nop
 8006c04:	e008      	b.n	8006c18 <USER_SPI_ioctl+0x2c8>
		break;
 8006c06:	bf00      	nop
 8006c08:	e006      	b.n	8006c18 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006c0a:	bf00      	nop
 8006c0c:	e004      	b.n	8006c18 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006c0e:	bf00      	nop
 8006c10:	e002      	b.n	8006c18 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <USER_SPI_ioctl+0x2c8>
		break;
 8006c16:	bf00      	nop
	}

	despiselect();
 8006c18:	f7ff fbc4 	bl	80063a4 <despiselect>

	return res;
 8006c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3730      	adds	r7, #48	; 0x30
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000028 	.word	0x20000028
 8006c2c:	20000634 	.word	0x20000634

08006c30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <disk_status+0x30>)
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	79fa      	ldrb	r2, [r7, #7]
 8006c48:	4905      	ldr	r1, [pc, #20]	; (8006c60 <disk_status+0x30>)
 8006c4a:	440a      	add	r2, r1
 8006c4c:	7a12      	ldrb	r2, [r2, #8]
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4798      	blx	r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20000660 	.word	0x20000660

08006c64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	4a0d      	ldr	r2, [pc, #52]	; (8006cac <disk_initialize+0x48>)
 8006c76:	5cd3      	ldrb	r3, [r2, r3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d111      	bne.n	8006ca0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <disk_initialize+0x48>)
 8006c80:	2101      	movs	r1, #1
 8006c82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <disk_initialize+0x48>)
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	79fa      	ldrb	r2, [r7, #7]
 8006c92:	4906      	ldr	r1, [pc, #24]	; (8006cac <disk_initialize+0x48>)
 8006c94:	440a      	add	r2, r1
 8006c96:	7a12      	ldrb	r2, [r2, #8]
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000660 	.word	0x20000660

08006cb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <disk_read+0x3c>)
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	689c      	ldr	r4, [r3, #8]
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	4a07      	ldr	r2, [pc, #28]	; (8006cec <disk_read+0x3c>)
 8006cd0:	4413      	add	r3, r2
 8006cd2:	7a18      	ldrb	r0, [r3, #8]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	47a0      	blx	r4
 8006cdc:	4603      	mov	r3, r0
 8006cde:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd90      	pop	{r4, r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000660 	.word	0x20000660

08006cf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <disk_write+0x3c>)
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	68dc      	ldr	r4, [r3, #12]
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	; (8006d2c <disk_write+0x3c>)
 8006d10:	4413      	add	r3, r2
 8006d12:	7a18      	ldrb	r0, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	47a0      	blx	r4
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd90      	pop	{r4, r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000660 	.word	0x20000660

08006d30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	603a      	str	r2, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <disk_ioctl+0x38>)
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	79fa      	ldrb	r2, [r7, #7]
 8006d4e:	4906      	ldr	r1, [pc, #24]	; (8006d68 <disk_ioctl+0x38>)
 8006d50:	440a      	add	r2, r1
 8006d52:	7a10      	ldrb	r0, [r2, #8]
 8006d54:	79b9      	ldrb	r1, [r7, #6]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4798      	blx	r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000660 	.word	0x20000660

08006d6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3301      	adds	r3, #1
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d7c:	89fb      	ldrh	r3, [r7, #14]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	b21a      	sxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b21b      	sxth	r3, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	b21b      	sxth	r3, r3
 8006d8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3303      	adds	r3, #3
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	3202      	adds	r2, #2
 8006db4:	7812      	ldrb	r2, [r2, #0]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	3201      	adds	r2, #1
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
	return rv;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	887a      	ldrh	r2, [r7, #2]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	887b      	ldrh	r3, [r7, #2]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	887a      	ldrh	r2, [r7, #2]
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	607a      	str	r2, [r7, #4]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	0a1b      	lsrs	r3, r3, #8
 8006e56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00d      	beq.n	8006ea6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	1c53      	adds	r3, r2, #1
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	6179      	str	r1, [r7, #20]
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	607b      	str	r3, [r7, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f1      	bne.n	8006e8a <mem_cpy+0x1a>
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006eb2:	b480      	push	{r7}
 8006eb4:	b087      	sub	sp, #28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	617a      	str	r2, [r7, #20]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	607b      	str	r3, [r7, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f3      	bne.n	8006ec2 <mem_set+0x10>
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ee8:	b480      	push	{r7}
 8006eea:	b089      	sub	sp, #36	; 0x24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	61fa      	str	r2, [r7, #28]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	61ba      	str	r2, [r7, #24]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	1acb      	subs	r3, r1, r3
 8006f14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	607b      	str	r3, [r7, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <mem_cmp+0x40>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0eb      	beq.n	8006f00 <mem_cmp+0x18>

	return r;
 8006f28:	697b      	ldr	r3, [r7, #20]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3724      	adds	r7, #36	; 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f40:	e002      	b.n	8006f48 <chk_chr+0x12>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3301      	adds	r3, #1
 8006f46:	607b      	str	r3, [r7, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <chk_chr+0x26>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d1f2      	bne.n	8006f42 <chk_chr+0xc>
	return *str;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <lock_fs+0x22>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f002 f8e8 	bl	8009154 <ff_req_grant>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <lock_fs+0x22>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <lock_fs+0x24>
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <unlock_fs+0x2e>
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	2b0c      	cmp	r3, #12
 8006fae:	d00a      	beq.n	8006fc6 <unlock_fs+0x2e>
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2b0b      	cmp	r3, #11
 8006fb4:	d007      	beq.n	8006fc6 <unlock_fs+0x2e>
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d004      	beq.n	8006fc6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f002 f8dc 	bl	800917e <ff_rel_grant>
	}
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e029      	b.n	8007038 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006fe4:	4a27      	ldr	r2, [pc, #156]	; (8007084 <chk_lock+0xb4>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01d      	beq.n	800702e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ff2:	4a24      	ldr	r2, [pc, #144]	; (8007084 <chk_lock+0xb4>)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	4413      	add	r3, r2
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d116      	bne.n	8007032 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007004:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <chk_lock+0xb4>)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007014:	429a      	cmp	r2, r3
 8007016:	d10c      	bne.n	8007032 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007018:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <chk_lock+0xb4>)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	4413      	add	r3, r2
 8007020:	3308      	adds	r3, #8
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007028:	429a      	cmp	r2, r3
 800702a:	d102      	bne.n	8007032 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800702c:	e007      	b.n	800703e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800702e:	2301      	movs	r3, #1
 8007030:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d9d2      	bls.n	8006fe4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d109      	bne.n	8007058 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <chk_lock+0x80>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d101      	bne.n	8007054 <chk_lock+0x84>
 8007050:	2300      	movs	r3, #0
 8007052:	e010      	b.n	8007076 <chk_lock+0xa6>
 8007054:	2312      	movs	r3, #18
 8007056:	e00e      	b.n	8007076 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d108      	bne.n	8007070 <chk_lock+0xa0>
 800705e:	4a09      	ldr	r2, [pc, #36]	; (8007084 <chk_lock+0xb4>)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	4413      	add	r3, r2
 8007066:	330c      	adds	r3, #12
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706e:	d101      	bne.n	8007074 <chk_lock+0xa4>
 8007070:	2310      	movs	r3, #16
 8007072:	e000      	b.n	8007076 <chk_lock+0xa6>
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000640 	.word	0x20000640

08007088 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800708e:	2300      	movs	r3, #0
 8007090:	607b      	str	r3, [r7, #4]
 8007092:	e002      	b.n	800709a <enq_lock+0x12>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3301      	adds	r3, #1
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d806      	bhi.n	80070ae <enq_lock+0x26>
 80070a0:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <enq_lock+0x40>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4413      	add	r3, r2
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f2      	bne.n	8007094 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000640 	.word	0x20000640

080070cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e01f      	b.n	800711c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80070dc:	4a41      	ldr	r2, [pc, #260]	; (80071e4 <inc_lock+0x118>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	4413      	add	r3, r2
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d113      	bne.n	8007116 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80070ee:	4a3d      	ldr	r2, [pc, #244]	; (80071e4 <inc_lock+0x118>)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	4413      	add	r3, r2
 80070f6:	3304      	adds	r3, #4
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80070fe:	429a      	cmp	r2, r3
 8007100:	d109      	bne.n	8007116 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007102:	4a38      	ldr	r2, [pc, #224]	; (80071e4 <inc_lock+0x118>)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	4413      	add	r3, r2
 800710a:	3308      	adds	r3, #8
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007112:	429a      	cmp	r2, r3
 8007114:	d006      	beq.n	8007124 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d9dc      	bls.n	80070dc <inc_lock+0x10>
 8007122:	e000      	b.n	8007126 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007124:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d132      	bne.n	8007192 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e002      	b.n	8007138 <inc_lock+0x6c>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d806      	bhi.n	800714c <inc_lock+0x80>
 800713e:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <inc_lock+0x118>)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	4413      	add	r3, r2
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f2      	bne.n	8007132 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d101      	bne.n	8007156 <inc_lock+0x8a>
 8007152:	2300      	movs	r3, #0
 8007154:	e040      	b.n	80071d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4922      	ldr	r1, [pc, #136]	; (80071e4 <inc_lock+0x118>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	440b      	add	r3, r1
 8007162:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	491e      	ldr	r1, [pc, #120]	; (80071e4 <inc_lock+0x118>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	440b      	add	r3, r1
 8007170:	3304      	adds	r3, #4
 8007172:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695a      	ldr	r2, [r3, #20]
 8007178:	491a      	ldr	r1, [pc, #104]	; (80071e4 <inc_lock+0x118>)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	440b      	add	r3, r1
 8007180:	3308      	adds	r3, #8
 8007182:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007184:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <inc_lock+0x118>)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	4413      	add	r3, r2
 800718c:	330c      	adds	r3, #12
 800718e:	2200      	movs	r2, #0
 8007190:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d009      	beq.n	80071ac <inc_lock+0xe0>
 8007198:	4a12      	ldr	r2, [pc, #72]	; (80071e4 <inc_lock+0x118>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	4413      	add	r3, r2
 80071a0:	330c      	adds	r3, #12
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <inc_lock+0xe0>
 80071a8:	2300      	movs	r3, #0
 80071aa:	e015      	b.n	80071d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d108      	bne.n	80071c4 <inc_lock+0xf8>
 80071b2:	4a0c      	ldr	r2, [pc, #48]	; (80071e4 <inc_lock+0x118>)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	4413      	add	r3, r2
 80071ba:	330c      	adds	r3, #12
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	e001      	b.n	80071c8 <inc_lock+0xfc>
 80071c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071c8:	4906      	ldr	r1, [pc, #24]	; (80071e4 <inc_lock+0x118>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	440b      	add	r3, r1
 80071d0:	330c      	adds	r3, #12
 80071d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000640 	.word	0x20000640

080071e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d825      	bhi.n	8007248 <dec_lock+0x60>
		n = Files[i].ctr;
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <dec_lock+0x74>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	4413      	add	r3, r2
 8007204:	330c      	adds	r3, #12
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800720a:	89fb      	ldrh	r3, [r7, #14]
 800720c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007210:	d101      	bne.n	8007216 <dec_lock+0x2e>
 8007212:	2300      	movs	r3, #0
 8007214:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007216:	89fb      	ldrh	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <dec_lock+0x3a>
 800721c:	89fb      	ldrh	r3, [r7, #14]
 800721e:	3b01      	subs	r3, #1
 8007220:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007222:	4a0e      	ldr	r2, [pc, #56]	; (800725c <dec_lock+0x74>)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	4413      	add	r3, r2
 800722a:	330c      	adds	r3, #12
 800722c:	89fa      	ldrh	r2, [r7, #14]
 800722e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007230:	89fb      	ldrh	r3, [r7, #14]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d105      	bne.n	8007242 <dec_lock+0x5a>
 8007236:	4a09      	ldr	r2, [pc, #36]	; (800725c <dec_lock+0x74>)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	4413      	add	r3, r2
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	737b      	strb	r3, [r7, #13]
 8007246:	e001      	b.n	800724c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007248:	2302      	movs	r3, #2
 800724a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800724c:	7b7b      	ldrb	r3, [r7, #13]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000640 	.word	0x20000640

08007260 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e010      	b.n	8007290 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800726e:	4a0d      	ldr	r2, [pc, #52]	; (80072a4 <clear_lock+0x44>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	4413      	add	r3, r2
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d105      	bne.n	800728a <clear_lock+0x2a>
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <clear_lock+0x44>)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	4413      	add	r3, r2
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d9eb      	bls.n	800726e <clear_lock+0xe>
	}
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20000640 	.word	0x20000640

080072a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	78db      	ldrb	r3, [r3, #3]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d034      	beq.n	8007326 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7858      	ldrb	r0, [r3, #1]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80072cc:	2301      	movs	r3, #1
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	f7ff fd0e 	bl	8006cf0 <disk_write>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80072da:	2301      	movs	r3, #1
 80072dc:	73fb      	strb	r3, [r7, #15]
 80072de:	e022      	b.n	8007326 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	1ad2      	subs	r2, r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d217      	bcs.n	8007326 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	789b      	ldrb	r3, [r3, #2]
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	e010      	b.n	8007320 <sync_window+0x78>
					wsect += fs->fsize;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4413      	add	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7858      	ldrb	r0, [r3, #1]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007312:	2301      	movs	r3, #1
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	f7ff fceb 	bl	8006cf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	3b01      	subs	r3, #1
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d8eb      	bhi.n	80072fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d01b      	beq.n	8007380 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ffad 	bl	80072a8 <sync_window>
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d113      	bne.n	8007380 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7858      	ldrb	r0, [r3, #1]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007362:	2301      	movs	r3, #1
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	f7ff fca3 	bl	8006cb0 <disk_read>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007370:	f04f 33ff 	mov.w	r3, #4294967295
 8007374:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007376:	2301      	movs	r3, #1
 8007378:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ff87 	bl	80072a8 <sync_window>
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d158      	bne.n	8007456 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d148      	bne.n	800743e <sync_fs+0xb2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	791b      	ldrb	r3, [r3, #4]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d144      	bne.n	800743e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3334      	adds	r3, #52	; 0x34
 80073b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fd77 	bl	8006eb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3334      	adds	r3, #52	; 0x34
 80073c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073cc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff fd06 	bl	8006de2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3334      	adds	r3, #52	; 0x34
 80073da:	4921      	ldr	r1, [pc, #132]	; (8007460 <sync_fs+0xd4>)
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fd1b 	bl	8006e18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3334      	adds	r3, #52	; 0x34
 80073e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073ea:	491e      	ldr	r1, [pc, #120]	; (8007464 <sync_fs+0xd8>)
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fd13 	bl	8006e18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3334      	adds	r3, #52	; 0x34
 80073f6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7ff fd09 	bl	8006e18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3334      	adds	r3, #52	; 0x34
 800740a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f7ff fcff 	bl	8006e18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7858      	ldrb	r0, [r3, #1]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007432:	2301      	movs	r3, #1
 8007434:	f7ff fc5c 	bl	8006cf0 <disk_write>
			fs->fsi_flag = 0;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2200      	movs	r2, #0
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fc72 	bl	8006d30 <disk_ioctl>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <sync_fs+0xca>
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	41615252 	.word	0x41615252
 8007464:	61417272 	.word	0x61417272

08007468 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	3b02      	subs	r3, #2
 8007476:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	3b02      	subs	r3, #2
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d301      	bcc.n	8007488 <clust2sect+0x20>
 8007484:	2300      	movs	r3, #0
 8007486:	e008      	b.n	800749a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	895b      	ldrh	r3, [r3, #10]
 800748c:	461a      	mov	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	fb03 f202 	mul.w	r2, r3, r2
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4413      	add	r3, r2
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d904      	bls.n	80074c6 <get_fat+0x20>
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <get_fat+0x26>
		val = 1;	/* Internal error */
 80074c6:	2301      	movs	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	e08f      	b.n	80075ec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074cc:	f04f 33ff 	mov.w	r3, #4294967295
 80074d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d062      	beq.n	80075a0 <get_fat+0xfa>
 80074da:	2b03      	cmp	r3, #3
 80074dc:	dc7c      	bgt.n	80075d8 <get_fat+0x132>
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d002      	beq.n	80074e8 <get_fat+0x42>
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d042      	beq.n	800756c <get_fat+0xc6>
 80074e6:	e077      	b.n	80075d8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	0a5b      	lsrs	r3, r3, #9
 80074fe:	4413      	add	r3, r2
 8007500:	4619      	mov	r1, r3
 8007502:	6938      	ldr	r0, [r7, #16]
 8007504:	f7ff ff14 	bl	8007330 <move_window>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d167      	bne.n	80075de <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	60fa      	str	r2, [r7, #12]
 8007514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007520:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	0a5b      	lsrs	r3, r3, #9
 800752a:	4413      	add	r3, r2
 800752c:	4619      	mov	r1, r3
 800752e:	6938      	ldr	r0, [r7, #16]
 8007530:	f7ff fefe 	bl	8007330 <move_window>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d153      	bne.n	80075e2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4413      	add	r3, r2
 8007544:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	461a      	mov	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4313      	orrs	r3, r2
 8007550:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <get_fat+0xbc>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	091b      	lsrs	r3, r3, #4
 8007560:	e002      	b.n	8007568 <get_fat+0xc2>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007568:	617b      	str	r3, [r7, #20]
			break;
 800756a:	e03f      	b.n	80075ec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	0a1b      	lsrs	r3, r3, #8
 8007574:	4413      	add	r3, r2
 8007576:	4619      	mov	r1, r3
 8007578:	6938      	ldr	r0, [r7, #16]
 800757a:	f7ff fed9 	bl	8007330 <move_window>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d130      	bne.n	80075e6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007592:	4413      	add	r3, r2
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fbe9 	bl	8006d6c <ld_word>
 800759a:	4603      	mov	r3, r0
 800759c:	617b      	str	r3, [r7, #20]
			break;
 800759e:	e025      	b.n	80075ec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	09db      	lsrs	r3, r3, #7
 80075a8:	4413      	add	r3, r2
 80075aa:	4619      	mov	r1, r3
 80075ac:	6938      	ldr	r0, [r7, #16]
 80075ae:	f7ff febf 	bl	8007330 <move_window>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d118      	bne.n	80075ea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075c6:	4413      	add	r3, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fbe7 	bl	8006d9c <ld_dword>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075d4:	617b      	str	r3, [r7, #20]
			break;
 80075d6:	e009      	b.n	80075ec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80075d8:	2301      	movs	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e006      	b.n	80075ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075de:	bf00      	nop
 80075e0:	e004      	b.n	80075ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075ea:	bf00      	nop
		}
	}

	return val;
 80075ec:	697b      	ldr	r3, [r7, #20]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075f6:	b590      	push	{r4, r7, lr}
 80075f8:	b089      	sub	sp, #36	; 0x24
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007602:	2302      	movs	r3, #2
 8007604:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b01      	cmp	r3, #1
 800760a:	f240 80d2 	bls.w	80077b2 <put_fat+0x1bc>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	429a      	cmp	r2, r3
 8007616:	f080 80cc 	bcs.w	80077b2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b03      	cmp	r3, #3
 8007620:	f000 8096 	beq.w	8007750 <put_fat+0x15a>
 8007624:	2b03      	cmp	r3, #3
 8007626:	f300 80cd 	bgt.w	80077c4 <put_fat+0x1ce>
 800762a:	2b01      	cmp	r3, #1
 800762c:	d002      	beq.n	8007634 <put_fat+0x3e>
 800762e:	2b02      	cmp	r3, #2
 8007630:	d06e      	beq.n	8007710 <put_fat+0x11a>
 8007632:	e0c7      	b.n	80077c4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	61bb      	str	r3, [r7, #24]
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4413      	add	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	0a5b      	lsrs	r3, r3, #9
 800764a:	4413      	add	r3, r2
 800764c:	4619      	mov	r1, r3
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f7ff fe6e 	bl	8007330 <move_window>
 8007654:	4603      	mov	r3, r0
 8007656:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007658:	7ffb      	ldrb	r3, [r7, #31]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 80ab 	bne.w	80077b6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	1c59      	adds	r1, r3, #1
 800766a:	61b9      	str	r1, [r7, #24]
 800766c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007670:	4413      	add	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00d      	beq.n	800769a <put_fat+0xa4>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	b25b      	sxtb	r3, r3
 8007684:	f003 030f 	and.w	r3, r3, #15
 8007688:	b25a      	sxtb	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	b25b      	sxtb	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b25b      	sxtb	r3, r3
 8007696:	b2db      	uxtb	r3, r3
 8007698:	e001      	b.n	800769e <put_fat+0xa8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	0a5b      	lsrs	r3, r3, #9
 80076b0:	4413      	add	r3, r2
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff fe3b 	bl	8007330 <move_window>
 80076ba:	4603      	mov	r3, r0
 80076bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076be:	7ffb      	ldrb	r3, [r7, #31]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d17a      	bne.n	80077ba <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d0:	4413      	add	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <put_fat+0xf0>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e00e      	b.n	8007704 <put_fat+0x10e>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	f023 030f 	bic.w	r3, r3, #15
 80076f0:	b25a      	sxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	b25b      	sxtb	r3, r3
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	b25b      	sxtb	r3, r3
 80076fe:	4313      	orrs	r3, r2
 8007700:	b25b      	sxtb	r3, r3
 8007702:	b2db      	uxtb	r3, r3
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	70da      	strb	r2, [r3, #3]
			break;
 800770e:	e059      	b.n	80077c4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	4413      	add	r3, r2
 800771a:	4619      	mov	r1, r3
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff fe07 	bl	8007330 <move_window>
 8007722:	4603      	mov	r3, r0
 8007724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007726:	7ffb      	ldrb	r3, [r7, #31]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d148      	bne.n	80077be <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800773a:	4413      	add	r3, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	b292      	uxth	r2, r2
 8007740:	4611      	mov	r1, r2
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fb4d 	bl	8006de2 <st_word>
			fs->wflag = 1;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	70da      	strb	r2, [r3, #3]
			break;
 800774e:	e039      	b.n	80077c4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	09db      	lsrs	r3, r3, #7
 8007758:	4413      	add	r3, r2
 800775a:	4619      	mov	r1, r3
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f7ff fde7 	bl	8007330 <move_window>
 8007762:	4603      	mov	r3, r0
 8007764:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007766:	7ffb      	ldrb	r3, [r7, #31]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d12a      	bne.n	80077c2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007780:	4413      	add	r3, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fb0a 	bl	8006d9c <ld_dword>
 8007788:	4603      	mov	r3, r0
 800778a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800778e:	4323      	orrs	r3, r4
 8007790:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80077a0:	4413      	add	r3, r2
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff fb37 	bl	8006e18 <st_dword>
			fs->wflag = 1;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	70da      	strb	r2, [r3, #3]
			break;
 80077b0:	e008      	b.n	80077c4 <put_fat+0x1ce>
		}
	}
 80077b2:	bf00      	nop
 80077b4:	e006      	b.n	80077c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077b6:	bf00      	nop
 80077b8:	e004      	b.n	80077c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077ba:	bf00      	nop
 80077bc:	e002      	b.n	80077c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077be:	bf00      	nop
 80077c0:	e000      	b.n	80077c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077c2:	bf00      	nop
	return res;
 80077c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3724      	adds	r7, #36	; 0x24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd90      	pop	{r4, r7, pc}

080077ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b088      	sub	sp, #32
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d904      	bls.n	80077f4 <remove_chain+0x26>
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d301      	bcc.n	80077f8 <remove_chain+0x2a>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e04b      	b.n	8007890 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00c      	beq.n	8007818 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80077fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	69b8      	ldr	r0, [r7, #24]
 8007806:	f7ff fef6 	bl	80075f6 <put_fat>
 800780a:	4603      	mov	r3, r0
 800780c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800780e:	7ffb      	ldrb	r3, [r7, #31]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <remove_chain+0x4a>
 8007814:	7ffb      	ldrb	r3, [r7, #31]
 8007816:	e03b      	b.n	8007890 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7ff fe43 	bl	80074a6 <get_fat>
 8007820:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d031      	beq.n	800788c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <remove_chain+0x64>
 800782e:	2302      	movs	r3, #2
 8007830:	e02e      	b.n	8007890 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d101      	bne.n	800783e <remove_chain+0x70>
 800783a:	2301      	movs	r3, #1
 800783c:	e028      	b.n	8007890 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800783e:	2200      	movs	r2, #0
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	69b8      	ldr	r0, [r7, #24]
 8007844:	f7ff fed7 	bl	80075f6 <put_fat>
 8007848:	4603      	mov	r3, r0
 800784a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800784c:	7ffb      	ldrb	r3, [r7, #31]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <remove_chain+0x88>
 8007852:	7ffb      	ldrb	r3, [r7, #31]
 8007854:	e01c      	b.n	8007890 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	695a      	ldr	r2, [r3, #20]
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	3b02      	subs	r3, #2
 8007860:	429a      	cmp	r2, r3
 8007862:	d20b      	bcs.n	800787c <remove_chain+0xae>
			fs->free_clst++;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	791b      	ldrb	r3, [r3, #4]
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	d3c6      	bcc.n	8007818 <remove_chain+0x4a>
 800788a:	e000      	b.n	800788e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800788c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10d      	bne.n	80078ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <create_chain+0x2c>
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d31b      	bcc.n	80078fc <create_chain+0x64>
 80078c4:	2301      	movs	r3, #1
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	e018      	b.n	80078fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff fdea 	bl	80074a6 <get_fat>
 80078d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d801      	bhi.n	80078de <create_chain+0x46>
 80078da:	2301      	movs	r3, #1
 80078dc:	e070      	b.n	80079c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e4:	d101      	bne.n	80078ea <create_chain+0x52>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	e06a      	b.n	80079c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d201      	bcs.n	80078f8 <create_chain+0x60>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	e063      	b.n	80079c0 <create_chain+0x128>
		scl = clst;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	3301      	adds	r3, #1
 8007904:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	429a      	cmp	r2, r3
 800790e:	d307      	bcc.n	8007920 <create_chain+0x88>
				ncl = 2;
 8007910:	2302      	movs	r3, #2
 8007912:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	429a      	cmp	r2, r3
 800791a:	d901      	bls.n	8007920 <create_chain+0x88>
 800791c:	2300      	movs	r3, #0
 800791e:	e04f      	b.n	80079c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007920:	69f9      	ldr	r1, [r7, #28]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fdbf 	bl	80074a6 <get_fat>
 8007928:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d003      	beq.n	800793e <create_chain+0xa6>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d101      	bne.n	8007942 <create_chain+0xaa>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	e03e      	b.n	80079c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	429a      	cmp	r2, r3
 8007948:	d1da      	bne.n	8007900 <create_chain+0x68>
 800794a:	2300      	movs	r3, #0
 800794c:	e038      	b.n	80079c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800794e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	6938      	ldr	r0, [r7, #16]
 8007958:	f7ff fe4d 	bl	80075f6 <put_fat>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <create_chain+0xe2>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d006      	beq.n	800797a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6938      	ldr	r0, [r7, #16]
 8007972:	f7ff fe40 	bl	80075f6 <put_fat>
 8007976:	4603      	mov	r3, r0
 8007978:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d116      	bne.n	80079ae <create_chain+0x116>
		fs->last_clst = ncl;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	3b02      	subs	r3, #2
 8007990:	429a      	cmp	r2, r3
 8007992:	d804      	bhi.n	800799e <create_chain+0x106>
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	1e5a      	subs	r2, r3, #1
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	711a      	strb	r2, [r3, #4]
 80079ac:	e007      	b.n	80079be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d102      	bne.n	80079ba <create_chain+0x122>
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	e000      	b.n	80079bc <create_chain+0x124>
 80079ba:	2301      	movs	r3, #1
 80079bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079be:	69fb      	ldr	r3, [r7, #28]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3720      	adds	r7, #32
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	3304      	adds	r3, #4
 80079de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	0a5b      	lsrs	r3, r3, #9
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	8952      	ldrh	r2, [r2, #10]
 80079e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1d1a      	adds	r2, r3, #4
 80079f2:	613a      	str	r2, [r7, #16]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <clmt_clust+0x3a>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e010      	b.n	8007a24 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d307      	bcc.n	8007a1a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	617b      	str	r3, [r7, #20]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	3304      	adds	r3, #4
 8007a16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a18:	e7e9      	b.n	80079ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007a1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	4413      	add	r3, r2
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a46:	d204      	bcs.n	8007a52 <dir_sdi+0x22>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a52:	2302      	movs	r3, #2
 8007a54:	e063      	b.n	8007b1e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <dir_sdi+0x46>
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d902      	bls.n	8007a76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10c      	bne.n	8007a96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	8912      	ldrh	r2, [r2, #8]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d301      	bcc.n	8007a8c <dir_sdi+0x5c>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e048      	b.n	8007b1e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	61da      	str	r2, [r3, #28]
 8007a94:	e029      	b.n	8007aea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	895b      	ldrh	r3, [r3, #10]
 8007a9a:	025b      	lsls	r3, r3, #9
 8007a9c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a9e:	e019      	b.n	8007ad4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6979      	ldr	r1, [r7, #20]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fcfe 	bl	80074a6 <get_fat>
 8007aaa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab2:	d101      	bne.n	8007ab8 <dir_sdi+0x88>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e032      	b.n	8007b1e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d904      	bls.n	8007ac8 <dir_sdi+0x98>
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d301      	bcc.n	8007acc <dir_sdi+0x9c>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e028      	b.n	8007b1e <dir_sdi+0xee>
			ofs -= csz;
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d2e1      	bcs.n	8007aa0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007adc:	6979      	ldr	r1, [r7, #20]
 8007ade:	6938      	ldr	r0, [r7, #16]
 8007ae0:	f7ff fcc2 	bl	8007468 <clust2sect>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <dir_sdi+0xcc>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e010      	b.n	8007b1e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	0a5b      	lsrs	r3, r3, #9
 8007b04:	441a      	add	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b16:	441a      	add	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	3320      	adds	r3, #32
 8007b3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <dir_next+0x28>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b4c:	d301      	bcc.n	8007b52 <dir_next+0x2c>
 8007b4e:	2304      	movs	r3, #4
 8007b50:	e0aa      	b.n	8007ca8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f040 8098 	bne.w	8007c8e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10b      	bne.n	8007b88 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	8912      	ldrh	r2, [r2, #8]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	f0c0 8088 	bcc.w	8007c8e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	61da      	str	r2, [r3, #28]
 8007b84:	2304      	movs	r3, #4
 8007b86:	e08f      	b.n	8007ca8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	0a5b      	lsrs	r3, r3, #9
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	8952      	ldrh	r2, [r2, #10]
 8007b90:	3a01      	subs	r2, #1
 8007b92:	4013      	ands	r3, r2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d17a      	bne.n	8007c8e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7ff fc80 	bl	80074a6 <get_fat>
 8007ba6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d801      	bhi.n	8007bb2 <dir_next+0x8c>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e07a      	b.n	8007ca8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d101      	bne.n	8007bbe <dir_next+0x98>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e074      	b.n	8007ca8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d358      	bcc.n	8007c7a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	61da      	str	r2, [r3, #28]
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	e067      	b.n	8007ca8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7ff fe59 	bl	8007898 <create_chain>
 8007be6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <dir_next+0xcc>
 8007bee:	2307      	movs	r3, #7
 8007bf0:	e05a      	b.n	8007ca8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <dir_next+0xd6>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e055      	b.n	8007ca8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d101      	bne.n	8007c08 <dir_next+0xe2>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e04f      	b.n	8007ca8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff fb4d 	bl	80072a8 <sync_window>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <dir_next+0xf2>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e047      	b.n	8007ca8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3334      	adds	r3, #52	; 0x34
 8007c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff f945 	bl	8006eb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c28:	2300      	movs	r3, #0
 8007c2a:	613b      	str	r3, [r7, #16]
 8007c2c:	6979      	ldr	r1, [r7, #20]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff fc1a 	bl	8007468 <clust2sect>
 8007c34:	4602      	mov	r2, r0
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	631a      	str	r2, [r3, #48]	; 0x30
 8007c3a:	e012      	b.n	8007c62 <dir_next+0x13c>
						fs->wflag = 1;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7ff fb30 	bl	80072a8 <sync_window>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <dir_next+0x12c>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e02a      	b.n	8007ca8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	3301      	adds	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	895b      	ldrh	r3, [r3, #10]
 8007c66:	461a      	mov	r2, r3
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d3e6      	bcc.n	8007c3c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad2      	subs	r2, r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c80:	6979      	ldr	r1, [r7, #20]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff fbf0 	bl	8007468 <clust2sect>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca0:	441a      	add	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff feb4 	bl	8007a30 <dir_sdi>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d12b      	bne.n	8007d2a <dir_alloc+0x7a>
		n = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fb27 	bl	8007330 <move_window>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d11d      	bne.n	8007d28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2be5      	cmp	r3, #229	; 0xe5
 8007cf4:	d004      	beq.n	8007d00 <dir_alloc+0x50>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	3301      	adds	r3, #1
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d102      	bne.n	8007d14 <dir_alloc+0x64>
 8007d0e:	e00c      	b.n	8007d2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d10:	2300      	movs	r3, #0
 8007d12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d14:	2101      	movs	r1, #1
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff ff05 	bl	8007b26 <dir_next>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0d7      	beq.n	8007cd6 <dir_alloc+0x26>
 8007d26:	e000      	b.n	8007d2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d101      	bne.n	8007d34 <dir_alloc+0x84>
 8007d30:	2307      	movs	r3, #7
 8007d32:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	331a      	adds	r3, #26
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff f80d 	bl	8006d6c <ld_word>
 8007d52:	4603      	mov	r3, r0
 8007d54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d109      	bne.n	8007d72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	3314      	adds	r3, #20
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff f802 	bl	8006d6c <ld_word>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	041b      	lsls	r3, r3, #16
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d72:	68fb      	ldr	r3, [r7, #12]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	331a      	adds	r3, #26
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	b292      	uxth	r2, r2
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff f825 	bl	8006de2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d109      	bne.n	8007db4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f103 0214 	add.w	r2, r3, #20
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	0c1b      	lsrs	r3, r3, #16
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	f7ff f817 	bl	8006de2 <st_word>
	}
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007dca:	2100      	movs	r1, #0
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff fe2f 	bl	8007a30 <dir_sdi>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <dir_find+0x24>
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	e03e      	b.n	8007e5e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	4619      	mov	r1, r3
 8007de6:	6938      	ldr	r0, [r7, #16]
 8007de8:	f7ff faa2 	bl	8007330 <move_window>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d12f      	bne.n	8007e56 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <dir_find+0x4e>
 8007e04:	2304      	movs	r3, #4
 8007e06:	75fb      	strb	r3, [r7, #23]
 8007e08:	e028      	b.n	8007e5c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	330b      	adds	r3, #11
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	330b      	adds	r3, #11
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <dir_find+0x86>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a18      	ldr	r0, [r3, #32]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3324      	adds	r3, #36	; 0x24
 8007e34:	220b      	movs	r2, #11
 8007e36:	4619      	mov	r1, r3
 8007e38:	f7ff f856 	bl	8006ee8 <mem_cmp>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007e42:	2100      	movs	r1, #0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fe6e 	bl	8007b26 <dir_next>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0c5      	beq.n	8007de0 <dir_find+0x24>
 8007e54:	e002      	b.n	8007e5c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e5a:	bf00      	nop

	return res;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007e74:	2101      	movs	r1, #1
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff ff1a 	bl	8007cb0 <dir_alloc>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11c      	bne.n	8007ec0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68b8      	ldr	r0, [r7, #8]
 8007e8e:	f7ff fa4f 	bl	8007330 <move_window>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d111      	bne.n	8007ec0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff f804 	bl	8006eb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a18      	ldr	r0, [r3, #32]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3324      	adds	r3, #36	; 0x24
 8007eb2:	220b      	movs	r2, #11
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f7fe ffdb 	bl	8006e70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3324      	adds	r3, #36	; 0x24
 8007ee0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007ee2:	220b      	movs	r2, #11
 8007ee4:	2120      	movs	r1, #32
 8007ee6:	68b8      	ldr	r0, [r7, #8]
 8007ee8:	f7fe ffe3 	bl	8006eb2 <mem_set>
	si = i = 0; ni = 8;
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	2308      	movs	r3, #8
 8007ef6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	61fa      	str	r2, [r7, #28]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f06:	7efb      	ldrb	r3, [r7, #27]
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d94e      	bls.n	8007faa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007f0c:	7efb      	ldrb	r3, [r7, #27]
 8007f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8007f10:	d006      	beq.n	8007f20 <create_name+0x54>
 8007f12:	7efb      	ldrb	r3, [r7, #27]
 8007f14:	2b5c      	cmp	r3, #92	; 0x5c
 8007f16:	d110      	bne.n	8007f3a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007f18:	e002      	b.n	8007f20 <create_name+0x54>
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b2f      	cmp	r3, #47	; 0x2f
 8007f2a:	d0f6      	beq.n	8007f1a <create_name+0x4e>
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b5c      	cmp	r3, #92	; 0x5c
 8007f36:	d0f0      	beq.n	8007f1a <create_name+0x4e>
			break;
 8007f38:	e038      	b.n	8007fac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007f3a:	7efb      	ldrb	r3, [r7, #27]
 8007f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f3e:	d003      	beq.n	8007f48 <create_name+0x7c>
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d30c      	bcc.n	8007f62 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b0b      	cmp	r3, #11
 8007f4c:	d002      	beq.n	8007f54 <create_name+0x88>
 8007f4e:	7efb      	ldrb	r3, [r7, #27]
 8007f50:	2b2e      	cmp	r3, #46	; 0x2e
 8007f52:	d001      	beq.n	8007f58 <create_name+0x8c>
 8007f54:	2306      	movs	r3, #6
 8007f56:	e044      	b.n	8007fe2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f58:	2308      	movs	r3, #8
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	230b      	movs	r3, #11
 8007f5e:	617b      	str	r3, [r7, #20]
			continue;
 8007f60:	e022      	b.n	8007fa8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da04      	bge.n	8007f74 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f6a:	7efb      	ldrb	r3, [r7, #27]
 8007f6c:	3b80      	subs	r3, #128	; 0x80
 8007f6e:	4a1f      	ldr	r2, [pc, #124]	; (8007fec <create_name+0x120>)
 8007f70:	5cd3      	ldrb	r3, [r2, r3]
 8007f72:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f74:	7efb      	ldrb	r3, [r7, #27]
 8007f76:	4619      	mov	r1, r3
 8007f78:	481d      	ldr	r0, [pc, #116]	; (8007ff0 <create_name+0x124>)
 8007f7a:	f7fe ffdc 	bl	8006f36 <chk_chr>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <create_name+0xbc>
 8007f84:	2306      	movs	r3, #6
 8007f86:	e02c      	b.n	8007fe2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f88:	7efb      	ldrb	r3, [r7, #27]
 8007f8a:	2b60      	cmp	r3, #96	; 0x60
 8007f8c:	d905      	bls.n	8007f9a <create_name+0xce>
 8007f8e:	7efb      	ldrb	r3, [r7, #27]
 8007f90:	2b7a      	cmp	r3, #122	; 0x7a
 8007f92:	d802      	bhi.n	8007f9a <create_name+0xce>
 8007f94:	7efb      	ldrb	r3, [r7, #27]
 8007f96:	3b20      	subs	r3, #32
 8007f98:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	613a      	str	r2, [r7, #16]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	7efa      	ldrb	r2, [r7, #27]
 8007fa6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007fa8:	e7a6      	b.n	8007ef8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007faa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	441a      	add	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <create_name+0xf4>
 8007fbc:	2306      	movs	r3, #6
 8007fbe:	e010      	b.n	8007fe2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2be5      	cmp	r3, #229	; 0xe5
 8007fc6:	d102      	bne.n	8007fce <create_name+0x102>
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2205      	movs	r2, #5
 8007fcc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007fce:	7efb      	ldrb	r3, [r7, #27]
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d801      	bhi.n	8007fd8 <create_name+0x10c>
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	e000      	b.n	8007fda <create_name+0x10e>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	330b      	adds	r3, #11
 8007fde:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007fe0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	0801229c 	.word	0x0801229c
 8007ff0:	08011a58 	.word	0x08011a58

08007ff4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008008:	e002      	b.n	8008010 <follow_path+0x1c>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b2f      	cmp	r3, #47	; 0x2f
 8008016:	d0f8      	beq.n	800800a <follow_path+0x16>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b5c      	cmp	r3, #92	; 0x5c
 800801e:	d0f4      	beq.n	800800a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2200      	movs	r2, #0
 8008024:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b1f      	cmp	r3, #31
 800802c:	d80a      	bhi.n	8008044 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2280      	movs	r2, #128	; 0x80
 8008032:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008036:	2100      	movs	r1, #0
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff fcf9 	bl	8007a30 <dir_sdi>
 800803e:	4603      	mov	r3, r0
 8008040:	75fb      	strb	r3, [r7, #23]
 8008042:	e043      	b.n	80080cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008044:	463b      	mov	r3, r7
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff3f 	bl	8007ecc <create_name>
 800804e:	4603      	mov	r3, r0
 8008050:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d134      	bne.n	80080c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff feaf 	bl	8007dbc <dir_find>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008068:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b04      	cmp	r3, #4
 8008074:	d127      	bne.n	80080c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008076:	7afb      	ldrb	r3, [r7, #11]
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	d122      	bne.n	80080c6 <follow_path+0xd2>
 8008080:	2305      	movs	r3, #5
 8008082:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008084:	e01f      	b.n	80080c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008086:	7afb      	ldrb	r3, [r7, #11]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d11c      	bne.n	80080ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	799b      	ldrb	r3, [r3, #6]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800809c:	2305      	movs	r3, #5
 800809e:	75fb      	strb	r3, [r7, #23]
 80080a0:	e014      	b.n	80080cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b0:	4413      	add	r3, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff fe42 	bl	8007d3e <ld_clust>
 80080ba:	4602      	mov	r2, r0
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080c0:	e7c0      	b.n	8008044 <follow_path+0x50>
			if (res != FR_OK) break;
 80080c2:	bf00      	nop
 80080c4:	e002      	b.n	80080cc <follow_path+0xd8>
				break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080ca:	bf00      	nop
			}
		}
	}

	return res;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b087      	sub	sp, #28
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80080de:	f04f 33ff 	mov.w	r3, #4294967295
 80080e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d031      	beq.n	8008150 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e002      	b.n	80080fa <get_ldnumber+0x24>
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	3301      	adds	r3, #1
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b20      	cmp	r3, #32
 8008100:	d903      	bls.n	800810a <get_ldnumber+0x34>
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b3a      	cmp	r3, #58	; 0x3a
 8008108:	d1f4      	bne.n	80080f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b3a      	cmp	r3, #58	; 0x3a
 8008110:	d11c      	bne.n	800814c <get_ldnumber+0x76>
			tp = *path;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	60fa      	str	r2, [r7, #12]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	3b30      	subs	r3, #48	; 0x30
 8008122:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b09      	cmp	r3, #9
 8008128:	d80e      	bhi.n	8008148 <get_ldnumber+0x72>
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	429a      	cmp	r2, r3
 8008130:	d10a      	bne.n	8008148 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d107      	bne.n	8008148 <get_ldnumber+0x72>
					vol = (int)i;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	3301      	adds	r3, #1
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	e002      	b.n	8008152 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800814c:	2300      	movs	r3, #0
 800814e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008150:	693b      	ldr	r3, [r7, #16]
}
 8008152:	4618      	mov	r0, r3
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	70da      	strb	r2, [r3, #3]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f04f 32ff 	mov.w	r2, #4294967295
 8008176:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff f8d8 	bl	8007330 <move_window>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <check_fs+0x2a>
 8008186:	2304      	movs	r3, #4
 8008188:	e038      	b.n	80081fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3334      	adds	r3, #52	; 0x34
 800818e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fdea 	bl	8006d6c <ld_word>
 8008198:	4603      	mov	r3, r0
 800819a:	461a      	mov	r2, r3
 800819c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d001      	beq.n	80081a8 <check_fs+0x48>
 80081a4:	2303      	movs	r3, #3
 80081a6:	e029      	b.n	80081fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ae:	2be9      	cmp	r3, #233	; 0xe9
 80081b0:	d009      	beq.n	80081c6 <check_fs+0x66>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081b8:	2beb      	cmp	r3, #235	; 0xeb
 80081ba:	d11e      	bne.n	80081fa <check_fs+0x9a>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80081c2:	2b90      	cmp	r3, #144	; 0x90
 80081c4:	d119      	bne.n	80081fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3334      	adds	r3, #52	; 0x34
 80081ca:	3336      	adds	r3, #54	; 0x36
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fde5 	bl	8006d9c <ld_dword>
 80081d2:	4603      	mov	r3, r0
 80081d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081d8:	4a0a      	ldr	r2, [pc, #40]	; (8008204 <check_fs+0xa4>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d101      	bne.n	80081e2 <check_fs+0x82>
 80081de:	2300      	movs	r3, #0
 80081e0:	e00c      	b.n	80081fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3334      	adds	r3, #52	; 0x34
 80081e6:	3352      	adds	r3, #82	; 0x52
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fdd7 	bl	8006d9c <ld_dword>
 80081ee:	4603      	mov	r3, r0
 80081f0:	4a05      	ldr	r2, [pc, #20]	; (8008208 <check_fs+0xa8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d101      	bne.n	80081fa <check_fs+0x9a>
 80081f6:	2300      	movs	r3, #0
 80081f8:	e000      	b.n	80081fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80081fa:	2302      	movs	r3, #2
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	00544146 	.word	0x00544146
 8008208:	33544146 	.word	0x33544146

0800820c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b096      	sub	sp, #88	; 0x58
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff ff58 	bl	80080d6 <get_ldnumber>
 8008226:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	da01      	bge.n	8008232 <find_volume+0x26>
 800822e:	230b      	movs	r3, #11
 8008230:	e236      	b.n	80086a0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008232:	4aac      	ldr	r2, [pc, #688]	; (80084e4 <find_volume+0x2d8>)
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <find_volume+0x3a>
 8008242:	230c      	movs	r3, #12
 8008244:	e22c      	b.n	80086a0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8008246:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008248:	f7fe fe90 	bl	8006f6c <lock_fs>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <find_volume+0x4a>
 8008252:	230f      	movs	r3, #15
 8008254:	e224      	b.n	80086a0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800825a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01a      	beq.n	80082a2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe fcdd 	bl	8006c30 <disk_status>
 8008276:	4603      	mov	r3, r0
 8008278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800827c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10c      	bne.n	80082a2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <find_volume+0x92>
 800828e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800829a:	230a      	movs	r3, #10
 800829c:	e200      	b.n	80086a0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800829e:	2300      	movs	r3, #0
 80082a0:	e1fe      	b.n	80086a0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	2200      	movs	r2, #0
 80082a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fcd5 	bl	8006c64 <disk_initialize>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80082c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80082cc:	2303      	movs	r3, #3
 80082ce:	e1e7      	b.n	80086a0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d007      	beq.n	80082e6 <find_volume+0xda>
 80082d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80082e2:	230a      	movs	r3, #10
 80082e4:	e1dc      	b.n	80086a0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80082ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082ee:	f7ff ff37 	bl	8008160 <check_fs>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80082f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d14b      	bne.n	8008398 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008300:	2300      	movs	r3, #0
 8008302:	643b      	str	r3, [r7, #64]	; 0x40
 8008304:	e01f      	b.n	8008346 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800830c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008314:	4413      	add	r3, r2
 8008316:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	3304      	adds	r3, #4
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d006      	beq.n	8008330 <find_volume+0x124>
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	3308      	adds	r3, #8
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fd38 	bl	8006d9c <ld_dword>
 800832c:	4602      	mov	r2, r0
 800832e:	e000      	b.n	8008332 <find_volume+0x126>
 8008330:	2200      	movs	r2, #0
 8008332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800833a:	440b      	add	r3, r1
 800833c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008342:	3301      	adds	r3, #1
 8008344:	643b      	str	r3, [r7, #64]	; 0x40
 8008346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008348:	2b03      	cmp	r3, #3
 800834a:	d9dc      	bls.n	8008306 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800834c:	2300      	movs	r3, #0
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <find_volume+0x150>
 8008356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008358:	3b01      	subs	r3, #1
 800835a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800835c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008364:	4413      	add	r3, r2
 8008366:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800836a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800836c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <find_volume+0x172>
 8008372:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008376:	f7ff fef3 	bl	8008160 <check_fs>
 800837a:	4603      	mov	r3, r0
 800837c:	e000      	b.n	8008380 <find_volume+0x174>
 800837e:	2303      	movs	r3, #3
 8008380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008388:	2b01      	cmp	r3, #1
 800838a:	d905      	bls.n	8008398 <find_volume+0x18c>
 800838c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800838e:	3301      	adds	r3, #1
 8008390:	643b      	str	r3, [r7, #64]	; 0x40
 8008392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008394:	2b03      	cmp	r3, #3
 8008396:	d9e1      	bls.n	800835c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800839c:	2b04      	cmp	r3, #4
 800839e:	d101      	bne.n	80083a4 <find_volume+0x198>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e17d      	b.n	80086a0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80083a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d901      	bls.n	80083b0 <find_volume+0x1a4>
 80083ac:	230d      	movs	r3, #13
 80083ae:	e177      	b.n	80086a0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	3334      	adds	r3, #52	; 0x34
 80083b4:	330b      	adds	r3, #11
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fcd8 	bl	8006d6c <ld_word>
 80083bc:	4603      	mov	r3, r0
 80083be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c2:	d001      	beq.n	80083c8 <find_volume+0x1bc>
 80083c4:	230d      	movs	r3, #13
 80083c6:	e16b      	b.n	80086a0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	3334      	adds	r3, #52	; 0x34
 80083cc:	3316      	adds	r3, #22
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fccc 	bl	8006d6c <ld_word>
 80083d4:	4603      	mov	r3, r0
 80083d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80083d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <find_volume+0x1e0>
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	3334      	adds	r3, #52	; 0x34
 80083e2:	3324      	adds	r3, #36	; 0x24
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fcd9 	bl	8006d9c <ld_dword>
 80083ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083f0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	789b      	ldrb	r3, [r3, #2]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d005      	beq.n	8008410 <find_volume+0x204>
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	789b      	ldrb	r3, [r3, #2]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d001      	beq.n	8008410 <find_volume+0x204>
 800840c:	230d      	movs	r3, #13
 800840e:	e147      	b.n	80086a0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	789b      	ldrb	r3, [r3, #2]
 8008414:	461a      	mov	r2, r3
 8008416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008418:	fb02 f303 	mul.w	r3, r2, r3
 800841c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008424:	b29a      	uxth	r2, r3
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	895b      	ldrh	r3, [r3, #10]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d008      	beq.n	8008444 <find_volume+0x238>
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	895b      	ldrh	r3, [r3, #10]
 8008436:	461a      	mov	r2, r3
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	895b      	ldrh	r3, [r3, #10]
 800843c:	3b01      	subs	r3, #1
 800843e:	4013      	ands	r3, r2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <find_volume+0x23c>
 8008444:	230d      	movs	r3, #13
 8008446:	e12b      	b.n	80086a0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	3334      	adds	r3, #52	; 0x34
 800844c:	3311      	adds	r3, #17
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fc8c 	bl	8006d6c <ld_word>
 8008454:	4603      	mov	r3, r0
 8008456:	461a      	mov	r2, r3
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	891b      	ldrh	r3, [r3, #8]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <find_volume+0x262>
 800846a:	230d      	movs	r3, #13
 800846c:	e118      	b.n	80086a0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	3334      	adds	r3, #52	; 0x34
 8008472:	3313      	adds	r3, #19
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fc79 	bl	8006d6c <ld_word>
 800847a:	4603      	mov	r3, r0
 800847c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800847e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008480:	2b00      	cmp	r3, #0
 8008482:	d106      	bne.n	8008492 <find_volume+0x286>
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	3334      	adds	r3, #52	; 0x34
 8008488:	3320      	adds	r3, #32
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fc86 	bl	8006d9c <ld_dword>
 8008490:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	3334      	adds	r3, #52	; 0x34
 8008496:	330e      	adds	r3, #14
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe fc67 	bl	8006d6c <ld_word>
 800849e:	4603      	mov	r3, r0
 80084a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80084a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <find_volume+0x2a0>
 80084a8:	230d      	movs	r3, #13
 80084aa:	e0f9      	b.n	80086a0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80084ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b0:	4413      	add	r3, r2
 80084b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b4:	8912      	ldrh	r2, [r2, #8]
 80084b6:	0912      	lsrs	r2, r2, #4
 80084b8:	b292      	uxth	r2, r2
 80084ba:	4413      	add	r3, r2
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80084be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d201      	bcs.n	80084ca <find_volume+0x2be>
 80084c6:	230d      	movs	r3, #13
 80084c8:	e0ea      	b.n	80086a0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80084ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d2:	8952      	ldrh	r2, [r2, #10]
 80084d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <find_volume+0x2dc>
 80084e0:	230d      	movs	r3, #13
 80084e2:	e0dd      	b.n	80086a0 <find_volume+0x494>
 80084e4:	20000638 	.word	0x20000638
		fmt = FS_FAT32;
 80084e8:	2303      	movs	r3, #3
 80084ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d802      	bhi.n	80084fe <find_volume+0x2f2>
 80084f8:	2302      	movs	r3, #2
 80084fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008504:	4293      	cmp	r3, r2
 8008506:	d802      	bhi.n	800850e <find_volume+0x302>
 8008508:	2301      	movs	r3, #1
 800850a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	1c9a      	adds	r2, r3, #2
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800851a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800851c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008520:	441a      	add	r2, r3
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	441a      	add	r2, r3
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008530:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008534:	2b03      	cmp	r3, #3
 8008536:	d11e      	bne.n	8008576 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	3334      	adds	r3, #52	; 0x34
 800853c:	332a      	adds	r3, #42	; 0x2a
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe fc14 	bl	8006d6c <ld_word>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <find_volume+0x342>
 800854a:	230d      	movs	r3, #13
 800854c:	e0a8      	b.n	80086a0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	891b      	ldrh	r3, [r3, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <find_volume+0x34e>
 8008556:	230d      	movs	r3, #13
 8008558:	e0a2      	b.n	80086a0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	3334      	adds	r3, #52	; 0x34
 800855e:	332c      	adds	r3, #44	; 0x2c
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fc1b 	bl	8006d9c <ld_dword>
 8008566:	4602      	mov	r2, r0
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	647b      	str	r3, [r7, #68]	; 0x44
 8008574:	e01f      	b.n	80085b6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	891b      	ldrh	r3, [r3, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <find_volume+0x376>
 800857e:	230d      	movs	r3, #13
 8008580:	e08e      	b.n	80086a0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008588:	441a      	add	r2, r3
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800858e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008592:	2b02      	cmp	r3, #2
 8008594:	d103      	bne.n	800859e <find_volume+0x392>
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	e00a      	b.n	80085b4 <find_volume+0x3a8>
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	699a      	ldr	r2, [r3, #24]
 80085a2:	4613      	mov	r3, r2
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	4413      	add	r3, r2
 80085a8:	085a      	lsrs	r2, r3, #1
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80085b4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	69da      	ldr	r2, [r3, #28]
 80085ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80085c0:	0a5b      	lsrs	r3, r3, #9
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d201      	bcs.n	80085ca <find_volume+0x3be>
 80085c6:	230d      	movs	r3, #13
 80085c8:	e06a      	b.n	80086a0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	f04f 32ff 	mov.w	r2, #4294967295
 80085d0:	615a      	str	r2, [r3, #20]
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	2280      	movs	r2, #128	; 0x80
 80085de:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80085e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d149      	bne.n	800867c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	3334      	adds	r3, #52	; 0x34
 80085ec:	3330      	adds	r3, #48	; 0x30
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fbbc 	bl	8006d6c <ld_word>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d140      	bne.n	800867c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80085fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085fc:	3301      	adds	r3, #1
 80085fe:	4619      	mov	r1, r3
 8008600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008602:	f7fe fe95 	bl	8007330 <move_window>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d137      	bne.n	800867c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	2200      	movs	r2, #0
 8008610:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	3334      	adds	r3, #52	; 0x34
 8008616:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe fba6 	bl	8006d6c <ld_word>
 8008620:	4603      	mov	r3, r0
 8008622:	461a      	mov	r2, r3
 8008624:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008628:	429a      	cmp	r2, r3
 800862a:	d127      	bne.n	800867c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	3334      	adds	r3, #52	; 0x34
 8008630:	4618      	mov	r0, r3
 8008632:	f7fe fbb3 	bl	8006d9c <ld_dword>
 8008636:	4603      	mov	r3, r0
 8008638:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <find_volume+0x49c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d11e      	bne.n	800867c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	3334      	adds	r3, #52	; 0x34
 8008642:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fba8 	bl	8006d9c <ld_dword>
 800864c:	4603      	mov	r3, r0
 800864e:	4a17      	ldr	r2, [pc, #92]	; (80086ac <find_volume+0x4a0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d113      	bne.n	800867c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	3334      	adds	r3, #52	; 0x34
 8008658:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fb9d 	bl	8006d9c <ld_dword>
 8008662:	4602      	mov	r2, r0
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	3334      	adds	r3, #52	; 0x34
 800866c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fb93 	bl	8006d9c <ld_dword>
 8008676:	4602      	mov	r2, r0
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008682:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008684:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <find_volume+0x4a4>)
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	3301      	adds	r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	4b08      	ldr	r3, [pc, #32]	; (80086b0 <find_volume+0x4a4>)
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <find_volume+0x4a4>)
 8008692:	881a      	ldrh	r2, [r3, #0]
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800869a:	f7fe fde1 	bl	8007260 <clear_lock>
#endif
	return FR_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3758      	adds	r7, #88	; 0x58
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	41615252 	.word	0x41615252
 80086ac:	61417272 	.word	0x61417272
 80086b0:	2000063c 	.word	0x2000063c

080086b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80086be:	2309      	movs	r3, #9
 80086c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d02e      	beq.n	8008726 <validate+0x72>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02a      	beq.n	8008726 <validate+0x72>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d025      	beq.n	8008726 <validate+0x72>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	889a      	ldrh	r2, [r3, #4]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	88db      	ldrh	r3, [r3, #6]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d11e      	bne.n	8008726 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fc3d 	bl	8006f6c <lock_fs>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d014      	beq.n	8008722 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fa96 	bl	8006c30 <disk_status>
 8008704:	4603      	mov	r3, r0
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <validate+0x60>
				res = FR_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]
 8008712:	e008      	b.n	8008726 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fc3c 	bl	8006f98 <unlock_fs>
 8008720:	e001      	b.n	8008726 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008722:	230f      	movs	r3, #15
 8008724:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <validate+0x7e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	e000      	b.n	8008734 <validate+0x80>
 8008732:	2300      	movs	r3, #0
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	6013      	str	r3, [r2, #0]
	return res;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	4613      	mov	r3, r2
 8008750:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008756:	f107 0310 	add.w	r3, r7, #16
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff fcbb 	bl	80080d6 <get_ldnumber>
 8008760:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	da01      	bge.n	800876c <f_mount+0x28>
 8008768:	230b      	movs	r3, #11
 800876a:	e048      	b.n	80087fe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800876c:	4a26      	ldr	r2, [pc, #152]	; (8008808 <f_mount+0xc4>)
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008774:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00f      	beq.n	800879c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800877c:	69b8      	ldr	r0, [r7, #24]
 800877e:	f7fe fd6f 	bl	8007260 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fcd8 	bl	800913c <ff_del_syncobj>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <f_mount+0x52>
 8008792:	2302      	movs	r3, #2
 8008794:	e033      	b.n	80087fe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00f      	beq.n	80087c2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	330c      	adds	r3, #12
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f000 fca7 	bl	8009106 <ff_cre_syncobj>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <f_mount+0x7e>
 80087be:	2302      	movs	r3, #2
 80087c0:	e01d      	b.n	80087fe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4910      	ldr	r1, [pc, #64]	; (8008808 <f_mount+0xc4>)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <f_mount+0x94>
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d001      	beq.n	80087dc <f_mount+0x98>
 80087d8:	2300      	movs	r3, #0
 80087da:	e010      	b.n	80087fe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80087dc:	f107 010c 	add.w	r1, r7, #12
 80087e0:	f107 0308 	add.w	r3, r7, #8
 80087e4:	2200      	movs	r2, #0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fd10 	bl	800820c <find_volume>
 80087ec:	4603      	mov	r3, r0
 80087ee:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	7dfa      	ldrb	r2, [r7, #23]
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fbce 	bl	8006f98 <unlock_fs>
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000638 	.word	0x20000638

0800880c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b098      	sub	sp, #96	; 0x60
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <f_open+0x18>
 8008820:	2309      	movs	r3, #9
 8008822:	e1b4      	b.n	8008b8e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800882c:	79fa      	ldrb	r2, [r7, #7]
 800882e:	f107 0110 	add.w	r1, r7, #16
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff fce8 	bl	800820c <find_volume>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008846:	2b00      	cmp	r3, #0
 8008848:	f040 8191 	bne.w	8008b6e <f_open+0x362>
		dj.obj.fs = fs;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff fbcb 	bl	8007ff4 <follow_path>
 800885e:	4603      	mov	r3, r0
 8008860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008868:	2b00      	cmp	r3, #0
 800886a:	d11a      	bne.n	80088a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800886c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008870:	b25b      	sxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	da03      	bge.n	800887e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008876:	2306      	movs	r3, #6
 8008878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800887c:	e011      	b.n	80088a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	bf14      	ite	ne
 8008888:	2301      	movne	r3, #1
 800888a:	2300      	moveq	r3, #0
 800888c:	b2db      	uxtb	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	4611      	mov	r1, r2
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fb9a 	bl	8006fd0 <chk_lock>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	f003 031c 	and.w	r3, r3, #28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d07f      	beq.n	80089ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80088ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d017      	beq.n	80088e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80088b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d10e      	bne.n	80088da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80088bc:	f7fe fbe4 	bl	8007088 <enq_lock>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d006      	beq.n	80088d4 <f_open+0xc8>
 80088c6:	f107 0314 	add.w	r3, r7, #20
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff facb 	bl	8007e66 <dir_register>
 80088d0:	4603      	mov	r3, r0
 80088d2:	e000      	b.n	80088d6 <f_open+0xca>
 80088d4:	2312      	movs	r3, #18
 80088d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	f043 0308 	orr.w	r3, r3, #8
 80088e0:	71fb      	strb	r3, [r7, #7]
 80088e2:	e010      	b.n	8008906 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80088e4:	7ebb      	ldrb	r3, [r7, #26]
 80088e6:	f003 0311 	and.w	r3, r3, #17
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <f_open+0xea>
					res = FR_DENIED;
 80088ee:	2307      	movs	r3, #7
 80088f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088f4:	e007      	b.n	8008906 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <f_open+0xfa>
 8008900:	2308      	movs	r3, #8
 8008902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800890a:	2b00      	cmp	r3, #0
 800890c:	d168      	bne.n	80089e0 <f_open+0x1d4>
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d063      	beq.n	80089e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008918:	f7fd fc4c 	bl	80061b4 <get_fattime>
 800891c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008920:	330e      	adds	r3, #14
 8008922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fa77 	bl	8006e18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	3316      	adds	r3, #22
 800892e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fa71 	bl	8006e18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008938:	330b      	adds	r3, #11
 800893a:	2220      	movs	r2, #32
 800893c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008942:	4611      	mov	r1, r2
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff f9fa 	bl	8007d3e <ld_clust>
 800894a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008950:	2200      	movs	r2, #0
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fa12 	bl	8007d7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	331c      	adds	r3, #28
 800895c:	2100      	movs	r1, #0
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fa5a 	bl	8006e18 <st_dword>
					fs->wflag = 1;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2201      	movs	r2, #1
 8008968:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800896a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d037      	beq.n	80089e0 <f_open+0x1d4>
						dw = fs->winsect;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008974:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008976:	f107 0314 	add.w	r3, r7, #20
 800897a:	2200      	movs	r2, #0
 800897c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe ff25 	bl	80077ce <remove_chain>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800898a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800898e:	2b00      	cmp	r3, #0
 8008990:	d126      	bne.n	80089e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fcca 	bl	8007330 <move_window>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089a6:	3a01      	subs	r2, #1
 80089a8:	611a      	str	r2, [r3, #16]
 80089aa:	e019      	b.n	80089e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80089ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d115      	bne.n	80089e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80089b4:	7ebb      	ldrb	r3, [r7, #26]
 80089b6:	f003 0310 	and.w	r3, r3, #16
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80089be:	2304      	movs	r3, #4
 80089c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089c4:	e00c      	b.n	80089e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d007      	beq.n	80089e0 <f_open+0x1d4>
 80089d0:	7ebb      	ldrb	r3, [r7, #26]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <f_open+0x1d4>
						res = FR_DENIED;
 80089da:	2307      	movs	r3, #7
 80089dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80089e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d128      	bne.n	8008a3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	f023 0301 	bic.w	r3, r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bf14      	ite	ne
 8008a12:	2301      	movne	r3, #1
 8008a14:	2300      	moveq	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f107 0314 	add.w	r3, r7, #20
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe fb53 	bl	80070cc <inc_lock>
 8008a26:	4602      	mov	r2, r0
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <f_open+0x22e>
 8008a34:	2302      	movs	r3, #2
 8008a36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f040 8095 	bne.w	8008b6e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff f977 	bl	8007d3e <ld_clust>
 8008a50:	4602      	mov	r2, r0
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	331c      	adds	r3, #28
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe f99e 	bl	8006d9c <ld_dword>
 8008a60:	4602      	mov	r2, r0
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	88da      	ldrh	r2, [r3, #6]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	79fa      	ldrb	r2, [r7, #7]
 8008a7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3330      	adds	r3, #48	; 0x30
 8008a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fa08 	bl	8006eb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d060      	beq.n	8008b6e <f_open+0x362>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d05c      	beq.n	8008b6e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	895b      	ldrh	r3, [r3, #10]
 8008ac0:	025b      	lsls	r3, r3, #9
 8008ac2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	657b      	str	r3, [r7, #84]	; 0x54
 8008ad0:	e016      	b.n	8008b00 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fce5 	bl	80074a6 <get_fat>
 8008adc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d802      	bhi.n	8008aea <f_open+0x2de>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d102      	bne.n	8008af8 <f_open+0x2ec>
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	657b      	str	r3, [r7, #84]	; 0x54
 8008b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d103      	bne.n	8008b10 <f_open+0x304>
 8008b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d8e0      	bhi.n	8008ad2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d127      	bne.n	8008b6e <f_open+0x362>
 8008b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d022      	beq.n	8008b6e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fc9b 	bl	8007468 <clust2sect>
 8008b32:	6478      	str	r0, [r7, #68]	; 0x44
 8008b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d103      	bne.n	8008b42 <f_open+0x336>
						res = FR_INT_ERR;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b40:	e015      	b.n	8008b6e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b44:	0a5a      	lsrs	r2, r3, #9
 8008b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b48:	441a      	add	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	7858      	ldrb	r0, [r3, #1]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a1a      	ldr	r2, [r3, #32]
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f7fe f8a7 	bl	8006cb0 <disk_read>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <f_open+0x362>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <f_open+0x370>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe fa07 	bl	8006f98 <unlock_fs>
 8008b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3760      	adds	r7, #96	; 0x60
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b08c      	sub	sp, #48	; 0x30
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f107 0210 	add.w	r2, r7, #16
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff fd7c 	bl	80086b4 <validate>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d107      	bne.n	8008bda <f_write+0x44>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	7d5b      	ldrb	r3, [r3, #21]
 8008bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <f_write+0x58>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe f9d8 	bl	8006f98 <unlock_fs>
 8008be8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bec:	e173      	b.n	8008ed6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	7d1b      	ldrb	r3, [r3, #20]
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <f_write+0x72>
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2107      	movs	r1, #7
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe f9ca 	bl	8006f98 <unlock_fs>
 8008c04:	2307      	movs	r3, #7
 8008c06:	e166      	b.n	8008ed6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	699a      	ldr	r2, [r3, #24]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	441a      	add	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	f080 814b 	bcs.w	8008eb0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c22:	e145      	b.n	8008eb0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f040 8101 	bne.w	8008e34 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	0a5b      	lsrs	r3, r3, #9
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	8952      	ldrh	r2, [r2, #10]
 8008c3c:	3a01      	subs	r2, #1
 8008c3e:	4013      	ands	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d14d      	bne.n	8008ce4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10c      	bne.n	8008c6a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d11a      	bne.n	8008c92 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fe19 	bl	8007898 <create_chain>
 8008c66:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c68:	e013      	b.n	8008c92 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d007      	beq.n	8008c82 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	4619      	mov	r1, r3
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7fe fea5 	bl	80079c8 <clmt_clust>
 8008c7e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c80:	e007      	b.n	8008c92 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	f7fe fe04 	bl	8007898 <create_chain>
 8008c90:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 8110 	beq.w	8008eba <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d109      	bne.n	8008cb4 <f_write+0x11e>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	755a      	strb	r2, [r3, #21]
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe f974 	bl	8006f98 <unlock_fs>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e110      	b.n	8008ed6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d109      	bne.n	8008cd0 <f_write+0x13a>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	755a      	strb	r2, [r3, #21]
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe f966 	bl	8006f98 <unlock_fs>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e102      	b.n	8008ed6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <f_write+0x14e>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	7d1b      	ldrb	r3, [r3, #20]
 8008ce8:	b25b      	sxtb	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	da1d      	bge.n	8008d2a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	7858      	ldrb	r0, [r3, #1]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a1a      	ldr	r2, [r3, #32]
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f7fd fff7 	bl	8006cf0 <disk_write>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d009      	beq.n	8008d1c <f_write+0x186>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	755a      	strb	r2, [r3, #21]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2101      	movs	r1, #1
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe f940 	bl	8006f98 <unlock_fs>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0dc      	b.n	8008ed6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	7d1b      	ldrb	r3, [r3, #20]
 8008d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	4619      	mov	r1, r3
 8008d32:	4610      	mov	r0, r2
 8008d34:	f7fe fb98 	bl	8007468 <clust2sect>
 8008d38:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <f_write+0x1be>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2202      	movs	r2, #2
 8008d44:	755a      	strb	r2, [r3, #21]
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2102      	movs	r1, #2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe f924 	bl	8006f98 <unlock_fs>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e0c0      	b.n	8008ed6 <f_write+0x340>
			sect += csect;
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	4413      	add	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	0a5b      	lsrs	r3, r3, #9
 8008d60:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d041      	beq.n	8008dec <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	8952      	ldrh	r2, [r2, #10]
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d905      	bls.n	8008d82 <f_write+0x1ec>
					cc = fs->csize - csect;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	895b      	ldrh	r3, [r3, #10]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	7858      	ldrb	r0, [r3, #1]
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	69f9      	ldr	r1, [r7, #28]
 8008d8c:	f7fd ffb0 	bl	8006cf0 <disk_write>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <f_write+0x214>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	755a      	strb	r2, [r3, #21]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2101      	movs	r1, #1
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe f8f9 	bl	8006f98 <unlock_fs>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e095      	b.n	8008ed6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a1a      	ldr	r2, [r3, #32]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d915      	bls.n	8008de4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	025b      	lsls	r3, r3, #9
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f7fe f84d 	bl	8006e70 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	7d1b      	ldrb	r3, [r3, #20]
 8008dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	025b      	lsls	r3, r3, #9
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008dea:	e044      	b.n	8008e76 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d01b      	beq.n	8008e2e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	699a      	ldr	r2, [r3, #24]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d215      	bcs.n	8008e2e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	7858      	ldrb	r0, [r3, #1]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	f7fd ff4e 	bl	8006cb0 <disk_read>
 8008e14:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	755a      	strb	r2, [r3, #21]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	2101      	movs	r1, #1
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe f8b7 	bl	8006f98 <unlock_fs>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e053      	b.n	8008ed6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d901      	bls.n	8008e4e <f_write+0x2b8>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5c:	4413      	add	r3, r2
 8008e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e60:	69f9      	ldr	r1, [r7, #28]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe f804 	bl	8006e70 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	7d1b      	ldrb	r3, [r3, #20]
 8008e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	4413      	add	r3, r2
 8008e7c:	61fb      	str	r3, [r7, #28]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	441a      	add	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	619a      	str	r2, [r3, #24]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	bf38      	it	cc
 8008e96:	461a      	movcc	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	60da      	str	r2, [r3, #12]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	441a      	add	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f47f aeb6 	bne.w	8008c24 <f_write+0x8e>
 8008eb8:	e000      	b.n	8008ebc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008eba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
 8008ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe f862 	bl	8006f98 <unlock_fs>
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3730      	adds	r7, #48	; 0x30
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f107 0208 	add.w	r2, r7, #8
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fbe0 	bl	80086b4 <validate>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d16d      	bne.n	8008fda <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7d1b      	ldrb	r3, [r3, #20]
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d067      	beq.n	8008fda <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7d1b      	ldrb	r3, [r3, #20]
 8008f0e:	b25b      	sxtb	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da1a      	bge.n	8008f4a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	7858      	ldrb	r0, [r3, #1]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1a      	ldr	r2, [r3, #32]
 8008f22:	2301      	movs	r3, #1
 8008f24:	f7fd fee4 	bl	8006cf0 <disk_write>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d006      	beq.n	8008f3c <f_sync+0x5e>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2101      	movs	r1, #1
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe f830 	bl	8006f98 <unlock_fs>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e055      	b.n	8008fe8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7d1b      	ldrb	r3, [r3, #20]
 8008f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f4a:	f7fd f933 	bl	80061b4 <get_fattime>
 8008f4e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f7fe f9e9 	bl	8007330 <move_window>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d138      	bne.n	8008fda <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	330b      	adds	r3, #11
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	330b      	adds	r3, #11
 8008f78:	f042 0220 	orr.w	r2, r2, #32
 8008f7c:	b2d2      	uxtb	r2, r2
 8008f7e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	68f9      	ldr	r1, [r7, #12]
 8008f8c:	f7fe fef6 	bl	8007d7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f103 021c 	add.w	r2, r3, #28
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	f7fd ff3b 	bl	8006e18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3316      	adds	r3, #22
 8008fa6:	6939      	ldr	r1, [r7, #16]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd ff35 	bl	8006e18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3312      	adds	r3, #18
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fd ff14 	bl	8006de2 <st_word>
					fs->wflag = 1;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe f9e2 	bl	800738c <sync_fs>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7d1b      	ldrb	r3, [r3, #20]
 8008fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	7dfa      	ldrb	r2, [r7, #23]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fd ffd9 	bl	8006f98 <unlock_fs>
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ff70 	bl	8008ede <f_sync>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11d      	bne.n	8009044 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f107 0208 	add.w	r2, r7, #8
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff fb4f 	bl	80086b4 <validate>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d111      	bne.n	8009044 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe f8df 	bl	80071e8 <dec_lock>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f7fd ffaa 	bl	8006f98 <unlock_fs>
#endif
		}
	}
	return res;
 8009044:	7bfb      	ldrb	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800905e:	2301      	movs	r3, #1
 8009060:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009066:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 8009068:	7a5b      	ldrb	r3, [r3, #9]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d131      	bne.n	80090d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009070:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 8009072:	7a5b      	ldrb	r3, [r3, #9]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	461a      	mov	r2, r3
 8009078:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 800907a:	2100      	movs	r1, #0
 800907c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800907e:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 8009080:	7a5b      	ldrb	r3, [r3, #9]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800908e:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 8009090:	7a5b      	ldrb	r3, [r3, #9]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	461a      	mov	r2, r3
 8009096:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 8009098:	4413      	add	r3, r2
 800909a:	79fa      	ldrb	r2, [r7, #7]
 800909c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 80090a0:	7a5b      	ldrb	r3, [r3, #9]
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	b2d1      	uxtb	r1, r2
 80090a8:	4a0e      	ldr	r2, [pc, #56]	; (80090e4 <FATFS_LinkDriverEx+0x94>)
 80090aa:	7251      	strb	r1, [r2, #9]
 80090ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090ae:	7dbb      	ldrb	r3, [r7, #22]
 80090b0:	3330      	adds	r3, #48	; 0x30
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	3301      	adds	r3, #1
 80090bc:	223a      	movs	r2, #58	; 0x3a
 80090be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	3302      	adds	r3, #2
 80090c4:	222f      	movs	r2, #47	; 0x2f
 80090c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	3303      	adds	r3, #3
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000660 	.word	0x20000660

080090e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090f2:	2200      	movs	r2, #0
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff ffaa 	bl	8009050 <FATFS_LinkDriverEx>
 80090fc:	4603      	mov	r3, r0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	4603      	mov	r3, r0
 800910e:	6039      	str	r1, [r7, #0]
 8009110:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009112:	2200      	movs	r2, #0
 8009114:	2101      	movs	r1, #1
 8009116:	2001      	movs	r0, #1
 8009118:	f000 f977 	bl	800940a <osSemaphoreNew>
 800911c:	4602      	mov	r2, r0
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bf14      	ite	ne
 800912a:	2301      	movne	r3, #1
 800912c:	2300      	moveq	r3, #0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	60fb      	str	r3, [r7, #12]

    return ret;
 8009132:	68fb      	ldr	r3, [r7, #12]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa7f 	bl	8009648 <osSemaphoreDelete>
#endif
    return 1;
 800914a:	2301      	movs	r3, #1
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009160:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f9d9 	bl	800951c <osSemaphoreAcquire>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009170:	2301      	movs	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009174:	68fb      	ldr	r3, [r7, #12]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa1a 	bl	80095c0 <osSemaphoreRelease>
#endif
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <__NVIC_SetPriority>:
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	6039      	str	r1, [r7, #0]
 800919e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	db0a      	blt.n	80091be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	490c      	ldr	r1, [pc, #48]	; (80091e0 <__NVIC_SetPriority+0x4c>)
 80091ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091b2:	0112      	lsls	r2, r2, #4
 80091b4:	b2d2      	uxtb	r2, r2
 80091b6:	440b      	add	r3, r1
 80091b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80091bc:	e00a      	b.n	80091d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	4908      	ldr	r1, [pc, #32]	; (80091e4 <__NVIC_SetPriority+0x50>)
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	f003 030f 	and.w	r3, r3, #15
 80091ca:	3b04      	subs	r3, #4
 80091cc:	0112      	lsls	r2, r2, #4
 80091ce:	b2d2      	uxtb	r2, r2
 80091d0:	440b      	add	r3, r1
 80091d2:	761a      	strb	r2, [r3, #24]
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	e000e100 	.word	0xe000e100
 80091e4:	e000ed00 	.word	0xe000ed00

080091e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <SysTick_Handler+0x1c>)
 80091ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091f0:	f002 f962 	bl	800b4b8 <xTaskGetSchedulerState>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d001      	beq.n	80091fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091fa:	f003 f845 	bl	800c288 <xPortSysTickHandler>
  }
}
 80091fe:	bf00      	nop
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	e000e010 	.word	0xe000e010

08009208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800920c:	2100      	movs	r1, #0
 800920e:	f06f 0004 	mvn.w	r0, #4
 8009212:	f7ff ffbf 	bl	8009194 <__NVIC_SetPriority>
#endif
}
 8009216:	bf00      	nop
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009222:	f3ef 8305 	mrs	r3, IPSR
 8009226:	603b      	str	r3, [r7, #0]
  return(result);
 8009228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800922e:	f06f 0305 	mvn.w	r3, #5
 8009232:	607b      	str	r3, [r7, #4]
 8009234:	e00c      	b.n	8009250 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009236:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <osKernelInitialize+0x44>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d105      	bne.n	800924a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800923e:	4b08      	ldr	r3, [pc, #32]	; (8009260 <osKernelInitialize+0x44>)
 8009240:	2201      	movs	r2, #1
 8009242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009244:	2300      	movs	r3, #0
 8009246:	607b      	str	r3, [r7, #4]
 8009248:	e002      	b.n	8009250 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800924a:	f04f 33ff 	mov.w	r3, #4294967295
 800924e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009250:	687b      	ldr	r3, [r7, #4]
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	2000066c 	.word	0x2000066c

08009264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800926a:	f3ef 8305 	mrs	r3, IPSR
 800926e:	603b      	str	r3, [r7, #0]
  return(result);
 8009270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009276:	f06f 0305 	mvn.w	r3, #5
 800927a:	607b      	str	r3, [r7, #4]
 800927c:	e010      	b.n	80092a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800927e:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <osKernelStart+0x48>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d109      	bne.n	800929a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009286:	f7ff ffbf 	bl	8009208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800928a:	4b08      	ldr	r3, [pc, #32]	; (80092ac <osKernelStart+0x48>)
 800928c:	2202      	movs	r2, #2
 800928e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009290:	f001 fcca 	bl	800ac28 <vTaskStartScheduler>
      stat = osOK;
 8009294:	2300      	movs	r3, #0
 8009296:	607b      	str	r3, [r7, #4]
 8009298:	e002      	b.n	80092a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800929a:	f04f 33ff 	mov.w	r3, #4294967295
 800929e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092a0:	687b      	ldr	r3, [r7, #4]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	2000066c 	.word	0x2000066c

080092b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08e      	sub	sp, #56	; 0x38
 80092b4:	af04      	add	r7, sp, #16
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c0:	f3ef 8305 	mrs	r3, IPSR
 80092c4:	617b      	str	r3, [r7, #20]
  return(result);
 80092c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d17e      	bne.n	80093ca <osThreadNew+0x11a>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d07b      	beq.n	80093ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092d2:	2340      	movs	r3, #64	; 0x40
 80092d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092d6:	2318      	movs	r3, #24
 80092d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80092de:	f04f 33ff 	mov.w	r3, #4294967295
 80092e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d045      	beq.n	8009376 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <osThreadNew+0x48>
        name = attr->name;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d008      	beq.n	800931e <osThreadNew+0x6e>
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	2b38      	cmp	r3, #56	; 0x38
 8009310:	d805      	bhi.n	800931e <osThreadNew+0x6e>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <osThreadNew+0x72>
        return (NULL);
 800931e:	2300      	movs	r3, #0
 8009320:	e054      	b.n	80093cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	089b      	lsrs	r3, r3, #2
 8009330:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00e      	beq.n	8009358 <osThreadNew+0xa8>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	2b5b      	cmp	r3, #91	; 0x5b
 8009340:	d90a      	bls.n	8009358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009346:	2b00      	cmp	r3, #0
 8009348:	d006      	beq.n	8009358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <osThreadNew+0xa8>
        mem = 1;
 8009352:	2301      	movs	r3, #1
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	e010      	b.n	800937a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10c      	bne.n	800937a <osThreadNew+0xca>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d108      	bne.n	800937a <osThreadNew+0xca>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d104      	bne.n	800937a <osThreadNew+0xca>
          mem = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	61bb      	str	r3, [r7, #24]
 8009374:	e001      	b.n	800937a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d110      	bne.n	80093a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009388:	9202      	str	r2, [sp, #8]
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	6a3a      	ldr	r2, [r7, #32]
 8009394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f001 fa70 	bl	800a87c <xTaskCreateStatic>
 800939c:	4603      	mov	r3, r0
 800939e:	613b      	str	r3, [r7, #16]
 80093a0:	e013      	b.n	80093ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d110      	bne.n	80093ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	f107 0310 	add.w	r3, r7, #16
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f001 fabb 	bl	800a936 <xTaskCreate>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d001      	beq.n	80093ca <osThreadNew+0x11a>
            hTask = NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093ca:	693b      	ldr	r3, [r7, #16]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3728      	adds	r7, #40	; 0x28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093dc:	f3ef 8305 	mrs	r3, IPSR
 80093e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80093e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <osDelay+0x1c>
    stat = osErrorISR;
 80093e8:	f06f 0305 	mvn.w	r3, #5
 80093ec:	60fb      	str	r3, [r7, #12]
 80093ee:	e007      	b.n	8009400 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <osDelay+0x2c>
      vTaskDelay(ticks);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fbe0 	bl	800abc0 <vTaskDelay>
    }
  }

  return (stat);
 8009400:	68fb      	ldr	r3, [r7, #12]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800940a:	b580      	push	{r7, lr}
 800940c:	b08a      	sub	sp, #40	; 0x28
 800940e:	af02      	add	r7, sp, #8
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	60b9      	str	r1, [r7, #8]
 8009414:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800941a:	f3ef 8305 	mrs	r3, IPSR
 800941e:	613b      	str	r3, [r7, #16]
  return(result);
 8009420:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009422:	2b00      	cmp	r3, #0
 8009424:	d175      	bne.n	8009512 <osSemaphoreNew+0x108>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d072      	beq.n	8009512 <osSemaphoreNew+0x108>
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	429a      	cmp	r2, r3
 8009432:	d86e      	bhi.n	8009512 <osSemaphoreNew+0x108>
    mem = -1;
 8009434:	f04f 33ff 	mov.w	r3, #4294967295
 8009438:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d015      	beq.n	800946c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d006      	beq.n	8009456 <osSemaphoreNew+0x4c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	2b4f      	cmp	r3, #79	; 0x4f
 800944e:	d902      	bls.n	8009456 <osSemaphoreNew+0x4c>
        mem = 1;
 8009450:	2301      	movs	r3, #1
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	e00c      	b.n	8009470 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d108      	bne.n	8009470 <osSemaphoreNew+0x66>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <osSemaphoreNew+0x66>
          mem = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e001      	b.n	8009470 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009476:	d04c      	beq.n	8009512 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d128      	bne.n	80094d0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d10a      	bne.n	800949a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	2203      	movs	r2, #3
 800948a:	9200      	str	r2, [sp, #0]
 800948c:	2200      	movs	r2, #0
 800948e:	2100      	movs	r1, #0
 8009490:	2001      	movs	r0, #1
 8009492:	f000 fa4d 	bl	8009930 <xQueueGenericCreateStatic>
 8009496:	61f8      	str	r0, [r7, #28]
 8009498:	e005      	b.n	80094a6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800949a:	2203      	movs	r2, #3
 800949c:	2100      	movs	r1, #0
 800949e:	2001      	movs	r0, #1
 80094a0:	f000 fabe 	bl	8009a20 <xQueueGenericCreate>
 80094a4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d022      	beq.n	80094f2 <osSemaphoreNew+0xe8>
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d01f      	beq.n	80094f2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80094b2:	2300      	movs	r3, #0
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	69f8      	ldr	r0, [r7, #28]
 80094ba:	f000 fb79 	bl	8009bb0 <xQueueGenericSend>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d016      	beq.n	80094f2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80094c4:	69f8      	ldr	r0, [r7, #28]
 80094c6:	f001 f805 	bl	800a4d4 <vQueueDelete>
            hSemaphore = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61fb      	str	r3, [r7, #28]
 80094ce:	e010      	b.n	80094f2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d108      	bne.n	80094e8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	461a      	mov	r2, r3
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 fafb 	bl	8009ada <xQueueCreateCountingSemaphoreStatic>
 80094e4:	61f8      	str	r0, [r7, #28]
 80094e6:	e004      	b.n	80094f2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fb2c 	bl	8009b48 <xQueueCreateCountingSemaphore>
 80094f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00c      	beq.n	8009512 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <osSemaphoreNew+0xfc>
          name = attr->name;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	e001      	b.n	800950a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800950a:	6979      	ldr	r1, [r7, #20]
 800950c:	69f8      	ldr	r0, [r7, #28]
 800950e:	f001 f92d 	bl	800a76c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009512:	69fb      	ldr	r3, [r7, #28]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3720      	adds	r7, #32
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d103      	bne.n	800953c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009534:	f06f 0303 	mvn.w	r3, #3
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	e039      	b.n	80095b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800953c:	f3ef 8305 	mrs	r3, IPSR
 8009540:	60fb      	str	r3, [r7, #12]
  return(result);
 8009542:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009544:	2b00      	cmp	r3, #0
 8009546:	d022      	beq.n	800958e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800954e:	f06f 0303 	mvn.w	r3, #3
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e02c      	b.n	80095b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009556:	2300      	movs	r3, #0
 8009558:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800955a:	f107 0308 	add.w	r3, r7, #8
 800955e:	461a      	mov	r2, r3
 8009560:	2100      	movs	r1, #0
 8009562:	6938      	ldr	r0, [r7, #16]
 8009564:	f000 ff36 	bl	800a3d4 <xQueueReceiveFromISR>
 8009568:	4603      	mov	r3, r0
 800956a:	2b01      	cmp	r3, #1
 800956c:	d003      	beq.n	8009576 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800956e:	f06f 0302 	mvn.w	r3, #2
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	e01c      	b.n	80095b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d019      	beq.n	80095b0 <osSemaphoreAcquire+0x94>
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <osSemaphoreAcquire+0xa0>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	e010      	b.n	80095b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6938      	ldr	r0, [r7, #16]
 8009592:	f000 fe13 	bl	800a1bc <xQueueSemaphoreTake>
 8009596:	4603      	mov	r3, r0
 8009598:	2b01      	cmp	r3, #1
 800959a:	d009      	beq.n	80095b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80095a2:	f06f 0301 	mvn.w	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e002      	b.n	80095b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80095aa:	f06f 0302 	mvn.w	r3, #2
 80095ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80095b0:	697b      	ldr	r3, [r7, #20]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d103      	bne.n	80095de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80095d6:	f06f 0303 	mvn.w	r3, #3
 80095da:	617b      	str	r3, [r7, #20]
 80095dc:	e02c      	b.n	8009638 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095de:	f3ef 8305 	mrs	r3, IPSR
 80095e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80095e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d01a      	beq.n	8009620 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80095ee:	f107 0308 	add.w	r3, r7, #8
 80095f2:	4619      	mov	r1, r3
 80095f4:	6938      	ldr	r0, [r7, #16]
 80095f6:	f000 fc74 	bl	8009ee2 <xQueueGiveFromISR>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d003      	beq.n	8009608 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009600:	f06f 0302 	mvn.w	r3, #2
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	e017      	b.n	8009638 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d014      	beq.n	8009638 <osSemaphoreRelease+0x78>
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <osSemaphoreRelease+0x84>)
 8009610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	e00b      	b.n	8009638 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009620:	2300      	movs	r3, #0
 8009622:	2200      	movs	r2, #0
 8009624:	2100      	movs	r1, #0
 8009626:	6938      	ldr	r0, [r7, #16]
 8009628:	f000 fac2 	bl	8009bb0 <xQueueGenericSend>
 800962c:	4603      	mov	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d002      	beq.n	8009638 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009632:	f06f 0302 	mvn.w	r3, #2
 8009636:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009638:	697b      	ldr	r3, [r7, #20]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009654:	f3ef 8305 	mrs	r3, IPSR
 8009658:	60fb      	str	r3, [r7, #12]
  return(result);
 800965a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009660:	f06f 0305 	mvn.w	r3, #5
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	e00e      	b.n	8009686 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d103      	bne.n	8009676 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800966e:	f06f 0303 	mvn.w	r3, #3
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	e007      	b.n	8009686 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009676:	6938      	ldr	r0, [r7, #16]
 8009678:	f001 f8a2 	bl	800a7c0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800967c:	2300      	movs	r3, #0
 800967e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009680:	6938      	ldr	r0, [r7, #16]
 8009682:	f000 ff27 	bl	800a4d4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009686:	697b      	ldr	r3, [r7, #20]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4a07      	ldr	r2, [pc, #28]	; (80096bc <vApplicationGetIdleTaskMemory+0x2c>)
 80096a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4a06      	ldr	r2, [pc, #24]	; (80096c0 <vApplicationGetIdleTaskMemory+0x30>)
 80096a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2240      	movs	r2, #64	; 0x40
 80096ac:	601a      	str	r2, [r3, #0]
}
 80096ae:	bf00      	nop
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	20000670 	.word	0x20000670
 80096c0:	200006cc 	.word	0x200006cc

080096c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80096d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4a06      	ldr	r2, [pc, #24]	; (80096f4 <vApplicationGetTimerTaskMemory+0x30>)
 80096da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2280      	movs	r2, #128	; 0x80
 80096e0:	601a      	str	r2, [r3, #0]
}
 80096e2:	bf00      	nop
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	200007cc 	.word	0x200007cc
 80096f4:	20000828 	.word	0x20000828

080096f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f103 0208 	add.w	r2, r3, #8
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f04f 32ff 	mov.w	r2, #4294967295
 8009710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f103 0208 	add.w	r2, r3, #8
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f103 0208 	add.w	r2, r3, #8
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	601a      	str	r2, [r3, #0]
}
 800978e:	bf00      	nop
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800979a:	b480      	push	{r7}
 800979c:	b085      	sub	sp, #20
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b0:	d103      	bne.n	80097ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	e00c      	b.n	80097d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3308      	adds	r3, #8
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	e002      	b.n	80097c8 <vListInsert+0x2e>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d2f6      	bcs.n	80097c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	601a      	str	r2, [r3, #0]
}
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	6892      	ldr	r2, [r2, #8]
 8009822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6852      	ldr	r2, [r2, #4]
 800982c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d103      	bne.n	8009840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	1e5a      	subs	r2, r3, #1
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800988a:	f002 fc6b 	bl	800c164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800989a:	fb01 f303 	mul.w	r3, r1, r3
 800989e:	441a      	add	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ba:	3b01      	subs	r3, #1
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098c0:	fb01 f303 	mul.w	r3, r1, r3
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	22ff      	movs	r2, #255	; 0xff
 80098ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	22ff      	movs	r2, #255	; 0xff
 80098d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d114      	bne.n	800990a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01a      	beq.n	800991e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3310      	adds	r3, #16
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 fc25 	bl	800b13c <xTaskRemoveFromEventList>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d012      	beq.n	800991e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <xQueueGenericReset+0xcc>)
 80098fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	e009      	b.n	800991e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3310      	adds	r3, #16
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fef2 	bl	80096f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3324      	adds	r3, #36	; 0x24
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff feed 	bl	80096f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800991e:	f002 fc51 	bl	800c1c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009922:	2301      	movs	r3, #1
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	e000ed04 	.word	0xe000ed04

08009930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08e      	sub	sp, #56	; 0x38
 8009934:	af02      	add	r7, sp, #8
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <xQueueGenericCreateStatic+0x52>
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <xQueueGenericCreateStatic+0x56>
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <xQueueGenericCreateStatic+0x58>
 8009986:	2300      	movs	r3, #0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	623b      	str	r3, [r7, #32]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <xQueueGenericCreateStatic+0x7e>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <xQueueGenericCreateStatic+0x82>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e000      	b.n	80099b4 <xQueueGenericCreateStatic+0x84>
 80099b2:	2300      	movs	r3, #0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	61fb      	str	r3, [r7, #28]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099ce:	2350      	movs	r3, #80	; 0x50
 80099d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b50      	cmp	r3, #80	; 0x50
 80099d6:	d00a      	beq.n	80099ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	61bb      	str	r3, [r7, #24]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00d      	beq.n	8009a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 f83f 	bl	8009a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3730      	adds	r7, #48	; 0x30
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08a      	sub	sp, #40	; 0x28
 8009a24:	af02      	add	r7, sp, #8
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	613b      	str	r3, [r7, #16]
}
 8009a46:	bf00      	nop
 8009a48:	e7fe      	b.n	8009a48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	3350      	adds	r3, #80	; 0x50
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f002 fca5 	bl	800c3a8 <pvPortMalloc>
 8009a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d011      	beq.n	8009a8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	3350      	adds	r3, #80	; 0x50
 8009a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a78:	79fa      	ldrb	r2, [r7, #7]
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 f805 	bl	8009a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d103      	bne.n	8009ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e002      	b.n	8009ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	69b8      	ldr	r0, [r7, #24]
 8009ac6:	f7ff fecb 	bl	8009860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	78fa      	ldrb	r2, [r7, #3]
 8009ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ad2:	bf00      	nop
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b08a      	sub	sp, #40	; 0x28
 8009ade:	af02      	add	r7, sp, #8
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	61bb      	str	r3, [r7, #24]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d90a      	bls.n	8009b20 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	617b      	str	r3, [r7, #20]
}
 8009b1c:	bf00      	nop
 8009b1e:	e7fe      	b.n	8009b1e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b20:	2302      	movs	r3, #2
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	2100      	movs	r1, #0
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f7ff ff00 	bl	8009930 <xQueueGenericCreateStatic>
 8009b30:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b3e:	69fb      	ldr	r3, [r7, #28]
	}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3720      	adds	r7, #32
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	613b      	str	r3, [r7, #16]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d90a      	bls.n	8009b8c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	60fb      	str	r3, [r7, #12]
}
 8009b88:	bf00      	nop
 8009b8a:	e7fe      	b.n	8009b8a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	2100      	movs	r1, #0
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff ff45 	bl	8009a20 <xQueueGenericCreate>
 8009b96:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ba4:	697b      	ldr	r3, [r7, #20]
	}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08e      	sub	sp, #56	; 0x38
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <xQueueGenericSend+0x32>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bde:	bf00      	nop
 8009be0:	e7fe      	b.n	8009be0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <xQueueGenericSend+0x40>
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <xQueueGenericSend+0x44>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <xQueueGenericSend+0x46>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <xQueueGenericSend+0x60>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d103      	bne.n	8009c1e <xQueueGenericSend+0x6e>
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <xQueueGenericSend+0x72>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e000      	b.n	8009c24 <xQueueGenericSend+0x74>
 8009c22:	2300      	movs	r3, #0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <xQueueGenericSend+0x8e>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	623b      	str	r3, [r7, #32]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c3e:	f001 fc3b 	bl	800b4b8 <xTaskGetSchedulerState>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d102      	bne.n	8009c4e <xQueueGenericSend+0x9e>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d101      	bne.n	8009c52 <xQueueGenericSend+0xa2>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e000      	b.n	8009c54 <xQueueGenericSend+0xa4>
 8009c52:	2300      	movs	r3, #0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <xQueueGenericSend+0xbe>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	61fb      	str	r3, [r7, #28]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c6e:	f002 fa79 	bl	800c164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d302      	bcc.n	8009c84 <xQueueGenericSend+0xd4>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d129      	bne.n	8009cd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c8a:	f000 fc5e 	bl	800a54a <prvCopyDataToQueue>
 8009c8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d010      	beq.n	8009cba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	3324      	adds	r3, #36	; 0x24
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 fa4d 	bl	800b13c <xTaskRemoveFromEventList>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d013      	beq.n	8009cd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ca8:	4b3f      	ldr	r3, [pc, #252]	; (8009da8 <xQueueGenericSend+0x1f8>)
 8009caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	e00a      	b.n	8009cd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cc0:	4b39      	ldr	r3, [pc, #228]	; (8009da8 <xQueueGenericSend+0x1f8>)
 8009cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cd0:	f002 fa78 	bl	800c1c4 <vPortExitCritical>
				return pdPASS;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e063      	b.n	8009da0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d103      	bne.n	8009ce6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cde:	f002 fa71 	bl	800c1c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e05c      	b.n	8009da0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d106      	bne.n	8009cfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cec:	f107 0314 	add.w	r3, r7, #20
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 fa87 	bl	800b204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cfa:	f002 fa63 	bl	800c1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cfe:	f000 fff9 	bl	800acf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d02:	f002 fa2f 	bl	800c164 <vPortEnterCritical>
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d0c:	b25b      	sxtb	r3, r3
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d103      	bne.n	8009d1c <xQueueGenericSend+0x16c>
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d22:	b25b      	sxtb	r3, r3
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d28:	d103      	bne.n	8009d32 <xQueueGenericSend+0x182>
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d32:	f002 fa47 	bl	800c1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d36:	1d3a      	adds	r2, r7, #4
 8009d38:	f107 0314 	add.w	r3, r7, #20
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 fa76 	bl	800b230 <xTaskCheckForTimeOut>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d124      	bne.n	8009d94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d4c:	f000 fcf5 	bl	800a73a <prvIsQueueFull>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d018      	beq.n	8009d88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	3310      	adds	r3, #16
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f001 f99c 	bl	800b09c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d66:	f000 fc80 	bl	800a66a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d6a:	f000 ffd1 	bl	800ad10 <xTaskResumeAll>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f47f af7c 	bne.w	8009c6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d76:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <xQueueGenericSend+0x1f8>)
 8009d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	e772      	b.n	8009c6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d8a:	f000 fc6e 	bl	800a66a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d8e:	f000 ffbf 	bl	800ad10 <xTaskResumeAll>
 8009d92:	e76c      	b.n	8009c6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d96:	f000 fc68 	bl	800a66a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d9a:	f000 ffb9 	bl	800ad10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3738      	adds	r7, #56	; 0x38
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b090      	sub	sp, #64	; 0x40
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d103      	bne.n	8009de8 <xQueueGenericSendFromISR+0x3c>
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <xQueueGenericSendFromISR+0x40>
 8009de8:	2301      	movs	r3, #1
 8009dea:	e000      	b.n	8009dee <xQueueGenericSendFromISR+0x42>
 8009dec:	2300      	movs	r3, #0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10a      	bne.n	8009e08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e04:	bf00      	nop
 8009e06:	e7fe      	b.n	8009e06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d103      	bne.n	8009e16 <xQueueGenericSendFromISR+0x6a>
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <xQueueGenericSendFromISR+0x6e>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e000      	b.n	8009e1c <xQueueGenericSendFromISR+0x70>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	623b      	str	r3, [r7, #32]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e36:	f002 fa77 	bl	800c328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	61fa      	str	r2, [r7, #28]
 8009e50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d302      	bcc.n	8009e68 <xQueueGenericSendFromISR+0xbc>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d12f      	bne.n	8009ec8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	68b9      	ldr	r1, [r7, #8]
 8009e7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e7e:	f000 fb64 	bl	800a54a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8a:	d112      	bne.n	8009eb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d016      	beq.n	8009ec2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	3324      	adds	r3, #36	; 0x24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 f94f 	bl	800b13c <xTaskRemoveFromEventList>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00e      	beq.n	8009ec2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00b      	beq.n	8009ec2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	e007      	b.n	8009ec2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	b25a      	sxtb	r2, r3
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009ec6:	e001      	b.n	8009ecc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ed6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3740      	adds	r7, #64	; 0x40
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b08e      	sub	sp, #56	; 0x38
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10a      	bne.n	8009f0c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	623b      	str	r3, [r7, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	61fb      	str	r3, [r7, #28]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <xQueueGiveFromISR+0x58>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <xQueueGiveFromISR+0x5c>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e000      	b.n	8009f40 <xQueueGiveFromISR+0x5e>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	61bb      	str	r3, [r7, #24]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f5a:	f002 f9e5 	bl	800c328 <vPortValidateInterruptPriority>
	__asm volatile
 8009f5e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	617a      	str	r2, [r7, #20]
 8009f74:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009f76:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d22b      	bcs.n	8009fe2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d112      	bne.n	8009fcc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d016      	beq.n	8009fdc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	3324      	adds	r3, #36	; 0x24
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 f8c2 	bl	800b13c <xTaskRemoveFromEventList>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00e      	beq.n	8009fdc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00b      	beq.n	8009fdc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e007      	b.n	8009fdc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	b25a      	sxtb	r2, r3
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe0:	e001      	b.n	8009fe6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f383 8811 	msr	BASEPRI, r3
}
 8009ff0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3738      	adds	r7, #56	; 0x38
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08c      	sub	sp, #48	; 0x30
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a008:	2300      	movs	r3, #0
 800a00a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <xQueueReceive+0x30>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	623b      	str	r3, [r7, #32]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d103      	bne.n	800a03a <xQueueReceive+0x3e>
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <xQueueReceive+0x42>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <xQueueReceive+0x44>
 800a03e:	2300      	movs	r3, #0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <xQueueReceive+0x5e>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	61fb      	str	r3, [r7, #28]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a05a:	f001 fa2d 	bl	800b4b8 <xTaskGetSchedulerState>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <xQueueReceive+0x6e>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <xQueueReceive+0x72>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <xQueueReceive+0x74>
 800a06e:	2300      	movs	r3, #0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueReceive+0x8e>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	61bb      	str	r3, [r7, #24]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a08a:	f002 f86b 	bl	800c164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a092:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d01f      	beq.n	800a0da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a09a:	68b9      	ldr	r1, [r7, #8]
 800a09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09e:	f000 fabe 	bl	800a61e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	1e5a      	subs	r2, r3, #1
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00f      	beq.n	800a0d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	3310      	adds	r3, #16
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 f840 	bl	800b13c <xTaskRemoveFromEventList>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d007      	beq.n	800a0d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0c2:	4b3d      	ldr	r3, [pc, #244]	; (800a1b8 <xQueueReceive+0x1bc>)
 800a0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0d2:	f002 f877 	bl	800c1c4 <vPortExitCritical>
				return pdPASS;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e069      	b.n	800a1ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d103      	bne.n	800a0e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0e0:	f002 f870 	bl	800c1c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	e062      	b.n	800a1ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d106      	bne.n	800a0fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ee:	f107 0310 	add.w	r3, r7, #16
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 f886 	bl	800b204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fc:	f002 f862 	bl	800c1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a100:	f000 fdf8 	bl	800acf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a104:	f002 f82e 	bl	800c164 <vPortEnterCritical>
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a10e:	b25b      	sxtb	r3, r3
 800a110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a114:	d103      	bne.n	800a11e <xQueueReceive+0x122>
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a124:	b25b      	sxtb	r3, r3
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d103      	bne.n	800a134 <xQueueReceive+0x138>
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a134:	f002 f846 	bl	800c1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a138:	1d3a      	adds	r2, r7, #4
 800a13a:	f107 0310 	add.w	r3, r7, #16
 800a13e:	4611      	mov	r1, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f001 f875 	bl	800b230 <xTaskCheckForTimeOut>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d123      	bne.n	800a194 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a14e:	f000 fade 	bl	800a70e <prvIsQueueEmpty>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d017      	beq.n	800a188 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f000 ff9b 	bl	800b09c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a168:	f000 fa7f 	bl	800a66a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a16c:	f000 fdd0 	bl	800ad10 <xTaskResumeAll>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d189      	bne.n	800a08a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <xQueueReceive+0x1bc>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	e780      	b.n	800a08a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18a:	f000 fa6e 	bl	800a66a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a18e:	f000 fdbf 	bl	800ad10 <xTaskResumeAll>
 800a192:	e77a      	b.n	800a08a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a196:	f000 fa68 	bl	800a66a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19a:	f000 fdb9 	bl	800ad10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a0:	f000 fab5 	bl	800a70e <prvIsQueueEmpty>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f43f af6f 	beq.w	800a08a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3730      	adds	r7, #48	; 0x30
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08e      	sub	sp, #56	; 0x38
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	623b      	str	r3, [r7, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	61fb      	str	r3, [r7, #28]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a20c:	f001 f954 	bl	800b4b8 <xTaskGetSchedulerState>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <xQueueSemaphoreTake+0x60>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <xQueueSemaphoreTake+0x64>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e000      	b.n	800a222 <xQueueSemaphoreTake+0x66>
 800a220:	2300      	movs	r3, #0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	61bb      	str	r3, [r7, #24]
}
 800a238:	bf00      	nop
 800a23a:	e7fe      	b.n	800a23a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a23c:	f001 ff92 	bl	800c164 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a244:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d024      	beq.n	800a296 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	1e5a      	subs	r2, r3, #1
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d104      	bne.n	800a266 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a25c:	f001 faa2 	bl	800b7a4 <pvTaskIncrementMutexHeldCount>
 800a260:	4602      	mov	r2, r0
 800a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a264:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00f      	beq.n	800a28e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	3310      	adds	r3, #16
 800a272:	4618      	mov	r0, r3
 800a274:	f000 ff62 	bl	800b13c <xTaskRemoveFromEventList>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a27e:	4b54      	ldr	r3, [pc, #336]	; (800a3d0 <xQueueSemaphoreTake+0x214>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a28e:	f001 ff99 	bl	800c1c4 <vPortExitCritical>
				return pdPASS;
 800a292:	2301      	movs	r3, #1
 800a294:	e097      	b.n	800a3c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d111      	bne.n	800a2c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	617b      	str	r3, [r7, #20]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a2b8:	f001 ff84 	bl	800c1c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	e082      	b.n	800a3c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d106      	bne.n	800a2d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2c6:	f107 030c 	add.w	r3, r7, #12
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 ff9a 	bl	800b204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2d4:	f001 ff76 	bl	800c1c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2d8:	f000 fd0c 	bl	800acf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2dc:	f001 ff42 	bl	800c164 <vPortEnterCritical>
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2e6:	b25b      	sxtb	r3, r3
 800a2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ec:	d103      	bne.n	800a2f6 <xQueueSemaphoreTake+0x13a>
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d103      	bne.n	800a30c <xQueueSemaphoreTake+0x150>
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a30c:	f001 ff5a 	bl	800c1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a310:	463a      	mov	r2, r7
 800a312:	f107 030c 	add.w	r3, r7, #12
 800a316:	4611      	mov	r1, r2
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 ff89 	bl	800b230 <xTaskCheckForTimeOut>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d132      	bne.n	800a38a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a326:	f000 f9f2 	bl	800a70e <prvIsQueueEmpty>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d026      	beq.n	800a37e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d109      	bne.n	800a34c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a338:	f001 ff14 	bl	800c164 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	4618      	mov	r0, r3
 800a342:	f001 f8d7 	bl	800b4f4 <xTaskPriorityInherit>
 800a346:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a348:	f001 ff3c 	bl	800c1c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	3324      	adds	r3, #36	; 0x24
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fea1 	bl	800b09c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a35a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a35c:	f000 f985 	bl	800a66a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a360:	f000 fcd6 	bl	800ad10 <xTaskResumeAll>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	f47f af68 	bne.w	800a23c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a36c:	4b18      	ldr	r3, [pc, #96]	; (800a3d0 <xQueueSemaphoreTake+0x214>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	e75e      	b.n	800a23c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a37e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a380:	f000 f973 	bl	800a66a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a384:	f000 fcc4 	bl	800ad10 <xTaskResumeAll>
 800a388:	e758      	b.n	800a23c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a38a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a38c:	f000 f96d 	bl	800a66a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a390:	f000 fcbe 	bl	800ad10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a396:	f000 f9ba 	bl	800a70e <prvIsQueueEmpty>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f43f af4d 	beq.w	800a23c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00d      	beq.n	800a3c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a3a8:	f001 fedc 	bl	800c164 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ae:	f000 f8b4 	bl	800a51a <prvGetDisinheritPriorityAfterTimeout>
 800a3b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f001 f970 	bl	800b6a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3c0:	f001 ff00 	bl	800c1c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3738      	adds	r7, #56	; 0x38
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	e000ed04 	.word	0xe000ed04

0800a3d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08e      	sub	sp, #56	; 0x38
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10a      	bne.n	800a400 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	623b      	str	r3, [r7, #32]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d103      	bne.n	800a40e <xQueueReceiveFromISR+0x3a>
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <xQueueReceiveFromISR+0x3e>
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <xQueueReceiveFromISR+0x40>
 800a412:	2300      	movs	r3, #0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	61fb      	str	r3, [r7, #28]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a42e:	f001 ff7b 	bl	800c328 <vPortValidateInterruptPriority>
	__asm volatile
 800a432:	f3ef 8211 	mrs	r2, BASEPRI
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	61ba      	str	r2, [r7, #24]
 800a448:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a44a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a44c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	2b00      	cmp	r3, #0
 800a458:	d02f      	beq.n	800a4ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a464:	68b9      	ldr	r1, [r7, #8]
 800a466:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a468:	f000 f8d9 	bl	800a61e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	1e5a      	subs	r2, r3, #1
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a474:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47c:	d112      	bne.n	800a4a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d016      	beq.n	800a4b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	3310      	adds	r3, #16
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fe56 	bl	800b13c <xTaskRemoveFromEventList>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00e      	beq.n	800a4b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00b      	beq.n	800a4b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e007      	b.n	800a4b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	b25a      	sxtb	r2, r3
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b8:	e001      	b.n	800a4be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f383 8811 	msr	BASEPRI, r3
}
 800a4c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3738      	adds	r7, #56	; 0x38
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <vQueueDelete+0x28>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	60bb      	str	r3, [r7, #8]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 f95f 	bl	800a7c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d102      	bne.n	800a512 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f002 f817 	bl	800c540 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a51a:	b480      	push	{r7}
 800a51c:	b085      	sub	sp, #20
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	2b00      	cmp	r3, #0
 800a528:	d006      	beq.n	800a538 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e001      	b.n	800a53c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a538:	2300      	movs	r3, #0
 800a53a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a53c:	68fb      	ldr	r3, [r7, #12]
	}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b086      	sub	sp, #24
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10d      	bne.n	800a584 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d14d      	bne.n	800a60c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4618      	mov	r0, r3
 800a576:	f001 f825 	bl	800b5c4 <xTaskPriorityDisinherit>
 800a57a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	609a      	str	r2, [r3, #8]
 800a582:	e043      	b.n	800a60c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d119      	bne.n	800a5be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6858      	ldr	r0, [r3, #4]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	461a      	mov	r2, r3
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	f002 f91b 	bl	800c7d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a2:	441a      	add	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d32b      	bcc.n	800a60c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	e026      	b.n	800a60c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68d8      	ldr	r0, [r3, #12]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68b9      	ldr	r1, [r7, #8]
 800a5ca:	f002 f901 	bl	800c7d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	425b      	negs	r3, r3
 800a5d8:	441a      	add	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d207      	bcs.n	800a5fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689a      	ldr	r2, [r3, #8]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	425b      	negs	r3, r3
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d105      	bne.n	800a60c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d002      	beq.n	800a60c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	3b01      	subs	r3, #1
 800a60a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a614:	697b      	ldr	r3, [r7, #20]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d018      	beq.n	800a662 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	441a      	add	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	429a      	cmp	r2, r3
 800a648:	d303      	bcc.n	800a652 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68d9      	ldr	r1, [r3, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	461a      	mov	r2, r3
 800a65c:	6838      	ldr	r0, [r7, #0]
 800a65e:	f002 f8b7 	bl	800c7d0 <memcpy>
	}
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a672:	f001 fd77 	bl	800c164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a67c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a67e:	e011      	b.n	800a6a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	2b00      	cmp	r3, #0
 800a686:	d012      	beq.n	800a6ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3324      	adds	r3, #36	; 0x24
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fd55 	bl	800b13c <xTaskRemoveFromEventList>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a698:	f000 fe2c 	bl	800b2f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dce9      	bgt.n	800a680 <prvUnlockQueue+0x16>
 800a6ac:	e000      	b.n	800a6b0 <prvUnlockQueue+0x46>
					break;
 800a6ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	22ff      	movs	r2, #255	; 0xff
 800a6b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6b8:	f001 fd84 	bl	800c1c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6bc:	f001 fd52 	bl	800c164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6c8:	e011      	b.n	800a6ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d012      	beq.n	800a6f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	3310      	adds	r3, #16
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fd30 	bl	800b13c <xTaskRemoveFromEventList>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6e2:	f000 fe07 	bl	800b2f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dce9      	bgt.n	800a6ca <prvUnlockQueue+0x60>
 800a6f6:	e000      	b.n	800a6fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	22ff      	movs	r2, #255	; 0xff
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a702:	f001 fd5f 	bl	800c1c4 <vPortExitCritical>
}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a716:	f001 fd25 	bl	800c164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a722:	2301      	movs	r3, #1
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	e001      	b.n	800a72c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a72c:	f001 fd4a 	bl	800c1c4 <vPortExitCritical>

	return xReturn;
 800a730:	68fb      	ldr	r3, [r7, #12]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a742:	f001 fd0f 	bl	800c164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	429a      	cmp	r2, r3
 800a750:	d102      	bne.n	800a758 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a752:	2301      	movs	r3, #1
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	e001      	b.n	800a75c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a75c:	f001 fd32 	bl	800c1c4 <vPortExitCritical>

	return xReturn;
 800a760:	68fb      	ldr	r3, [r7, #12]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e014      	b.n	800a7a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a77c:	4a0f      	ldr	r2, [pc, #60]	; (800a7bc <vQueueAddToRegistry+0x50>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a788:	490c      	ldr	r1, [pc, #48]	; (800a7bc <vQueueAddToRegistry+0x50>)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a792:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <vQueueAddToRegistry+0x50>)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	4413      	add	r3, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a79e:	e006      	b.n	800a7ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b07      	cmp	r3, #7
 800a7aa:	d9e7      	bls.n	800a77c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20005848 	.word	0x20005848

0800a7c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	e016      	b.n	800a7fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a7ce:	4a10      	ldr	r2, [pc, #64]	; (800a810 <vQueueUnregisterQueue+0x50>)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d10b      	bne.n	800a7f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a7de:	4a0c      	ldr	r2, [pc, #48]	; (800a810 <vQueueUnregisterQueue+0x50>)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a7e8:	4a09      	ldr	r2, [pc, #36]	; (800a810 <vQueueUnregisterQueue+0x50>)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	4413      	add	r3, r2
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	605a      	str	r2, [r3, #4]
				break;
 800a7f4:	e006      	b.n	800a804 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b07      	cmp	r3, #7
 800a800:	d9e5      	bls.n	800a7ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	20005848 	.word	0x20005848

0800a814 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a824:	f001 fc9e 	bl	800c164 <vPortEnterCritical>
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82e:	b25b      	sxtb	r3, r3
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a834:	d103      	bne.n	800a83e <vQueueWaitForMessageRestricted+0x2a>
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a844:	b25b      	sxtb	r3, r3
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84a:	d103      	bne.n	800a854 <vQueueWaitForMessageRestricted+0x40>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a854:	f001 fcb6 	bl	800c1c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d106      	bne.n	800a86e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	3324      	adds	r3, #36	; 0x24
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fc3b 	bl	800b0e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a86e:	6978      	ldr	r0, [r7, #20]
 800a870:	f7ff fefb 	bl	800a66a <prvUnlockQueue>
	}
 800a874:	bf00      	nop
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08e      	sub	sp, #56	; 0x38
 800a880:	af04      	add	r7, sp, #16
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10a      	bne.n	800a8a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	623b      	str	r3, [r7, #32]
}
 800a8a2:	bf00      	nop
 800a8a4:	e7fe      	b.n	800a8a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	61fb      	str	r3, [r7, #28]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8c2:	235c      	movs	r3, #92	; 0x5c
 800a8c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b5c      	cmp	r3, #92	; 0x5c
 800a8ca:	d00a      	beq.n	800a8e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	61bb      	str	r3, [r7, #24]
}
 800a8de:	bf00      	nop
 800a8e0:	e7fe      	b.n	800a8e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d01e      	beq.n	800a928 <xTaskCreateStatic+0xac>
 800a8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01b      	beq.n	800a928 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a902:	2300      	movs	r3, #0
 800a904:	9303      	str	r3, [sp, #12]
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	9302      	str	r3, [sp, #8]
 800a90a:	f107 0314 	add.w	r3, r7, #20
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f850 	bl	800a9c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a922:	f000 f8dd 	bl	800aae0 <prvAddNewTaskToReadyList>
 800a926:	e001      	b.n	800a92c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a928:	2300      	movs	r3, #0
 800a92a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a92c:	697b      	ldr	r3, [r7, #20]
	}
 800a92e:	4618      	mov	r0, r3
 800a930:	3728      	adds	r7, #40	; 0x28
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a936:	b580      	push	{r7, lr}
 800a938:	b08c      	sub	sp, #48	; 0x30
 800a93a:	af04      	add	r7, sp, #16
 800a93c:	60f8      	str	r0, [r7, #12]
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	603b      	str	r3, [r7, #0]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f001 fd2c 	bl	800c3a8 <pvPortMalloc>
 800a950:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00e      	beq.n	800a976 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a958:	205c      	movs	r0, #92	; 0x5c
 800a95a:	f001 fd25 	bl	800c3a8 <pvPortMalloc>
 800a95e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	631a      	str	r2, [r3, #48]	; 0x30
 800a96c:	e005      	b.n	800a97a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a96e:	6978      	ldr	r0, [r7, #20]
 800a970:	f001 fde6 	bl	800c540 <vPortFree>
 800a974:	e001      	b.n	800a97a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d017      	beq.n	800a9b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a988:	88fa      	ldrh	r2, [r7, #6]
 800a98a:	2300      	movs	r3, #0
 800a98c:	9303      	str	r3, [sp, #12]
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	9302      	str	r3, [sp, #8]
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 f80e 	bl	800a9c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9a4:	69f8      	ldr	r0, [r7, #28]
 800a9a6:	f000 f89b 	bl	800aae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	61bb      	str	r3, [r7, #24]
 800a9ae:	e002      	b.n	800a9b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	21a5      	movs	r1, #165	; 0xa5
 800a9da:	f001 ff07 	bl	800c7ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	f023 0307 	bic.w	r3, r3, #7
 800a9f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f003 0307 	and.w	r3, r3, #7
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	617b      	str	r3, [r7, #20]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01f      	beq.n	800aa5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa1e:	2300      	movs	r3, #0
 800aa20:	61fb      	str	r3, [r7, #28]
 800aa22:	e012      	b.n	800aa4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	4413      	add	r3, r2
 800aa2a:	7819      	ldrb	r1, [r3, #0]
 800aa2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	4413      	add	r3, r2
 800aa32:	3334      	adds	r3, #52	; 0x34
 800aa34:	460a      	mov	r2, r1
 800aa36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d006      	beq.n	800aa52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	3301      	adds	r3, #1
 800aa48:	61fb      	str	r3, [r7, #28]
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	2b0f      	cmp	r3, #15
 800aa4e:	d9e9      	bls.n	800aa24 <prvInitialiseNewTask+0x64>
 800aa50:	e000      	b.n	800aa54 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa5c:	e003      	b.n	800aa66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	2b37      	cmp	r3, #55	; 0x37
 800aa6a:	d901      	bls.n	800aa70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa6c:	2337      	movs	r3, #55	; 0x37
 800aa6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	2200      	movs	r2, #0
 800aa80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	3304      	adds	r3, #4
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fe56 	bl	8009738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	3318      	adds	r3, #24
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fe51 	bl	8009738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaae:	2200      	movs	r2, #0
 800aab0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	68f9      	ldr	r1, [r7, #12]
 800aabe:	69b8      	ldr	r0, [r7, #24]
 800aac0:	f001 fa26 	bl	800bf10 <pxPortInitialiseStack>
 800aac4:	4602      	mov	r2, r0
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aad6:	bf00      	nop
 800aad8:	3720      	adds	r7, #32
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aae8:	f001 fb3c 	bl	800c164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aaec:	4b2d      	ldr	r3, [pc, #180]	; (800aba4 <prvAddNewTaskToReadyList+0xc4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	4a2c      	ldr	r2, [pc, #176]	; (800aba4 <prvAddNewTaskToReadyList+0xc4>)
 800aaf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaf6:	4b2c      	ldr	r3, [pc, #176]	; (800aba8 <prvAddNewTaskToReadyList+0xc8>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d109      	bne.n	800ab12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aafe:	4a2a      	ldr	r2, [pc, #168]	; (800aba8 <prvAddNewTaskToReadyList+0xc8>)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab04:	4b27      	ldr	r3, [pc, #156]	; (800aba4 <prvAddNewTaskToReadyList+0xc4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d110      	bne.n	800ab2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab0c:	f000 fc16 	bl	800b33c <prvInitialiseTaskLists>
 800ab10:	e00d      	b.n	800ab2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab12:	4b26      	ldr	r3, [pc, #152]	; (800abac <prvAddNewTaskToReadyList+0xcc>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d109      	bne.n	800ab2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab1a:	4b23      	ldr	r3, [pc, #140]	; (800aba8 <prvAddNewTaskToReadyList+0xc8>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d802      	bhi.n	800ab2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab28:	4a1f      	ldr	r2, [pc, #124]	; (800aba8 <prvAddNewTaskToReadyList+0xc8>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab2e:	4b20      	ldr	r3, [pc, #128]	; (800abb0 <prvAddNewTaskToReadyList+0xd0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	4a1e      	ldr	r2, [pc, #120]	; (800abb0 <prvAddNewTaskToReadyList+0xd0>)
 800ab36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab38:	4b1d      	ldr	r3, [pc, #116]	; (800abb0 <prvAddNewTaskToReadyList+0xd0>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab44:	4b1b      	ldr	r3, [pc, #108]	; (800abb4 <prvAddNewTaskToReadyList+0xd4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d903      	bls.n	800ab54 <prvAddNewTaskToReadyList+0x74>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab50:	4a18      	ldr	r2, [pc, #96]	; (800abb4 <prvAddNewTaskToReadyList+0xd4>)
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab58:	4613      	mov	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4a15      	ldr	r2, [pc, #84]	; (800abb8 <prvAddNewTaskToReadyList+0xd8>)
 800ab62:	441a      	add	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3304      	adds	r3, #4
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	f7fe fdf1 	bl	8009752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab70:	f001 fb28 	bl	800c1c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab74:	4b0d      	ldr	r3, [pc, #52]	; (800abac <prvAddNewTaskToReadyList+0xcc>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00e      	beq.n	800ab9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab7c:	4b0a      	ldr	r3, [pc, #40]	; (800aba8 <prvAddNewTaskToReadyList+0xc8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d207      	bcs.n	800ab9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab8a:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <prvAddNewTaskToReadyList+0xdc>)
 800ab8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000efc 	.word	0x20000efc
 800aba8:	20000a28 	.word	0x20000a28
 800abac:	20000f08 	.word	0x20000f08
 800abb0:	20000f18 	.word	0x20000f18
 800abb4:	20000f04 	.word	0x20000f04
 800abb8:	20000a2c 	.word	0x20000a2c
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d017      	beq.n	800ac02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <vTaskDelay+0x60>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00a      	beq.n	800abf0 <vTaskDelay+0x30>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	60bb      	str	r3, [r7, #8]
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abf0:	f000 f880 	bl	800acf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abf4:	2100      	movs	r1, #0
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fde8 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abfc:	f000 f888 	bl	800ad10 <xTaskResumeAll>
 800ac00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d107      	bne.n	800ac18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac08:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <vTaskDelay+0x64>)
 800ac0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0e:	601a      	str	r2, [r3, #0]
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac18:	bf00      	nop
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20000f24 	.word	0x20000f24
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08a      	sub	sp, #40	; 0x28
 800ac2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac36:	463a      	mov	r2, r7
 800ac38:	1d39      	adds	r1, r7, #4
 800ac3a:	f107 0308 	add.w	r3, r7, #8
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fd26 	bl	8009690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	9202      	str	r2, [sp, #8]
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	2300      	movs	r3, #0
 800ac54:	460a      	mov	r2, r1
 800ac56:	4921      	ldr	r1, [pc, #132]	; (800acdc <vTaskStartScheduler+0xb4>)
 800ac58:	4821      	ldr	r0, [pc, #132]	; (800ace0 <vTaskStartScheduler+0xb8>)
 800ac5a:	f7ff fe0f 	bl	800a87c <xTaskCreateStatic>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4a20      	ldr	r2, [pc, #128]	; (800ace4 <vTaskStartScheduler+0xbc>)
 800ac62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac64:	4b1f      	ldr	r3, [pc, #124]	; (800ace4 <vTaskStartScheduler+0xbc>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	e001      	b.n	800ac76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d102      	bne.n	800ac82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac7c:	f000 fdfa 	bl	800b874 <xTimerCreateTimerTask>
 800ac80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d116      	bne.n	800acb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	613b      	str	r3, [r7, #16]
}
 800ac9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac9c:	4b12      	ldr	r3, [pc, #72]	; (800ace8 <vTaskStartScheduler+0xc0>)
 800ac9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aca2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aca4:	4b11      	ldr	r3, [pc, #68]	; (800acec <vTaskStartScheduler+0xc4>)
 800aca6:	2201      	movs	r2, #1
 800aca8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acaa:	4b11      	ldr	r3, [pc, #68]	; (800acf0 <vTaskStartScheduler+0xc8>)
 800acac:	2200      	movs	r2, #0
 800acae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acb0:	f001 f9b6 	bl	800c020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acb4:	e00e      	b.n	800acd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbc:	d10a      	bne.n	800acd4 <vTaskStartScheduler+0xac>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	60fb      	str	r3, [r7, #12]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <vTaskStartScheduler+0xaa>
}
 800acd4:	bf00      	nop
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	08011a9c 	.word	0x08011a9c
 800ace0:	0800b30d 	.word	0x0800b30d
 800ace4:	20000f20 	.word	0x20000f20
 800ace8:	20000f1c 	.word	0x20000f1c
 800acec:	20000f08 	.word	0x20000f08
 800acf0:	20000f00 	.word	0x20000f00

0800acf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acf4:	b480      	push	{r7}
 800acf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <vTaskSuspendAll+0x18>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3301      	adds	r3, #1
 800acfe:	4a03      	ldr	r2, [pc, #12]	; (800ad0c <vTaskSuspendAll+0x18>)
 800ad00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad02:	bf00      	nop
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	20000f24 	.word	0x20000f24

0800ad10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad1e:	4b42      	ldr	r3, [pc, #264]	; (800ae28 <xTaskResumeAll+0x118>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10a      	bne.n	800ad3c <xTaskResumeAll+0x2c>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	603b      	str	r3, [r7, #0]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad3c:	f001 fa12 	bl	800c164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad40:	4b39      	ldr	r3, [pc, #228]	; (800ae28 <xTaskResumeAll+0x118>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	4a38      	ldr	r2, [pc, #224]	; (800ae28 <xTaskResumeAll+0x118>)
 800ad48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad4a:	4b37      	ldr	r3, [pc, #220]	; (800ae28 <xTaskResumeAll+0x118>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d162      	bne.n	800ae18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad52:	4b36      	ldr	r3, [pc, #216]	; (800ae2c <xTaskResumeAll+0x11c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d05e      	beq.n	800ae18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad5a:	e02f      	b.n	800adbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad5c:	4b34      	ldr	r3, [pc, #208]	; (800ae30 <xTaskResumeAll+0x120>)
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3318      	adds	r3, #24
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe fd4f 	bl	800980c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3304      	adds	r3, #4
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fd4a 	bl	800980c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	4b2d      	ldr	r3, [pc, #180]	; (800ae34 <xTaskResumeAll+0x124>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d903      	bls.n	800ad8c <xTaskResumeAll+0x7c>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad88:	4a2a      	ldr	r2, [pc, #168]	; (800ae34 <xTaskResumeAll+0x124>)
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4a27      	ldr	r2, [pc, #156]	; (800ae38 <xTaskResumeAll+0x128>)
 800ad9a:	441a      	add	r2, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4619      	mov	r1, r3
 800ada2:	4610      	mov	r0, r2
 800ada4:	f7fe fcd5 	bl	8009752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adac:	4b23      	ldr	r3, [pc, #140]	; (800ae3c <xTaskResumeAll+0x12c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d302      	bcc.n	800adbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800adb6:	4b22      	ldr	r3, [pc, #136]	; (800ae40 <xTaskResumeAll+0x130>)
 800adb8:	2201      	movs	r2, #1
 800adba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adbc:	4b1c      	ldr	r3, [pc, #112]	; (800ae30 <xTaskResumeAll+0x120>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1cb      	bne.n	800ad5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adca:	f000 fb55 	bl	800b478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800adce:	4b1d      	ldr	r3, [pc, #116]	; (800ae44 <xTaskResumeAll+0x134>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d010      	beq.n	800adfc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adda:	f000 f847 	bl	800ae6c <xTaskIncrementTick>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ade4:	4b16      	ldr	r3, [pc, #88]	; (800ae40 <xTaskResumeAll+0x130>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3b01      	subs	r3, #1
 800adee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1f1      	bne.n	800adda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800adf6:	4b13      	ldr	r3, [pc, #76]	; (800ae44 <xTaskResumeAll+0x134>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800adfc:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <xTaskResumeAll+0x130>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d009      	beq.n	800ae18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae08:	4b0f      	ldr	r3, [pc, #60]	; (800ae48 <xTaskResumeAll+0x138>)
 800ae0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae18:	f001 f9d4 	bl	800c1c4 <vPortExitCritical>

	return xAlreadyYielded;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20000f24 	.word	0x20000f24
 800ae2c:	20000efc 	.word	0x20000efc
 800ae30:	20000ebc 	.word	0x20000ebc
 800ae34:	20000f04 	.word	0x20000f04
 800ae38:	20000a2c 	.word	0x20000a2c
 800ae3c:	20000a28 	.word	0x20000a28
 800ae40:	20000f10 	.word	0x20000f10
 800ae44:	20000f0c 	.word	0x20000f0c
 800ae48:	e000ed04 	.word	0xe000ed04

0800ae4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <xTaskGetTickCount+0x1c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae58:	687b      	ldr	r3, [r7, #4]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20000f00 	.word	0x20000f00

0800ae6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae72:	2300      	movs	r3, #0
 800ae74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae76:	4b4f      	ldr	r3, [pc, #316]	; (800afb4 <xTaskIncrementTick+0x148>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f040 808f 	bne.w	800af9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae80:	4b4d      	ldr	r3, [pc, #308]	; (800afb8 <xTaskIncrementTick+0x14c>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3301      	adds	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae88:	4a4b      	ldr	r2, [pc, #300]	; (800afb8 <xTaskIncrementTick+0x14c>)
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d120      	bne.n	800aed6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae94:	4b49      	ldr	r3, [pc, #292]	; (800afbc <xTaskIncrementTick+0x150>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	603b      	str	r3, [r7, #0]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <xTaskIncrementTick+0x46>
 800aeb4:	4b41      	ldr	r3, [pc, #260]	; (800afbc <xTaskIncrementTick+0x150>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	4b41      	ldr	r3, [pc, #260]	; (800afc0 <xTaskIncrementTick+0x154>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a3f      	ldr	r2, [pc, #252]	; (800afbc <xTaskIncrementTick+0x150>)
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	4a3f      	ldr	r2, [pc, #252]	; (800afc0 <xTaskIncrementTick+0x154>)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	4b3e      	ldr	r3, [pc, #248]	; (800afc4 <xTaskIncrementTick+0x158>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3301      	adds	r3, #1
 800aece:	4a3d      	ldr	r2, [pc, #244]	; (800afc4 <xTaskIncrementTick+0x158>)
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	f000 fad1 	bl	800b478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aed6:	4b3c      	ldr	r3, [pc, #240]	; (800afc8 <xTaskIncrementTick+0x15c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d349      	bcc.n	800af74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee0:	4b36      	ldr	r3, [pc, #216]	; (800afbc <xTaskIncrementTick+0x150>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d104      	bne.n	800aef4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeea:	4b37      	ldr	r3, [pc, #220]	; (800afc8 <xTaskIncrementTick+0x15c>)
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295
 800aef0:	601a      	str	r2, [r3, #0]
					break;
 800aef2:	e03f      	b.n	800af74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef4:	4b31      	ldr	r3, [pc, #196]	; (800afbc <xTaskIncrementTick+0x150>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d203      	bcs.n	800af14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af0c:	4a2e      	ldr	r2, [pc, #184]	; (800afc8 <xTaskIncrementTick+0x15c>)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af12:	e02f      	b.n	800af74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3304      	adds	r3, #4
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fe fc77 	bl	800980c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	3318      	adds	r3, #24
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fc6e 	bl	800980c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af34:	4b25      	ldr	r3, [pc, #148]	; (800afcc <xTaskIncrementTick+0x160>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d903      	bls.n	800af44 <xTaskIncrementTick+0xd8>
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	4a22      	ldr	r2, [pc, #136]	; (800afcc <xTaskIncrementTick+0x160>)
 800af42:	6013      	str	r3, [r2, #0]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4a1f      	ldr	r2, [pc, #124]	; (800afd0 <xTaskIncrementTick+0x164>)
 800af52:	441a      	add	r2, r3
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	3304      	adds	r3, #4
 800af58:	4619      	mov	r1, r3
 800af5a:	4610      	mov	r0, r2
 800af5c:	f7fe fbf9 	bl	8009752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af64:	4b1b      	ldr	r3, [pc, #108]	; (800afd4 <xTaskIncrementTick+0x168>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d3b8      	bcc.n	800aee0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af6e:	2301      	movs	r3, #1
 800af70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af72:	e7b5      	b.n	800aee0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af74:	4b17      	ldr	r3, [pc, #92]	; (800afd4 <xTaskIncrementTick+0x168>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7a:	4915      	ldr	r1, [pc, #84]	; (800afd0 <xTaskIncrementTick+0x164>)
 800af7c:	4613      	mov	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d901      	bls.n	800af90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af8c:	2301      	movs	r3, #1
 800af8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af90:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <xTaskIncrementTick+0x16c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af98:	2301      	movs	r3, #1
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	e004      	b.n	800afa8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af9e:	4b0f      	ldr	r3, [pc, #60]	; (800afdc <xTaskIncrementTick+0x170>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3301      	adds	r3, #1
 800afa4:	4a0d      	ldr	r2, [pc, #52]	; (800afdc <xTaskIncrementTick+0x170>)
 800afa6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800afa8:	697b      	ldr	r3, [r7, #20]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000f24 	.word	0x20000f24
 800afb8:	20000f00 	.word	0x20000f00
 800afbc:	20000eb4 	.word	0x20000eb4
 800afc0:	20000eb8 	.word	0x20000eb8
 800afc4:	20000f14 	.word	0x20000f14
 800afc8:	20000f1c 	.word	0x20000f1c
 800afcc:	20000f04 	.word	0x20000f04
 800afd0:	20000a2c 	.word	0x20000a2c
 800afd4:	20000a28 	.word	0x20000a28
 800afd8:	20000f10 	.word	0x20000f10
 800afdc:	20000f0c 	.word	0x20000f0c

0800afe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afe6:	4b28      	ldr	r3, [pc, #160]	; (800b088 <vTaskSwitchContext+0xa8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afee:	4b27      	ldr	r3, [pc, #156]	; (800b08c <vTaskSwitchContext+0xac>)
 800aff0:	2201      	movs	r2, #1
 800aff2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aff4:	e041      	b.n	800b07a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800aff6:	4b25      	ldr	r3, [pc, #148]	; (800b08c <vTaskSwitchContext+0xac>)
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800affc:	4b24      	ldr	r3, [pc, #144]	; (800b090 <vTaskSwitchContext+0xb0>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	e010      	b.n	800b026 <vTaskSwitchContext+0x46>
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10a      	bne.n	800b020 <vTaskSwitchContext+0x40>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	607b      	str	r3, [r7, #4]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <vTaskSwitchContext+0x3e>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3b01      	subs	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	491b      	ldr	r1, [pc, #108]	; (800b094 <vTaskSwitchContext+0xb4>)
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	440b      	add	r3, r1
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0e4      	beq.n	800b004 <vTaskSwitchContext+0x24>
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	4613      	mov	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4a13      	ldr	r2, [pc, #76]	; (800b094 <vTaskSwitchContext+0xb4>)
 800b046:	4413      	add	r3, r2
 800b048:	60bb      	str	r3, [r7, #8]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	605a      	str	r2, [r3, #4]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3308      	adds	r3, #8
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d104      	bne.n	800b06a <vTaskSwitchContext+0x8a>
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	605a      	str	r2, [r3, #4]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	4a09      	ldr	r2, [pc, #36]	; (800b098 <vTaskSwitchContext+0xb8>)
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	4a06      	ldr	r2, [pc, #24]	; (800b090 <vTaskSwitchContext+0xb0>)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6013      	str	r3, [r2, #0]
}
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	20000f24 	.word	0x20000f24
 800b08c:	20000f10 	.word	0x20000f10
 800b090:	20000f04 	.word	0x20000f04
 800b094:	20000a2c 	.word	0x20000a2c
 800b098:	20000a28 	.word	0x20000a28

0800b09c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10a      	bne.n	800b0c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	60fb      	str	r3, [r7, #12]
}
 800b0be:	bf00      	nop
 800b0c0:	e7fe      	b.n	800b0c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0c2:	4b07      	ldr	r3, [pc, #28]	; (800b0e0 <vTaskPlaceOnEventList+0x44>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3318      	adds	r3, #24
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7fe fb65 	bl	800979a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0d0:	2101      	movs	r1, #1
 800b0d2:	6838      	ldr	r0, [r7, #0]
 800b0d4:	f000 fb7a 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
}
 800b0d8:	bf00      	nop
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20000a28 	.word	0x20000a28

0800b0e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	617b      	str	r3, [r7, #20]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b10c:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <vTaskPlaceOnEventListRestricted+0x54>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3318      	adds	r3, #24
 800b112:	4619      	mov	r1, r3
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7fe fb1c 	bl	8009752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b120:	f04f 33ff 	mov.w	r3, #4294967295
 800b124:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	68b8      	ldr	r0, [r7, #8]
 800b12a:	f000 fb4f 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
	}
 800b12e:	bf00      	nop
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000a28 	.word	0x20000a28

0800b13c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60fb      	str	r3, [r7, #12]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	3318      	adds	r3, #24
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fe fb4d 	bl	800980c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b172:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <xTaskRemoveFromEventList+0xb0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d11d      	bne.n	800b1b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	3304      	adds	r3, #4
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fb44 	bl	800980c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b188:	4b19      	ldr	r3, [pc, #100]	; (800b1f0 <xTaskRemoveFromEventList+0xb4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d903      	bls.n	800b198 <xTaskRemoveFromEventList+0x5c>
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	4a16      	ldr	r2, [pc, #88]	; (800b1f0 <xTaskRemoveFromEventList+0xb4>)
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4a13      	ldr	r2, [pc, #76]	; (800b1f4 <xTaskRemoveFromEventList+0xb8>)
 800b1a6:	441a      	add	r2, r3
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7fe facf 	bl	8009752 <vListInsertEnd>
 800b1b4:	e005      	b.n	800b1c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	3318      	adds	r3, #24
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	480e      	ldr	r0, [pc, #56]	; (800b1f8 <xTaskRemoveFromEventList+0xbc>)
 800b1be:	f7fe fac8 	bl	8009752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <xTaskRemoveFromEventList+0xc0>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d905      	bls.n	800b1dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1d4:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <xTaskRemoveFromEventList+0xc4>)
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	e001      	b.n	800b1e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1e0:	697b      	ldr	r3, [r7, #20]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20000f24 	.word	0x20000f24
 800b1f0:	20000f04 	.word	0x20000f04
 800b1f4:	20000a2c 	.word	0x20000a2c
 800b1f8:	20000ebc 	.word	0x20000ebc
 800b1fc:	20000a28 	.word	0x20000a28
 800b200:	20000f10 	.word	0x20000f10

0800b204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b20c:	4b06      	ldr	r3, [pc, #24]	; (800b228 <vTaskInternalSetTimeOutState+0x24>)
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b214:	4b05      	ldr	r3, [pc, #20]	; (800b22c <vTaskInternalSetTimeOutState+0x28>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	605a      	str	r2, [r3, #4]
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	20000f14 	.word	0x20000f14
 800b22c:	20000f00 	.word	0x20000f00

0800b230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10a      	bne.n	800b256 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	613b      	str	r3, [r7, #16]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	60fb      	str	r3, [r7, #12]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b272:	f000 ff77 	bl	800c164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b276:	4b1d      	ldr	r3, [pc, #116]	; (800b2ec <xTaskCheckForTimeOut+0xbc>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28e:	d102      	bne.n	800b296 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]
 800b294:	e023      	b.n	800b2de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	4b15      	ldr	r3, [pc, #84]	; (800b2f0 <xTaskCheckForTimeOut+0xc0>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d007      	beq.n	800b2b2 <xTaskCheckForTimeOut+0x82>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	69ba      	ldr	r2, [r7, #24]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d302      	bcc.n	800b2b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	61fb      	str	r3, [r7, #28]
 800b2b0:	e015      	b.n	800b2de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d20b      	bcs.n	800b2d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	1ad2      	subs	r2, r2, r3
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff ff9b 	bl	800b204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	61fb      	str	r3, [r7, #28]
 800b2d2:	e004      	b.n	800b2de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2de:	f000 ff71 	bl	800c1c4 <vPortExitCritical>

	return xReturn;
 800b2e2:	69fb      	ldr	r3, [r7, #28]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3720      	adds	r7, #32
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	20000f00 	.word	0x20000f00
 800b2f0:	20000f14 	.word	0x20000f14

0800b2f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2f8:	4b03      	ldr	r3, [pc, #12]	; (800b308 <vTaskMissedYield+0x14>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
}
 800b2fe:	bf00      	nop
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	20000f10 	.word	0x20000f10

0800b30c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b314:	f000 f852 	bl	800b3bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b318:	4b06      	ldr	r3, [pc, #24]	; (800b334 <prvIdleTask+0x28>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d9f9      	bls.n	800b314 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b320:	4b05      	ldr	r3, [pc, #20]	; (800b338 <prvIdleTask+0x2c>)
 800b322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b330:	e7f0      	b.n	800b314 <prvIdleTask+0x8>
 800b332:	bf00      	nop
 800b334:	20000a2c 	.word	0x20000a2c
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b342:	2300      	movs	r3, #0
 800b344:	607b      	str	r3, [r7, #4]
 800b346:	e00c      	b.n	800b362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4a12      	ldr	r2, [pc, #72]	; (800b39c <prvInitialiseTaskLists+0x60>)
 800b354:	4413      	add	r3, r2
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe f9ce 	bl	80096f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3301      	adds	r3, #1
 800b360:	607b      	str	r3, [r7, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b37      	cmp	r3, #55	; 0x37
 800b366:	d9ef      	bls.n	800b348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b368:	480d      	ldr	r0, [pc, #52]	; (800b3a0 <prvInitialiseTaskLists+0x64>)
 800b36a:	f7fe f9c5 	bl	80096f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b36e:	480d      	ldr	r0, [pc, #52]	; (800b3a4 <prvInitialiseTaskLists+0x68>)
 800b370:	f7fe f9c2 	bl	80096f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b374:	480c      	ldr	r0, [pc, #48]	; (800b3a8 <prvInitialiseTaskLists+0x6c>)
 800b376:	f7fe f9bf 	bl	80096f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b37a:	480c      	ldr	r0, [pc, #48]	; (800b3ac <prvInitialiseTaskLists+0x70>)
 800b37c:	f7fe f9bc 	bl	80096f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b380:	480b      	ldr	r0, [pc, #44]	; (800b3b0 <prvInitialiseTaskLists+0x74>)
 800b382:	f7fe f9b9 	bl	80096f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b386:	4b0b      	ldr	r3, [pc, #44]	; (800b3b4 <prvInitialiseTaskLists+0x78>)
 800b388:	4a05      	ldr	r2, [pc, #20]	; (800b3a0 <prvInitialiseTaskLists+0x64>)
 800b38a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b38c:	4b0a      	ldr	r3, [pc, #40]	; (800b3b8 <prvInitialiseTaskLists+0x7c>)
 800b38e:	4a05      	ldr	r2, [pc, #20]	; (800b3a4 <prvInitialiseTaskLists+0x68>)
 800b390:	601a      	str	r2, [r3, #0]
}
 800b392:	bf00      	nop
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20000a2c 	.word	0x20000a2c
 800b3a0:	20000e8c 	.word	0x20000e8c
 800b3a4:	20000ea0 	.word	0x20000ea0
 800b3a8:	20000ebc 	.word	0x20000ebc
 800b3ac:	20000ed0 	.word	0x20000ed0
 800b3b0:	20000ee8 	.word	0x20000ee8
 800b3b4:	20000eb4 	.word	0x20000eb4
 800b3b8:	20000eb8 	.word	0x20000eb8

0800b3bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3c2:	e019      	b.n	800b3f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3c4:	f000 fece 	bl	800c164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3c8:	4b10      	ldr	r3, [pc, #64]	; (800b40c <prvCheckTasksWaitingTermination+0x50>)
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe fa19 	bl	800980c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3da:	4b0d      	ldr	r3, [pc, #52]	; (800b410 <prvCheckTasksWaitingTermination+0x54>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	4a0b      	ldr	r2, [pc, #44]	; (800b410 <prvCheckTasksWaitingTermination+0x54>)
 800b3e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3e4:	4b0b      	ldr	r3, [pc, #44]	; (800b414 <prvCheckTasksWaitingTermination+0x58>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	4a0a      	ldr	r2, [pc, #40]	; (800b414 <prvCheckTasksWaitingTermination+0x58>)
 800b3ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3ee:	f000 fee9 	bl	800c1c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f810 	bl	800b418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3f8:	4b06      	ldr	r3, [pc, #24]	; (800b414 <prvCheckTasksWaitingTermination+0x58>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e1      	bne.n	800b3c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b400:	bf00      	nop
 800b402:	bf00      	nop
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20000ed0 	.word	0x20000ed0
 800b410:	20000efc 	.word	0x20000efc
 800b414:	20000ee4 	.word	0x20000ee4

0800b418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b426:	2b00      	cmp	r3, #0
 800b428:	d108      	bne.n	800b43c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42e:	4618      	mov	r0, r3
 800b430:	f001 f886 	bl	800c540 <vPortFree>
				vPortFree( pxTCB );
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f001 f883 	bl	800c540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b43a:	e018      	b.n	800b46e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b442:	2b01      	cmp	r3, #1
 800b444:	d103      	bne.n	800b44e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 f87a 	bl	800c540 <vPortFree>
	}
 800b44c:	e00f      	b.n	800b46e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b454:	2b02      	cmp	r3, #2
 800b456:	d00a      	beq.n	800b46e <prvDeleteTCB+0x56>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	60fb      	str	r3, [r7, #12]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <prvDeleteTCB+0x54>
	}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
	...

0800b478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b47e:	4b0c      	ldr	r3, [pc, #48]	; (800b4b0 <prvResetNextTaskUnblockTime+0x38>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d104      	bne.n	800b492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b488:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b48a:	f04f 32ff 	mov.w	r2, #4294967295
 800b48e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b490:	e008      	b.n	800b4a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b492:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <prvResetNextTaskUnblockTime+0x38>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	4a04      	ldr	r2, [pc, #16]	; (800b4b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b4a2:	6013      	str	r3, [r2, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	20000eb4 	.word	0x20000eb4
 800b4b4:	20000f1c 	.word	0x20000f1c

0800b4b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4be:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <xTaskGetSchedulerState+0x34>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d102      	bne.n	800b4cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	607b      	str	r3, [r7, #4]
 800b4ca:	e008      	b.n	800b4de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4cc:	4b08      	ldr	r3, [pc, #32]	; (800b4f0 <xTaskGetSchedulerState+0x38>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d102      	bne.n	800b4da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	607b      	str	r3, [r7, #4]
 800b4d8:	e001      	b.n	800b4de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4de:	687b      	ldr	r3, [r7, #4]
	}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	20000f08 	.word	0x20000f08
 800b4f0:	20000f24 	.word	0x20000f24

0800b4f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b500:	2300      	movs	r3, #0
 800b502:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d051      	beq.n	800b5ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50e:	4b2a      	ldr	r3, [pc, #168]	; (800b5b8 <xTaskPriorityInherit+0xc4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b514:	429a      	cmp	r2, r3
 800b516:	d241      	bcs.n	800b59c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	db06      	blt.n	800b52e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b520:	4b25      	ldr	r3, [pc, #148]	; (800b5b8 <xTaskPriorityInherit+0xc4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6959      	ldr	r1, [r3, #20]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4a1f      	ldr	r2, [pc, #124]	; (800b5bc <xTaskPriorityInherit+0xc8>)
 800b540:	4413      	add	r3, r2
 800b542:	4299      	cmp	r1, r3
 800b544:	d122      	bne.n	800b58c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	3304      	adds	r3, #4
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe f95e 	bl	800980c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b550:	4b19      	ldr	r3, [pc, #100]	; (800b5b8 <xTaskPriorityInherit+0xc4>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55e:	4b18      	ldr	r3, [pc, #96]	; (800b5c0 <xTaskPriorityInherit+0xcc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d903      	bls.n	800b56e <xTaskPriorityInherit+0x7a>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56a:	4a15      	ldr	r2, [pc, #84]	; (800b5c0 <xTaskPriorityInherit+0xcc>)
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4a10      	ldr	r2, [pc, #64]	; (800b5bc <xTaskPriorityInherit+0xc8>)
 800b57c:	441a      	add	r2, r3
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	3304      	adds	r3, #4
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f7fe f8e4 	bl	8009752 <vListInsertEnd>
 800b58a:	e004      	b.n	800b596 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <xTaskPriorityInherit+0xc4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b596:	2301      	movs	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e008      	b.n	800b5ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <xTaskPriorityInherit+0xc4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d201      	bcs.n	800b5ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
	}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20000a28 	.word	0x20000a28
 800b5bc:	20000a2c 	.word	0x20000a2c
 800b5c0:	20000f04 	.word	0x20000f04

0800b5c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d056      	beq.n	800b688 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5da:	4b2e      	ldr	r3, [pc, #184]	; (800b694 <xTaskPriorityDisinherit+0xd0>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	693a      	ldr	r2, [r7, #16]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d00a      	beq.n	800b5fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	60fb      	str	r3, [r7, #12]
}
 800b5f6:	bf00      	nop
 800b5f8:	e7fe      	b.n	800b5f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10a      	bne.n	800b618 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	60bb      	str	r3, [r7, #8]
}
 800b614:	bf00      	nop
 800b616:	e7fe      	b.n	800b616 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b61c:	1e5a      	subs	r2, r3, #1
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d02c      	beq.n	800b688 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b632:	2b00      	cmp	r3, #0
 800b634:	d128      	bne.n	800b688 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	3304      	adds	r3, #4
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe f8e6 	bl	800980c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b658:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <xTaskPriorityDisinherit+0xd4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d903      	bls.n	800b668 <xTaskPriorityDisinherit+0xa4>
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b664:	4a0c      	ldr	r2, [pc, #48]	; (800b698 <xTaskPriorityDisinherit+0xd4>)
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4a09      	ldr	r2, [pc, #36]	; (800b69c <xTaskPriorityDisinherit+0xd8>)
 800b676:	441a      	add	r2, r3
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	3304      	adds	r3, #4
 800b67c:	4619      	mov	r1, r3
 800b67e:	4610      	mov	r0, r2
 800b680:	f7fe f867 	bl	8009752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b684:	2301      	movs	r3, #1
 800b686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b688:	697b      	ldr	r3, [r7, #20]
	}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20000a28 	.word	0x20000a28
 800b698:	20000f04 	.word	0x20000f04
 800b69c:	20000a2c 	.word	0x20000a2c

0800b6a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d06a      	beq.n	800b78e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10a      	bne.n	800b6d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	60fb      	str	r3, [r7, #12]
}
 800b6d2:	bf00      	nop
 800b6d4:	e7fe      	b.n	800b6d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d902      	bls.n	800b6e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	e002      	b.n	800b6ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	69fa      	ldr	r2, [r7, #28]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d04b      	beq.n	800b78e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d146      	bne.n	800b78e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b700:	4b25      	ldr	r3, [pc, #148]	; (800b798 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	429a      	cmp	r2, r3
 800b708:	d10a      	bne.n	800b720 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	60bb      	str	r3, [r7, #8]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b724:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	69fa      	ldr	r2, [r7, #28]
 800b72a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	2b00      	cmp	r3, #0
 800b732:	db04      	blt.n	800b73e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	6959      	ldr	r1, [r3, #20]
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4a13      	ldr	r2, [pc, #76]	; (800b79c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b74e:	4413      	add	r3, r2
 800b750:	4299      	cmp	r1, r3
 800b752:	d11c      	bne.n	800b78e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	3304      	adds	r3, #4
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe f857 	bl	800980c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b762:	4b0f      	ldr	r3, [pc, #60]	; (800b7a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d903      	bls.n	800b772 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76e:	4a0c      	ldr	r2, [pc, #48]	; (800b7a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b770:	6013      	str	r3, [r2, #0]
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b776:	4613      	mov	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4a07      	ldr	r2, [pc, #28]	; (800b79c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b780:	441a      	add	r2, r3
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	3304      	adds	r3, #4
 800b786:	4619      	mov	r1, r3
 800b788:	4610      	mov	r0, r2
 800b78a:	f7fd ffe2 	bl	8009752 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b78e:	bf00      	nop
 800b790:	3720      	adds	r7, #32
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20000a28 	.word	0x20000a28
 800b79c:	20000a2c 	.word	0x20000a2c
 800b7a0:	20000f04 	.word	0x20000f04

0800b7a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b7a8:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b7b0:	4b05      	ldr	r3, [pc, #20]	; (800b7c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7b6:	3201      	adds	r2, #1
 800b7b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b7ba:	4b03      	ldr	r3, [pc, #12]	; (800b7c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
	}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	20000a28 	.word	0x20000a28

0800b7cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7d6:	4b21      	ldr	r3, [pc, #132]	; (800b85c <prvAddCurrentTaskToDelayedList+0x90>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7dc:	4b20      	ldr	r3, [pc, #128]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe f812 	bl	800980c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ee:	d10a      	bne.n	800b806 <prvAddCurrentTaskToDelayedList+0x3a>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d007      	beq.n	800b806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4819      	ldr	r0, [pc, #100]	; (800b864 <prvAddCurrentTaskToDelayedList+0x98>)
 800b800:	f7fd ffa7 	bl	8009752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b804:	e026      	b.n	800b854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4413      	add	r3, r2
 800b80c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b80e:	4b14      	ldr	r3, [pc, #80]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d209      	bcs.n	800b832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b81e:	4b12      	ldr	r3, [pc, #72]	; (800b868 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	4b0f      	ldr	r3, [pc, #60]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3304      	adds	r3, #4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fd ffb5 	bl	800979a <vListInsert>
}
 800b830:	e010      	b.n	800b854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b832:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3304      	adds	r3, #4
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fd ffab 	bl	800979a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d202      	bcs.n	800b854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b84e:	4a08      	ldr	r2, [pc, #32]	; (800b870 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	6013      	str	r3, [r2, #0]
}
 800b854:	bf00      	nop
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20000f00 	.word	0x20000f00
 800b860:	20000a28 	.word	0x20000a28
 800b864:	20000ee8 	.word	0x20000ee8
 800b868:	20000eb8 	.word	0x20000eb8
 800b86c:	20000eb4 	.word	0x20000eb4
 800b870:	20000f1c 	.word	0x20000f1c

0800b874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08a      	sub	sp, #40	; 0x28
 800b878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b87e:	f000 fb07 	bl	800be90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b882:	4b1c      	ldr	r3, [pc, #112]	; (800b8f4 <xTimerCreateTimerTask+0x80>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d021      	beq.n	800b8ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b892:	1d3a      	adds	r2, r7, #4
 800b894:	f107 0108 	add.w	r1, r7, #8
 800b898:	f107 030c 	add.w	r3, r7, #12
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fd ff11 	bl	80096c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	9202      	str	r2, [sp, #8]
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	460a      	mov	r2, r1
 800b8b4:	4910      	ldr	r1, [pc, #64]	; (800b8f8 <xTimerCreateTimerTask+0x84>)
 800b8b6:	4811      	ldr	r0, [pc, #68]	; (800b8fc <xTimerCreateTimerTask+0x88>)
 800b8b8:	f7fe ffe0 	bl	800a87c <xTaskCreateStatic>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	4a10      	ldr	r2, [pc, #64]	; (800b900 <xTimerCreateTimerTask+0x8c>)
 800b8c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8c2:	4b0f      	ldr	r3, [pc, #60]	; (800b900 <xTimerCreateTimerTask+0x8c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	613b      	str	r3, [r7, #16]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20000f58 	.word	0x20000f58
 800b8f8:	08011aa4 	.word	0x08011aa4
 800b8fc:	0800ba39 	.word	0x0800ba39
 800b900:	20000f5c 	.word	0x20000f5c

0800b904 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b912:	2300      	movs	r3, #0
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	623b      	str	r3, [r7, #32]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b932:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <xTimerGenericCommand+0x98>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d02a      	beq.n	800b990 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b05      	cmp	r3, #5
 800b94a:	dc18      	bgt.n	800b97e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b94c:	f7ff fdb4 	bl	800b4b8 <xTaskGetSchedulerState>
 800b950:	4603      	mov	r3, r0
 800b952:	2b02      	cmp	r3, #2
 800b954:	d109      	bne.n	800b96a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <xTimerGenericCommand+0x98>)
 800b958:	6818      	ldr	r0, [r3, #0]
 800b95a:	f107 0110 	add.w	r1, r7, #16
 800b95e:	2300      	movs	r3, #0
 800b960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b962:	f7fe f925 	bl	8009bb0 <xQueueGenericSend>
 800b966:	6278      	str	r0, [r7, #36]	; 0x24
 800b968:	e012      	b.n	800b990 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b96a:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <xTimerGenericCommand+0x98>)
 800b96c:	6818      	ldr	r0, [r3, #0]
 800b96e:	f107 0110 	add.w	r1, r7, #16
 800b972:	2300      	movs	r3, #0
 800b974:	2200      	movs	r2, #0
 800b976:	f7fe f91b 	bl	8009bb0 <xQueueGenericSend>
 800b97a:	6278      	str	r0, [r7, #36]	; 0x24
 800b97c:	e008      	b.n	800b990 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b97e:	4b07      	ldr	r3, [pc, #28]	; (800b99c <xTimerGenericCommand+0x98>)
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f107 0110 	add.w	r1, r7, #16
 800b986:	2300      	movs	r3, #0
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	f7fe fa0f 	bl	8009dac <xQueueGenericSendFromISR>
 800b98e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b992:	4618      	mov	r0, r3
 800b994:	3728      	adds	r7, #40	; 0x28
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20000f58 	.word	0x20000f58

0800b9a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9aa:	4b22      	ldr	r3, [pc, #136]	; (800ba34 <prvProcessExpiredTimer+0x94>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fd ff27 	bl	800980c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d022      	beq.n	800ba12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	699a      	ldr	r2, [r3, #24]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	18d1      	adds	r1, r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f000 f8d1 	bl	800bb80 <prvInsertTimerInActiveList>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01f      	beq.n	800ba24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6978      	ldr	r0, [r7, #20]
 800b9f0:	f7ff ff88 	bl	800b904 <xTimerGenericCommand>
 800b9f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d113      	bne.n	800ba24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60fb      	str	r3, [r7, #12]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba18:	f023 0301 	bic.w	r3, r3, #1
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	6978      	ldr	r0, [r7, #20]
 800ba2a:	4798      	blx	r3
}
 800ba2c:	bf00      	nop
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20000f50 	.word	0x20000f50

0800ba38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba40:	f107 0308 	add.w	r3, r7, #8
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 f857 	bl	800baf8 <prvGetNextExpireTime>
 800ba4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f803 	bl	800ba5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba56:	f000 f8d5 	bl	800bc04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba5a:	e7f1      	b.n	800ba40 <prvTimerTask+0x8>

0800ba5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba66:	f7ff f945 	bl	800acf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba6a:	f107 0308 	add.w	r3, r7, #8
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f866 	bl	800bb40 <prvSampleTimeNow>
 800ba74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d130      	bne.n	800bade <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <prvProcessTimerOrBlockTask+0x3c>
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d806      	bhi.n	800ba98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba8a:	f7ff f941 	bl	800ad10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba8e:	68f9      	ldr	r1, [r7, #12]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff85 	bl	800b9a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba96:	e024      	b.n	800bae2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d008      	beq.n	800bab0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba9e:	4b13      	ldr	r3, [pc, #76]	; (800baec <prvProcessTimerOrBlockTask+0x90>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <prvProcessTimerOrBlockTask+0x50>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e000      	b.n	800baae <prvProcessTimerOrBlockTask+0x52>
 800baac:	2300      	movs	r3, #0
 800baae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bab0:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <prvProcessTimerOrBlockTask+0x94>)
 800bab2:	6818      	ldr	r0, [r3, #0]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	4619      	mov	r1, r3
 800babe:	f7fe fea9 	bl	800a814 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bac2:	f7ff f925 	bl	800ad10 <xTaskResumeAll>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bacc:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <prvProcessTimerOrBlockTask+0x98>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	f3bf 8f6f 	isb	sy
}
 800badc:	e001      	b.n	800bae2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bade:	f7ff f917 	bl	800ad10 <xTaskResumeAll>
}
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20000f54 	.word	0x20000f54
 800baf0:	20000f58 	.word	0x20000f58
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb00:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <prvGetNextExpireTime+0x44>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <prvGetNextExpireTime+0x16>
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	e000      	b.n	800bb10 <prvGetNextExpireTime+0x18>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d105      	bne.n	800bb28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb1c:	4b07      	ldr	r3, [pc, #28]	; (800bb3c <prvGetNextExpireTime+0x44>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	e001      	b.n	800bb2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20000f50 	.word	0x20000f50

0800bb40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb48:	f7ff f980 	bl	800ae4c <xTaskGetTickCount>
 800bb4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb4e:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <prvSampleTimeNow+0x3c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d205      	bcs.n	800bb64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb58:	f000 f936 	bl	800bdc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e002      	b.n	800bb6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb6a:	4a04      	ldr	r2, [pc, #16]	; (800bb7c <prvSampleTimeNow+0x3c>)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb70:	68fb      	ldr	r3, [r7, #12]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20000f60 	.word	0x20000f60

0800bb80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d812      	bhi.n	800bbcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	1ad2      	subs	r2, r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d302      	bcc.n	800bbba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	e01b      	b.n	800bbf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bbba:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <prvInsertTimerInActiveList+0x7c>)
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fd fde8 	bl	800979a <vListInsert>
 800bbca:	e012      	b.n	800bbf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d206      	bcs.n	800bbe2 <prvInsertTimerInActiveList+0x62>
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d302      	bcc.n	800bbe2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]
 800bbe0:	e007      	b.n	800bbf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbe2:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <prvInsertTimerInActiveList+0x80>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f7fd fdd4 	bl	800979a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbf2:	697b      	ldr	r3, [r7, #20]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20000f54 	.word	0x20000f54
 800bc00:	20000f50 	.word	0x20000f50

0800bc04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08e      	sub	sp, #56	; 0x38
 800bc08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc0a:	e0ca      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	da18      	bge.n	800bc44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc12:	1d3b      	adds	r3, r7, #4
 800bc14:	3304      	adds	r3, #4
 800bc16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	61fb      	str	r3, [r7, #28]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3a:	6850      	ldr	r0, [r2, #4]
 800bc3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3e:	6892      	ldr	r2, [r2, #8]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f2c0 80aa 	blt.w	800bda0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d004      	beq.n	800bc62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fd fdd5 	bl	800980c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc62:	463b      	mov	r3, r7
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7ff ff6b 	bl	800bb40 <prvSampleTimeNow>
 800bc6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b09      	cmp	r3, #9
 800bc70:	f200 8097 	bhi.w	800bda2 <prvProcessReceivedCommands+0x19e>
 800bc74:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <prvProcessReceivedCommands+0x78>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bca5 	.word	0x0800bca5
 800bc80:	0800bca5 	.word	0x0800bca5
 800bc84:	0800bca5 	.word	0x0800bca5
 800bc88:	0800bd19 	.word	0x0800bd19
 800bc8c:	0800bd2d 	.word	0x0800bd2d
 800bc90:	0800bd77 	.word	0x0800bd77
 800bc94:	0800bca5 	.word	0x0800bca5
 800bc98:	0800bca5 	.word	0x0800bca5
 800bc9c:	0800bd19 	.word	0x0800bd19
 800bca0:	0800bd2d 	.word	0x0800bd2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcaa:	f043 0301 	orr.w	r3, r3, #1
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	18d1      	adds	r1, r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc4:	f7ff ff5c 	bl	800bb80 <prvInsertTimerInActiveList>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d069      	beq.n	800bda2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	6a1b      	ldr	r3, [r3, #32]
 800bcd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d05e      	beq.n	800bda2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	441a      	add	r2, r3
 800bcec:	2300      	movs	r3, #0
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcf6:	f7ff fe05 	bl	800b904 <xTimerGenericCommand>
 800bcfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d14f      	bne.n	800bda2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	61bb      	str	r3, [r7, #24]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1e:	f023 0301 	bic.w	r3, r3, #1
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd2a:	e03a      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	617b      	str	r3, [r7, #20]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	699a      	ldr	r2, [r3, #24]
 800bd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd68:	18d1      	adds	r1, r2, r3
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd70:	f7ff ff06 	bl	800bb80 <prvInsertTimerInActiveList>
					break;
 800bd74:	e015      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7c:	f003 0302 	and.w	r3, r3, #2
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d103      	bne.n	800bd8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd86:	f000 fbdb 	bl	800c540 <vPortFree>
 800bd8a:	e00a      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd92:	f023 0301 	bic.w	r3, r3, #1
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd9e:	e000      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bda0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bda2:	4b08      	ldr	r3, [pc, #32]	; (800bdc4 <prvProcessReceivedCommands+0x1c0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	1d39      	adds	r1, r7, #4
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe f926 	bl	8009ffc <xQueueReceive>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f47f af2a 	bne.w	800bc0c <prvProcessReceivedCommands+0x8>
	}
}
 800bdb8:	bf00      	nop
 800bdba:	bf00      	nop
 800bdbc:	3730      	adds	r7, #48	; 0x30
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000f58 	.word	0x20000f58

0800bdc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdce:	e048      	b.n	800be62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdd0:	4b2d      	ldr	r3, [pc, #180]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdda:	4b2b      	ldr	r3, [pc, #172]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fd fd0f 	bl	800980c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdfc:	f003 0304 	and.w	r3, r3, #4
 800be00:	2b00      	cmp	r3, #0
 800be02:	d02e      	beq.n	800be62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4413      	add	r3, r2
 800be0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	429a      	cmp	r2, r3
 800be14:	d90e      	bls.n	800be34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be22:	4b19      	ldr	r3, [pc, #100]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3304      	adds	r3, #4
 800be2a:	4619      	mov	r1, r3
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7fd fcb4 	bl	800979a <vListInsert>
 800be32:	e016      	b.n	800be62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be34:	2300      	movs	r3, #0
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	2300      	movs	r3, #0
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	2100      	movs	r1, #0
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff fd60 	bl	800b904 <xTimerGenericCommand>
 800be44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	603b      	str	r3, [r7, #0]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1b1      	bne.n	800bdd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be72:	4b06      	ldr	r3, [pc, #24]	; (800be8c <prvSwitchTimerLists+0xc4>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a04      	ldr	r2, [pc, #16]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be7a:	4a04      	ldr	r2, [pc, #16]	; (800be8c <prvSwitchTimerLists+0xc4>)
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	6013      	str	r3, [r2, #0]
}
 800be80:	bf00      	nop
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20000f50 	.word	0x20000f50
 800be8c:	20000f54 	.word	0x20000f54

0800be90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be96:	f000 f965 	bl	800c164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be9a:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d120      	bne.n	800bee4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bea2:	4814      	ldr	r0, [pc, #80]	; (800bef4 <prvCheckForValidListAndQueue+0x64>)
 800bea4:	f7fd fc28 	bl	80096f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bea8:	4813      	ldr	r0, [pc, #76]	; (800bef8 <prvCheckForValidListAndQueue+0x68>)
 800beaa:	f7fd fc25 	bl	80096f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <prvCheckForValidListAndQueue+0x6c>)
 800beb0:	4a10      	ldr	r2, [pc, #64]	; (800bef4 <prvCheckForValidListAndQueue+0x64>)
 800beb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800beb4:	4b12      	ldr	r3, [pc, #72]	; (800bf00 <prvCheckForValidListAndQueue+0x70>)
 800beb6:	4a10      	ldr	r2, [pc, #64]	; (800bef8 <prvCheckForValidListAndQueue+0x68>)
 800beb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800beba:	2300      	movs	r3, #0
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	4b11      	ldr	r3, [pc, #68]	; (800bf04 <prvCheckForValidListAndQueue+0x74>)
 800bec0:	4a11      	ldr	r2, [pc, #68]	; (800bf08 <prvCheckForValidListAndQueue+0x78>)
 800bec2:	2110      	movs	r1, #16
 800bec4:	200a      	movs	r0, #10
 800bec6:	f7fd fd33 	bl	8009930 <xQueueGenericCreateStatic>
 800beca:	4603      	mov	r3, r0
 800becc:	4a08      	ldr	r2, [pc, #32]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800bece:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bed0:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bed8:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	490b      	ldr	r1, [pc, #44]	; (800bf0c <prvCheckForValidListAndQueue+0x7c>)
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe fc44 	bl	800a76c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bee4:	f000 f96e 	bl	800c1c4 <vPortExitCritical>
}
 800bee8:	bf00      	nop
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20000f58 	.word	0x20000f58
 800bef4:	20000f28 	.word	0x20000f28
 800bef8:	20000f3c 	.word	0x20000f3c
 800befc:	20000f50 	.word	0x20000f50
 800bf00:	20000f54 	.word	0x20000f54
 800bf04:	20001004 	.word	0x20001004
 800bf08:	20000f64 	.word	0x20000f64
 800bf0c:	08011aac 	.word	0x08011aac

0800bf10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	3b04      	subs	r3, #4
 800bf20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f023 0201 	bic.w	r2, r3, #1
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3b04      	subs	r3, #4
 800bf3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf40:	4a0c      	ldr	r2, [pc, #48]	; (800bf74 <pxPortInitialiseStack+0x64>)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3b14      	subs	r3, #20
 800bf4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3b04      	subs	r3, #4
 800bf56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f06f 0202 	mvn.w	r2, #2
 800bf5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	3b20      	subs	r3, #32
 800bf64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf66:	68fb      	ldr	r3, [r7, #12]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	0800bf79 	.word	0x0800bf79

0800bf78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf82:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <prvTaskExitError+0x54>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8a:	d00a      	beq.n	800bfa2 <prvTaskExitError+0x2a>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	60fb      	str	r3, [r7, #12]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <prvTaskExitError+0x28>
	__asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60bb      	str	r3, [r7, #8]
}
 800bfb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfb6:	bf00      	nop
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d0fc      	beq.n	800bfb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	2000002c 	.word	0x2000002c

0800bfd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <pxCurrentTCBConst2>)
 800bfd2:	6819      	ldr	r1, [r3, #0]
 800bfd4:	6808      	ldr	r0, [r1, #0]
 800bfd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	f380 8809 	msr	PSP, r0
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8811 	msr	BASEPRI, r0
 800bfea:	4770      	bx	lr
 800bfec:	f3af 8000 	nop.w

0800bff0 <pxCurrentTCBConst2>:
 800bff0:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop

0800bff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bff8:	4808      	ldr	r0, [pc, #32]	; (800c01c <prvPortStartFirstTask+0x24>)
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	6800      	ldr	r0, [r0, #0]
 800bffe:	f380 8808 	msr	MSP, r0
 800c002:	f04f 0000 	mov.w	r0, #0
 800c006:	f380 8814 	msr	CONTROL, r0
 800c00a:	b662      	cpsie	i
 800c00c:	b661      	cpsie	f
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	df00      	svc	0
 800c018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c01a:	bf00      	nop
 800c01c:	e000ed08 	.word	0xe000ed08

0800c020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c026:	4b46      	ldr	r3, [pc, #280]	; (800c140 <xPortStartScheduler+0x120>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a46      	ldr	r2, [pc, #280]	; (800c144 <xPortStartScheduler+0x124>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d10a      	bne.n	800c046 <xPortStartScheduler+0x26>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	613b      	str	r3, [r7, #16]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c046:	4b3e      	ldr	r3, [pc, #248]	; (800c140 <xPortStartScheduler+0x120>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a3f      	ldr	r2, [pc, #252]	; (800c148 <xPortStartScheduler+0x128>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d10a      	bne.n	800c066 <xPortStartScheduler+0x46>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	60fb      	str	r3, [r7, #12]
}
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c066:	4b39      	ldr	r3, [pc, #228]	; (800c14c <xPortStartScheduler+0x12c>)
 800c068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	4b31      	ldr	r3, [pc, #196]	; (800c150 <xPortStartScheduler+0x130>)
 800c08c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c08e:	4b31      	ldr	r3, [pc, #196]	; (800c154 <xPortStartScheduler+0x134>)
 800c090:	2207      	movs	r2, #7
 800c092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c094:	e009      	b.n	800c0aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c096:	4b2f      	ldr	r3, [pc, #188]	; (800c154 <xPortStartScheduler+0x134>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3b01      	subs	r3, #1
 800c09c:	4a2d      	ldr	r2, [pc, #180]	; (800c154 <xPortStartScheduler+0x134>)
 800c09e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0a0:	78fb      	ldrb	r3, [r7, #3]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b2:	2b80      	cmp	r3, #128	; 0x80
 800c0b4:	d0ef      	beq.n	800c096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0b6:	4b27      	ldr	r3, [pc, #156]	; (800c154 <xPortStartScheduler+0x134>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f1c3 0307 	rsb	r3, r3, #7
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	d00a      	beq.n	800c0d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	60bb      	str	r3, [r7, #8]
}
 800c0d4:	bf00      	nop
 800c0d6:	e7fe      	b.n	800c0d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0d8:	4b1e      	ldr	r3, [pc, #120]	; (800c154 <xPortStartScheduler+0x134>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	021b      	lsls	r3, r3, #8
 800c0de:	4a1d      	ldr	r2, [pc, #116]	; (800c154 <xPortStartScheduler+0x134>)
 800c0e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0e2:	4b1c      	ldr	r3, [pc, #112]	; (800c154 <xPortStartScheduler+0x134>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0ea:	4a1a      	ldr	r2, [pc, #104]	; (800c154 <xPortStartScheduler+0x134>)
 800c0ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0f6:	4b18      	ldr	r3, [pc, #96]	; (800c158 <xPortStartScheduler+0x138>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a17      	ldr	r2, [pc, #92]	; (800c158 <xPortStartScheduler+0x138>)
 800c0fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c102:	4b15      	ldr	r3, [pc, #84]	; (800c158 <xPortStartScheduler+0x138>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a14      	ldr	r2, [pc, #80]	; (800c158 <xPortStartScheduler+0x138>)
 800c108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c10c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c10e:	f000 f8dd 	bl	800c2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c112:	4b12      	ldr	r3, [pc, #72]	; (800c15c <xPortStartScheduler+0x13c>)
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c118:	f000 f8fc 	bl	800c314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c11c:	4b10      	ldr	r3, [pc, #64]	; (800c160 <xPortStartScheduler+0x140>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a0f      	ldr	r2, [pc, #60]	; (800c160 <xPortStartScheduler+0x140>)
 800c122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c128:	f7ff ff66 	bl	800bff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c12c:	f7fe ff58 	bl	800afe0 <vTaskSwitchContext>
	prvTaskExitError();
 800c130:	f7ff ff22 	bl	800bf78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3718      	adds	r7, #24
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	e000ed00 	.word	0xe000ed00
 800c144:	410fc271 	.word	0x410fc271
 800c148:	410fc270 	.word	0x410fc270
 800c14c:	e000e400 	.word	0xe000e400
 800c150:	20001054 	.word	0x20001054
 800c154:	20001058 	.word	0x20001058
 800c158:	e000ed20 	.word	0xe000ed20
 800c15c:	2000002c 	.word	0x2000002c
 800c160:	e000ef34 	.word	0xe000ef34

0800c164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	607b      	str	r3, [r7, #4]
}
 800c17c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c17e:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <vPortEnterCritical+0x58>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3301      	adds	r3, #1
 800c184:	4a0d      	ldr	r2, [pc, #52]	; (800c1bc <vPortEnterCritical+0x58>)
 800c186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c188:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <vPortEnterCritical+0x58>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d10f      	bne.n	800c1b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c190:	4b0b      	ldr	r3, [pc, #44]	; (800c1c0 <vPortEnterCritical+0x5c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	603b      	str	r3, [r7, #0]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <vPortEnterCritical+0x4a>
	}
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	2000002c 	.word	0x2000002c
 800c1c0:	e000ed04 	.word	0xe000ed04

0800c1c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1ca:	4b12      	ldr	r3, [pc, #72]	; (800c214 <vPortExitCritical+0x50>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10a      	bne.n	800c1e8 <vPortExitCritical+0x24>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	607b      	str	r3, [r7, #4]
}
 800c1e4:	bf00      	nop
 800c1e6:	e7fe      	b.n	800c1e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <vPortExitCritical+0x50>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	4a09      	ldr	r2, [pc, #36]	; (800c214 <vPortExitCritical+0x50>)
 800c1f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1f2:	4b08      	ldr	r3, [pc, #32]	; (800c214 <vPortExitCritical+0x50>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d105      	bne.n	800c206 <vPortExitCritical+0x42>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	f383 8811 	msr	BASEPRI, r3
}
 800c204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c206:	bf00      	nop
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	2000002c 	.word	0x2000002c
	...

0800c220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c220:	f3ef 8009 	mrs	r0, PSP
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	4b15      	ldr	r3, [pc, #84]	; (800c280 <pxCurrentTCBConst>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	f01e 0f10 	tst.w	lr, #16
 800c230:	bf08      	it	eq
 800c232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23a:	6010      	str	r0, [r2, #0]
 800c23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c240:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c244:	f380 8811 	msr	BASEPRI, r0
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f7fe fec6 	bl	800afe0 <vTaskSwitchContext>
 800c254:	f04f 0000 	mov.w	r0, #0
 800c258:	f380 8811 	msr	BASEPRI, r0
 800c25c:	bc09      	pop	{r0, r3}
 800c25e:	6819      	ldr	r1, [r3, #0]
 800c260:	6808      	ldr	r0, [r1, #0]
 800c262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c266:	f01e 0f10 	tst.w	lr, #16
 800c26a:	bf08      	it	eq
 800c26c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c270:	f380 8809 	msr	PSP, r0
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	f3af 8000 	nop.w

0800c280 <pxCurrentTCBConst>:
 800c280:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop

0800c288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	607b      	str	r3, [r7, #4]
}
 800c2a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2a2:	f7fe fde3 	bl	800ae6c <xTaskIncrementTick>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d003      	beq.n	800c2b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2ac:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <xPortSysTickHandler+0x40>)
 800c2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	f383 8811 	msr	BASEPRI, r3
}
 800c2be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	e000ed04 	.word	0xe000ed04

0800c2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <vPortSetupTimerInterrupt+0x38>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <vPortSetupTimerInterrupt+0x3c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <vPortSetupTimerInterrupt+0x40>)
 800c2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e6:	099b      	lsrs	r3, r3, #6
 800c2e8:	4a09      	ldr	r2, [pc, #36]	; (800c310 <vPortSetupTimerInterrupt+0x44>)
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ee:	4b04      	ldr	r3, [pc, #16]	; (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2f0:	2207      	movs	r2, #7
 800c2f2:	601a      	str	r2, [r3, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	e000e010 	.word	0xe000e010
 800c304:	e000e018 	.word	0xe000e018
 800c308:	20000008 	.word	0x20000008
 800c30c:	10624dd3 	.word	0x10624dd3
 800c310:	e000e014 	.word	0xe000e014

0800c314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c324 <vPortEnableVFP+0x10>
 800c318:	6801      	ldr	r1, [r0, #0]
 800c31a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c31e:	6001      	str	r1, [r0, #0]
 800c320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c322:	bf00      	nop
 800c324:	e000ed88 	.word	0xe000ed88

0800c328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c32e:	f3ef 8305 	mrs	r3, IPSR
 800c332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b0f      	cmp	r3, #15
 800c338:	d914      	bls.n	800c364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c33a:	4a17      	ldr	r2, [pc, #92]	; (800c398 <vPortValidateInterruptPriority+0x70>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4413      	add	r3, r2
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c344:	4b15      	ldr	r3, [pc, #84]	; (800c39c <vPortValidateInterruptPriority+0x74>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	7afa      	ldrb	r2, [r7, #11]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d20a      	bcs.n	800c364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	607b      	str	r3, [r7, #4]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c364:	4b0e      	ldr	r3, [pc, #56]	; (800c3a0 <vPortValidateInterruptPriority+0x78>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c36c:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <vPortValidateInterruptPriority+0x7c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	d90a      	bls.n	800c38a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	603b      	str	r3, [r7, #0]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <vPortValidateInterruptPriority+0x60>
	}
 800c38a:	bf00      	nop
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	e000e3f0 	.word	0xe000e3f0
 800c39c:	20001054 	.word	0x20001054
 800c3a0:	e000ed0c 	.word	0xe000ed0c
 800c3a4:	20001058 	.word	0x20001058

0800c3a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08a      	sub	sp, #40	; 0x28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3b4:	f7fe fc9e 	bl	800acf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3b8:	4b5b      	ldr	r3, [pc, #364]	; (800c528 <pvPortMalloc+0x180>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3c0:	f000 f920 	bl	800c604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3c4:	4b59      	ldr	r3, [pc, #356]	; (800c52c <pvPortMalloc+0x184>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f040 8093 	bne.w	800c4f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d01d      	beq.n	800c414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c3d8:	2208      	movs	r2, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d014      	beq.n	800c414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f023 0307 	bic.w	r3, r3, #7
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <pvPortMalloc+0x6c>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	617b      	str	r3, [r7, #20]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d06e      	beq.n	800c4f8 <pvPortMalloc+0x150>
 800c41a:	4b45      	ldr	r3, [pc, #276]	; (800c530 <pvPortMalloc+0x188>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	429a      	cmp	r2, r3
 800c422:	d869      	bhi.n	800c4f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c424:	4b43      	ldr	r3, [pc, #268]	; (800c534 <pvPortMalloc+0x18c>)
 800c426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c428:	4b42      	ldr	r3, [pc, #264]	; (800c534 <pvPortMalloc+0x18c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c42e:	e004      	b.n	800c43a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	429a      	cmp	r2, r3
 800c442:	d903      	bls.n	800c44c <pvPortMalloc+0xa4>
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1f1      	bne.n	800c430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c44c:	4b36      	ldr	r3, [pc, #216]	; (800c528 <pvPortMalloc+0x180>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c452:	429a      	cmp	r2, r3
 800c454:	d050      	beq.n	800c4f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2208      	movs	r2, #8
 800c45c:	4413      	add	r3, r2
 800c45e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	2308      	movs	r3, #8
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	429a      	cmp	r2, r3
 800c476:	d91f      	bls.n	800c4b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4413      	add	r3, r2
 800c47e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <pvPortMalloc+0xf8>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	613b      	str	r3, [r7, #16]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	1ad2      	subs	r2, r2, r3
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4b2:	69b8      	ldr	r0, [r7, #24]
 800c4b4:	f000 f908 	bl	800c6c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4b8:	4b1d      	ldr	r3, [pc, #116]	; (800c530 <pvPortMalloc+0x188>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	4a1b      	ldr	r2, [pc, #108]	; (800c530 <pvPortMalloc+0x188>)
 800c4c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4c6:	4b1a      	ldr	r3, [pc, #104]	; (800c530 <pvPortMalloc+0x188>)
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	4b1b      	ldr	r3, [pc, #108]	; (800c538 <pvPortMalloc+0x190>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d203      	bcs.n	800c4da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4d2:	4b17      	ldr	r3, [pc, #92]	; (800c530 <pvPortMalloc+0x188>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a18      	ldr	r2, [pc, #96]	; (800c538 <pvPortMalloc+0x190>)
 800c4d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	685a      	ldr	r2, [r3, #4]
 800c4de:	4b13      	ldr	r3, [pc, #76]	; (800c52c <pvPortMalloc+0x184>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <pvPortMalloc+0x194>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	4a11      	ldr	r2, [pc, #68]	; (800c53c <pvPortMalloc+0x194>)
 800c4f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4f8:	f7fe fc0a 	bl	800ad10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	f003 0307 	and.w	r3, r3, #7
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <pvPortMalloc+0x174>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	60fb      	str	r3, [r7, #12]
}
 800c518:	bf00      	nop
 800c51a:	e7fe      	b.n	800c51a <pvPortMalloc+0x172>
	return pvReturn;
 800c51c:	69fb      	ldr	r3, [r7, #28]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3728      	adds	r7, #40	; 0x28
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20004c64 	.word	0x20004c64
 800c52c:	20004c78 	.word	0x20004c78
 800c530:	20004c68 	.word	0x20004c68
 800c534:	20004c5c 	.word	0x20004c5c
 800c538:	20004c6c 	.word	0x20004c6c
 800c53c:	20004c70 	.word	0x20004c70

0800c540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d04d      	beq.n	800c5ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c552:	2308      	movs	r3, #8
 800c554:	425b      	negs	r3, r3
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	4413      	add	r3, r2
 800c55a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	4b24      	ldr	r3, [pc, #144]	; (800c5f8 <vPortFree+0xb8>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4013      	ands	r3, r2
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10a      	bne.n	800c584 <vPortFree+0x44>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	60fb      	str	r3, [r7, #12]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00a      	beq.n	800c5a2 <vPortFree+0x62>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	60bb      	str	r3, [r7, #8]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	4b14      	ldr	r3, [pc, #80]	; (800c5f8 <vPortFree+0xb8>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d01e      	beq.n	800c5ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d11a      	bne.n	800c5ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	4b0e      	ldr	r3, [pc, #56]	; (800c5f8 <vPortFree+0xb8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	43db      	mvns	r3, r3
 800c5c2:	401a      	ands	r2, r3
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5c8:	f7fe fb94 	bl	800acf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <vPortFree+0xbc>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <vPortFree+0xbc>)
 800c5d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f000 f874 	bl	800c6c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5e0:	4b07      	ldr	r3, [pc, #28]	; (800c600 <vPortFree+0xc0>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a06      	ldr	r2, [pc, #24]	; (800c600 <vPortFree+0xc0>)
 800c5e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5ea:	f7fe fb91 	bl	800ad10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5ee:	bf00      	nop
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20004c78 	.word	0x20004c78
 800c5fc:	20004c68 	.word	0x20004c68
 800c600:	20004c74 	.word	0x20004c74

0800c604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c60a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c60e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c610:	4b27      	ldr	r3, [pc, #156]	; (800c6b0 <prvHeapInit+0xac>)
 800c612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00c      	beq.n	800c638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3307      	adds	r3, #7
 800c622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0307 	bic.w	r3, r3, #7
 800c62a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	4a1f      	ldr	r2, [pc, #124]	; (800c6b0 <prvHeapInit+0xac>)
 800c634:	4413      	add	r3, r2
 800c636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c63c:	4a1d      	ldr	r2, [pc, #116]	; (800c6b4 <prvHeapInit+0xb0>)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c642:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <prvHeapInit+0xb0>)
 800c644:	2200      	movs	r2, #0
 800c646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	4413      	add	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c650:	2208      	movs	r2, #8
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	1a9b      	subs	r3, r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0307 	bic.w	r3, r3, #7
 800c65e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	4a15      	ldr	r2, [pc, #84]	; (800c6b8 <prvHeapInit+0xb4>)
 800c664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c666:	4b14      	ldr	r3, [pc, #80]	; (800c6b8 <prvHeapInit+0xb4>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2200      	movs	r2, #0
 800c66c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c66e:	4b12      	ldr	r3, [pc, #72]	; (800c6b8 <prvHeapInit+0xb4>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c684:	4b0c      	ldr	r3, [pc, #48]	; (800c6b8 <prvHeapInit+0xb4>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	4a0a      	ldr	r2, [pc, #40]	; (800c6bc <prvHeapInit+0xb8>)
 800c692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	4a09      	ldr	r2, [pc, #36]	; (800c6c0 <prvHeapInit+0xbc>)
 800c69a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c69c:	4b09      	ldr	r3, [pc, #36]	; (800c6c4 <prvHeapInit+0xc0>)
 800c69e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6a2:	601a      	str	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	2000105c 	.word	0x2000105c
 800c6b4:	20004c5c 	.word	0x20004c5c
 800c6b8:	20004c64 	.word	0x20004c64
 800c6bc:	20004c6c 	.word	0x20004c6c
 800c6c0:	20004c68 	.word	0x20004c68
 800c6c4:	20004c78 	.word	0x20004c78

0800c6c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6d0:	4b28      	ldr	r3, [pc, #160]	; (800c774 <prvInsertBlockIntoFreeList+0xac>)
 800c6d2:	60fb      	str	r3, [r7, #12]
 800c6d4:	e002      	b.n	800c6dc <prvInsertBlockIntoFreeList+0x14>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d8f7      	bhi.n	800c6d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d108      	bne.n	800c70a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	441a      	add	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	441a      	add	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d118      	bne.n	800c750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	4b15      	ldr	r3, [pc, #84]	; (800c778 <prvInsertBlockIntoFreeList+0xb0>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	429a      	cmp	r2, r3
 800c728:	d00d      	beq.n	800c746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	441a      	add	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	e008      	b.n	800c758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c746:	4b0c      	ldr	r3, [pc, #48]	; (800c778 <prvInsertBlockIntoFreeList+0xb0>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	e003      	b.n	800c758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d002      	beq.n	800c766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c766:	bf00      	nop
 800c768:	3714      	adds	r7, #20
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20004c5c 	.word	0x20004c5c
 800c778:	20004c64 	.word	0x20004c64

0800c77c <__errno>:
 800c77c:	4b01      	ldr	r3, [pc, #4]	; (800c784 <__errno+0x8>)
 800c77e:	6818      	ldr	r0, [r3, #0]
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	20000030 	.word	0x20000030

0800c788 <__libc_init_array>:
 800c788:	b570      	push	{r4, r5, r6, lr}
 800c78a:	4d0d      	ldr	r5, [pc, #52]	; (800c7c0 <__libc_init_array+0x38>)
 800c78c:	4c0d      	ldr	r4, [pc, #52]	; (800c7c4 <__libc_init_array+0x3c>)
 800c78e:	1b64      	subs	r4, r4, r5
 800c790:	10a4      	asrs	r4, r4, #2
 800c792:	2600      	movs	r6, #0
 800c794:	42a6      	cmp	r6, r4
 800c796:	d109      	bne.n	800c7ac <__libc_init_array+0x24>
 800c798:	4d0b      	ldr	r5, [pc, #44]	; (800c7c8 <__libc_init_array+0x40>)
 800c79a:	4c0c      	ldr	r4, [pc, #48]	; (800c7cc <__libc_init_array+0x44>)
 800c79c:	f005 f892 	bl	80118c4 <_init>
 800c7a0:	1b64      	subs	r4, r4, r5
 800c7a2:	10a4      	asrs	r4, r4, #2
 800c7a4:	2600      	movs	r6, #0
 800c7a6:	42a6      	cmp	r6, r4
 800c7a8:	d105      	bne.n	800c7b6 <__libc_init_array+0x2e>
 800c7aa:	bd70      	pop	{r4, r5, r6, pc}
 800c7ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7b0:	4798      	blx	r3
 800c7b2:	3601      	adds	r6, #1
 800c7b4:	e7ee      	b.n	800c794 <__libc_init_array+0xc>
 800c7b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ba:	4798      	blx	r3
 800c7bc:	3601      	adds	r6, #1
 800c7be:	e7f2      	b.n	800c7a6 <__libc_init_array+0x1e>
 800c7c0:	080127ec 	.word	0x080127ec
 800c7c4:	080127ec 	.word	0x080127ec
 800c7c8:	080127ec 	.word	0x080127ec
 800c7cc:	080127f0 	.word	0x080127f0

0800c7d0 <memcpy>:
 800c7d0:	440a      	add	r2, r1
 800c7d2:	4291      	cmp	r1, r2
 800c7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7d8:	d100      	bne.n	800c7dc <memcpy+0xc>
 800c7da:	4770      	bx	lr
 800c7dc:	b510      	push	{r4, lr}
 800c7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7e6:	4291      	cmp	r1, r2
 800c7e8:	d1f9      	bne.n	800c7de <memcpy+0xe>
 800c7ea:	bd10      	pop	{r4, pc}

0800c7ec <memset>:
 800c7ec:	4402      	add	r2, r0
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d100      	bne.n	800c7f6 <memset+0xa>
 800c7f4:	4770      	bx	lr
 800c7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7fa:	e7f9      	b.n	800c7f0 <memset+0x4>

0800c7fc <__cvt>:
 800c7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	ec55 4b10 	vmov	r4, r5, d0
 800c804:	2d00      	cmp	r5, #0
 800c806:	460e      	mov	r6, r1
 800c808:	4619      	mov	r1, r3
 800c80a:	462b      	mov	r3, r5
 800c80c:	bfbb      	ittet	lt
 800c80e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c812:	461d      	movlt	r5, r3
 800c814:	2300      	movge	r3, #0
 800c816:	232d      	movlt	r3, #45	; 0x2d
 800c818:	700b      	strb	r3, [r1, #0]
 800c81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c81c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c820:	4691      	mov	r9, r2
 800c822:	f023 0820 	bic.w	r8, r3, #32
 800c826:	bfbc      	itt	lt
 800c828:	4622      	movlt	r2, r4
 800c82a:	4614      	movlt	r4, r2
 800c82c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c830:	d005      	beq.n	800c83e <__cvt+0x42>
 800c832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c836:	d100      	bne.n	800c83a <__cvt+0x3e>
 800c838:	3601      	adds	r6, #1
 800c83a:	2102      	movs	r1, #2
 800c83c:	e000      	b.n	800c840 <__cvt+0x44>
 800c83e:	2103      	movs	r1, #3
 800c840:	ab03      	add	r3, sp, #12
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	ab02      	add	r3, sp, #8
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	ec45 4b10 	vmov	d0, r4, r5
 800c84c:	4653      	mov	r3, sl
 800c84e:	4632      	mov	r2, r6
 800c850:	f001 fe6a 	bl	800e528 <_dtoa_r>
 800c854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c858:	4607      	mov	r7, r0
 800c85a:	d102      	bne.n	800c862 <__cvt+0x66>
 800c85c:	f019 0f01 	tst.w	r9, #1
 800c860:	d022      	beq.n	800c8a8 <__cvt+0xac>
 800c862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c866:	eb07 0906 	add.w	r9, r7, r6
 800c86a:	d110      	bne.n	800c88e <__cvt+0x92>
 800c86c:	783b      	ldrb	r3, [r7, #0]
 800c86e:	2b30      	cmp	r3, #48	; 0x30
 800c870:	d10a      	bne.n	800c888 <__cvt+0x8c>
 800c872:	2200      	movs	r2, #0
 800c874:	2300      	movs	r3, #0
 800c876:	4620      	mov	r0, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f4 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c87e:	b918      	cbnz	r0, 800c888 <__cvt+0x8c>
 800c880:	f1c6 0601 	rsb	r6, r6, #1
 800c884:	f8ca 6000 	str.w	r6, [sl]
 800c888:	f8da 3000 	ldr.w	r3, [sl]
 800c88c:	4499      	add	r9, r3
 800c88e:	2200      	movs	r2, #0
 800c890:	2300      	movs	r3, #0
 800c892:	4620      	mov	r0, r4
 800c894:	4629      	mov	r1, r5
 800c896:	f7f4 f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c89a:	b108      	cbz	r0, 800c8a0 <__cvt+0xa4>
 800c89c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8a0:	2230      	movs	r2, #48	; 0x30
 800c8a2:	9b03      	ldr	r3, [sp, #12]
 800c8a4:	454b      	cmp	r3, r9
 800c8a6:	d307      	bcc.n	800c8b8 <__cvt+0xbc>
 800c8a8:	9b03      	ldr	r3, [sp, #12]
 800c8aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8ac:	1bdb      	subs	r3, r3, r7
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	b004      	add	sp, #16
 800c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b8:	1c59      	adds	r1, r3, #1
 800c8ba:	9103      	str	r1, [sp, #12]
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	e7f0      	b.n	800c8a2 <__cvt+0xa6>

0800c8c0 <__exponent>:
 800c8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2900      	cmp	r1, #0
 800c8c6:	bfb8      	it	lt
 800c8c8:	4249      	neglt	r1, r1
 800c8ca:	f803 2b02 	strb.w	r2, [r3], #2
 800c8ce:	bfb4      	ite	lt
 800c8d0:	222d      	movlt	r2, #45	; 0x2d
 800c8d2:	222b      	movge	r2, #43	; 0x2b
 800c8d4:	2909      	cmp	r1, #9
 800c8d6:	7042      	strb	r2, [r0, #1]
 800c8d8:	dd2a      	ble.n	800c930 <__exponent+0x70>
 800c8da:	f10d 0407 	add.w	r4, sp, #7
 800c8de:	46a4      	mov	ip, r4
 800c8e0:	270a      	movs	r7, #10
 800c8e2:	46a6      	mov	lr, r4
 800c8e4:	460a      	mov	r2, r1
 800c8e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c8ea:	fb07 1516 	mls	r5, r7, r6, r1
 800c8ee:	3530      	adds	r5, #48	; 0x30
 800c8f0:	2a63      	cmp	r2, #99	; 0x63
 800c8f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c8f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	dcf1      	bgt.n	800c8e2 <__exponent+0x22>
 800c8fe:	3130      	adds	r1, #48	; 0x30
 800c900:	f1ae 0502 	sub.w	r5, lr, #2
 800c904:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c908:	1c44      	adds	r4, r0, #1
 800c90a:	4629      	mov	r1, r5
 800c90c:	4561      	cmp	r1, ip
 800c90e:	d30a      	bcc.n	800c926 <__exponent+0x66>
 800c910:	f10d 0209 	add.w	r2, sp, #9
 800c914:	eba2 020e 	sub.w	r2, r2, lr
 800c918:	4565      	cmp	r5, ip
 800c91a:	bf88      	it	hi
 800c91c:	2200      	movhi	r2, #0
 800c91e:	4413      	add	r3, r2
 800c920:	1a18      	subs	r0, r3, r0
 800c922:	b003      	add	sp, #12
 800c924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c92e:	e7ed      	b.n	800c90c <__exponent+0x4c>
 800c930:	2330      	movs	r3, #48	; 0x30
 800c932:	3130      	adds	r1, #48	; 0x30
 800c934:	7083      	strb	r3, [r0, #2]
 800c936:	70c1      	strb	r1, [r0, #3]
 800c938:	1d03      	adds	r3, r0, #4
 800c93a:	e7f1      	b.n	800c920 <__exponent+0x60>

0800c93c <_printf_float>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	ed2d 8b02 	vpush	{d8}
 800c944:	b08d      	sub	sp, #52	; 0x34
 800c946:	460c      	mov	r4, r1
 800c948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c94c:	4616      	mov	r6, r2
 800c94e:	461f      	mov	r7, r3
 800c950:	4605      	mov	r5, r0
 800c952:	f002 ff45 	bl	800f7e0 <_localeconv_r>
 800c956:	f8d0 a000 	ldr.w	sl, [r0]
 800c95a:	4650      	mov	r0, sl
 800c95c:	f7f3 fc40 	bl	80001e0 <strlen>
 800c960:	2300      	movs	r3, #0
 800c962:	930a      	str	r3, [sp, #40]	; 0x28
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	9305      	str	r3, [sp, #20]
 800c968:	f8d8 3000 	ldr.w	r3, [r8]
 800c96c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c970:	3307      	adds	r3, #7
 800c972:	f023 0307 	bic.w	r3, r3, #7
 800c976:	f103 0208 	add.w	r2, r3, #8
 800c97a:	f8c8 2000 	str.w	r2, [r8]
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c986:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c98a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c98e:	9307      	str	r3, [sp, #28]
 800c990:	f8cd 8018 	str.w	r8, [sp, #24]
 800c994:	ee08 0a10 	vmov	s16, r0
 800c998:	4b9f      	ldr	r3, [pc, #636]	; (800cc18 <_printf_float+0x2dc>)
 800c99a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c99e:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a2:	f7f4 f8cb 	bl	8000b3c <__aeabi_dcmpun>
 800c9a6:	bb88      	cbnz	r0, 800ca0c <_printf_float+0xd0>
 800c9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ac:	4b9a      	ldr	r3, [pc, #616]	; (800cc18 <_printf_float+0x2dc>)
 800c9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b2:	f7f4 f8a5 	bl	8000b00 <__aeabi_dcmple>
 800c9b6:	bb48      	cbnz	r0, 800ca0c <_printf_float+0xd0>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4649      	mov	r1, r9
 800c9c0:	f7f4 f894 	bl	8000aec <__aeabi_dcmplt>
 800c9c4:	b110      	cbz	r0, 800c9cc <_printf_float+0x90>
 800c9c6:	232d      	movs	r3, #45	; 0x2d
 800c9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9cc:	4b93      	ldr	r3, [pc, #588]	; (800cc1c <_printf_float+0x2e0>)
 800c9ce:	4894      	ldr	r0, [pc, #592]	; (800cc20 <_printf_float+0x2e4>)
 800c9d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c9d4:	bf94      	ite	ls
 800c9d6:	4698      	movls	r8, r3
 800c9d8:	4680      	movhi	r8, r0
 800c9da:	2303      	movs	r3, #3
 800c9dc:	6123      	str	r3, [r4, #16]
 800c9de:	9b05      	ldr	r3, [sp, #20]
 800c9e0:	f023 0204 	bic.w	r2, r3, #4
 800c9e4:	6022      	str	r2, [r4, #0]
 800c9e6:	f04f 0900 	mov.w	r9, #0
 800c9ea:	9700      	str	r7, [sp, #0]
 800c9ec:	4633      	mov	r3, r6
 800c9ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f000 f9d8 	bl	800cda8 <_printf_common>
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f040 8090 	bne.w	800cb1e <_printf_float+0x1e2>
 800c9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ca02:	b00d      	add	sp, #52	; 0x34
 800ca04:	ecbd 8b02 	vpop	{d8}
 800ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0c:	4642      	mov	r2, r8
 800ca0e:	464b      	mov	r3, r9
 800ca10:	4640      	mov	r0, r8
 800ca12:	4649      	mov	r1, r9
 800ca14:	f7f4 f892 	bl	8000b3c <__aeabi_dcmpun>
 800ca18:	b140      	cbz	r0, 800ca2c <_printf_float+0xf0>
 800ca1a:	464b      	mov	r3, r9
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bfbc      	itt	lt
 800ca20:	232d      	movlt	r3, #45	; 0x2d
 800ca22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca26:	487f      	ldr	r0, [pc, #508]	; (800cc24 <_printf_float+0x2e8>)
 800ca28:	4b7f      	ldr	r3, [pc, #508]	; (800cc28 <_printf_float+0x2ec>)
 800ca2a:	e7d1      	b.n	800c9d0 <_printf_float+0x94>
 800ca2c:	6863      	ldr	r3, [r4, #4]
 800ca2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca32:	9206      	str	r2, [sp, #24]
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	d13f      	bne.n	800cab8 <_printf_float+0x17c>
 800ca38:	2306      	movs	r3, #6
 800ca3a:	6063      	str	r3, [r4, #4]
 800ca3c:	9b05      	ldr	r3, [sp, #20]
 800ca3e:	6861      	ldr	r1, [r4, #4]
 800ca40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca44:	2300      	movs	r3, #0
 800ca46:	9303      	str	r3, [sp, #12]
 800ca48:	ab0a      	add	r3, sp, #40	; 0x28
 800ca4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca4e:	ab09      	add	r3, sp, #36	; 0x24
 800ca50:	ec49 8b10 	vmov	d0, r8, r9
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	6022      	str	r2, [r4, #0]
 800ca58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7ff fecd 	bl	800c7fc <__cvt>
 800ca62:	9b06      	ldr	r3, [sp, #24]
 800ca64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca66:	2b47      	cmp	r3, #71	; 0x47
 800ca68:	4680      	mov	r8, r0
 800ca6a:	d108      	bne.n	800ca7e <_printf_float+0x142>
 800ca6c:	1cc8      	adds	r0, r1, #3
 800ca6e:	db02      	blt.n	800ca76 <_printf_float+0x13a>
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	4299      	cmp	r1, r3
 800ca74:	dd41      	ble.n	800cafa <_printf_float+0x1be>
 800ca76:	f1ab 0b02 	sub.w	fp, fp, #2
 800ca7a:	fa5f fb8b 	uxtb.w	fp, fp
 800ca7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca82:	d820      	bhi.n	800cac6 <_printf_float+0x18a>
 800ca84:	3901      	subs	r1, #1
 800ca86:	465a      	mov	r2, fp
 800ca88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca8c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca8e:	f7ff ff17 	bl	800c8c0 <__exponent>
 800ca92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca94:	1813      	adds	r3, r2, r0
 800ca96:	2a01      	cmp	r2, #1
 800ca98:	4681      	mov	r9, r0
 800ca9a:	6123      	str	r3, [r4, #16]
 800ca9c:	dc02      	bgt.n	800caa4 <_printf_float+0x168>
 800ca9e:	6822      	ldr	r2, [r4, #0]
 800caa0:	07d2      	lsls	r2, r2, #31
 800caa2:	d501      	bpl.n	800caa8 <_printf_float+0x16c>
 800caa4:	3301      	adds	r3, #1
 800caa6:	6123      	str	r3, [r4, #16]
 800caa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800caac:	2b00      	cmp	r3, #0
 800caae:	d09c      	beq.n	800c9ea <_printf_float+0xae>
 800cab0:	232d      	movs	r3, #45	; 0x2d
 800cab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab6:	e798      	b.n	800c9ea <_printf_float+0xae>
 800cab8:	9a06      	ldr	r2, [sp, #24]
 800caba:	2a47      	cmp	r2, #71	; 0x47
 800cabc:	d1be      	bne.n	800ca3c <_printf_float+0x100>
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1bc      	bne.n	800ca3c <_printf_float+0x100>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e7b9      	b.n	800ca3a <_printf_float+0xfe>
 800cac6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800caca:	d118      	bne.n	800cafe <_printf_float+0x1c2>
 800cacc:	2900      	cmp	r1, #0
 800cace:	6863      	ldr	r3, [r4, #4]
 800cad0:	dd0b      	ble.n	800caea <_printf_float+0x1ae>
 800cad2:	6121      	str	r1, [r4, #16]
 800cad4:	b913      	cbnz	r3, 800cadc <_printf_float+0x1a0>
 800cad6:	6822      	ldr	r2, [r4, #0]
 800cad8:	07d0      	lsls	r0, r2, #31
 800cada:	d502      	bpl.n	800cae2 <_printf_float+0x1a6>
 800cadc:	3301      	adds	r3, #1
 800cade:	440b      	add	r3, r1
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cae4:	f04f 0900 	mov.w	r9, #0
 800cae8:	e7de      	b.n	800caa8 <_printf_float+0x16c>
 800caea:	b913      	cbnz	r3, 800caf2 <_printf_float+0x1b6>
 800caec:	6822      	ldr	r2, [r4, #0]
 800caee:	07d2      	lsls	r2, r2, #31
 800caf0:	d501      	bpl.n	800caf6 <_printf_float+0x1ba>
 800caf2:	3302      	adds	r3, #2
 800caf4:	e7f4      	b.n	800cae0 <_printf_float+0x1a4>
 800caf6:	2301      	movs	r3, #1
 800caf8:	e7f2      	b.n	800cae0 <_printf_float+0x1a4>
 800cafa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb00:	4299      	cmp	r1, r3
 800cb02:	db05      	blt.n	800cb10 <_printf_float+0x1d4>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	6121      	str	r1, [r4, #16]
 800cb08:	07d8      	lsls	r0, r3, #31
 800cb0a:	d5ea      	bpl.n	800cae2 <_printf_float+0x1a6>
 800cb0c:	1c4b      	adds	r3, r1, #1
 800cb0e:	e7e7      	b.n	800cae0 <_printf_float+0x1a4>
 800cb10:	2900      	cmp	r1, #0
 800cb12:	bfd4      	ite	le
 800cb14:	f1c1 0202 	rsble	r2, r1, #2
 800cb18:	2201      	movgt	r2, #1
 800cb1a:	4413      	add	r3, r2
 800cb1c:	e7e0      	b.n	800cae0 <_printf_float+0x1a4>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	055a      	lsls	r2, r3, #21
 800cb22:	d407      	bmi.n	800cb34 <_printf_float+0x1f8>
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	4642      	mov	r2, r8
 800cb28:	4631      	mov	r1, r6
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	47b8      	blx	r7
 800cb2e:	3001      	adds	r0, #1
 800cb30:	d12c      	bne.n	800cb8c <_printf_float+0x250>
 800cb32:	e764      	b.n	800c9fe <_printf_float+0xc2>
 800cb34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb38:	f240 80e0 	bls.w	800ccfc <_printf_float+0x3c0>
 800cb3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb40:	2200      	movs	r2, #0
 800cb42:	2300      	movs	r3, #0
 800cb44:	f7f3 ffc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d034      	beq.n	800cbb6 <_printf_float+0x27a>
 800cb4c:	4a37      	ldr	r2, [pc, #220]	; (800cc2c <_printf_float+0x2f0>)
 800cb4e:	2301      	movs	r3, #1
 800cb50:	4631      	mov	r1, r6
 800cb52:	4628      	mov	r0, r5
 800cb54:	47b8      	blx	r7
 800cb56:	3001      	adds	r0, #1
 800cb58:	f43f af51 	beq.w	800c9fe <_printf_float+0xc2>
 800cb5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb60:	429a      	cmp	r2, r3
 800cb62:	db02      	blt.n	800cb6a <_printf_float+0x22e>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	07d8      	lsls	r0, r3, #31
 800cb68:	d510      	bpl.n	800cb8c <_printf_float+0x250>
 800cb6a:	ee18 3a10 	vmov	r3, s16
 800cb6e:	4652      	mov	r2, sl
 800cb70:	4631      	mov	r1, r6
 800cb72:	4628      	mov	r0, r5
 800cb74:	47b8      	blx	r7
 800cb76:	3001      	adds	r0, #1
 800cb78:	f43f af41 	beq.w	800c9fe <_printf_float+0xc2>
 800cb7c:	f04f 0800 	mov.w	r8, #0
 800cb80:	f104 091a 	add.w	r9, r4, #26
 800cb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb86:	3b01      	subs	r3, #1
 800cb88:	4543      	cmp	r3, r8
 800cb8a:	dc09      	bgt.n	800cba0 <_printf_float+0x264>
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	079b      	lsls	r3, r3, #30
 800cb90:	f100 8105 	bmi.w	800cd9e <_printf_float+0x462>
 800cb94:	68e0      	ldr	r0, [r4, #12]
 800cb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb98:	4298      	cmp	r0, r3
 800cb9a:	bfb8      	it	lt
 800cb9c:	4618      	movlt	r0, r3
 800cb9e:	e730      	b.n	800ca02 <_printf_float+0xc6>
 800cba0:	2301      	movs	r3, #1
 800cba2:	464a      	mov	r2, r9
 800cba4:	4631      	mov	r1, r6
 800cba6:	4628      	mov	r0, r5
 800cba8:	47b8      	blx	r7
 800cbaa:	3001      	adds	r0, #1
 800cbac:	f43f af27 	beq.w	800c9fe <_printf_float+0xc2>
 800cbb0:	f108 0801 	add.w	r8, r8, #1
 800cbb4:	e7e6      	b.n	800cb84 <_printf_float+0x248>
 800cbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dc39      	bgt.n	800cc30 <_printf_float+0x2f4>
 800cbbc:	4a1b      	ldr	r2, [pc, #108]	; (800cc2c <_printf_float+0x2f0>)
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b8      	blx	r7
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	f43f af19 	beq.w	800c9fe <_printf_float+0xc2>
 800cbcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	d102      	bne.n	800cbda <_printf_float+0x29e>
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	07d9      	lsls	r1, r3, #31
 800cbd8:	d5d8      	bpl.n	800cb8c <_printf_float+0x250>
 800cbda:	ee18 3a10 	vmov	r3, s16
 800cbde:	4652      	mov	r2, sl
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	47b8      	blx	r7
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	f43f af09 	beq.w	800c9fe <_printf_float+0xc2>
 800cbec:	f04f 0900 	mov.w	r9, #0
 800cbf0:	f104 0a1a 	add.w	sl, r4, #26
 800cbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf6:	425b      	negs	r3, r3
 800cbf8:	454b      	cmp	r3, r9
 800cbfa:	dc01      	bgt.n	800cc00 <_printf_float+0x2c4>
 800cbfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbfe:	e792      	b.n	800cb26 <_printf_float+0x1ea>
 800cc00:	2301      	movs	r3, #1
 800cc02:	4652      	mov	r2, sl
 800cc04:	4631      	mov	r1, r6
 800cc06:	4628      	mov	r0, r5
 800cc08:	47b8      	blx	r7
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	f43f aef7 	beq.w	800c9fe <_printf_float+0xc2>
 800cc10:	f109 0901 	add.w	r9, r9, #1
 800cc14:	e7ee      	b.n	800cbf4 <_printf_float+0x2b8>
 800cc16:	bf00      	nop
 800cc18:	7fefffff 	.word	0x7fefffff
 800cc1c:	08012320 	.word	0x08012320
 800cc20:	08012324 	.word	0x08012324
 800cc24:	0801232c 	.word	0x0801232c
 800cc28:	08012328 	.word	0x08012328
 800cc2c:	08012731 	.word	0x08012731
 800cc30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc34:	429a      	cmp	r2, r3
 800cc36:	bfa8      	it	ge
 800cc38:	461a      	movge	r2, r3
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	4691      	mov	r9, r2
 800cc3e:	dc37      	bgt.n	800ccb0 <_printf_float+0x374>
 800cc40:	f04f 0b00 	mov.w	fp, #0
 800cc44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc48:	f104 021a 	add.w	r2, r4, #26
 800cc4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc4e:	9305      	str	r3, [sp, #20]
 800cc50:	eba3 0309 	sub.w	r3, r3, r9
 800cc54:	455b      	cmp	r3, fp
 800cc56:	dc33      	bgt.n	800ccc0 <_printf_float+0x384>
 800cc58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	db3b      	blt.n	800ccd8 <_printf_float+0x39c>
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	07da      	lsls	r2, r3, #31
 800cc64:	d438      	bmi.n	800ccd8 <_printf_float+0x39c>
 800cc66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc68:	9b05      	ldr	r3, [sp, #20]
 800cc6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	eba2 0901 	sub.w	r9, r2, r1
 800cc72:	4599      	cmp	r9, r3
 800cc74:	bfa8      	it	ge
 800cc76:	4699      	movge	r9, r3
 800cc78:	f1b9 0f00 	cmp.w	r9, #0
 800cc7c:	dc35      	bgt.n	800ccea <_printf_float+0x3ae>
 800cc7e:	f04f 0800 	mov.w	r8, #0
 800cc82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc86:	f104 0a1a 	add.w	sl, r4, #26
 800cc8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc8e:	1a9b      	subs	r3, r3, r2
 800cc90:	eba3 0309 	sub.w	r3, r3, r9
 800cc94:	4543      	cmp	r3, r8
 800cc96:	f77f af79 	ble.w	800cb8c <_printf_float+0x250>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4652      	mov	r2, sl
 800cc9e:	4631      	mov	r1, r6
 800cca0:	4628      	mov	r0, r5
 800cca2:	47b8      	blx	r7
 800cca4:	3001      	adds	r0, #1
 800cca6:	f43f aeaa 	beq.w	800c9fe <_printf_float+0xc2>
 800ccaa:	f108 0801 	add.w	r8, r8, #1
 800ccae:	e7ec      	b.n	800cc8a <_printf_float+0x34e>
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4642      	mov	r2, r8
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	47b8      	blx	r7
 800ccba:	3001      	adds	r0, #1
 800ccbc:	d1c0      	bne.n	800cc40 <_printf_float+0x304>
 800ccbe:	e69e      	b.n	800c9fe <_printf_float+0xc2>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	9205      	str	r2, [sp, #20]
 800ccc8:	47b8      	blx	r7
 800ccca:	3001      	adds	r0, #1
 800cccc:	f43f ae97 	beq.w	800c9fe <_printf_float+0xc2>
 800ccd0:	9a05      	ldr	r2, [sp, #20]
 800ccd2:	f10b 0b01 	add.w	fp, fp, #1
 800ccd6:	e7b9      	b.n	800cc4c <_printf_float+0x310>
 800ccd8:	ee18 3a10 	vmov	r3, s16
 800ccdc:	4652      	mov	r2, sl
 800ccde:	4631      	mov	r1, r6
 800cce0:	4628      	mov	r0, r5
 800cce2:	47b8      	blx	r7
 800cce4:	3001      	adds	r0, #1
 800cce6:	d1be      	bne.n	800cc66 <_printf_float+0x32a>
 800cce8:	e689      	b.n	800c9fe <_printf_float+0xc2>
 800ccea:	9a05      	ldr	r2, [sp, #20]
 800ccec:	464b      	mov	r3, r9
 800ccee:	4442      	add	r2, r8
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	47b8      	blx	r7
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	d1c1      	bne.n	800cc7e <_printf_float+0x342>
 800ccfa:	e680      	b.n	800c9fe <_printf_float+0xc2>
 800ccfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccfe:	2a01      	cmp	r2, #1
 800cd00:	dc01      	bgt.n	800cd06 <_printf_float+0x3ca>
 800cd02:	07db      	lsls	r3, r3, #31
 800cd04:	d538      	bpl.n	800cd78 <_printf_float+0x43c>
 800cd06:	2301      	movs	r3, #1
 800cd08:	4642      	mov	r2, r8
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	47b8      	blx	r7
 800cd10:	3001      	adds	r0, #1
 800cd12:	f43f ae74 	beq.w	800c9fe <_printf_float+0xc2>
 800cd16:	ee18 3a10 	vmov	r3, s16
 800cd1a:	4652      	mov	r2, sl
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	4628      	mov	r0, r5
 800cd20:	47b8      	blx	r7
 800cd22:	3001      	adds	r0, #1
 800cd24:	f43f ae6b 	beq.w	800c9fe <_printf_float+0xc2>
 800cd28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f7f3 fed2 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd34:	b9d8      	cbnz	r0, 800cd6e <_printf_float+0x432>
 800cd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd38:	f108 0201 	add.w	r2, r8, #1
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	4631      	mov	r1, r6
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b8      	blx	r7
 800cd44:	3001      	adds	r0, #1
 800cd46:	d10e      	bne.n	800cd66 <_printf_float+0x42a>
 800cd48:	e659      	b.n	800c9fe <_printf_float+0xc2>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4652      	mov	r2, sl
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4628      	mov	r0, r5
 800cd52:	47b8      	blx	r7
 800cd54:	3001      	adds	r0, #1
 800cd56:	f43f ae52 	beq.w	800c9fe <_printf_float+0xc2>
 800cd5a:	f108 0801 	add.w	r8, r8, #1
 800cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd60:	3b01      	subs	r3, #1
 800cd62:	4543      	cmp	r3, r8
 800cd64:	dcf1      	bgt.n	800cd4a <_printf_float+0x40e>
 800cd66:	464b      	mov	r3, r9
 800cd68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd6c:	e6dc      	b.n	800cb28 <_printf_float+0x1ec>
 800cd6e:	f04f 0800 	mov.w	r8, #0
 800cd72:	f104 0a1a 	add.w	sl, r4, #26
 800cd76:	e7f2      	b.n	800cd5e <_printf_float+0x422>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	4642      	mov	r2, r8
 800cd7c:	e7df      	b.n	800cd3e <_printf_float+0x402>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	464a      	mov	r2, r9
 800cd82:	4631      	mov	r1, r6
 800cd84:	4628      	mov	r0, r5
 800cd86:	47b8      	blx	r7
 800cd88:	3001      	adds	r0, #1
 800cd8a:	f43f ae38 	beq.w	800c9fe <_printf_float+0xc2>
 800cd8e:	f108 0801 	add.w	r8, r8, #1
 800cd92:	68e3      	ldr	r3, [r4, #12]
 800cd94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd96:	1a5b      	subs	r3, r3, r1
 800cd98:	4543      	cmp	r3, r8
 800cd9a:	dcf0      	bgt.n	800cd7e <_printf_float+0x442>
 800cd9c:	e6fa      	b.n	800cb94 <_printf_float+0x258>
 800cd9e:	f04f 0800 	mov.w	r8, #0
 800cda2:	f104 0919 	add.w	r9, r4, #25
 800cda6:	e7f4      	b.n	800cd92 <_printf_float+0x456>

0800cda8 <_printf_common>:
 800cda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdac:	4616      	mov	r6, r2
 800cdae:	4699      	mov	r9, r3
 800cdb0:	688a      	ldr	r2, [r1, #8]
 800cdb2:	690b      	ldr	r3, [r1, #16]
 800cdb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	bfb8      	it	lt
 800cdbc:	4613      	movlt	r3, r2
 800cdbe:	6033      	str	r3, [r6, #0]
 800cdc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	b10a      	cbz	r2, 800cdce <_printf_common+0x26>
 800cdca:	3301      	adds	r3, #1
 800cdcc:	6033      	str	r3, [r6, #0]
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	0699      	lsls	r1, r3, #26
 800cdd2:	bf42      	ittt	mi
 800cdd4:	6833      	ldrmi	r3, [r6, #0]
 800cdd6:	3302      	addmi	r3, #2
 800cdd8:	6033      	strmi	r3, [r6, #0]
 800cdda:	6825      	ldr	r5, [r4, #0]
 800cddc:	f015 0506 	ands.w	r5, r5, #6
 800cde0:	d106      	bne.n	800cdf0 <_printf_common+0x48>
 800cde2:	f104 0a19 	add.w	sl, r4, #25
 800cde6:	68e3      	ldr	r3, [r4, #12]
 800cde8:	6832      	ldr	r2, [r6, #0]
 800cdea:	1a9b      	subs	r3, r3, r2
 800cdec:	42ab      	cmp	r3, r5
 800cdee:	dc26      	bgt.n	800ce3e <_printf_common+0x96>
 800cdf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdf4:	1e13      	subs	r3, r2, #0
 800cdf6:	6822      	ldr	r2, [r4, #0]
 800cdf8:	bf18      	it	ne
 800cdfa:	2301      	movne	r3, #1
 800cdfc:	0692      	lsls	r2, r2, #26
 800cdfe:	d42b      	bmi.n	800ce58 <_printf_common+0xb0>
 800ce00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce04:	4649      	mov	r1, r9
 800ce06:	4638      	mov	r0, r7
 800ce08:	47c0      	blx	r8
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	d01e      	beq.n	800ce4c <_printf_common+0xa4>
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	68e5      	ldr	r5, [r4, #12]
 800ce12:	6832      	ldr	r2, [r6, #0]
 800ce14:	f003 0306 	and.w	r3, r3, #6
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	bf08      	it	eq
 800ce1c:	1aad      	subeq	r5, r5, r2
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	6922      	ldr	r2, [r4, #16]
 800ce22:	bf0c      	ite	eq
 800ce24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce28:	2500      	movne	r5, #0
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	bfc4      	itt	gt
 800ce2e:	1a9b      	subgt	r3, r3, r2
 800ce30:	18ed      	addgt	r5, r5, r3
 800ce32:	2600      	movs	r6, #0
 800ce34:	341a      	adds	r4, #26
 800ce36:	42b5      	cmp	r5, r6
 800ce38:	d11a      	bne.n	800ce70 <_printf_common+0xc8>
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	e008      	b.n	800ce50 <_printf_common+0xa8>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4652      	mov	r2, sl
 800ce42:	4649      	mov	r1, r9
 800ce44:	4638      	mov	r0, r7
 800ce46:	47c0      	blx	r8
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d103      	bne.n	800ce54 <_printf_common+0xac>
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce54:	3501      	adds	r5, #1
 800ce56:	e7c6      	b.n	800cde6 <_printf_common+0x3e>
 800ce58:	18e1      	adds	r1, r4, r3
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	2030      	movs	r0, #48	; 0x30
 800ce5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce62:	4422      	add	r2, r4
 800ce64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	e7c7      	b.n	800ce00 <_printf_common+0x58>
 800ce70:	2301      	movs	r3, #1
 800ce72:	4622      	mov	r2, r4
 800ce74:	4649      	mov	r1, r9
 800ce76:	4638      	mov	r0, r7
 800ce78:	47c0      	blx	r8
 800ce7a:	3001      	adds	r0, #1
 800ce7c:	d0e6      	beq.n	800ce4c <_printf_common+0xa4>
 800ce7e:	3601      	adds	r6, #1
 800ce80:	e7d9      	b.n	800ce36 <_printf_common+0x8e>
	...

0800ce84 <_printf_i>:
 800ce84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	460c      	mov	r4, r1
 800ce8a:	4691      	mov	r9, r2
 800ce8c:	7e27      	ldrb	r7, [r4, #24]
 800ce8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce90:	2f78      	cmp	r7, #120	; 0x78
 800ce92:	4680      	mov	r8, r0
 800ce94:	469a      	mov	sl, r3
 800ce96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce9a:	d807      	bhi.n	800ceac <_printf_i+0x28>
 800ce9c:	2f62      	cmp	r7, #98	; 0x62
 800ce9e:	d80a      	bhi.n	800ceb6 <_printf_i+0x32>
 800cea0:	2f00      	cmp	r7, #0
 800cea2:	f000 80d8 	beq.w	800d056 <_printf_i+0x1d2>
 800cea6:	2f58      	cmp	r7, #88	; 0x58
 800cea8:	f000 80a3 	beq.w	800cff2 <_printf_i+0x16e>
 800ceac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ceb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ceb4:	e03a      	b.n	800cf2c <_printf_i+0xa8>
 800ceb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceba:	2b15      	cmp	r3, #21
 800cebc:	d8f6      	bhi.n	800ceac <_printf_i+0x28>
 800cebe:	a001      	add	r0, pc, #4	; (adr r0, 800cec4 <_printf_i+0x40>)
 800cec0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cec4:	0800cf1d 	.word	0x0800cf1d
 800cec8:	0800cf31 	.word	0x0800cf31
 800cecc:	0800cead 	.word	0x0800cead
 800ced0:	0800cead 	.word	0x0800cead
 800ced4:	0800cead 	.word	0x0800cead
 800ced8:	0800cead 	.word	0x0800cead
 800cedc:	0800cf31 	.word	0x0800cf31
 800cee0:	0800cead 	.word	0x0800cead
 800cee4:	0800cead 	.word	0x0800cead
 800cee8:	0800cead 	.word	0x0800cead
 800ceec:	0800cead 	.word	0x0800cead
 800cef0:	0800d03d 	.word	0x0800d03d
 800cef4:	0800cf61 	.word	0x0800cf61
 800cef8:	0800d01f 	.word	0x0800d01f
 800cefc:	0800cead 	.word	0x0800cead
 800cf00:	0800cead 	.word	0x0800cead
 800cf04:	0800d05f 	.word	0x0800d05f
 800cf08:	0800cead 	.word	0x0800cead
 800cf0c:	0800cf61 	.word	0x0800cf61
 800cf10:	0800cead 	.word	0x0800cead
 800cf14:	0800cead 	.word	0x0800cead
 800cf18:	0800d027 	.word	0x0800d027
 800cf1c:	680b      	ldr	r3, [r1, #0]
 800cf1e:	1d1a      	adds	r2, r3, #4
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	600a      	str	r2, [r1, #0]
 800cf24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e0a3      	b.n	800d078 <_printf_i+0x1f4>
 800cf30:	6825      	ldr	r5, [r4, #0]
 800cf32:	6808      	ldr	r0, [r1, #0]
 800cf34:	062e      	lsls	r6, r5, #24
 800cf36:	f100 0304 	add.w	r3, r0, #4
 800cf3a:	d50a      	bpl.n	800cf52 <_printf_i+0xce>
 800cf3c:	6805      	ldr	r5, [r0, #0]
 800cf3e:	600b      	str	r3, [r1, #0]
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	da03      	bge.n	800cf4c <_printf_i+0xc8>
 800cf44:	232d      	movs	r3, #45	; 0x2d
 800cf46:	426d      	negs	r5, r5
 800cf48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf4c:	485e      	ldr	r0, [pc, #376]	; (800d0c8 <_printf_i+0x244>)
 800cf4e:	230a      	movs	r3, #10
 800cf50:	e019      	b.n	800cf86 <_printf_i+0x102>
 800cf52:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cf56:	6805      	ldr	r5, [r0, #0]
 800cf58:	600b      	str	r3, [r1, #0]
 800cf5a:	bf18      	it	ne
 800cf5c:	b22d      	sxthne	r5, r5
 800cf5e:	e7ef      	b.n	800cf40 <_printf_i+0xbc>
 800cf60:	680b      	ldr	r3, [r1, #0]
 800cf62:	6825      	ldr	r5, [r4, #0]
 800cf64:	1d18      	adds	r0, r3, #4
 800cf66:	6008      	str	r0, [r1, #0]
 800cf68:	0628      	lsls	r0, r5, #24
 800cf6a:	d501      	bpl.n	800cf70 <_printf_i+0xec>
 800cf6c:	681d      	ldr	r5, [r3, #0]
 800cf6e:	e002      	b.n	800cf76 <_printf_i+0xf2>
 800cf70:	0669      	lsls	r1, r5, #25
 800cf72:	d5fb      	bpl.n	800cf6c <_printf_i+0xe8>
 800cf74:	881d      	ldrh	r5, [r3, #0]
 800cf76:	4854      	ldr	r0, [pc, #336]	; (800d0c8 <_printf_i+0x244>)
 800cf78:	2f6f      	cmp	r7, #111	; 0x6f
 800cf7a:	bf0c      	ite	eq
 800cf7c:	2308      	moveq	r3, #8
 800cf7e:	230a      	movne	r3, #10
 800cf80:	2100      	movs	r1, #0
 800cf82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf86:	6866      	ldr	r6, [r4, #4]
 800cf88:	60a6      	str	r6, [r4, #8]
 800cf8a:	2e00      	cmp	r6, #0
 800cf8c:	bfa2      	ittt	ge
 800cf8e:	6821      	ldrge	r1, [r4, #0]
 800cf90:	f021 0104 	bicge.w	r1, r1, #4
 800cf94:	6021      	strge	r1, [r4, #0]
 800cf96:	b90d      	cbnz	r5, 800cf9c <_printf_i+0x118>
 800cf98:	2e00      	cmp	r6, #0
 800cf9a:	d04d      	beq.n	800d038 <_printf_i+0x1b4>
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfa2:	fb03 5711 	mls	r7, r3, r1, r5
 800cfa6:	5dc7      	ldrb	r7, [r0, r7]
 800cfa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cfac:	462f      	mov	r7, r5
 800cfae:	42bb      	cmp	r3, r7
 800cfb0:	460d      	mov	r5, r1
 800cfb2:	d9f4      	bls.n	800cf9e <_printf_i+0x11a>
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d10b      	bne.n	800cfd0 <_printf_i+0x14c>
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	07df      	lsls	r7, r3, #31
 800cfbc:	d508      	bpl.n	800cfd0 <_printf_i+0x14c>
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	6861      	ldr	r1, [r4, #4]
 800cfc2:	4299      	cmp	r1, r3
 800cfc4:	bfde      	ittt	le
 800cfc6:	2330      	movle	r3, #48	; 0x30
 800cfc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfd0:	1b92      	subs	r2, r2, r6
 800cfd2:	6122      	str	r2, [r4, #16]
 800cfd4:	f8cd a000 	str.w	sl, [sp]
 800cfd8:	464b      	mov	r3, r9
 800cfda:	aa03      	add	r2, sp, #12
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4640      	mov	r0, r8
 800cfe0:	f7ff fee2 	bl	800cda8 <_printf_common>
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d14c      	bne.n	800d082 <_printf_i+0x1fe>
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	b004      	add	sp, #16
 800cfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff2:	4835      	ldr	r0, [pc, #212]	; (800d0c8 <_printf_i+0x244>)
 800cff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	680e      	ldr	r6, [r1, #0]
 800cffc:	061f      	lsls	r7, r3, #24
 800cffe:	f856 5b04 	ldr.w	r5, [r6], #4
 800d002:	600e      	str	r6, [r1, #0]
 800d004:	d514      	bpl.n	800d030 <_printf_i+0x1ac>
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	bf44      	itt	mi
 800d00a:	f043 0320 	orrmi.w	r3, r3, #32
 800d00e:	6023      	strmi	r3, [r4, #0]
 800d010:	b91d      	cbnz	r5, 800d01a <_printf_i+0x196>
 800d012:	6823      	ldr	r3, [r4, #0]
 800d014:	f023 0320 	bic.w	r3, r3, #32
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	2310      	movs	r3, #16
 800d01c:	e7b0      	b.n	800cf80 <_printf_i+0xfc>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	f043 0320 	orr.w	r3, r3, #32
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	2378      	movs	r3, #120	; 0x78
 800d028:	4828      	ldr	r0, [pc, #160]	; (800d0cc <_printf_i+0x248>)
 800d02a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d02e:	e7e3      	b.n	800cff8 <_printf_i+0x174>
 800d030:	065e      	lsls	r6, r3, #25
 800d032:	bf48      	it	mi
 800d034:	b2ad      	uxthmi	r5, r5
 800d036:	e7e6      	b.n	800d006 <_printf_i+0x182>
 800d038:	4616      	mov	r6, r2
 800d03a:	e7bb      	b.n	800cfb4 <_printf_i+0x130>
 800d03c:	680b      	ldr	r3, [r1, #0]
 800d03e:	6826      	ldr	r6, [r4, #0]
 800d040:	6960      	ldr	r0, [r4, #20]
 800d042:	1d1d      	adds	r5, r3, #4
 800d044:	600d      	str	r5, [r1, #0]
 800d046:	0635      	lsls	r5, r6, #24
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	d501      	bpl.n	800d050 <_printf_i+0x1cc>
 800d04c:	6018      	str	r0, [r3, #0]
 800d04e:	e002      	b.n	800d056 <_printf_i+0x1d2>
 800d050:	0671      	lsls	r1, r6, #25
 800d052:	d5fb      	bpl.n	800d04c <_printf_i+0x1c8>
 800d054:	8018      	strh	r0, [r3, #0]
 800d056:	2300      	movs	r3, #0
 800d058:	6123      	str	r3, [r4, #16]
 800d05a:	4616      	mov	r6, r2
 800d05c:	e7ba      	b.n	800cfd4 <_printf_i+0x150>
 800d05e:	680b      	ldr	r3, [r1, #0]
 800d060:	1d1a      	adds	r2, r3, #4
 800d062:	600a      	str	r2, [r1, #0]
 800d064:	681e      	ldr	r6, [r3, #0]
 800d066:	6862      	ldr	r2, [r4, #4]
 800d068:	2100      	movs	r1, #0
 800d06a:	4630      	mov	r0, r6
 800d06c:	f7f3 f8c0 	bl	80001f0 <memchr>
 800d070:	b108      	cbz	r0, 800d076 <_printf_i+0x1f2>
 800d072:	1b80      	subs	r0, r0, r6
 800d074:	6060      	str	r0, [r4, #4]
 800d076:	6863      	ldr	r3, [r4, #4]
 800d078:	6123      	str	r3, [r4, #16]
 800d07a:	2300      	movs	r3, #0
 800d07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d080:	e7a8      	b.n	800cfd4 <_printf_i+0x150>
 800d082:	6923      	ldr	r3, [r4, #16]
 800d084:	4632      	mov	r2, r6
 800d086:	4649      	mov	r1, r9
 800d088:	4640      	mov	r0, r8
 800d08a:	47d0      	blx	sl
 800d08c:	3001      	adds	r0, #1
 800d08e:	d0ab      	beq.n	800cfe8 <_printf_i+0x164>
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	079b      	lsls	r3, r3, #30
 800d094:	d413      	bmi.n	800d0be <_printf_i+0x23a>
 800d096:	68e0      	ldr	r0, [r4, #12]
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	4298      	cmp	r0, r3
 800d09c:	bfb8      	it	lt
 800d09e:	4618      	movlt	r0, r3
 800d0a0:	e7a4      	b.n	800cfec <_printf_i+0x168>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	4632      	mov	r2, r6
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	47d0      	blx	sl
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d09b      	beq.n	800cfe8 <_printf_i+0x164>
 800d0b0:	3501      	adds	r5, #1
 800d0b2:	68e3      	ldr	r3, [r4, #12]
 800d0b4:	9903      	ldr	r1, [sp, #12]
 800d0b6:	1a5b      	subs	r3, r3, r1
 800d0b8:	42ab      	cmp	r3, r5
 800d0ba:	dcf2      	bgt.n	800d0a2 <_printf_i+0x21e>
 800d0bc:	e7eb      	b.n	800d096 <_printf_i+0x212>
 800d0be:	2500      	movs	r5, #0
 800d0c0:	f104 0619 	add.w	r6, r4, #25
 800d0c4:	e7f5      	b.n	800d0b2 <_printf_i+0x22e>
 800d0c6:	bf00      	nop
 800d0c8:	08012330 	.word	0x08012330
 800d0cc:	08012341 	.word	0x08012341

0800d0d0 <_scanf_float>:
 800d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	b087      	sub	sp, #28
 800d0d6:	4617      	mov	r7, r2
 800d0d8:	9303      	str	r3, [sp, #12]
 800d0da:	688b      	ldr	r3, [r1, #8]
 800d0dc:	1e5a      	subs	r2, r3, #1
 800d0de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d0e2:	bf83      	ittte	hi
 800d0e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d0e8:	195b      	addhi	r3, r3, r5
 800d0ea:	9302      	strhi	r3, [sp, #8]
 800d0ec:	2300      	movls	r3, #0
 800d0ee:	bf86      	itte	hi
 800d0f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d0f4:	608b      	strhi	r3, [r1, #8]
 800d0f6:	9302      	strls	r3, [sp, #8]
 800d0f8:	680b      	ldr	r3, [r1, #0]
 800d0fa:	468b      	mov	fp, r1
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d102:	f84b 3b1c 	str.w	r3, [fp], #28
 800d106:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d10a:	4680      	mov	r8, r0
 800d10c:	460c      	mov	r4, r1
 800d10e:	465e      	mov	r6, fp
 800d110:	46aa      	mov	sl, r5
 800d112:	46a9      	mov	r9, r5
 800d114:	9501      	str	r5, [sp, #4]
 800d116:	68a2      	ldr	r2, [r4, #8]
 800d118:	b152      	cbz	r2, 800d130 <_scanf_float+0x60>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b4e      	cmp	r3, #78	; 0x4e
 800d120:	d864      	bhi.n	800d1ec <_scanf_float+0x11c>
 800d122:	2b40      	cmp	r3, #64	; 0x40
 800d124:	d83c      	bhi.n	800d1a0 <_scanf_float+0xd0>
 800d126:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d12a:	b2c8      	uxtb	r0, r1
 800d12c:	280e      	cmp	r0, #14
 800d12e:	d93a      	bls.n	800d1a6 <_scanf_float+0xd6>
 800d130:	f1b9 0f00 	cmp.w	r9, #0
 800d134:	d003      	beq.n	800d13e <_scanf_float+0x6e>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d142:	f1ba 0f01 	cmp.w	sl, #1
 800d146:	f200 8113 	bhi.w	800d370 <_scanf_float+0x2a0>
 800d14a:	455e      	cmp	r6, fp
 800d14c:	f200 8105 	bhi.w	800d35a <_scanf_float+0x28a>
 800d150:	2501      	movs	r5, #1
 800d152:	4628      	mov	r0, r5
 800d154:	b007      	add	sp, #28
 800d156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d15e:	2a0d      	cmp	r2, #13
 800d160:	d8e6      	bhi.n	800d130 <_scanf_float+0x60>
 800d162:	a101      	add	r1, pc, #4	; (adr r1, 800d168 <_scanf_float+0x98>)
 800d164:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d168:	0800d2a7 	.word	0x0800d2a7
 800d16c:	0800d131 	.word	0x0800d131
 800d170:	0800d131 	.word	0x0800d131
 800d174:	0800d131 	.word	0x0800d131
 800d178:	0800d307 	.word	0x0800d307
 800d17c:	0800d2df 	.word	0x0800d2df
 800d180:	0800d131 	.word	0x0800d131
 800d184:	0800d131 	.word	0x0800d131
 800d188:	0800d2b5 	.word	0x0800d2b5
 800d18c:	0800d131 	.word	0x0800d131
 800d190:	0800d131 	.word	0x0800d131
 800d194:	0800d131 	.word	0x0800d131
 800d198:	0800d131 	.word	0x0800d131
 800d19c:	0800d26d 	.word	0x0800d26d
 800d1a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d1a4:	e7db      	b.n	800d15e <_scanf_float+0x8e>
 800d1a6:	290e      	cmp	r1, #14
 800d1a8:	d8c2      	bhi.n	800d130 <_scanf_float+0x60>
 800d1aa:	a001      	add	r0, pc, #4	; (adr r0, 800d1b0 <_scanf_float+0xe0>)
 800d1ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d1b0:	0800d25f 	.word	0x0800d25f
 800d1b4:	0800d131 	.word	0x0800d131
 800d1b8:	0800d25f 	.word	0x0800d25f
 800d1bc:	0800d2f3 	.word	0x0800d2f3
 800d1c0:	0800d131 	.word	0x0800d131
 800d1c4:	0800d20d 	.word	0x0800d20d
 800d1c8:	0800d249 	.word	0x0800d249
 800d1cc:	0800d249 	.word	0x0800d249
 800d1d0:	0800d249 	.word	0x0800d249
 800d1d4:	0800d249 	.word	0x0800d249
 800d1d8:	0800d249 	.word	0x0800d249
 800d1dc:	0800d249 	.word	0x0800d249
 800d1e0:	0800d249 	.word	0x0800d249
 800d1e4:	0800d249 	.word	0x0800d249
 800d1e8:	0800d249 	.word	0x0800d249
 800d1ec:	2b6e      	cmp	r3, #110	; 0x6e
 800d1ee:	d809      	bhi.n	800d204 <_scanf_float+0x134>
 800d1f0:	2b60      	cmp	r3, #96	; 0x60
 800d1f2:	d8b2      	bhi.n	800d15a <_scanf_float+0x8a>
 800d1f4:	2b54      	cmp	r3, #84	; 0x54
 800d1f6:	d077      	beq.n	800d2e8 <_scanf_float+0x218>
 800d1f8:	2b59      	cmp	r3, #89	; 0x59
 800d1fa:	d199      	bne.n	800d130 <_scanf_float+0x60>
 800d1fc:	2d07      	cmp	r5, #7
 800d1fe:	d197      	bne.n	800d130 <_scanf_float+0x60>
 800d200:	2508      	movs	r5, #8
 800d202:	e029      	b.n	800d258 <_scanf_float+0x188>
 800d204:	2b74      	cmp	r3, #116	; 0x74
 800d206:	d06f      	beq.n	800d2e8 <_scanf_float+0x218>
 800d208:	2b79      	cmp	r3, #121	; 0x79
 800d20a:	e7f6      	b.n	800d1fa <_scanf_float+0x12a>
 800d20c:	6821      	ldr	r1, [r4, #0]
 800d20e:	05c8      	lsls	r0, r1, #23
 800d210:	d51a      	bpl.n	800d248 <_scanf_float+0x178>
 800d212:	9b02      	ldr	r3, [sp, #8]
 800d214:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d218:	6021      	str	r1, [r4, #0]
 800d21a:	f109 0901 	add.w	r9, r9, #1
 800d21e:	b11b      	cbz	r3, 800d228 <_scanf_float+0x158>
 800d220:	3b01      	subs	r3, #1
 800d222:	3201      	adds	r2, #1
 800d224:	9302      	str	r3, [sp, #8]
 800d226:	60a2      	str	r2, [r4, #8]
 800d228:	68a3      	ldr	r3, [r4, #8]
 800d22a:	3b01      	subs	r3, #1
 800d22c:	60a3      	str	r3, [r4, #8]
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	3301      	adds	r3, #1
 800d232:	6123      	str	r3, [r4, #16]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3b01      	subs	r3, #1
 800d238:	2b00      	cmp	r3, #0
 800d23a:	607b      	str	r3, [r7, #4]
 800d23c:	f340 8084 	ble.w	800d348 <_scanf_float+0x278>
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	3301      	adds	r3, #1
 800d244:	603b      	str	r3, [r7, #0]
 800d246:	e766      	b.n	800d116 <_scanf_float+0x46>
 800d248:	eb1a 0f05 	cmn.w	sl, r5
 800d24c:	f47f af70 	bne.w	800d130 <_scanf_float+0x60>
 800d250:	6822      	ldr	r2, [r4, #0]
 800d252:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d256:	6022      	str	r2, [r4, #0]
 800d258:	f806 3b01 	strb.w	r3, [r6], #1
 800d25c:	e7e4      	b.n	800d228 <_scanf_float+0x158>
 800d25e:	6822      	ldr	r2, [r4, #0]
 800d260:	0610      	lsls	r0, r2, #24
 800d262:	f57f af65 	bpl.w	800d130 <_scanf_float+0x60>
 800d266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d26a:	e7f4      	b.n	800d256 <_scanf_float+0x186>
 800d26c:	f1ba 0f00 	cmp.w	sl, #0
 800d270:	d10e      	bne.n	800d290 <_scanf_float+0x1c0>
 800d272:	f1b9 0f00 	cmp.w	r9, #0
 800d276:	d10e      	bne.n	800d296 <_scanf_float+0x1c6>
 800d278:	6822      	ldr	r2, [r4, #0]
 800d27a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d27e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d282:	d108      	bne.n	800d296 <_scanf_float+0x1c6>
 800d284:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d288:	6022      	str	r2, [r4, #0]
 800d28a:	f04f 0a01 	mov.w	sl, #1
 800d28e:	e7e3      	b.n	800d258 <_scanf_float+0x188>
 800d290:	f1ba 0f02 	cmp.w	sl, #2
 800d294:	d055      	beq.n	800d342 <_scanf_float+0x272>
 800d296:	2d01      	cmp	r5, #1
 800d298:	d002      	beq.n	800d2a0 <_scanf_float+0x1d0>
 800d29a:	2d04      	cmp	r5, #4
 800d29c:	f47f af48 	bne.w	800d130 <_scanf_float+0x60>
 800d2a0:	3501      	adds	r5, #1
 800d2a2:	b2ed      	uxtb	r5, r5
 800d2a4:	e7d8      	b.n	800d258 <_scanf_float+0x188>
 800d2a6:	f1ba 0f01 	cmp.w	sl, #1
 800d2aa:	f47f af41 	bne.w	800d130 <_scanf_float+0x60>
 800d2ae:	f04f 0a02 	mov.w	sl, #2
 800d2b2:	e7d1      	b.n	800d258 <_scanf_float+0x188>
 800d2b4:	b97d      	cbnz	r5, 800d2d6 <_scanf_float+0x206>
 800d2b6:	f1b9 0f00 	cmp.w	r9, #0
 800d2ba:	f47f af3c 	bne.w	800d136 <_scanf_float+0x66>
 800d2be:	6822      	ldr	r2, [r4, #0]
 800d2c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d2c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d2c8:	f47f af39 	bne.w	800d13e <_scanf_float+0x6e>
 800d2cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d2d0:	6022      	str	r2, [r4, #0]
 800d2d2:	2501      	movs	r5, #1
 800d2d4:	e7c0      	b.n	800d258 <_scanf_float+0x188>
 800d2d6:	2d03      	cmp	r5, #3
 800d2d8:	d0e2      	beq.n	800d2a0 <_scanf_float+0x1d0>
 800d2da:	2d05      	cmp	r5, #5
 800d2dc:	e7de      	b.n	800d29c <_scanf_float+0x1cc>
 800d2de:	2d02      	cmp	r5, #2
 800d2e0:	f47f af26 	bne.w	800d130 <_scanf_float+0x60>
 800d2e4:	2503      	movs	r5, #3
 800d2e6:	e7b7      	b.n	800d258 <_scanf_float+0x188>
 800d2e8:	2d06      	cmp	r5, #6
 800d2ea:	f47f af21 	bne.w	800d130 <_scanf_float+0x60>
 800d2ee:	2507      	movs	r5, #7
 800d2f0:	e7b2      	b.n	800d258 <_scanf_float+0x188>
 800d2f2:	6822      	ldr	r2, [r4, #0]
 800d2f4:	0591      	lsls	r1, r2, #22
 800d2f6:	f57f af1b 	bpl.w	800d130 <_scanf_float+0x60>
 800d2fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d2fe:	6022      	str	r2, [r4, #0]
 800d300:	f8cd 9004 	str.w	r9, [sp, #4]
 800d304:	e7a8      	b.n	800d258 <_scanf_float+0x188>
 800d306:	6822      	ldr	r2, [r4, #0]
 800d308:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d30c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d310:	d006      	beq.n	800d320 <_scanf_float+0x250>
 800d312:	0550      	lsls	r0, r2, #21
 800d314:	f57f af0c 	bpl.w	800d130 <_scanf_float+0x60>
 800d318:	f1b9 0f00 	cmp.w	r9, #0
 800d31c:	f43f af0f 	beq.w	800d13e <_scanf_float+0x6e>
 800d320:	0591      	lsls	r1, r2, #22
 800d322:	bf58      	it	pl
 800d324:	9901      	ldrpl	r1, [sp, #4]
 800d326:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d32a:	bf58      	it	pl
 800d32c:	eba9 0101 	subpl.w	r1, r9, r1
 800d330:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d334:	bf58      	it	pl
 800d336:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d33a:	6022      	str	r2, [r4, #0]
 800d33c:	f04f 0900 	mov.w	r9, #0
 800d340:	e78a      	b.n	800d258 <_scanf_float+0x188>
 800d342:	f04f 0a03 	mov.w	sl, #3
 800d346:	e787      	b.n	800d258 <_scanf_float+0x188>
 800d348:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d34c:	4639      	mov	r1, r7
 800d34e:	4640      	mov	r0, r8
 800d350:	4798      	blx	r3
 800d352:	2800      	cmp	r0, #0
 800d354:	f43f aedf 	beq.w	800d116 <_scanf_float+0x46>
 800d358:	e6ea      	b.n	800d130 <_scanf_float+0x60>
 800d35a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d35e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d362:	463a      	mov	r2, r7
 800d364:	4640      	mov	r0, r8
 800d366:	4798      	blx	r3
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	3b01      	subs	r3, #1
 800d36c:	6123      	str	r3, [r4, #16]
 800d36e:	e6ec      	b.n	800d14a <_scanf_float+0x7a>
 800d370:	1e6b      	subs	r3, r5, #1
 800d372:	2b06      	cmp	r3, #6
 800d374:	d825      	bhi.n	800d3c2 <_scanf_float+0x2f2>
 800d376:	2d02      	cmp	r5, #2
 800d378:	d836      	bhi.n	800d3e8 <_scanf_float+0x318>
 800d37a:	455e      	cmp	r6, fp
 800d37c:	f67f aee8 	bls.w	800d150 <_scanf_float+0x80>
 800d380:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d384:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d388:	463a      	mov	r2, r7
 800d38a:	4640      	mov	r0, r8
 800d38c:	4798      	blx	r3
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	3b01      	subs	r3, #1
 800d392:	6123      	str	r3, [r4, #16]
 800d394:	e7f1      	b.n	800d37a <_scanf_float+0x2aa>
 800d396:	9802      	ldr	r0, [sp, #8]
 800d398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d39c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d3a0:	9002      	str	r0, [sp, #8]
 800d3a2:	463a      	mov	r2, r7
 800d3a4:	4640      	mov	r0, r8
 800d3a6:	4798      	blx	r3
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	6123      	str	r3, [r4, #16]
 800d3ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3b2:	fa5f fa8a 	uxtb.w	sl, sl
 800d3b6:	f1ba 0f02 	cmp.w	sl, #2
 800d3ba:	d1ec      	bne.n	800d396 <_scanf_float+0x2c6>
 800d3bc:	3d03      	subs	r5, #3
 800d3be:	b2ed      	uxtb	r5, r5
 800d3c0:	1b76      	subs	r6, r6, r5
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	05da      	lsls	r2, r3, #23
 800d3c6:	d52f      	bpl.n	800d428 <_scanf_float+0x358>
 800d3c8:	055b      	lsls	r3, r3, #21
 800d3ca:	d510      	bpl.n	800d3ee <_scanf_float+0x31e>
 800d3cc:	455e      	cmp	r6, fp
 800d3ce:	f67f aebf 	bls.w	800d150 <_scanf_float+0x80>
 800d3d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d3da:	463a      	mov	r2, r7
 800d3dc:	4640      	mov	r0, r8
 800d3de:	4798      	blx	r3
 800d3e0:	6923      	ldr	r3, [r4, #16]
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	6123      	str	r3, [r4, #16]
 800d3e6:	e7f1      	b.n	800d3cc <_scanf_float+0x2fc>
 800d3e8:	46aa      	mov	sl, r5
 800d3ea:	9602      	str	r6, [sp, #8]
 800d3ec:	e7df      	b.n	800d3ae <_scanf_float+0x2de>
 800d3ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d3f2:	6923      	ldr	r3, [r4, #16]
 800d3f4:	2965      	cmp	r1, #101	; 0x65
 800d3f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3fa:	f106 35ff 	add.w	r5, r6, #4294967295
 800d3fe:	6123      	str	r3, [r4, #16]
 800d400:	d00c      	beq.n	800d41c <_scanf_float+0x34c>
 800d402:	2945      	cmp	r1, #69	; 0x45
 800d404:	d00a      	beq.n	800d41c <_scanf_float+0x34c>
 800d406:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d40a:	463a      	mov	r2, r7
 800d40c:	4640      	mov	r0, r8
 800d40e:	4798      	blx	r3
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d416:	3b01      	subs	r3, #1
 800d418:	1eb5      	subs	r5, r6, #2
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d420:	463a      	mov	r2, r7
 800d422:	4640      	mov	r0, r8
 800d424:	4798      	blx	r3
 800d426:	462e      	mov	r6, r5
 800d428:	6825      	ldr	r5, [r4, #0]
 800d42a:	f015 0510 	ands.w	r5, r5, #16
 800d42e:	d158      	bne.n	800d4e2 <_scanf_float+0x412>
 800d430:	7035      	strb	r5, [r6, #0]
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d43c:	d11c      	bne.n	800d478 <_scanf_float+0x3a8>
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	454b      	cmp	r3, r9
 800d442:	eba3 0209 	sub.w	r2, r3, r9
 800d446:	d124      	bne.n	800d492 <_scanf_float+0x3c2>
 800d448:	2200      	movs	r2, #0
 800d44a:	4659      	mov	r1, fp
 800d44c:	4640      	mov	r0, r8
 800d44e:	f000 ff31 	bl	800e2b4 <_strtod_r>
 800d452:	9b03      	ldr	r3, [sp, #12]
 800d454:	6821      	ldr	r1, [r4, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f011 0f02 	tst.w	r1, #2
 800d45c:	ec57 6b10 	vmov	r6, r7, d0
 800d460:	f103 0204 	add.w	r2, r3, #4
 800d464:	d020      	beq.n	800d4a8 <_scanf_float+0x3d8>
 800d466:	9903      	ldr	r1, [sp, #12]
 800d468:	600a      	str	r2, [r1, #0]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	e9c3 6700 	strd	r6, r7, [r3]
 800d470:	68e3      	ldr	r3, [r4, #12]
 800d472:	3301      	adds	r3, #1
 800d474:	60e3      	str	r3, [r4, #12]
 800d476:	e66c      	b.n	800d152 <_scanf_float+0x82>
 800d478:	9b04      	ldr	r3, [sp, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0e4      	beq.n	800d448 <_scanf_float+0x378>
 800d47e:	9905      	ldr	r1, [sp, #20]
 800d480:	230a      	movs	r3, #10
 800d482:	462a      	mov	r2, r5
 800d484:	3101      	adds	r1, #1
 800d486:	4640      	mov	r0, r8
 800d488:	f000 ff9e 	bl	800e3c8 <_strtol_r>
 800d48c:	9b04      	ldr	r3, [sp, #16]
 800d48e:	9e05      	ldr	r6, [sp, #20]
 800d490:	1ac2      	subs	r2, r0, r3
 800d492:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d496:	429e      	cmp	r6, r3
 800d498:	bf28      	it	cs
 800d49a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d49e:	4912      	ldr	r1, [pc, #72]	; (800d4e8 <_scanf_float+0x418>)
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f000 f82b 	bl	800d4fc <siprintf>
 800d4a6:	e7cf      	b.n	800d448 <_scanf_float+0x378>
 800d4a8:	f011 0f04 	tst.w	r1, #4
 800d4ac:	9903      	ldr	r1, [sp, #12]
 800d4ae:	600a      	str	r2, [r1, #0]
 800d4b0:	d1db      	bne.n	800d46a <_scanf_float+0x39a>
 800d4b2:	f8d3 8000 	ldr.w	r8, [r3]
 800d4b6:	ee10 2a10 	vmov	r2, s0
 800d4ba:	ee10 0a10 	vmov	r0, s0
 800d4be:	463b      	mov	r3, r7
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	f7f3 fb3b 	bl	8000b3c <__aeabi_dcmpun>
 800d4c6:	b128      	cbz	r0, 800d4d4 <_scanf_float+0x404>
 800d4c8:	4808      	ldr	r0, [pc, #32]	; (800d4ec <_scanf_float+0x41c>)
 800d4ca:	f000 f811 	bl	800d4f0 <nanf>
 800d4ce:	ed88 0a00 	vstr	s0, [r8]
 800d4d2:	e7cd      	b.n	800d470 <_scanf_float+0x3a0>
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	f7f3 fb8e 	bl	8000bf8 <__aeabi_d2f>
 800d4dc:	f8c8 0000 	str.w	r0, [r8]
 800d4e0:	e7c6      	b.n	800d470 <_scanf_float+0x3a0>
 800d4e2:	2500      	movs	r5, #0
 800d4e4:	e635      	b.n	800d152 <_scanf_float+0x82>
 800d4e6:	bf00      	nop
 800d4e8:	08012352 	.word	0x08012352
 800d4ec:	08012783 	.word	0x08012783

0800d4f0 <nanf>:
 800d4f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d4f8 <nanf+0x8>
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	7fc00000 	.word	0x7fc00000

0800d4fc <siprintf>:
 800d4fc:	b40e      	push	{r1, r2, r3}
 800d4fe:	b500      	push	{lr}
 800d500:	b09c      	sub	sp, #112	; 0x70
 800d502:	ab1d      	add	r3, sp, #116	; 0x74
 800d504:	9002      	str	r0, [sp, #8]
 800d506:	9006      	str	r0, [sp, #24]
 800d508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d50c:	4809      	ldr	r0, [pc, #36]	; (800d534 <siprintf+0x38>)
 800d50e:	9107      	str	r1, [sp, #28]
 800d510:	9104      	str	r1, [sp, #16]
 800d512:	4909      	ldr	r1, [pc, #36]	; (800d538 <siprintf+0x3c>)
 800d514:	f853 2b04 	ldr.w	r2, [r3], #4
 800d518:	9105      	str	r1, [sp, #20]
 800d51a:	6800      	ldr	r0, [r0, #0]
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	a902      	add	r1, sp, #8
 800d520:	f002 ff5e 	bl	80103e0 <_svfiprintf_r>
 800d524:	9b02      	ldr	r3, [sp, #8]
 800d526:	2200      	movs	r2, #0
 800d528:	701a      	strb	r2, [r3, #0]
 800d52a:	b01c      	add	sp, #112	; 0x70
 800d52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d530:	b003      	add	sp, #12
 800d532:	4770      	bx	lr
 800d534:	20000030 	.word	0x20000030
 800d538:	ffff0208 	.word	0xffff0208

0800d53c <siscanf>:
 800d53c:	b40e      	push	{r1, r2, r3}
 800d53e:	b510      	push	{r4, lr}
 800d540:	b09f      	sub	sp, #124	; 0x7c
 800d542:	ac21      	add	r4, sp, #132	; 0x84
 800d544:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d548:	f854 2b04 	ldr.w	r2, [r4], #4
 800d54c:	9201      	str	r2, [sp, #4]
 800d54e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d552:	9004      	str	r0, [sp, #16]
 800d554:	9008      	str	r0, [sp, #32]
 800d556:	f7f2 fe43 	bl	80001e0 <strlen>
 800d55a:	4b0c      	ldr	r3, [pc, #48]	; (800d58c <siscanf+0x50>)
 800d55c:	9005      	str	r0, [sp, #20]
 800d55e:	9009      	str	r0, [sp, #36]	; 0x24
 800d560:	930d      	str	r3, [sp, #52]	; 0x34
 800d562:	480b      	ldr	r0, [pc, #44]	; (800d590 <siscanf+0x54>)
 800d564:	9a01      	ldr	r2, [sp, #4]
 800d566:	6800      	ldr	r0, [r0, #0]
 800d568:	9403      	str	r4, [sp, #12]
 800d56a:	2300      	movs	r3, #0
 800d56c:	9311      	str	r3, [sp, #68]	; 0x44
 800d56e:	9316      	str	r3, [sp, #88]	; 0x58
 800d570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d574:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d578:	a904      	add	r1, sp, #16
 800d57a:	4623      	mov	r3, r4
 800d57c:	f003 f88a 	bl	8010694 <__ssvfiscanf_r>
 800d580:	b01f      	add	sp, #124	; 0x7c
 800d582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d586:	b003      	add	sp, #12
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	0800d5b7 	.word	0x0800d5b7
 800d590:	20000030 	.word	0x20000030

0800d594 <__sread>:
 800d594:	b510      	push	{r4, lr}
 800d596:	460c      	mov	r4, r1
 800d598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d59c:	f003 fb3e 	bl	8010c1c <_read_r>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	bfab      	itete	ge
 800d5a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5a8:	181b      	addge	r3, r3, r0
 800d5aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5ae:	bfac      	ite	ge
 800d5b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5b2:	81a3      	strhlt	r3, [r4, #12]
 800d5b4:	bd10      	pop	{r4, pc}

0800d5b6 <__seofread>:
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	4770      	bx	lr

0800d5ba <__swrite>:
 800d5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5be:	461f      	mov	r7, r3
 800d5c0:	898b      	ldrh	r3, [r1, #12]
 800d5c2:	05db      	lsls	r3, r3, #23
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	4616      	mov	r6, r2
 800d5ca:	d505      	bpl.n	800d5d8 <__swrite+0x1e>
 800d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f002 f908 	bl	800f7e8 <_lseek_r>
 800d5d8:	89a3      	ldrh	r3, [r4, #12]
 800d5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	4632      	mov	r2, r6
 800d5e6:	463b      	mov	r3, r7
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	f000 beed 	b.w	800e3cc <_write_r>

0800d5f2 <__sseek>:
 800d5f2:	b510      	push	{r4, lr}
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5fa:	f002 f8f5 	bl	800f7e8 <_lseek_r>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	89a3      	ldrh	r3, [r4, #12]
 800d602:	bf15      	itete	ne
 800d604:	6560      	strne	r0, [r4, #84]	; 0x54
 800d606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d60e:	81a3      	strheq	r3, [r4, #12]
 800d610:	bf18      	it	ne
 800d612:	81a3      	strhne	r3, [r4, #12]
 800d614:	bd10      	pop	{r4, pc}

0800d616 <__sclose>:
 800d616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d61a:	f000 bee9 	b.w	800e3f0 <_close_r>

0800d61e <strncmp>:
 800d61e:	b510      	push	{r4, lr}
 800d620:	b16a      	cbz	r2, 800d63e <strncmp+0x20>
 800d622:	3901      	subs	r1, #1
 800d624:	1884      	adds	r4, r0, r2
 800d626:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d62a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d62e:	4293      	cmp	r3, r2
 800d630:	d103      	bne.n	800d63a <strncmp+0x1c>
 800d632:	42a0      	cmp	r0, r4
 800d634:	d001      	beq.n	800d63a <strncmp+0x1c>
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1f5      	bne.n	800d626 <strncmp+0x8>
 800d63a:	1a98      	subs	r0, r3, r2
 800d63c:	bd10      	pop	{r4, pc}
 800d63e:	4610      	mov	r0, r2
 800d640:	e7fc      	b.n	800d63c <strncmp+0x1e>

0800d642 <strncpy>:
 800d642:	b510      	push	{r4, lr}
 800d644:	3901      	subs	r1, #1
 800d646:	4603      	mov	r3, r0
 800d648:	b132      	cbz	r2, 800d658 <strncpy+0x16>
 800d64a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d64e:	f803 4b01 	strb.w	r4, [r3], #1
 800d652:	3a01      	subs	r2, #1
 800d654:	2c00      	cmp	r4, #0
 800d656:	d1f7      	bne.n	800d648 <strncpy+0x6>
 800d658:	441a      	add	r2, r3
 800d65a:	2100      	movs	r1, #0
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d100      	bne.n	800d662 <strncpy+0x20>
 800d660:	bd10      	pop	{r4, pc}
 800d662:	f803 1b01 	strb.w	r1, [r3], #1
 800d666:	e7f9      	b.n	800d65c <strncpy+0x1a>

0800d668 <sulp>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	4604      	mov	r4, r0
 800d66c:	460d      	mov	r5, r1
 800d66e:	ec45 4b10 	vmov	d0, r4, r5
 800d672:	4616      	mov	r6, r2
 800d674:	f002 fc50 	bl	800ff18 <__ulp>
 800d678:	ec51 0b10 	vmov	r0, r1, d0
 800d67c:	b17e      	cbz	r6, 800d69e <sulp+0x36>
 800d67e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d682:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d686:	2b00      	cmp	r3, #0
 800d688:	dd09      	ble.n	800d69e <sulp+0x36>
 800d68a:	051b      	lsls	r3, r3, #20
 800d68c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d690:	2400      	movs	r4, #0
 800d692:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d696:	4622      	mov	r2, r4
 800d698:	462b      	mov	r3, r5
 800d69a:	f7f2 ffb5 	bl	8000608 <__aeabi_dmul>
 800d69e:	bd70      	pop	{r4, r5, r6, pc}

0800d6a0 <_strtod_l>:
 800d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a4:	b0a3      	sub	sp, #140	; 0x8c
 800d6a6:	461f      	mov	r7, r3
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	931e      	str	r3, [sp, #120]	; 0x78
 800d6ac:	4ba4      	ldr	r3, [pc, #656]	; (800d940 <_strtod_l+0x2a0>)
 800d6ae:	9219      	str	r2, [sp, #100]	; 0x64
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	9307      	str	r3, [sp, #28]
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	4688      	mov	r8, r1
 800d6ba:	f7f2 fd91 	bl	80001e0 <strlen>
 800d6be:	f04f 0a00 	mov.w	sl, #0
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	f04f 0b00 	mov.w	fp, #0
 800d6c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d6cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d6ce:	781a      	ldrb	r2, [r3, #0]
 800d6d0:	2a2b      	cmp	r2, #43	; 0x2b
 800d6d2:	d04c      	beq.n	800d76e <_strtod_l+0xce>
 800d6d4:	d839      	bhi.n	800d74a <_strtod_l+0xaa>
 800d6d6:	2a0d      	cmp	r2, #13
 800d6d8:	d832      	bhi.n	800d740 <_strtod_l+0xa0>
 800d6da:	2a08      	cmp	r2, #8
 800d6dc:	d832      	bhi.n	800d744 <_strtod_l+0xa4>
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	d03c      	beq.n	800d75c <_strtod_l+0xbc>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	930e      	str	r3, [sp, #56]	; 0x38
 800d6e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d6e8:	7833      	ldrb	r3, [r6, #0]
 800d6ea:	2b30      	cmp	r3, #48	; 0x30
 800d6ec:	f040 80b4 	bne.w	800d858 <_strtod_l+0x1b8>
 800d6f0:	7873      	ldrb	r3, [r6, #1]
 800d6f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d6f6:	2b58      	cmp	r3, #88	; 0x58
 800d6f8:	d16c      	bne.n	800d7d4 <_strtod_l+0x134>
 800d6fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	ab1e      	add	r3, sp, #120	; 0x78
 800d700:	9702      	str	r7, [sp, #8]
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	4a8f      	ldr	r2, [pc, #572]	; (800d944 <_strtod_l+0x2a4>)
 800d706:	ab1f      	add	r3, sp, #124	; 0x7c
 800d708:	a91d      	add	r1, sp, #116	; 0x74
 800d70a:	4620      	mov	r0, r4
 800d70c:	f001 fd60 	bl	800f1d0 <__gethex>
 800d710:	f010 0707 	ands.w	r7, r0, #7
 800d714:	4605      	mov	r5, r0
 800d716:	d005      	beq.n	800d724 <_strtod_l+0x84>
 800d718:	2f06      	cmp	r7, #6
 800d71a:	d12a      	bne.n	800d772 <_strtod_l+0xd2>
 800d71c:	3601      	adds	r6, #1
 800d71e:	2300      	movs	r3, #0
 800d720:	961d      	str	r6, [sp, #116]	; 0x74
 800d722:	930e      	str	r3, [sp, #56]	; 0x38
 800d724:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d726:	2b00      	cmp	r3, #0
 800d728:	f040 8596 	bne.w	800e258 <_strtod_l+0xbb8>
 800d72c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d72e:	b1db      	cbz	r3, 800d768 <_strtod_l+0xc8>
 800d730:	4652      	mov	r2, sl
 800d732:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d736:	ec43 2b10 	vmov	d0, r2, r3
 800d73a:	b023      	add	sp, #140	; 0x8c
 800d73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d740:	2a20      	cmp	r2, #32
 800d742:	d1ce      	bne.n	800d6e2 <_strtod_l+0x42>
 800d744:	3301      	adds	r3, #1
 800d746:	931d      	str	r3, [sp, #116]	; 0x74
 800d748:	e7c0      	b.n	800d6cc <_strtod_l+0x2c>
 800d74a:	2a2d      	cmp	r2, #45	; 0x2d
 800d74c:	d1c9      	bne.n	800d6e2 <_strtod_l+0x42>
 800d74e:	2201      	movs	r2, #1
 800d750:	920e      	str	r2, [sp, #56]	; 0x38
 800d752:	1c5a      	adds	r2, r3, #1
 800d754:	921d      	str	r2, [sp, #116]	; 0x74
 800d756:	785b      	ldrb	r3, [r3, #1]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1c4      	bne.n	800d6e6 <_strtod_l+0x46>
 800d75c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d75e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d762:	2b00      	cmp	r3, #0
 800d764:	f040 8576 	bne.w	800e254 <_strtod_l+0xbb4>
 800d768:	4652      	mov	r2, sl
 800d76a:	465b      	mov	r3, fp
 800d76c:	e7e3      	b.n	800d736 <_strtod_l+0x96>
 800d76e:	2200      	movs	r2, #0
 800d770:	e7ee      	b.n	800d750 <_strtod_l+0xb0>
 800d772:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d774:	b13a      	cbz	r2, 800d786 <_strtod_l+0xe6>
 800d776:	2135      	movs	r1, #53	; 0x35
 800d778:	a820      	add	r0, sp, #128	; 0x80
 800d77a:	f002 fcd8 	bl	801012e <__copybits>
 800d77e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d780:	4620      	mov	r0, r4
 800d782:	f002 f89d 	bl	800f8c0 <_Bfree>
 800d786:	3f01      	subs	r7, #1
 800d788:	2f05      	cmp	r7, #5
 800d78a:	d807      	bhi.n	800d79c <_strtod_l+0xfc>
 800d78c:	e8df f007 	tbb	[pc, r7]
 800d790:	1d180b0e 	.word	0x1d180b0e
 800d794:	030e      	.short	0x030e
 800d796:	f04f 0b00 	mov.w	fp, #0
 800d79a:	46da      	mov	sl, fp
 800d79c:	0728      	lsls	r0, r5, #28
 800d79e:	d5c1      	bpl.n	800d724 <_strtod_l+0x84>
 800d7a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d7a4:	e7be      	b.n	800d724 <_strtod_l+0x84>
 800d7a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d7aa:	e7f7      	b.n	800d79c <_strtod_l+0xfc>
 800d7ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d7b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d7b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d7b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d7ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d7be:	e7ed      	b.n	800d79c <_strtod_l+0xfc>
 800d7c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d948 <_strtod_l+0x2a8>
 800d7c4:	f04f 0a00 	mov.w	sl, #0
 800d7c8:	e7e8      	b.n	800d79c <_strtod_l+0xfc>
 800d7ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d7ce:	f04f 3aff 	mov.w	sl, #4294967295
 800d7d2:	e7e3      	b.n	800d79c <_strtod_l+0xfc>
 800d7d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	921d      	str	r2, [sp, #116]	; 0x74
 800d7da:	785b      	ldrb	r3, [r3, #1]
 800d7dc:	2b30      	cmp	r3, #48	; 0x30
 800d7de:	d0f9      	beq.n	800d7d4 <_strtod_l+0x134>
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d09f      	beq.n	800d724 <_strtod_l+0x84>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	f04f 0900 	mov.w	r9, #0
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d7f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d7f4:	464f      	mov	r7, r9
 800d7f6:	220a      	movs	r2, #10
 800d7f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d7fa:	7806      	ldrb	r6, [r0, #0]
 800d7fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d800:	b2d9      	uxtb	r1, r3
 800d802:	2909      	cmp	r1, #9
 800d804:	d92a      	bls.n	800d85c <_strtod_l+0x1bc>
 800d806:	9907      	ldr	r1, [sp, #28]
 800d808:	462a      	mov	r2, r5
 800d80a:	f7ff ff08 	bl	800d61e <strncmp>
 800d80e:	b398      	cbz	r0, 800d878 <_strtod_l+0x1d8>
 800d810:	2000      	movs	r0, #0
 800d812:	4633      	mov	r3, r6
 800d814:	463d      	mov	r5, r7
 800d816:	9007      	str	r0, [sp, #28]
 800d818:	4602      	mov	r2, r0
 800d81a:	2b65      	cmp	r3, #101	; 0x65
 800d81c:	d001      	beq.n	800d822 <_strtod_l+0x182>
 800d81e:	2b45      	cmp	r3, #69	; 0x45
 800d820:	d118      	bne.n	800d854 <_strtod_l+0x1b4>
 800d822:	b91d      	cbnz	r5, 800d82c <_strtod_l+0x18c>
 800d824:	9b04      	ldr	r3, [sp, #16]
 800d826:	4303      	orrs	r3, r0
 800d828:	d098      	beq.n	800d75c <_strtod_l+0xbc>
 800d82a:	2500      	movs	r5, #0
 800d82c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d830:	f108 0301 	add.w	r3, r8, #1
 800d834:	931d      	str	r3, [sp, #116]	; 0x74
 800d836:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d83a:	2b2b      	cmp	r3, #43	; 0x2b
 800d83c:	d075      	beq.n	800d92a <_strtod_l+0x28a>
 800d83e:	2b2d      	cmp	r3, #45	; 0x2d
 800d840:	d07b      	beq.n	800d93a <_strtod_l+0x29a>
 800d842:	f04f 0c00 	mov.w	ip, #0
 800d846:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d84a:	2909      	cmp	r1, #9
 800d84c:	f240 8082 	bls.w	800d954 <_strtod_l+0x2b4>
 800d850:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d854:	2600      	movs	r6, #0
 800d856:	e09d      	b.n	800d994 <_strtod_l+0x2f4>
 800d858:	2300      	movs	r3, #0
 800d85a:	e7c4      	b.n	800d7e6 <_strtod_l+0x146>
 800d85c:	2f08      	cmp	r7, #8
 800d85e:	bfd8      	it	le
 800d860:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d862:	f100 0001 	add.w	r0, r0, #1
 800d866:	bfda      	itte	le
 800d868:	fb02 3301 	mlale	r3, r2, r1, r3
 800d86c:	9309      	strle	r3, [sp, #36]	; 0x24
 800d86e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d872:	3701      	adds	r7, #1
 800d874:	901d      	str	r0, [sp, #116]	; 0x74
 800d876:	e7bf      	b.n	800d7f8 <_strtod_l+0x158>
 800d878:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d87a:	195a      	adds	r2, r3, r5
 800d87c:	921d      	str	r2, [sp, #116]	; 0x74
 800d87e:	5d5b      	ldrb	r3, [r3, r5]
 800d880:	2f00      	cmp	r7, #0
 800d882:	d037      	beq.n	800d8f4 <_strtod_l+0x254>
 800d884:	9007      	str	r0, [sp, #28]
 800d886:	463d      	mov	r5, r7
 800d888:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d88c:	2a09      	cmp	r2, #9
 800d88e:	d912      	bls.n	800d8b6 <_strtod_l+0x216>
 800d890:	2201      	movs	r2, #1
 800d892:	e7c2      	b.n	800d81a <_strtod_l+0x17a>
 800d894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	921d      	str	r2, [sp, #116]	; 0x74
 800d89a:	785b      	ldrb	r3, [r3, #1]
 800d89c:	3001      	adds	r0, #1
 800d89e:	2b30      	cmp	r3, #48	; 0x30
 800d8a0:	d0f8      	beq.n	800d894 <_strtod_l+0x1f4>
 800d8a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d8a6:	2a08      	cmp	r2, #8
 800d8a8:	f200 84db 	bhi.w	800e262 <_strtod_l+0xbc2>
 800d8ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d8ae:	9007      	str	r0, [sp, #28]
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	920a      	str	r2, [sp, #40]	; 0x28
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	3b30      	subs	r3, #48	; 0x30
 800d8b8:	f100 0201 	add.w	r2, r0, #1
 800d8bc:	d014      	beq.n	800d8e8 <_strtod_l+0x248>
 800d8be:	9907      	ldr	r1, [sp, #28]
 800d8c0:	4411      	add	r1, r2
 800d8c2:	9107      	str	r1, [sp, #28]
 800d8c4:	462a      	mov	r2, r5
 800d8c6:	eb00 0e05 	add.w	lr, r0, r5
 800d8ca:	210a      	movs	r1, #10
 800d8cc:	4572      	cmp	r2, lr
 800d8ce:	d113      	bne.n	800d8f8 <_strtod_l+0x258>
 800d8d0:	182a      	adds	r2, r5, r0
 800d8d2:	2a08      	cmp	r2, #8
 800d8d4:	f105 0501 	add.w	r5, r5, #1
 800d8d8:	4405      	add	r5, r0
 800d8da:	dc1c      	bgt.n	800d916 <_strtod_l+0x276>
 800d8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8de:	220a      	movs	r2, #10
 800d8e0:	fb02 3301 	mla	r3, r2, r1, r3
 800d8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8ea:	1c59      	adds	r1, r3, #1
 800d8ec:	911d      	str	r1, [sp, #116]	; 0x74
 800d8ee:	785b      	ldrb	r3, [r3, #1]
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	e7c9      	b.n	800d888 <_strtod_l+0x1e8>
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	e7d2      	b.n	800d89e <_strtod_l+0x1fe>
 800d8f8:	2a08      	cmp	r2, #8
 800d8fa:	dc04      	bgt.n	800d906 <_strtod_l+0x266>
 800d8fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d8fe:	434e      	muls	r6, r1
 800d900:	9609      	str	r6, [sp, #36]	; 0x24
 800d902:	3201      	adds	r2, #1
 800d904:	e7e2      	b.n	800d8cc <_strtod_l+0x22c>
 800d906:	f102 0c01 	add.w	ip, r2, #1
 800d90a:	f1bc 0f10 	cmp.w	ip, #16
 800d90e:	bfd8      	it	le
 800d910:	fb01 f909 	mulle.w	r9, r1, r9
 800d914:	e7f5      	b.n	800d902 <_strtod_l+0x262>
 800d916:	2d10      	cmp	r5, #16
 800d918:	bfdc      	itt	le
 800d91a:	220a      	movle	r2, #10
 800d91c:	fb02 3909 	mlale	r9, r2, r9, r3
 800d920:	e7e1      	b.n	800d8e6 <_strtod_l+0x246>
 800d922:	2300      	movs	r3, #0
 800d924:	9307      	str	r3, [sp, #28]
 800d926:	2201      	movs	r2, #1
 800d928:	e77c      	b.n	800d824 <_strtod_l+0x184>
 800d92a:	f04f 0c00 	mov.w	ip, #0
 800d92e:	f108 0302 	add.w	r3, r8, #2
 800d932:	931d      	str	r3, [sp, #116]	; 0x74
 800d934:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d938:	e785      	b.n	800d846 <_strtod_l+0x1a6>
 800d93a:	f04f 0c01 	mov.w	ip, #1
 800d93e:	e7f6      	b.n	800d92e <_strtod_l+0x28e>
 800d940:	080125a8 	.word	0x080125a8
 800d944:	08012358 	.word	0x08012358
 800d948:	7ff00000 	.word	0x7ff00000
 800d94c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d94e:	1c59      	adds	r1, r3, #1
 800d950:	911d      	str	r1, [sp, #116]	; 0x74
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	2b30      	cmp	r3, #48	; 0x30
 800d956:	d0f9      	beq.n	800d94c <_strtod_l+0x2ac>
 800d958:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d95c:	2908      	cmp	r1, #8
 800d95e:	f63f af79 	bhi.w	800d854 <_strtod_l+0x1b4>
 800d962:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d966:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d968:	9308      	str	r3, [sp, #32]
 800d96a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d96c:	1c59      	adds	r1, r3, #1
 800d96e:	911d      	str	r1, [sp, #116]	; 0x74
 800d970:	785b      	ldrb	r3, [r3, #1]
 800d972:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d976:	2e09      	cmp	r6, #9
 800d978:	d937      	bls.n	800d9ea <_strtod_l+0x34a>
 800d97a:	9e08      	ldr	r6, [sp, #32]
 800d97c:	1b89      	subs	r1, r1, r6
 800d97e:	2908      	cmp	r1, #8
 800d980:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d984:	dc02      	bgt.n	800d98c <_strtod_l+0x2ec>
 800d986:	4576      	cmp	r6, lr
 800d988:	bfa8      	it	ge
 800d98a:	4676      	movge	r6, lr
 800d98c:	f1bc 0f00 	cmp.w	ip, #0
 800d990:	d000      	beq.n	800d994 <_strtod_l+0x2f4>
 800d992:	4276      	negs	r6, r6
 800d994:	2d00      	cmp	r5, #0
 800d996:	d14f      	bne.n	800da38 <_strtod_l+0x398>
 800d998:	9904      	ldr	r1, [sp, #16]
 800d99a:	4301      	orrs	r1, r0
 800d99c:	f47f aec2 	bne.w	800d724 <_strtod_l+0x84>
 800d9a0:	2a00      	cmp	r2, #0
 800d9a2:	f47f aedb 	bne.w	800d75c <_strtod_l+0xbc>
 800d9a6:	2b69      	cmp	r3, #105	; 0x69
 800d9a8:	d027      	beq.n	800d9fa <_strtod_l+0x35a>
 800d9aa:	dc24      	bgt.n	800d9f6 <_strtod_l+0x356>
 800d9ac:	2b49      	cmp	r3, #73	; 0x49
 800d9ae:	d024      	beq.n	800d9fa <_strtod_l+0x35a>
 800d9b0:	2b4e      	cmp	r3, #78	; 0x4e
 800d9b2:	f47f aed3 	bne.w	800d75c <_strtod_l+0xbc>
 800d9b6:	499e      	ldr	r1, [pc, #632]	; (800dc30 <_strtod_l+0x590>)
 800d9b8:	a81d      	add	r0, sp, #116	; 0x74
 800d9ba:	f001 fe61 	bl	800f680 <__match>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	f43f aecc 	beq.w	800d75c <_strtod_l+0xbc>
 800d9c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	2b28      	cmp	r3, #40	; 0x28
 800d9ca:	d12d      	bne.n	800da28 <_strtod_l+0x388>
 800d9cc:	4999      	ldr	r1, [pc, #612]	; (800dc34 <_strtod_l+0x594>)
 800d9ce:	aa20      	add	r2, sp, #128	; 0x80
 800d9d0:	a81d      	add	r0, sp, #116	; 0x74
 800d9d2:	f001 fe69 	bl	800f6a8 <__hexnan>
 800d9d6:	2805      	cmp	r0, #5
 800d9d8:	d126      	bne.n	800da28 <_strtod_l+0x388>
 800d9da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d9e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d9e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d9e8:	e69c      	b.n	800d724 <_strtod_l+0x84>
 800d9ea:	210a      	movs	r1, #10
 800d9ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d9f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d9f4:	e7b9      	b.n	800d96a <_strtod_l+0x2ca>
 800d9f6:	2b6e      	cmp	r3, #110	; 0x6e
 800d9f8:	e7db      	b.n	800d9b2 <_strtod_l+0x312>
 800d9fa:	498f      	ldr	r1, [pc, #572]	; (800dc38 <_strtod_l+0x598>)
 800d9fc:	a81d      	add	r0, sp, #116	; 0x74
 800d9fe:	f001 fe3f 	bl	800f680 <__match>
 800da02:	2800      	cmp	r0, #0
 800da04:	f43f aeaa 	beq.w	800d75c <_strtod_l+0xbc>
 800da08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da0a:	498c      	ldr	r1, [pc, #560]	; (800dc3c <_strtod_l+0x59c>)
 800da0c:	3b01      	subs	r3, #1
 800da0e:	a81d      	add	r0, sp, #116	; 0x74
 800da10:	931d      	str	r3, [sp, #116]	; 0x74
 800da12:	f001 fe35 	bl	800f680 <__match>
 800da16:	b910      	cbnz	r0, 800da1e <_strtod_l+0x37e>
 800da18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da1a:	3301      	adds	r3, #1
 800da1c:	931d      	str	r3, [sp, #116]	; 0x74
 800da1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800dc4c <_strtod_l+0x5ac>
 800da22:	f04f 0a00 	mov.w	sl, #0
 800da26:	e67d      	b.n	800d724 <_strtod_l+0x84>
 800da28:	4885      	ldr	r0, [pc, #532]	; (800dc40 <_strtod_l+0x5a0>)
 800da2a:	f003 f909 	bl	8010c40 <nan>
 800da2e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800da32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800da36:	e675      	b.n	800d724 <_strtod_l+0x84>
 800da38:	9b07      	ldr	r3, [sp, #28]
 800da3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da3c:	1af3      	subs	r3, r6, r3
 800da3e:	2f00      	cmp	r7, #0
 800da40:	bf08      	it	eq
 800da42:	462f      	moveq	r7, r5
 800da44:	2d10      	cmp	r5, #16
 800da46:	9308      	str	r3, [sp, #32]
 800da48:	46a8      	mov	r8, r5
 800da4a:	bfa8      	it	ge
 800da4c:	f04f 0810 	movge.w	r8, #16
 800da50:	f7f2 fd60 	bl	8000514 <__aeabi_ui2d>
 800da54:	2d09      	cmp	r5, #9
 800da56:	4682      	mov	sl, r0
 800da58:	468b      	mov	fp, r1
 800da5a:	dd13      	ble.n	800da84 <_strtod_l+0x3e4>
 800da5c:	4b79      	ldr	r3, [pc, #484]	; (800dc44 <_strtod_l+0x5a4>)
 800da5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800da62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800da66:	f7f2 fdcf 	bl	8000608 <__aeabi_dmul>
 800da6a:	4682      	mov	sl, r0
 800da6c:	4648      	mov	r0, r9
 800da6e:	468b      	mov	fp, r1
 800da70:	f7f2 fd50 	bl	8000514 <__aeabi_ui2d>
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	4650      	mov	r0, sl
 800da7a:	4659      	mov	r1, fp
 800da7c:	f7f2 fc0e 	bl	800029c <__adddf3>
 800da80:	4682      	mov	sl, r0
 800da82:	468b      	mov	fp, r1
 800da84:	2d0f      	cmp	r5, #15
 800da86:	dc38      	bgt.n	800dafa <_strtod_l+0x45a>
 800da88:	9b08      	ldr	r3, [sp, #32]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f43f ae4a 	beq.w	800d724 <_strtod_l+0x84>
 800da90:	dd24      	ble.n	800dadc <_strtod_l+0x43c>
 800da92:	2b16      	cmp	r3, #22
 800da94:	dc0b      	bgt.n	800daae <_strtod_l+0x40e>
 800da96:	4d6b      	ldr	r5, [pc, #428]	; (800dc44 <_strtod_l+0x5a4>)
 800da98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800da9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800daa0:	4652      	mov	r2, sl
 800daa2:	465b      	mov	r3, fp
 800daa4:	f7f2 fdb0 	bl	8000608 <__aeabi_dmul>
 800daa8:	4682      	mov	sl, r0
 800daaa:	468b      	mov	fp, r1
 800daac:	e63a      	b.n	800d724 <_strtod_l+0x84>
 800daae:	9a08      	ldr	r2, [sp, #32]
 800dab0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dab4:	4293      	cmp	r3, r2
 800dab6:	db20      	blt.n	800dafa <_strtod_l+0x45a>
 800dab8:	4c62      	ldr	r4, [pc, #392]	; (800dc44 <_strtod_l+0x5a4>)
 800daba:	f1c5 050f 	rsb	r5, r5, #15
 800dabe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dac2:	4652      	mov	r2, sl
 800dac4:	465b      	mov	r3, fp
 800dac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daca:	f7f2 fd9d 	bl	8000608 <__aeabi_dmul>
 800dace:	9b08      	ldr	r3, [sp, #32]
 800dad0:	1b5d      	subs	r5, r3, r5
 800dad2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dad6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dada:	e7e3      	b.n	800daa4 <_strtod_l+0x404>
 800dadc:	9b08      	ldr	r3, [sp, #32]
 800dade:	3316      	adds	r3, #22
 800dae0:	db0b      	blt.n	800dafa <_strtod_l+0x45a>
 800dae2:	9b07      	ldr	r3, [sp, #28]
 800dae4:	4a57      	ldr	r2, [pc, #348]	; (800dc44 <_strtod_l+0x5a4>)
 800dae6:	1b9e      	subs	r6, r3, r6
 800dae8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800daec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800daf0:	4650      	mov	r0, sl
 800daf2:	4659      	mov	r1, fp
 800daf4:	f7f2 feb2 	bl	800085c <__aeabi_ddiv>
 800daf8:	e7d6      	b.n	800daa8 <_strtod_l+0x408>
 800dafa:	9b08      	ldr	r3, [sp, #32]
 800dafc:	eba5 0808 	sub.w	r8, r5, r8
 800db00:	4498      	add	r8, r3
 800db02:	f1b8 0f00 	cmp.w	r8, #0
 800db06:	dd71      	ble.n	800dbec <_strtod_l+0x54c>
 800db08:	f018 030f 	ands.w	r3, r8, #15
 800db0c:	d00a      	beq.n	800db24 <_strtod_l+0x484>
 800db0e:	494d      	ldr	r1, [pc, #308]	; (800dc44 <_strtod_l+0x5a4>)
 800db10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db14:	4652      	mov	r2, sl
 800db16:	465b      	mov	r3, fp
 800db18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db1c:	f7f2 fd74 	bl	8000608 <__aeabi_dmul>
 800db20:	4682      	mov	sl, r0
 800db22:	468b      	mov	fp, r1
 800db24:	f038 080f 	bics.w	r8, r8, #15
 800db28:	d04d      	beq.n	800dbc6 <_strtod_l+0x526>
 800db2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800db2e:	dd22      	ble.n	800db76 <_strtod_l+0x4d6>
 800db30:	2500      	movs	r5, #0
 800db32:	462e      	mov	r6, r5
 800db34:	9509      	str	r5, [sp, #36]	; 0x24
 800db36:	9507      	str	r5, [sp, #28]
 800db38:	2322      	movs	r3, #34	; 0x22
 800db3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800dc4c <_strtod_l+0x5ac>
 800db3e:	6023      	str	r3, [r4, #0]
 800db40:	f04f 0a00 	mov.w	sl, #0
 800db44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db46:	2b00      	cmp	r3, #0
 800db48:	f43f adec 	beq.w	800d724 <_strtod_l+0x84>
 800db4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800db4e:	4620      	mov	r0, r4
 800db50:	f001 feb6 	bl	800f8c0 <_Bfree>
 800db54:	9907      	ldr	r1, [sp, #28]
 800db56:	4620      	mov	r0, r4
 800db58:	f001 feb2 	bl	800f8c0 <_Bfree>
 800db5c:	4631      	mov	r1, r6
 800db5e:	4620      	mov	r0, r4
 800db60:	f001 feae 	bl	800f8c0 <_Bfree>
 800db64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db66:	4620      	mov	r0, r4
 800db68:	f001 feaa 	bl	800f8c0 <_Bfree>
 800db6c:	4629      	mov	r1, r5
 800db6e:	4620      	mov	r0, r4
 800db70:	f001 fea6 	bl	800f8c0 <_Bfree>
 800db74:	e5d6      	b.n	800d724 <_strtod_l+0x84>
 800db76:	2300      	movs	r3, #0
 800db78:	ea4f 1828 	mov.w	r8, r8, asr #4
 800db7c:	4650      	mov	r0, sl
 800db7e:	4659      	mov	r1, fp
 800db80:	4699      	mov	r9, r3
 800db82:	f1b8 0f01 	cmp.w	r8, #1
 800db86:	dc21      	bgt.n	800dbcc <_strtod_l+0x52c>
 800db88:	b10b      	cbz	r3, 800db8e <_strtod_l+0x4ee>
 800db8a:	4682      	mov	sl, r0
 800db8c:	468b      	mov	fp, r1
 800db8e:	4b2e      	ldr	r3, [pc, #184]	; (800dc48 <_strtod_l+0x5a8>)
 800db90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800db94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800db98:	4652      	mov	r2, sl
 800db9a:	465b      	mov	r3, fp
 800db9c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dba0:	f7f2 fd32 	bl	8000608 <__aeabi_dmul>
 800dba4:	4b29      	ldr	r3, [pc, #164]	; (800dc4c <_strtod_l+0x5ac>)
 800dba6:	460a      	mov	r2, r1
 800dba8:	400b      	ands	r3, r1
 800dbaa:	4929      	ldr	r1, [pc, #164]	; (800dc50 <_strtod_l+0x5b0>)
 800dbac:	428b      	cmp	r3, r1
 800dbae:	4682      	mov	sl, r0
 800dbb0:	d8be      	bhi.n	800db30 <_strtod_l+0x490>
 800dbb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dbb6:	428b      	cmp	r3, r1
 800dbb8:	bf86      	itte	hi
 800dbba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dc54 <_strtod_l+0x5b4>
 800dbbe:	f04f 3aff 	movhi.w	sl, #4294967295
 800dbc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	e081      	b.n	800dcd0 <_strtod_l+0x630>
 800dbcc:	f018 0f01 	tst.w	r8, #1
 800dbd0:	d007      	beq.n	800dbe2 <_strtod_l+0x542>
 800dbd2:	4b1d      	ldr	r3, [pc, #116]	; (800dc48 <_strtod_l+0x5a8>)
 800dbd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800dbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbdc:	f7f2 fd14 	bl	8000608 <__aeabi_dmul>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f109 0901 	add.w	r9, r9, #1
 800dbe6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dbea:	e7ca      	b.n	800db82 <_strtod_l+0x4e2>
 800dbec:	d0eb      	beq.n	800dbc6 <_strtod_l+0x526>
 800dbee:	f1c8 0800 	rsb	r8, r8, #0
 800dbf2:	f018 020f 	ands.w	r2, r8, #15
 800dbf6:	d00a      	beq.n	800dc0e <_strtod_l+0x56e>
 800dbf8:	4b12      	ldr	r3, [pc, #72]	; (800dc44 <_strtod_l+0x5a4>)
 800dbfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbfe:	4650      	mov	r0, sl
 800dc00:	4659      	mov	r1, fp
 800dc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc06:	f7f2 fe29 	bl	800085c <__aeabi_ddiv>
 800dc0a:	4682      	mov	sl, r0
 800dc0c:	468b      	mov	fp, r1
 800dc0e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dc12:	d0d8      	beq.n	800dbc6 <_strtod_l+0x526>
 800dc14:	f1b8 0f1f 	cmp.w	r8, #31
 800dc18:	dd1e      	ble.n	800dc58 <_strtod_l+0x5b8>
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	462e      	mov	r6, r5
 800dc1e:	9509      	str	r5, [sp, #36]	; 0x24
 800dc20:	9507      	str	r5, [sp, #28]
 800dc22:	2322      	movs	r3, #34	; 0x22
 800dc24:	f04f 0a00 	mov.w	sl, #0
 800dc28:	f04f 0b00 	mov.w	fp, #0
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	e789      	b.n	800db44 <_strtod_l+0x4a4>
 800dc30:	0801232d 	.word	0x0801232d
 800dc34:	0801236c 	.word	0x0801236c
 800dc38:	08012325 	.word	0x08012325
 800dc3c:	080124ac 	.word	0x080124ac
 800dc40:	08012783 	.word	0x08012783
 800dc44:	08012648 	.word	0x08012648
 800dc48:	08012620 	.word	0x08012620
 800dc4c:	7ff00000 	.word	0x7ff00000
 800dc50:	7ca00000 	.word	0x7ca00000
 800dc54:	7fefffff 	.word	0x7fefffff
 800dc58:	f018 0310 	ands.w	r3, r8, #16
 800dc5c:	bf18      	it	ne
 800dc5e:	236a      	movne	r3, #106	; 0x6a
 800dc60:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e018 <_strtod_l+0x978>
 800dc64:	9304      	str	r3, [sp, #16]
 800dc66:	4650      	mov	r0, sl
 800dc68:	4659      	mov	r1, fp
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f018 0f01 	tst.w	r8, #1
 800dc70:	d004      	beq.n	800dc7c <_strtod_l+0x5dc>
 800dc72:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc76:	f7f2 fcc7 	bl	8000608 <__aeabi_dmul>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800dc80:	f109 0908 	add.w	r9, r9, #8
 800dc84:	d1f2      	bne.n	800dc6c <_strtod_l+0x5cc>
 800dc86:	b10b      	cbz	r3, 800dc8c <_strtod_l+0x5ec>
 800dc88:	4682      	mov	sl, r0
 800dc8a:	468b      	mov	fp, r1
 800dc8c:	9b04      	ldr	r3, [sp, #16]
 800dc8e:	b1bb      	cbz	r3, 800dcc0 <_strtod_l+0x620>
 800dc90:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dc94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	4659      	mov	r1, fp
 800dc9c:	dd10      	ble.n	800dcc0 <_strtod_l+0x620>
 800dc9e:	2b1f      	cmp	r3, #31
 800dca0:	f340 8128 	ble.w	800def4 <_strtod_l+0x854>
 800dca4:	2b34      	cmp	r3, #52	; 0x34
 800dca6:	bfde      	ittt	le
 800dca8:	3b20      	suble	r3, #32
 800dcaa:	f04f 32ff 	movle.w	r2, #4294967295
 800dcae:	fa02 f303 	lslle.w	r3, r2, r3
 800dcb2:	f04f 0a00 	mov.w	sl, #0
 800dcb6:	bfcc      	ite	gt
 800dcb8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dcbc:	ea03 0b01 	andle.w	fp, r3, r1
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4650      	mov	r0, sl
 800dcc6:	4659      	mov	r1, fp
 800dcc8:	f7f2 ff06 	bl	8000ad8 <__aeabi_dcmpeq>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1a4      	bne.n	800dc1a <_strtod_l+0x57a>
 800dcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dcd6:	462b      	mov	r3, r5
 800dcd8:	463a      	mov	r2, r7
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f001 fe5c 	bl	800f998 <__s2b>
 800dce0:	9009      	str	r0, [sp, #36]	; 0x24
 800dce2:	2800      	cmp	r0, #0
 800dce4:	f43f af24 	beq.w	800db30 <_strtod_l+0x490>
 800dce8:	9b07      	ldr	r3, [sp, #28]
 800dcea:	1b9e      	subs	r6, r3, r6
 800dcec:	9b08      	ldr	r3, [sp, #32]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	bfb4      	ite	lt
 800dcf2:	4633      	movlt	r3, r6
 800dcf4:	2300      	movge	r3, #0
 800dcf6:	9310      	str	r3, [sp, #64]	; 0x40
 800dcf8:	9b08      	ldr	r3, [sp, #32]
 800dcfa:	2500      	movs	r5, #0
 800dcfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd00:	9318      	str	r3, [sp, #96]	; 0x60
 800dd02:	462e      	mov	r6, r5
 800dd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd06:	4620      	mov	r0, r4
 800dd08:	6859      	ldr	r1, [r3, #4]
 800dd0a:	f001 fd99 	bl	800f840 <_Balloc>
 800dd0e:	9007      	str	r0, [sp, #28]
 800dd10:	2800      	cmp	r0, #0
 800dd12:	f43f af11 	beq.w	800db38 <_strtod_l+0x498>
 800dd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd18:	691a      	ldr	r2, [r3, #16]
 800dd1a:	3202      	adds	r2, #2
 800dd1c:	f103 010c 	add.w	r1, r3, #12
 800dd20:	0092      	lsls	r2, r2, #2
 800dd22:	300c      	adds	r0, #12
 800dd24:	f7fe fd54 	bl	800c7d0 <memcpy>
 800dd28:	ec4b ab10 	vmov	d0, sl, fp
 800dd2c:	aa20      	add	r2, sp, #128	; 0x80
 800dd2e:	a91f      	add	r1, sp, #124	; 0x7c
 800dd30:	4620      	mov	r0, r4
 800dd32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dd36:	f002 f96b 	bl	8010010 <__d2b>
 800dd3a:	901e      	str	r0, [sp, #120]	; 0x78
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	f43f aefb 	beq.w	800db38 <_strtod_l+0x498>
 800dd42:	2101      	movs	r1, #1
 800dd44:	4620      	mov	r0, r4
 800dd46:	f001 fec1 	bl	800facc <__i2b>
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	f43f aef3 	beq.w	800db38 <_strtod_l+0x498>
 800dd52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd54:	9904      	ldr	r1, [sp, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	bfab      	itete	ge
 800dd5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800dd5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800dd5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800dd60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800dd64:	bfac      	ite	ge
 800dd66:	eb03 0902 	addge.w	r9, r3, r2
 800dd6a:	1ad7      	sublt	r7, r2, r3
 800dd6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd6e:	eba3 0801 	sub.w	r8, r3, r1
 800dd72:	4490      	add	r8, r2
 800dd74:	4ba3      	ldr	r3, [pc, #652]	; (800e004 <_strtod_l+0x964>)
 800dd76:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd7a:	4598      	cmp	r8, r3
 800dd7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dd80:	f280 80cc 	bge.w	800df1c <_strtod_l+0x87c>
 800dd84:	eba3 0308 	sub.w	r3, r3, r8
 800dd88:	2b1f      	cmp	r3, #31
 800dd8a:	eba2 0203 	sub.w	r2, r2, r3
 800dd8e:	f04f 0101 	mov.w	r1, #1
 800dd92:	f300 80b6 	bgt.w	800df02 <_strtod_l+0x862>
 800dd96:	fa01 f303 	lsl.w	r3, r1, r3
 800dd9a:	9311      	str	r3, [sp, #68]	; 0x44
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	930c      	str	r3, [sp, #48]	; 0x30
 800dda0:	eb09 0802 	add.w	r8, r9, r2
 800dda4:	9b04      	ldr	r3, [sp, #16]
 800dda6:	45c1      	cmp	r9, r8
 800dda8:	4417      	add	r7, r2
 800ddaa:	441f      	add	r7, r3
 800ddac:	464b      	mov	r3, r9
 800ddae:	bfa8      	it	ge
 800ddb0:	4643      	movge	r3, r8
 800ddb2:	42bb      	cmp	r3, r7
 800ddb4:	bfa8      	it	ge
 800ddb6:	463b      	movge	r3, r7
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	bfc2      	ittt	gt
 800ddbc:	eba8 0803 	subgt.w	r8, r8, r3
 800ddc0:	1aff      	subgt	r7, r7, r3
 800ddc2:	eba9 0903 	subgt.w	r9, r9, r3
 800ddc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dd17      	ble.n	800ddfc <_strtod_l+0x75c>
 800ddcc:	4631      	mov	r1, r6
 800ddce:	461a      	mov	r2, r3
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f001 ff37 	bl	800fc44 <__pow5mult>
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	f43f aead 	beq.w	800db38 <_strtod_l+0x498>
 800ddde:	4601      	mov	r1, r0
 800dde0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dde2:	4620      	mov	r0, r4
 800dde4:	f001 fe88 	bl	800faf8 <__multiply>
 800dde8:	900f      	str	r0, [sp, #60]	; 0x3c
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f43f aea4 	beq.w	800db38 <_strtod_l+0x498>
 800ddf0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f001 fd64 	bl	800f8c0 <_Bfree>
 800ddf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddfa:	931e      	str	r3, [sp, #120]	; 0x78
 800ddfc:	f1b8 0f00 	cmp.w	r8, #0
 800de00:	f300 8091 	bgt.w	800df26 <_strtod_l+0x886>
 800de04:	9b08      	ldr	r3, [sp, #32]
 800de06:	2b00      	cmp	r3, #0
 800de08:	dd08      	ble.n	800de1c <_strtod_l+0x77c>
 800de0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800de0c:	9907      	ldr	r1, [sp, #28]
 800de0e:	4620      	mov	r0, r4
 800de10:	f001 ff18 	bl	800fc44 <__pow5mult>
 800de14:	9007      	str	r0, [sp, #28]
 800de16:	2800      	cmp	r0, #0
 800de18:	f43f ae8e 	beq.w	800db38 <_strtod_l+0x498>
 800de1c:	2f00      	cmp	r7, #0
 800de1e:	dd08      	ble.n	800de32 <_strtod_l+0x792>
 800de20:	9907      	ldr	r1, [sp, #28]
 800de22:	463a      	mov	r2, r7
 800de24:	4620      	mov	r0, r4
 800de26:	f001 ff67 	bl	800fcf8 <__lshift>
 800de2a:	9007      	str	r0, [sp, #28]
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f43f ae83 	beq.w	800db38 <_strtod_l+0x498>
 800de32:	f1b9 0f00 	cmp.w	r9, #0
 800de36:	dd08      	ble.n	800de4a <_strtod_l+0x7aa>
 800de38:	4631      	mov	r1, r6
 800de3a:	464a      	mov	r2, r9
 800de3c:	4620      	mov	r0, r4
 800de3e:	f001 ff5b 	bl	800fcf8 <__lshift>
 800de42:	4606      	mov	r6, r0
 800de44:	2800      	cmp	r0, #0
 800de46:	f43f ae77 	beq.w	800db38 <_strtod_l+0x498>
 800de4a:	9a07      	ldr	r2, [sp, #28]
 800de4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800de4e:	4620      	mov	r0, r4
 800de50:	f001 ffda 	bl	800fe08 <__mdiff>
 800de54:	4605      	mov	r5, r0
 800de56:	2800      	cmp	r0, #0
 800de58:	f43f ae6e 	beq.w	800db38 <_strtod_l+0x498>
 800de5c:	68c3      	ldr	r3, [r0, #12]
 800de5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800de60:	2300      	movs	r3, #0
 800de62:	60c3      	str	r3, [r0, #12]
 800de64:	4631      	mov	r1, r6
 800de66:	f001 ffb3 	bl	800fdd0 <__mcmp>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	da65      	bge.n	800df3a <_strtod_l+0x89a>
 800de6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de70:	ea53 030a 	orrs.w	r3, r3, sl
 800de74:	f040 8087 	bne.w	800df86 <_strtod_l+0x8e6>
 800de78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f040 8082 	bne.w	800df86 <_strtod_l+0x8e6>
 800de82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de86:	0d1b      	lsrs	r3, r3, #20
 800de88:	051b      	lsls	r3, r3, #20
 800de8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800de8e:	d97a      	bls.n	800df86 <_strtod_l+0x8e6>
 800de90:	696b      	ldr	r3, [r5, #20]
 800de92:	b913      	cbnz	r3, 800de9a <_strtod_l+0x7fa>
 800de94:	692b      	ldr	r3, [r5, #16]
 800de96:	2b01      	cmp	r3, #1
 800de98:	dd75      	ble.n	800df86 <_strtod_l+0x8e6>
 800de9a:	4629      	mov	r1, r5
 800de9c:	2201      	movs	r2, #1
 800de9e:	4620      	mov	r0, r4
 800dea0:	f001 ff2a 	bl	800fcf8 <__lshift>
 800dea4:	4631      	mov	r1, r6
 800dea6:	4605      	mov	r5, r0
 800dea8:	f001 ff92 	bl	800fdd0 <__mcmp>
 800deac:	2800      	cmp	r0, #0
 800deae:	dd6a      	ble.n	800df86 <_strtod_l+0x8e6>
 800deb0:	9904      	ldr	r1, [sp, #16]
 800deb2:	4a55      	ldr	r2, [pc, #340]	; (800e008 <_strtod_l+0x968>)
 800deb4:	465b      	mov	r3, fp
 800deb6:	2900      	cmp	r1, #0
 800deb8:	f000 8085 	beq.w	800dfc6 <_strtod_l+0x926>
 800debc:	ea02 010b 	and.w	r1, r2, fp
 800dec0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dec4:	dc7f      	bgt.n	800dfc6 <_strtod_l+0x926>
 800dec6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800deca:	f77f aeaa 	ble.w	800dc22 <_strtod_l+0x582>
 800dece:	4a4f      	ldr	r2, [pc, #316]	; (800e00c <_strtod_l+0x96c>)
 800ded0:	2300      	movs	r3, #0
 800ded2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ded6:	4650      	mov	r0, sl
 800ded8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800dedc:	4659      	mov	r1, fp
 800dede:	f7f2 fb93 	bl	8000608 <__aeabi_dmul>
 800dee2:	460b      	mov	r3, r1
 800dee4:	4303      	orrs	r3, r0
 800dee6:	bf08      	it	eq
 800dee8:	2322      	moveq	r3, #34	; 0x22
 800deea:	4682      	mov	sl, r0
 800deec:	468b      	mov	fp, r1
 800deee:	bf08      	it	eq
 800def0:	6023      	streq	r3, [r4, #0]
 800def2:	e62b      	b.n	800db4c <_strtod_l+0x4ac>
 800def4:	f04f 32ff 	mov.w	r2, #4294967295
 800def8:	fa02 f303 	lsl.w	r3, r2, r3
 800defc:	ea03 0a0a 	and.w	sl, r3, sl
 800df00:	e6de      	b.n	800dcc0 <_strtod_l+0x620>
 800df02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800df06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800df0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800df0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800df12:	fa01 f308 	lsl.w	r3, r1, r8
 800df16:	930c      	str	r3, [sp, #48]	; 0x30
 800df18:	9111      	str	r1, [sp, #68]	; 0x44
 800df1a:	e741      	b.n	800dda0 <_strtod_l+0x700>
 800df1c:	2300      	movs	r3, #0
 800df1e:	930c      	str	r3, [sp, #48]	; 0x30
 800df20:	2301      	movs	r3, #1
 800df22:	9311      	str	r3, [sp, #68]	; 0x44
 800df24:	e73c      	b.n	800dda0 <_strtod_l+0x700>
 800df26:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df28:	4642      	mov	r2, r8
 800df2a:	4620      	mov	r0, r4
 800df2c:	f001 fee4 	bl	800fcf8 <__lshift>
 800df30:	901e      	str	r0, [sp, #120]	; 0x78
 800df32:	2800      	cmp	r0, #0
 800df34:	f47f af66 	bne.w	800de04 <_strtod_l+0x764>
 800df38:	e5fe      	b.n	800db38 <_strtod_l+0x498>
 800df3a:	465f      	mov	r7, fp
 800df3c:	d16e      	bne.n	800e01c <_strtod_l+0x97c>
 800df3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df44:	b342      	cbz	r2, 800df98 <_strtod_l+0x8f8>
 800df46:	4a32      	ldr	r2, [pc, #200]	; (800e010 <_strtod_l+0x970>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d128      	bne.n	800df9e <_strtod_l+0x8fe>
 800df4c:	9b04      	ldr	r3, [sp, #16]
 800df4e:	4650      	mov	r0, sl
 800df50:	b1eb      	cbz	r3, 800df8e <_strtod_l+0x8ee>
 800df52:	4a2d      	ldr	r2, [pc, #180]	; (800e008 <_strtod_l+0x968>)
 800df54:	403a      	ands	r2, r7
 800df56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800df5a:	f04f 31ff 	mov.w	r1, #4294967295
 800df5e:	d819      	bhi.n	800df94 <_strtod_l+0x8f4>
 800df60:	0d12      	lsrs	r2, r2, #20
 800df62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800df66:	fa01 f303 	lsl.w	r3, r1, r3
 800df6a:	4298      	cmp	r0, r3
 800df6c:	d117      	bne.n	800df9e <_strtod_l+0x8fe>
 800df6e:	4b29      	ldr	r3, [pc, #164]	; (800e014 <_strtod_l+0x974>)
 800df70:	429f      	cmp	r7, r3
 800df72:	d102      	bne.n	800df7a <_strtod_l+0x8da>
 800df74:	3001      	adds	r0, #1
 800df76:	f43f addf 	beq.w	800db38 <_strtod_l+0x498>
 800df7a:	4b23      	ldr	r3, [pc, #140]	; (800e008 <_strtod_l+0x968>)
 800df7c:	403b      	ands	r3, r7
 800df7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800df82:	f04f 0a00 	mov.w	sl, #0
 800df86:	9b04      	ldr	r3, [sp, #16]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1a0      	bne.n	800dece <_strtod_l+0x82e>
 800df8c:	e5de      	b.n	800db4c <_strtod_l+0x4ac>
 800df8e:	f04f 33ff 	mov.w	r3, #4294967295
 800df92:	e7ea      	b.n	800df6a <_strtod_l+0x8ca>
 800df94:	460b      	mov	r3, r1
 800df96:	e7e8      	b.n	800df6a <_strtod_l+0x8ca>
 800df98:	ea53 030a 	orrs.w	r3, r3, sl
 800df9c:	d088      	beq.n	800deb0 <_strtod_l+0x810>
 800df9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfa0:	b1db      	cbz	r3, 800dfda <_strtod_l+0x93a>
 800dfa2:	423b      	tst	r3, r7
 800dfa4:	d0ef      	beq.n	800df86 <_strtod_l+0x8e6>
 800dfa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfa8:	9a04      	ldr	r2, [sp, #16]
 800dfaa:	4650      	mov	r0, sl
 800dfac:	4659      	mov	r1, fp
 800dfae:	b1c3      	cbz	r3, 800dfe2 <_strtod_l+0x942>
 800dfb0:	f7ff fb5a 	bl	800d668 <sulp>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfbc:	f7f2 f96e 	bl	800029c <__adddf3>
 800dfc0:	4682      	mov	sl, r0
 800dfc2:	468b      	mov	fp, r1
 800dfc4:	e7df      	b.n	800df86 <_strtod_l+0x8e6>
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dfcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dfd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dfd4:	f04f 3aff 	mov.w	sl, #4294967295
 800dfd8:	e7d5      	b.n	800df86 <_strtod_l+0x8e6>
 800dfda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfdc:	ea13 0f0a 	tst.w	r3, sl
 800dfe0:	e7e0      	b.n	800dfa4 <_strtod_l+0x904>
 800dfe2:	f7ff fb41 	bl	800d668 <sulp>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfee:	f7f2 f953 	bl	8000298 <__aeabi_dsub>
 800dff2:	2200      	movs	r2, #0
 800dff4:	2300      	movs	r3, #0
 800dff6:	4682      	mov	sl, r0
 800dff8:	468b      	mov	fp, r1
 800dffa:	f7f2 fd6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800dffe:	2800      	cmp	r0, #0
 800e000:	d0c1      	beq.n	800df86 <_strtod_l+0x8e6>
 800e002:	e60e      	b.n	800dc22 <_strtod_l+0x582>
 800e004:	fffffc02 	.word	0xfffffc02
 800e008:	7ff00000 	.word	0x7ff00000
 800e00c:	39500000 	.word	0x39500000
 800e010:	000fffff 	.word	0x000fffff
 800e014:	7fefffff 	.word	0x7fefffff
 800e018:	08012380 	.word	0x08012380
 800e01c:	4631      	mov	r1, r6
 800e01e:	4628      	mov	r0, r5
 800e020:	f002 f852 	bl	80100c8 <__ratio>
 800e024:	ec59 8b10 	vmov	r8, r9, d0
 800e028:	ee10 0a10 	vmov	r0, s0
 800e02c:	2200      	movs	r2, #0
 800e02e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e032:	4649      	mov	r1, r9
 800e034:	f7f2 fd64 	bl	8000b00 <__aeabi_dcmple>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d07c      	beq.n	800e136 <_strtod_l+0xa96>
 800e03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d04c      	beq.n	800e0dc <_strtod_l+0xa3c>
 800e042:	4b95      	ldr	r3, [pc, #596]	; (800e298 <_strtod_l+0xbf8>)
 800e044:	2200      	movs	r2, #0
 800e046:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e04a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e298 <_strtod_l+0xbf8>
 800e04e:	f04f 0800 	mov.w	r8, #0
 800e052:	4b92      	ldr	r3, [pc, #584]	; (800e29c <_strtod_l+0xbfc>)
 800e054:	403b      	ands	r3, r7
 800e056:	9311      	str	r3, [sp, #68]	; 0x44
 800e058:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e05a:	4b91      	ldr	r3, [pc, #580]	; (800e2a0 <_strtod_l+0xc00>)
 800e05c:	429a      	cmp	r2, r3
 800e05e:	f040 80b2 	bne.w	800e1c6 <_strtod_l+0xb26>
 800e062:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e06a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e06e:	ec4b ab10 	vmov	d0, sl, fp
 800e072:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e076:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e07a:	f001 ff4d 	bl	800ff18 <__ulp>
 800e07e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e082:	ec53 2b10 	vmov	r2, r3, d0
 800e086:	f7f2 fabf 	bl	8000608 <__aeabi_dmul>
 800e08a:	4652      	mov	r2, sl
 800e08c:	465b      	mov	r3, fp
 800e08e:	f7f2 f905 	bl	800029c <__adddf3>
 800e092:	460b      	mov	r3, r1
 800e094:	4981      	ldr	r1, [pc, #516]	; (800e29c <_strtod_l+0xbfc>)
 800e096:	4a83      	ldr	r2, [pc, #524]	; (800e2a4 <_strtod_l+0xc04>)
 800e098:	4019      	ands	r1, r3
 800e09a:	4291      	cmp	r1, r2
 800e09c:	4682      	mov	sl, r0
 800e09e:	d95e      	bls.n	800e15e <_strtod_l+0xabe>
 800e0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d103      	bne.n	800e0b2 <_strtod_l+0xa12>
 800e0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	f43f ad43 	beq.w	800db38 <_strtod_l+0x498>
 800e0b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e2b0 <_strtod_l+0xc10>
 800e0b6:	f04f 3aff 	mov.w	sl, #4294967295
 800e0ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f001 fbff 	bl	800f8c0 <_Bfree>
 800e0c2:	9907      	ldr	r1, [sp, #28]
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f001 fbfb 	bl	800f8c0 <_Bfree>
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f001 fbf7 	bl	800f8c0 <_Bfree>
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f001 fbf3 	bl	800f8c0 <_Bfree>
 800e0da:	e613      	b.n	800dd04 <_strtod_l+0x664>
 800e0dc:	f1ba 0f00 	cmp.w	sl, #0
 800e0e0:	d11b      	bne.n	800e11a <_strtod_l+0xa7a>
 800e0e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0e6:	b9f3      	cbnz	r3, 800e126 <_strtod_l+0xa86>
 800e0e8:	4b6b      	ldr	r3, [pc, #428]	; (800e298 <_strtod_l+0xbf8>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	4640      	mov	r0, r8
 800e0ee:	4649      	mov	r1, r9
 800e0f0:	f7f2 fcfc 	bl	8000aec <__aeabi_dcmplt>
 800e0f4:	b9d0      	cbnz	r0, 800e12c <_strtod_l+0xa8c>
 800e0f6:	4640      	mov	r0, r8
 800e0f8:	4649      	mov	r1, r9
 800e0fa:	4b6b      	ldr	r3, [pc, #428]	; (800e2a8 <_strtod_l+0xc08>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f7f2 fa83 	bl	8000608 <__aeabi_dmul>
 800e102:	4680      	mov	r8, r0
 800e104:	4689      	mov	r9, r1
 800e106:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e10a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e10e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e110:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e114:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e118:	e79b      	b.n	800e052 <_strtod_l+0x9b2>
 800e11a:	f1ba 0f01 	cmp.w	sl, #1
 800e11e:	d102      	bne.n	800e126 <_strtod_l+0xa86>
 800e120:	2f00      	cmp	r7, #0
 800e122:	f43f ad7e 	beq.w	800dc22 <_strtod_l+0x582>
 800e126:	4b61      	ldr	r3, [pc, #388]	; (800e2ac <_strtod_l+0xc0c>)
 800e128:	2200      	movs	r2, #0
 800e12a:	e78c      	b.n	800e046 <_strtod_l+0x9a6>
 800e12c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e2a8 <_strtod_l+0xc08>
 800e130:	f04f 0800 	mov.w	r8, #0
 800e134:	e7e7      	b.n	800e106 <_strtod_l+0xa66>
 800e136:	4b5c      	ldr	r3, [pc, #368]	; (800e2a8 <_strtod_l+0xc08>)
 800e138:	4640      	mov	r0, r8
 800e13a:	4649      	mov	r1, r9
 800e13c:	2200      	movs	r2, #0
 800e13e:	f7f2 fa63 	bl	8000608 <__aeabi_dmul>
 800e142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e144:	4680      	mov	r8, r0
 800e146:	4689      	mov	r9, r1
 800e148:	b933      	cbnz	r3, 800e158 <_strtod_l+0xab8>
 800e14a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e14e:	9012      	str	r0, [sp, #72]	; 0x48
 800e150:	9313      	str	r3, [sp, #76]	; 0x4c
 800e152:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e156:	e7dd      	b.n	800e114 <_strtod_l+0xa74>
 800e158:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e15c:	e7f9      	b.n	800e152 <_strtod_l+0xab2>
 800e15e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e162:	9b04      	ldr	r3, [sp, #16]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1a8      	bne.n	800e0ba <_strtod_l+0xa1a>
 800e168:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e16c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e16e:	0d1b      	lsrs	r3, r3, #20
 800e170:	051b      	lsls	r3, r3, #20
 800e172:	429a      	cmp	r2, r3
 800e174:	d1a1      	bne.n	800e0ba <_strtod_l+0xa1a>
 800e176:	4640      	mov	r0, r8
 800e178:	4649      	mov	r1, r9
 800e17a:	f7f2 fda5 	bl	8000cc8 <__aeabi_d2lz>
 800e17e:	f7f2 fa15 	bl	80005ac <__aeabi_l2d>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	4640      	mov	r0, r8
 800e188:	4649      	mov	r1, r9
 800e18a:	f7f2 f885 	bl	8000298 <__aeabi_dsub>
 800e18e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e194:	ea43 030a 	orr.w	r3, r3, sl
 800e198:	4313      	orrs	r3, r2
 800e19a:	4680      	mov	r8, r0
 800e19c:	4689      	mov	r9, r1
 800e19e:	d053      	beq.n	800e248 <_strtod_l+0xba8>
 800e1a0:	a335      	add	r3, pc, #212	; (adr r3, 800e278 <_strtod_l+0xbd8>)
 800e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a6:	f7f2 fca1 	bl	8000aec <__aeabi_dcmplt>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	f47f acce 	bne.w	800db4c <_strtod_l+0x4ac>
 800e1b0:	a333      	add	r3, pc, #204	; (adr r3, 800e280 <_strtod_l+0xbe0>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	4649      	mov	r1, r9
 800e1ba:	f7f2 fcb5 	bl	8000b28 <__aeabi_dcmpgt>
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	f43f af7b 	beq.w	800e0ba <_strtod_l+0xa1a>
 800e1c4:	e4c2      	b.n	800db4c <_strtod_l+0x4ac>
 800e1c6:	9b04      	ldr	r3, [sp, #16]
 800e1c8:	b333      	cbz	r3, 800e218 <_strtod_l+0xb78>
 800e1ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e1d0:	d822      	bhi.n	800e218 <_strtod_l+0xb78>
 800e1d2:	a32d      	add	r3, pc, #180	; (adr r3, 800e288 <_strtod_l+0xbe8>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	4640      	mov	r0, r8
 800e1da:	4649      	mov	r1, r9
 800e1dc:	f7f2 fc90 	bl	8000b00 <__aeabi_dcmple>
 800e1e0:	b1a0      	cbz	r0, 800e20c <_strtod_l+0xb6c>
 800e1e2:	4649      	mov	r1, r9
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	f7f2 fce7 	bl	8000bb8 <__aeabi_d2uiz>
 800e1ea:	2801      	cmp	r0, #1
 800e1ec:	bf38      	it	cc
 800e1ee:	2001      	movcc	r0, #1
 800e1f0:	f7f2 f990 	bl	8000514 <__aeabi_ui2d>
 800e1f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	4689      	mov	r9, r1
 800e1fa:	bb13      	cbnz	r3, 800e242 <_strtod_l+0xba2>
 800e1fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e200:	9014      	str	r0, [sp, #80]	; 0x50
 800e202:	9315      	str	r3, [sp, #84]	; 0x54
 800e204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e208:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e20e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e210:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e214:	1a9b      	subs	r3, r3, r2
 800e216:	930d      	str	r3, [sp, #52]	; 0x34
 800e218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e21c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e220:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e224:	f001 fe78 	bl	800ff18 <__ulp>
 800e228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e22c:	ec53 2b10 	vmov	r2, r3, d0
 800e230:	f7f2 f9ea 	bl	8000608 <__aeabi_dmul>
 800e234:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e238:	f7f2 f830 	bl	800029c <__adddf3>
 800e23c:	4682      	mov	sl, r0
 800e23e:	468b      	mov	fp, r1
 800e240:	e78f      	b.n	800e162 <_strtod_l+0xac2>
 800e242:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e246:	e7dd      	b.n	800e204 <_strtod_l+0xb64>
 800e248:	a311      	add	r3, pc, #68	; (adr r3, 800e290 <_strtod_l+0xbf0>)
 800e24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24e:	f7f2 fc4d 	bl	8000aec <__aeabi_dcmplt>
 800e252:	e7b4      	b.n	800e1be <_strtod_l+0xb1e>
 800e254:	2300      	movs	r3, #0
 800e256:	930e      	str	r3, [sp, #56]	; 0x38
 800e258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e25a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e25c:	6013      	str	r3, [r2, #0]
 800e25e:	f7ff ba65 	b.w	800d72c <_strtod_l+0x8c>
 800e262:	2b65      	cmp	r3, #101	; 0x65
 800e264:	f43f ab5d 	beq.w	800d922 <_strtod_l+0x282>
 800e268:	2b45      	cmp	r3, #69	; 0x45
 800e26a:	f43f ab5a 	beq.w	800d922 <_strtod_l+0x282>
 800e26e:	2201      	movs	r2, #1
 800e270:	f7ff bb92 	b.w	800d998 <_strtod_l+0x2f8>
 800e274:	f3af 8000 	nop.w
 800e278:	94a03595 	.word	0x94a03595
 800e27c:	3fdfffff 	.word	0x3fdfffff
 800e280:	35afe535 	.word	0x35afe535
 800e284:	3fe00000 	.word	0x3fe00000
 800e288:	ffc00000 	.word	0xffc00000
 800e28c:	41dfffff 	.word	0x41dfffff
 800e290:	94a03595 	.word	0x94a03595
 800e294:	3fcfffff 	.word	0x3fcfffff
 800e298:	3ff00000 	.word	0x3ff00000
 800e29c:	7ff00000 	.word	0x7ff00000
 800e2a0:	7fe00000 	.word	0x7fe00000
 800e2a4:	7c9fffff 	.word	0x7c9fffff
 800e2a8:	3fe00000 	.word	0x3fe00000
 800e2ac:	bff00000 	.word	0xbff00000
 800e2b0:	7fefffff 	.word	0x7fefffff

0800e2b4 <_strtod_r>:
 800e2b4:	4b01      	ldr	r3, [pc, #4]	; (800e2bc <_strtod_r+0x8>)
 800e2b6:	f7ff b9f3 	b.w	800d6a0 <_strtod_l>
 800e2ba:	bf00      	nop
 800e2bc:	20000098 	.word	0x20000098

0800e2c0 <_strtol_l.isra.0>:
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c6:	d001      	beq.n	800e2cc <_strtol_l.isra.0+0xc>
 800e2c8:	2b24      	cmp	r3, #36	; 0x24
 800e2ca:	d906      	bls.n	800e2da <_strtol_l.isra.0+0x1a>
 800e2cc:	f7fe fa56 	bl	800c77c <__errno>
 800e2d0:	2316      	movs	r3, #22
 800e2d2:	6003      	str	r3, [r0, #0]
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2da:	4f3a      	ldr	r7, [pc, #232]	; (800e3c4 <_strtol_l.isra.0+0x104>)
 800e2dc:	468e      	mov	lr, r1
 800e2de:	4676      	mov	r6, lr
 800e2e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e2e4:	5de5      	ldrb	r5, [r4, r7]
 800e2e6:	f015 0508 	ands.w	r5, r5, #8
 800e2ea:	d1f8      	bne.n	800e2de <_strtol_l.isra.0+0x1e>
 800e2ec:	2c2d      	cmp	r4, #45	; 0x2d
 800e2ee:	d134      	bne.n	800e35a <_strtol_l.isra.0+0x9a>
 800e2f0:	f89e 4000 	ldrb.w	r4, [lr]
 800e2f4:	f04f 0801 	mov.w	r8, #1
 800e2f8:	f106 0e02 	add.w	lr, r6, #2
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d05c      	beq.n	800e3ba <_strtol_l.isra.0+0xfa>
 800e300:	2b10      	cmp	r3, #16
 800e302:	d10c      	bne.n	800e31e <_strtol_l.isra.0+0x5e>
 800e304:	2c30      	cmp	r4, #48	; 0x30
 800e306:	d10a      	bne.n	800e31e <_strtol_l.isra.0+0x5e>
 800e308:	f89e 4000 	ldrb.w	r4, [lr]
 800e30c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e310:	2c58      	cmp	r4, #88	; 0x58
 800e312:	d14d      	bne.n	800e3b0 <_strtol_l.isra.0+0xf0>
 800e314:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e318:	2310      	movs	r3, #16
 800e31a:	f10e 0e02 	add.w	lr, lr, #2
 800e31e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e322:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e326:	2600      	movs	r6, #0
 800e328:	fbbc f9f3 	udiv	r9, ip, r3
 800e32c:	4635      	mov	r5, r6
 800e32e:	fb03 ca19 	mls	sl, r3, r9, ip
 800e332:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e336:	2f09      	cmp	r7, #9
 800e338:	d818      	bhi.n	800e36c <_strtol_l.isra.0+0xac>
 800e33a:	463c      	mov	r4, r7
 800e33c:	42a3      	cmp	r3, r4
 800e33e:	dd24      	ble.n	800e38a <_strtol_l.isra.0+0xca>
 800e340:	2e00      	cmp	r6, #0
 800e342:	db1f      	blt.n	800e384 <_strtol_l.isra.0+0xc4>
 800e344:	45a9      	cmp	r9, r5
 800e346:	d31d      	bcc.n	800e384 <_strtol_l.isra.0+0xc4>
 800e348:	d101      	bne.n	800e34e <_strtol_l.isra.0+0x8e>
 800e34a:	45a2      	cmp	sl, r4
 800e34c:	db1a      	blt.n	800e384 <_strtol_l.isra.0+0xc4>
 800e34e:	fb05 4503 	mla	r5, r5, r3, r4
 800e352:	2601      	movs	r6, #1
 800e354:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e358:	e7eb      	b.n	800e332 <_strtol_l.isra.0+0x72>
 800e35a:	2c2b      	cmp	r4, #43	; 0x2b
 800e35c:	bf08      	it	eq
 800e35e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e362:	46a8      	mov	r8, r5
 800e364:	bf08      	it	eq
 800e366:	f106 0e02 	addeq.w	lr, r6, #2
 800e36a:	e7c7      	b.n	800e2fc <_strtol_l.isra.0+0x3c>
 800e36c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e370:	2f19      	cmp	r7, #25
 800e372:	d801      	bhi.n	800e378 <_strtol_l.isra.0+0xb8>
 800e374:	3c37      	subs	r4, #55	; 0x37
 800e376:	e7e1      	b.n	800e33c <_strtol_l.isra.0+0x7c>
 800e378:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e37c:	2f19      	cmp	r7, #25
 800e37e:	d804      	bhi.n	800e38a <_strtol_l.isra.0+0xca>
 800e380:	3c57      	subs	r4, #87	; 0x57
 800e382:	e7db      	b.n	800e33c <_strtol_l.isra.0+0x7c>
 800e384:	f04f 36ff 	mov.w	r6, #4294967295
 800e388:	e7e4      	b.n	800e354 <_strtol_l.isra.0+0x94>
 800e38a:	2e00      	cmp	r6, #0
 800e38c:	da05      	bge.n	800e39a <_strtol_l.isra.0+0xda>
 800e38e:	2322      	movs	r3, #34	; 0x22
 800e390:	6003      	str	r3, [r0, #0]
 800e392:	4665      	mov	r5, ip
 800e394:	b942      	cbnz	r2, 800e3a8 <_strtol_l.isra.0+0xe8>
 800e396:	4628      	mov	r0, r5
 800e398:	e79d      	b.n	800e2d6 <_strtol_l.isra.0+0x16>
 800e39a:	f1b8 0f00 	cmp.w	r8, #0
 800e39e:	d000      	beq.n	800e3a2 <_strtol_l.isra.0+0xe2>
 800e3a0:	426d      	negs	r5, r5
 800e3a2:	2a00      	cmp	r2, #0
 800e3a4:	d0f7      	beq.n	800e396 <_strtol_l.isra.0+0xd6>
 800e3a6:	b10e      	cbz	r6, 800e3ac <_strtol_l.isra.0+0xec>
 800e3a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e3ac:	6011      	str	r1, [r2, #0]
 800e3ae:	e7f2      	b.n	800e396 <_strtol_l.isra.0+0xd6>
 800e3b0:	2430      	movs	r4, #48	; 0x30
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1b3      	bne.n	800e31e <_strtol_l.isra.0+0x5e>
 800e3b6:	2308      	movs	r3, #8
 800e3b8:	e7b1      	b.n	800e31e <_strtol_l.isra.0+0x5e>
 800e3ba:	2c30      	cmp	r4, #48	; 0x30
 800e3bc:	d0a4      	beq.n	800e308 <_strtol_l.isra.0+0x48>
 800e3be:	230a      	movs	r3, #10
 800e3c0:	e7ad      	b.n	800e31e <_strtol_l.isra.0+0x5e>
 800e3c2:	bf00      	nop
 800e3c4:	080123a9 	.word	0x080123a9

0800e3c8 <_strtol_r>:
 800e3c8:	f7ff bf7a 	b.w	800e2c0 <_strtol_l.isra.0>

0800e3cc <_write_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d07      	ldr	r5, [pc, #28]	; (800e3ec <_write_r+0x20>)
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	4608      	mov	r0, r1
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	602a      	str	r2, [r5, #0]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	f7f4 f8a9 	bl	8002532 <_write>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_write_r+0x1e>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_write_r+0x1e>
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	20005888 	.word	0x20005888

0800e3f0 <_close_r>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	4d06      	ldr	r5, [pc, #24]	; (800e40c <_close_r+0x1c>)
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	4608      	mov	r0, r1
 800e3fa:	602b      	str	r3, [r5, #0]
 800e3fc:	f7f4 f8b5 	bl	800256a <_close>
 800e400:	1c43      	adds	r3, r0, #1
 800e402:	d102      	bne.n	800e40a <_close_r+0x1a>
 800e404:	682b      	ldr	r3, [r5, #0]
 800e406:	b103      	cbz	r3, 800e40a <_close_r+0x1a>
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	bd38      	pop	{r3, r4, r5, pc}
 800e40c:	20005888 	.word	0x20005888

0800e410 <quorem>:
 800e410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	6903      	ldr	r3, [r0, #16]
 800e416:	690c      	ldr	r4, [r1, #16]
 800e418:	42a3      	cmp	r3, r4
 800e41a:	4607      	mov	r7, r0
 800e41c:	f2c0 8081 	blt.w	800e522 <quorem+0x112>
 800e420:	3c01      	subs	r4, #1
 800e422:	f101 0814 	add.w	r8, r1, #20
 800e426:	f100 0514 	add.w	r5, r0, #20
 800e42a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e42e:	9301      	str	r3, [sp, #4]
 800e430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e438:	3301      	adds	r3, #1
 800e43a:	429a      	cmp	r2, r3
 800e43c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e440:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e444:	fbb2 f6f3 	udiv	r6, r2, r3
 800e448:	d331      	bcc.n	800e4ae <quorem+0x9e>
 800e44a:	f04f 0e00 	mov.w	lr, #0
 800e44e:	4640      	mov	r0, r8
 800e450:	46ac      	mov	ip, r5
 800e452:	46f2      	mov	sl, lr
 800e454:	f850 2b04 	ldr.w	r2, [r0], #4
 800e458:	b293      	uxth	r3, r2
 800e45a:	fb06 e303 	mla	r3, r6, r3, lr
 800e45e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e462:	b29b      	uxth	r3, r3
 800e464:	ebaa 0303 	sub.w	r3, sl, r3
 800e468:	0c12      	lsrs	r2, r2, #16
 800e46a:	f8dc a000 	ldr.w	sl, [ip]
 800e46e:	fb06 e202 	mla	r2, r6, r2, lr
 800e472:	fa13 f38a 	uxtah	r3, r3, sl
 800e476:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e47a:	fa1f fa82 	uxth.w	sl, r2
 800e47e:	f8dc 2000 	ldr.w	r2, [ip]
 800e482:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e486:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e490:	4581      	cmp	r9, r0
 800e492:	f84c 3b04 	str.w	r3, [ip], #4
 800e496:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e49a:	d2db      	bcs.n	800e454 <quorem+0x44>
 800e49c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4a0:	b92b      	cbnz	r3, 800e4ae <quorem+0x9e>
 800e4a2:	9b01      	ldr	r3, [sp, #4]
 800e4a4:	3b04      	subs	r3, #4
 800e4a6:	429d      	cmp	r5, r3
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	d32e      	bcc.n	800e50a <quorem+0xfa>
 800e4ac:	613c      	str	r4, [r7, #16]
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	f001 fc8e 	bl	800fdd0 <__mcmp>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	db24      	blt.n	800e502 <quorem+0xf2>
 800e4b8:	3601      	adds	r6, #1
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f04f 0c00 	mov.w	ip, #0
 800e4c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4c4:	f8d0 e000 	ldr.w	lr, [r0]
 800e4c8:	b293      	uxth	r3, r2
 800e4ca:	ebac 0303 	sub.w	r3, ip, r3
 800e4ce:	0c12      	lsrs	r2, r2, #16
 800e4d0:	fa13 f38e 	uxtah	r3, r3, lr
 800e4d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e4d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4e2:	45c1      	cmp	r9, r8
 800e4e4:	f840 3b04 	str.w	r3, [r0], #4
 800e4e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e4ec:	d2e8      	bcs.n	800e4c0 <quorem+0xb0>
 800e4ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4f6:	b922      	cbnz	r2, 800e502 <quorem+0xf2>
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	429d      	cmp	r5, r3
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	d30a      	bcc.n	800e516 <quorem+0x106>
 800e500:	613c      	str	r4, [r7, #16]
 800e502:	4630      	mov	r0, r6
 800e504:	b003      	add	sp, #12
 800e506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e50a:	6812      	ldr	r2, [r2, #0]
 800e50c:	3b04      	subs	r3, #4
 800e50e:	2a00      	cmp	r2, #0
 800e510:	d1cc      	bne.n	800e4ac <quorem+0x9c>
 800e512:	3c01      	subs	r4, #1
 800e514:	e7c7      	b.n	800e4a6 <quorem+0x96>
 800e516:	6812      	ldr	r2, [r2, #0]
 800e518:	3b04      	subs	r3, #4
 800e51a:	2a00      	cmp	r2, #0
 800e51c:	d1f0      	bne.n	800e500 <quorem+0xf0>
 800e51e:	3c01      	subs	r4, #1
 800e520:	e7eb      	b.n	800e4fa <quorem+0xea>
 800e522:	2000      	movs	r0, #0
 800e524:	e7ee      	b.n	800e504 <quorem+0xf4>
	...

0800e528 <_dtoa_r>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	ed2d 8b02 	vpush	{d8}
 800e530:	ec57 6b10 	vmov	r6, r7, d0
 800e534:	b095      	sub	sp, #84	; 0x54
 800e536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e53c:	9105      	str	r1, [sp, #20]
 800e53e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e542:	4604      	mov	r4, r0
 800e544:	9209      	str	r2, [sp, #36]	; 0x24
 800e546:	930f      	str	r3, [sp, #60]	; 0x3c
 800e548:	b975      	cbnz	r5, 800e568 <_dtoa_r+0x40>
 800e54a:	2010      	movs	r0, #16
 800e54c:	f001 f95e 	bl	800f80c <malloc>
 800e550:	4602      	mov	r2, r0
 800e552:	6260      	str	r0, [r4, #36]	; 0x24
 800e554:	b920      	cbnz	r0, 800e560 <_dtoa_r+0x38>
 800e556:	4bb2      	ldr	r3, [pc, #712]	; (800e820 <_dtoa_r+0x2f8>)
 800e558:	21ea      	movs	r1, #234	; 0xea
 800e55a:	48b2      	ldr	r0, [pc, #712]	; (800e824 <_dtoa_r+0x2fc>)
 800e55c:	f002 fc88 	bl	8010e70 <__assert_func>
 800e560:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e564:	6005      	str	r5, [r0, #0]
 800e566:	60c5      	str	r5, [r0, #12]
 800e568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e56a:	6819      	ldr	r1, [r3, #0]
 800e56c:	b151      	cbz	r1, 800e584 <_dtoa_r+0x5c>
 800e56e:	685a      	ldr	r2, [r3, #4]
 800e570:	604a      	str	r2, [r1, #4]
 800e572:	2301      	movs	r3, #1
 800e574:	4093      	lsls	r3, r2
 800e576:	608b      	str	r3, [r1, #8]
 800e578:	4620      	mov	r0, r4
 800e57a:	f001 f9a1 	bl	800f8c0 <_Bfree>
 800e57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
 800e584:	1e3b      	subs	r3, r7, #0
 800e586:	bfb9      	ittee	lt
 800e588:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e58c:	9303      	strlt	r3, [sp, #12]
 800e58e:	2300      	movge	r3, #0
 800e590:	f8c8 3000 	strge.w	r3, [r8]
 800e594:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e598:	4ba3      	ldr	r3, [pc, #652]	; (800e828 <_dtoa_r+0x300>)
 800e59a:	bfbc      	itt	lt
 800e59c:	2201      	movlt	r2, #1
 800e59e:	f8c8 2000 	strlt.w	r2, [r8]
 800e5a2:	ea33 0309 	bics.w	r3, r3, r9
 800e5a6:	d11b      	bne.n	800e5e0 <_dtoa_r+0xb8>
 800e5a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5b4:	4333      	orrs	r3, r6
 800e5b6:	f000 857a 	beq.w	800f0ae <_dtoa_r+0xb86>
 800e5ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5bc:	b963      	cbnz	r3, 800e5d8 <_dtoa_r+0xb0>
 800e5be:	4b9b      	ldr	r3, [pc, #620]	; (800e82c <_dtoa_r+0x304>)
 800e5c0:	e024      	b.n	800e60c <_dtoa_r+0xe4>
 800e5c2:	4b9b      	ldr	r3, [pc, #620]	; (800e830 <_dtoa_r+0x308>)
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	9800      	ldr	r0, [sp, #0]
 800e5ce:	b015      	add	sp, #84	; 0x54
 800e5d0:	ecbd 8b02 	vpop	{d8}
 800e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d8:	4b94      	ldr	r3, [pc, #592]	; (800e82c <_dtoa_r+0x304>)
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	3303      	adds	r3, #3
 800e5de:	e7f3      	b.n	800e5c8 <_dtoa_r+0xa0>
 800e5e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	ec51 0b17 	vmov	r0, r1, d7
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e5f0:	f7f2 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	b158      	cbz	r0, 800e610 <_dtoa_r+0xe8>
 800e5f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	6013      	str	r3, [r2, #0]
 800e5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 8551 	beq.w	800f0a8 <_dtoa_r+0xb80>
 800e606:	488b      	ldr	r0, [pc, #556]	; (800e834 <_dtoa_r+0x30c>)
 800e608:	6018      	str	r0, [r3, #0]
 800e60a:	1e43      	subs	r3, r0, #1
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	e7dd      	b.n	800e5cc <_dtoa_r+0xa4>
 800e610:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e614:	aa12      	add	r2, sp, #72	; 0x48
 800e616:	a913      	add	r1, sp, #76	; 0x4c
 800e618:	4620      	mov	r0, r4
 800e61a:	f001 fcf9 	bl	8010010 <__d2b>
 800e61e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e622:	4683      	mov	fp, r0
 800e624:	2d00      	cmp	r5, #0
 800e626:	d07c      	beq.n	800e722 <_dtoa_r+0x1fa>
 800e628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e62a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e62e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e632:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e636:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e63a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e63e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e642:	4b7d      	ldr	r3, [pc, #500]	; (800e838 <_dtoa_r+0x310>)
 800e644:	2200      	movs	r2, #0
 800e646:	4630      	mov	r0, r6
 800e648:	4639      	mov	r1, r7
 800e64a:	f7f1 fe25 	bl	8000298 <__aeabi_dsub>
 800e64e:	a36e      	add	r3, pc, #440	; (adr r3, 800e808 <_dtoa_r+0x2e0>)
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	f7f1 ffd8 	bl	8000608 <__aeabi_dmul>
 800e658:	a36d      	add	r3, pc, #436	; (adr r3, 800e810 <_dtoa_r+0x2e8>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	f7f1 fe1d 	bl	800029c <__adddf3>
 800e662:	4606      	mov	r6, r0
 800e664:	4628      	mov	r0, r5
 800e666:	460f      	mov	r7, r1
 800e668:	f7f1 ff64 	bl	8000534 <__aeabi_i2d>
 800e66c:	a36a      	add	r3, pc, #424	; (adr r3, 800e818 <_dtoa_r+0x2f0>)
 800e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e672:	f7f1 ffc9 	bl	8000608 <__aeabi_dmul>
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	4630      	mov	r0, r6
 800e67c:	4639      	mov	r1, r7
 800e67e:	f7f1 fe0d 	bl	800029c <__adddf3>
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	f7f2 fa6f 	bl	8000b68 <__aeabi_d2iz>
 800e68a:	2200      	movs	r2, #0
 800e68c:	4682      	mov	sl, r0
 800e68e:	2300      	movs	r3, #0
 800e690:	4630      	mov	r0, r6
 800e692:	4639      	mov	r1, r7
 800e694:	f7f2 fa2a 	bl	8000aec <__aeabi_dcmplt>
 800e698:	b148      	cbz	r0, 800e6ae <_dtoa_r+0x186>
 800e69a:	4650      	mov	r0, sl
 800e69c:	f7f1 ff4a 	bl	8000534 <__aeabi_i2d>
 800e6a0:	4632      	mov	r2, r6
 800e6a2:	463b      	mov	r3, r7
 800e6a4:	f7f2 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6a8:	b908      	cbnz	r0, 800e6ae <_dtoa_r+0x186>
 800e6aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6ae:	f1ba 0f16 	cmp.w	sl, #22
 800e6b2:	d854      	bhi.n	800e75e <_dtoa_r+0x236>
 800e6b4:	4b61      	ldr	r3, [pc, #388]	; (800e83c <_dtoa_r+0x314>)
 800e6b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e6c2:	f7f2 fa13 	bl	8000aec <__aeabi_dcmplt>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d04b      	beq.n	800e762 <_dtoa_r+0x23a>
 800e6ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	930e      	str	r3, [sp, #56]	; 0x38
 800e6d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e6d4:	1b5d      	subs	r5, r3, r5
 800e6d6:	1e6b      	subs	r3, r5, #1
 800e6d8:	9304      	str	r3, [sp, #16]
 800e6da:	bf43      	ittte	mi
 800e6dc:	2300      	movmi	r3, #0
 800e6de:	f1c5 0801 	rsbmi	r8, r5, #1
 800e6e2:	9304      	strmi	r3, [sp, #16]
 800e6e4:	f04f 0800 	movpl.w	r8, #0
 800e6e8:	f1ba 0f00 	cmp.w	sl, #0
 800e6ec:	db3b      	blt.n	800e766 <_dtoa_r+0x23e>
 800e6ee:	9b04      	ldr	r3, [sp, #16]
 800e6f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e6f4:	4453      	add	r3, sl
 800e6f6:	9304      	str	r3, [sp, #16]
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	9306      	str	r3, [sp, #24]
 800e6fc:	9b05      	ldr	r3, [sp, #20]
 800e6fe:	2b09      	cmp	r3, #9
 800e700:	d869      	bhi.n	800e7d6 <_dtoa_r+0x2ae>
 800e702:	2b05      	cmp	r3, #5
 800e704:	bfc4      	itt	gt
 800e706:	3b04      	subgt	r3, #4
 800e708:	9305      	strgt	r3, [sp, #20]
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	f1a3 0302 	sub.w	r3, r3, #2
 800e710:	bfcc      	ite	gt
 800e712:	2500      	movgt	r5, #0
 800e714:	2501      	movle	r5, #1
 800e716:	2b03      	cmp	r3, #3
 800e718:	d869      	bhi.n	800e7ee <_dtoa_r+0x2c6>
 800e71a:	e8df f003 	tbb	[pc, r3]
 800e71e:	4e2c      	.short	0x4e2c
 800e720:	5a4c      	.short	0x5a4c
 800e722:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e726:	441d      	add	r5, r3
 800e728:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e72c:	2b20      	cmp	r3, #32
 800e72e:	bfc1      	itttt	gt
 800e730:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e734:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e738:	fa09 f303 	lslgt.w	r3, r9, r3
 800e73c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e740:	bfda      	itte	le
 800e742:	f1c3 0320 	rsble	r3, r3, #32
 800e746:	fa06 f003 	lslle.w	r0, r6, r3
 800e74a:	4318      	orrgt	r0, r3
 800e74c:	f7f1 fee2 	bl	8000514 <__aeabi_ui2d>
 800e750:	2301      	movs	r3, #1
 800e752:	4606      	mov	r6, r0
 800e754:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e758:	3d01      	subs	r5, #1
 800e75a:	9310      	str	r3, [sp, #64]	; 0x40
 800e75c:	e771      	b.n	800e642 <_dtoa_r+0x11a>
 800e75e:	2301      	movs	r3, #1
 800e760:	e7b6      	b.n	800e6d0 <_dtoa_r+0x1a8>
 800e762:	900e      	str	r0, [sp, #56]	; 0x38
 800e764:	e7b5      	b.n	800e6d2 <_dtoa_r+0x1aa>
 800e766:	f1ca 0300 	rsb	r3, sl, #0
 800e76a:	9306      	str	r3, [sp, #24]
 800e76c:	2300      	movs	r3, #0
 800e76e:	eba8 080a 	sub.w	r8, r8, sl
 800e772:	930d      	str	r3, [sp, #52]	; 0x34
 800e774:	e7c2      	b.n	800e6fc <_dtoa_r+0x1d4>
 800e776:	2300      	movs	r3, #0
 800e778:	9308      	str	r3, [sp, #32]
 800e77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	dc39      	bgt.n	800e7f4 <_dtoa_r+0x2cc>
 800e780:	f04f 0901 	mov.w	r9, #1
 800e784:	f8cd 9004 	str.w	r9, [sp, #4]
 800e788:	464b      	mov	r3, r9
 800e78a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e78e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e790:	2200      	movs	r2, #0
 800e792:	6042      	str	r2, [r0, #4]
 800e794:	2204      	movs	r2, #4
 800e796:	f102 0614 	add.w	r6, r2, #20
 800e79a:	429e      	cmp	r6, r3
 800e79c:	6841      	ldr	r1, [r0, #4]
 800e79e:	d92f      	bls.n	800e800 <_dtoa_r+0x2d8>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f001 f84d 	bl	800f840 <_Balloc>
 800e7a6:	9000      	str	r0, [sp, #0]
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d14b      	bne.n	800e844 <_dtoa_r+0x31c>
 800e7ac:	4b24      	ldr	r3, [pc, #144]	; (800e840 <_dtoa_r+0x318>)
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e7b4:	e6d1      	b.n	800e55a <_dtoa_r+0x32>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e7de      	b.n	800e778 <_dtoa_r+0x250>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	9308      	str	r3, [sp, #32]
 800e7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c0:	eb0a 0903 	add.w	r9, sl, r3
 800e7c4:	f109 0301 	add.w	r3, r9, #1
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	bfb8      	it	lt
 800e7ce:	2301      	movlt	r3, #1
 800e7d0:	e7dd      	b.n	800e78e <_dtoa_r+0x266>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e7f2      	b.n	800e7bc <_dtoa_r+0x294>
 800e7d6:	2501      	movs	r5, #1
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9305      	str	r3, [sp, #20]
 800e7dc:	9508      	str	r5, [sp, #32]
 800e7de:	f04f 39ff 	mov.w	r9, #4294967295
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7e8:	2312      	movs	r3, #18
 800e7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ec:	e7cf      	b.n	800e78e <_dtoa_r+0x266>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	9308      	str	r3, [sp, #32]
 800e7f2:	e7f4      	b.n	800e7de <_dtoa_r+0x2b6>
 800e7f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e7f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7fc:	464b      	mov	r3, r9
 800e7fe:	e7c6      	b.n	800e78e <_dtoa_r+0x266>
 800e800:	3101      	adds	r1, #1
 800e802:	6041      	str	r1, [r0, #4]
 800e804:	0052      	lsls	r2, r2, #1
 800e806:	e7c6      	b.n	800e796 <_dtoa_r+0x26e>
 800e808:	636f4361 	.word	0x636f4361
 800e80c:	3fd287a7 	.word	0x3fd287a7
 800e810:	8b60c8b3 	.word	0x8b60c8b3
 800e814:	3fc68a28 	.word	0x3fc68a28
 800e818:	509f79fb 	.word	0x509f79fb
 800e81c:	3fd34413 	.word	0x3fd34413
 800e820:	080124b6 	.word	0x080124b6
 800e824:	080124cd 	.word	0x080124cd
 800e828:	7ff00000 	.word	0x7ff00000
 800e82c:	080124b2 	.word	0x080124b2
 800e830:	080124a9 	.word	0x080124a9
 800e834:	08012732 	.word	0x08012732
 800e838:	3ff80000 	.word	0x3ff80000
 800e83c:	08012648 	.word	0x08012648
 800e840:	0801252c 	.word	0x0801252c
 800e844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e846:	9a00      	ldr	r2, [sp, #0]
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	9b01      	ldr	r3, [sp, #4]
 800e84c:	2b0e      	cmp	r3, #14
 800e84e:	f200 80ad 	bhi.w	800e9ac <_dtoa_r+0x484>
 800e852:	2d00      	cmp	r5, #0
 800e854:	f000 80aa 	beq.w	800e9ac <_dtoa_r+0x484>
 800e858:	f1ba 0f00 	cmp.w	sl, #0
 800e85c:	dd36      	ble.n	800e8cc <_dtoa_r+0x3a4>
 800e85e:	4ac3      	ldr	r2, [pc, #780]	; (800eb6c <_dtoa_r+0x644>)
 800e860:	f00a 030f 	and.w	r3, sl, #15
 800e864:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e868:	ed93 7b00 	vldr	d7, [r3]
 800e86c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e870:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e874:	eeb0 8a47 	vmov.f32	s16, s14
 800e878:	eef0 8a67 	vmov.f32	s17, s15
 800e87c:	d016      	beq.n	800e8ac <_dtoa_r+0x384>
 800e87e:	4bbc      	ldr	r3, [pc, #752]	; (800eb70 <_dtoa_r+0x648>)
 800e880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e888:	f7f1 ffe8 	bl	800085c <__aeabi_ddiv>
 800e88c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e890:	f007 070f 	and.w	r7, r7, #15
 800e894:	2503      	movs	r5, #3
 800e896:	4eb6      	ldr	r6, [pc, #728]	; (800eb70 <_dtoa_r+0x648>)
 800e898:	b957      	cbnz	r7, 800e8b0 <_dtoa_r+0x388>
 800e89a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e89e:	ec53 2b18 	vmov	r2, r3, d8
 800e8a2:	f7f1 ffdb 	bl	800085c <__aeabi_ddiv>
 800e8a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8aa:	e029      	b.n	800e900 <_dtoa_r+0x3d8>
 800e8ac:	2502      	movs	r5, #2
 800e8ae:	e7f2      	b.n	800e896 <_dtoa_r+0x36e>
 800e8b0:	07f9      	lsls	r1, r7, #31
 800e8b2:	d508      	bpl.n	800e8c6 <_dtoa_r+0x39e>
 800e8b4:	ec51 0b18 	vmov	r0, r1, d8
 800e8b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8bc:	f7f1 fea4 	bl	8000608 <__aeabi_dmul>
 800e8c0:	ec41 0b18 	vmov	d8, r0, r1
 800e8c4:	3501      	adds	r5, #1
 800e8c6:	107f      	asrs	r7, r7, #1
 800e8c8:	3608      	adds	r6, #8
 800e8ca:	e7e5      	b.n	800e898 <_dtoa_r+0x370>
 800e8cc:	f000 80a6 	beq.w	800ea1c <_dtoa_r+0x4f4>
 800e8d0:	f1ca 0600 	rsb	r6, sl, #0
 800e8d4:	4ba5      	ldr	r3, [pc, #660]	; (800eb6c <_dtoa_r+0x644>)
 800e8d6:	4fa6      	ldr	r7, [pc, #664]	; (800eb70 <_dtoa_r+0x648>)
 800e8d8:	f006 020f 	and.w	r2, r6, #15
 800e8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8e8:	f7f1 fe8e 	bl	8000608 <__aeabi_dmul>
 800e8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8f0:	1136      	asrs	r6, r6, #4
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	2502      	movs	r5, #2
 800e8f6:	2e00      	cmp	r6, #0
 800e8f8:	f040 8085 	bne.w	800ea06 <_dtoa_r+0x4de>
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1d2      	bne.n	800e8a6 <_dtoa_r+0x37e>
 800e900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 808c 	beq.w	800ea20 <_dtoa_r+0x4f8>
 800e908:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e90c:	4b99      	ldr	r3, [pc, #612]	; (800eb74 <_dtoa_r+0x64c>)
 800e90e:	2200      	movs	r2, #0
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	f7f2 f8ea 	bl	8000aec <__aeabi_dcmplt>
 800e918:	2800      	cmp	r0, #0
 800e91a:	f000 8081 	beq.w	800ea20 <_dtoa_r+0x4f8>
 800e91e:	9b01      	ldr	r3, [sp, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d07d      	beq.n	800ea20 <_dtoa_r+0x4f8>
 800e924:	f1b9 0f00 	cmp.w	r9, #0
 800e928:	dd3c      	ble.n	800e9a4 <_dtoa_r+0x47c>
 800e92a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e92e:	9307      	str	r3, [sp, #28]
 800e930:	2200      	movs	r2, #0
 800e932:	4b91      	ldr	r3, [pc, #580]	; (800eb78 <_dtoa_r+0x650>)
 800e934:	4630      	mov	r0, r6
 800e936:	4639      	mov	r1, r7
 800e938:	f7f1 fe66 	bl	8000608 <__aeabi_dmul>
 800e93c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e940:	3501      	adds	r5, #1
 800e942:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e946:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e94a:	4628      	mov	r0, r5
 800e94c:	f7f1 fdf2 	bl	8000534 <__aeabi_i2d>
 800e950:	4632      	mov	r2, r6
 800e952:	463b      	mov	r3, r7
 800e954:	f7f1 fe58 	bl	8000608 <__aeabi_dmul>
 800e958:	4b88      	ldr	r3, [pc, #544]	; (800eb7c <_dtoa_r+0x654>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	f7f1 fc9e 	bl	800029c <__adddf3>
 800e960:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e968:	9303      	str	r3, [sp, #12]
 800e96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d15c      	bne.n	800ea2a <_dtoa_r+0x502>
 800e970:	4b83      	ldr	r3, [pc, #524]	; (800eb80 <_dtoa_r+0x658>)
 800e972:	2200      	movs	r2, #0
 800e974:	4630      	mov	r0, r6
 800e976:	4639      	mov	r1, r7
 800e978:	f7f1 fc8e 	bl	8000298 <__aeabi_dsub>
 800e97c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	f7f2 f8d0 	bl	8000b28 <__aeabi_dcmpgt>
 800e988:	2800      	cmp	r0, #0
 800e98a:	f040 8296 	bne.w	800eeba <_dtoa_r+0x992>
 800e98e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e992:	4630      	mov	r0, r6
 800e994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e998:	4639      	mov	r1, r7
 800e99a:	f7f2 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f040 8288 	bne.w	800eeb4 <_dtoa_r+0x98c>
 800e9a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f2c0 8158 	blt.w	800ec64 <_dtoa_r+0x73c>
 800e9b4:	f1ba 0f0e 	cmp.w	sl, #14
 800e9b8:	f300 8154 	bgt.w	800ec64 <_dtoa_r+0x73c>
 800e9bc:	4b6b      	ldr	r3, [pc, #428]	; (800eb6c <_dtoa_r+0x644>)
 800e9be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f280 80e3 	bge.w	800eb94 <_dtoa_r+0x66c>
 800e9ce:	9b01      	ldr	r3, [sp, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f300 80df 	bgt.w	800eb94 <_dtoa_r+0x66c>
 800e9d6:	f040 826d 	bne.w	800eeb4 <_dtoa_r+0x98c>
 800e9da:	4b69      	ldr	r3, [pc, #420]	; (800eb80 <_dtoa_r+0x658>)
 800e9dc:	2200      	movs	r2, #0
 800e9de:	4640      	mov	r0, r8
 800e9e0:	4649      	mov	r1, r9
 800e9e2:	f7f1 fe11 	bl	8000608 <__aeabi_dmul>
 800e9e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9ea:	f7f2 f893 	bl	8000b14 <__aeabi_dcmpge>
 800e9ee:	9e01      	ldr	r6, [sp, #4]
 800e9f0:	4637      	mov	r7, r6
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f040 8243 	bne.w	800ee7e <_dtoa_r+0x956>
 800e9f8:	9d00      	ldr	r5, [sp, #0]
 800e9fa:	2331      	movs	r3, #49	; 0x31
 800e9fc:	f805 3b01 	strb.w	r3, [r5], #1
 800ea00:	f10a 0a01 	add.w	sl, sl, #1
 800ea04:	e23f      	b.n	800ee86 <_dtoa_r+0x95e>
 800ea06:	07f2      	lsls	r2, r6, #31
 800ea08:	d505      	bpl.n	800ea16 <_dtoa_r+0x4ee>
 800ea0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea0e:	f7f1 fdfb 	bl	8000608 <__aeabi_dmul>
 800ea12:	3501      	adds	r5, #1
 800ea14:	2301      	movs	r3, #1
 800ea16:	1076      	asrs	r6, r6, #1
 800ea18:	3708      	adds	r7, #8
 800ea1a:	e76c      	b.n	800e8f6 <_dtoa_r+0x3ce>
 800ea1c:	2502      	movs	r5, #2
 800ea1e:	e76f      	b.n	800e900 <_dtoa_r+0x3d8>
 800ea20:	9b01      	ldr	r3, [sp, #4]
 800ea22:	f8cd a01c 	str.w	sl, [sp, #28]
 800ea26:	930c      	str	r3, [sp, #48]	; 0x30
 800ea28:	e78d      	b.n	800e946 <_dtoa_r+0x41e>
 800ea2a:	9900      	ldr	r1, [sp, #0]
 800ea2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea30:	4b4e      	ldr	r3, [pc, #312]	; (800eb6c <_dtoa_r+0x644>)
 800ea32:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea36:	4401      	add	r1, r0
 800ea38:	9102      	str	r1, [sp, #8]
 800ea3a:	9908      	ldr	r1, [sp, #32]
 800ea3c:	eeb0 8a47 	vmov.f32	s16, s14
 800ea40:	eef0 8a67 	vmov.f32	s17, s15
 800ea44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea4c:	2900      	cmp	r1, #0
 800ea4e:	d045      	beq.n	800eadc <_dtoa_r+0x5b4>
 800ea50:	494c      	ldr	r1, [pc, #304]	; (800eb84 <_dtoa_r+0x65c>)
 800ea52:	2000      	movs	r0, #0
 800ea54:	f7f1 ff02 	bl	800085c <__aeabi_ddiv>
 800ea58:	ec53 2b18 	vmov	r2, r3, d8
 800ea5c:	f7f1 fc1c 	bl	8000298 <__aeabi_dsub>
 800ea60:	9d00      	ldr	r5, [sp, #0]
 800ea62:	ec41 0b18 	vmov	d8, r0, r1
 800ea66:	4639      	mov	r1, r7
 800ea68:	4630      	mov	r0, r6
 800ea6a:	f7f2 f87d 	bl	8000b68 <__aeabi_d2iz>
 800ea6e:	900c      	str	r0, [sp, #48]	; 0x30
 800ea70:	f7f1 fd60 	bl	8000534 <__aeabi_i2d>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4630      	mov	r0, r6
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	f7f1 fc0c 	bl	8000298 <__aeabi_dsub>
 800ea80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea82:	3330      	adds	r3, #48	; 0x30
 800ea84:	f805 3b01 	strb.w	r3, [r5], #1
 800ea88:	ec53 2b18 	vmov	r2, r3, d8
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	f7f2 f82c 	bl	8000aec <__aeabi_dcmplt>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d165      	bne.n	800eb64 <_dtoa_r+0x63c>
 800ea98:	4632      	mov	r2, r6
 800ea9a:	463b      	mov	r3, r7
 800ea9c:	4935      	ldr	r1, [pc, #212]	; (800eb74 <_dtoa_r+0x64c>)
 800ea9e:	2000      	movs	r0, #0
 800eaa0:	f7f1 fbfa 	bl	8000298 <__aeabi_dsub>
 800eaa4:	ec53 2b18 	vmov	r2, r3, d8
 800eaa8:	f7f2 f820 	bl	8000aec <__aeabi_dcmplt>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f040 80b9 	bne.w	800ec24 <_dtoa_r+0x6fc>
 800eab2:	9b02      	ldr	r3, [sp, #8]
 800eab4:	429d      	cmp	r5, r3
 800eab6:	f43f af75 	beq.w	800e9a4 <_dtoa_r+0x47c>
 800eaba:	4b2f      	ldr	r3, [pc, #188]	; (800eb78 <_dtoa_r+0x650>)
 800eabc:	ec51 0b18 	vmov	r0, r1, d8
 800eac0:	2200      	movs	r2, #0
 800eac2:	f7f1 fda1 	bl	8000608 <__aeabi_dmul>
 800eac6:	4b2c      	ldr	r3, [pc, #176]	; (800eb78 <_dtoa_r+0x650>)
 800eac8:	ec41 0b18 	vmov	d8, r0, r1
 800eacc:	2200      	movs	r2, #0
 800eace:	4630      	mov	r0, r6
 800ead0:	4639      	mov	r1, r7
 800ead2:	f7f1 fd99 	bl	8000608 <__aeabi_dmul>
 800ead6:	4606      	mov	r6, r0
 800ead8:	460f      	mov	r7, r1
 800eada:	e7c4      	b.n	800ea66 <_dtoa_r+0x53e>
 800eadc:	ec51 0b17 	vmov	r0, r1, d7
 800eae0:	f7f1 fd92 	bl	8000608 <__aeabi_dmul>
 800eae4:	9b02      	ldr	r3, [sp, #8]
 800eae6:	9d00      	ldr	r5, [sp, #0]
 800eae8:	930c      	str	r3, [sp, #48]	; 0x30
 800eaea:	ec41 0b18 	vmov	d8, r0, r1
 800eaee:	4639      	mov	r1, r7
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7f2 f839 	bl	8000b68 <__aeabi_d2iz>
 800eaf6:	9011      	str	r0, [sp, #68]	; 0x44
 800eaf8:	f7f1 fd1c 	bl	8000534 <__aeabi_i2d>
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	f7f1 fbc8 	bl	8000298 <__aeabi_dsub>
 800eb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb0a:	3330      	adds	r3, #48	; 0x30
 800eb0c:	f805 3b01 	strb.w	r3, [r5], #1
 800eb10:	9b02      	ldr	r3, [sp, #8]
 800eb12:	429d      	cmp	r5, r3
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	f04f 0200 	mov.w	r2, #0
 800eb1c:	d134      	bne.n	800eb88 <_dtoa_r+0x660>
 800eb1e:	4b19      	ldr	r3, [pc, #100]	; (800eb84 <_dtoa_r+0x65c>)
 800eb20:	ec51 0b18 	vmov	r0, r1, d8
 800eb24:	f7f1 fbba 	bl	800029c <__adddf3>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	4639      	mov	r1, r7
 800eb30:	f7f1 fffa 	bl	8000b28 <__aeabi_dcmpgt>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d175      	bne.n	800ec24 <_dtoa_r+0x6fc>
 800eb38:	ec53 2b18 	vmov	r2, r3, d8
 800eb3c:	4911      	ldr	r1, [pc, #68]	; (800eb84 <_dtoa_r+0x65c>)
 800eb3e:	2000      	movs	r0, #0
 800eb40:	f7f1 fbaa 	bl	8000298 <__aeabi_dsub>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	4630      	mov	r0, r6
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	f7f1 ffce 	bl	8000aec <__aeabi_dcmplt>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	f43f af27 	beq.w	800e9a4 <_dtoa_r+0x47c>
 800eb56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb58:	1e6b      	subs	r3, r5, #1
 800eb5a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb60:	2b30      	cmp	r3, #48	; 0x30
 800eb62:	d0f8      	beq.n	800eb56 <_dtoa_r+0x62e>
 800eb64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eb68:	e04a      	b.n	800ec00 <_dtoa_r+0x6d8>
 800eb6a:	bf00      	nop
 800eb6c:	08012648 	.word	0x08012648
 800eb70:	08012620 	.word	0x08012620
 800eb74:	3ff00000 	.word	0x3ff00000
 800eb78:	40240000 	.word	0x40240000
 800eb7c:	401c0000 	.word	0x401c0000
 800eb80:	40140000 	.word	0x40140000
 800eb84:	3fe00000 	.word	0x3fe00000
 800eb88:	4baf      	ldr	r3, [pc, #700]	; (800ee48 <_dtoa_r+0x920>)
 800eb8a:	f7f1 fd3d 	bl	8000608 <__aeabi_dmul>
 800eb8e:	4606      	mov	r6, r0
 800eb90:	460f      	mov	r7, r1
 800eb92:	e7ac      	b.n	800eaee <_dtoa_r+0x5c6>
 800eb94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eb98:	9d00      	ldr	r5, [sp, #0]
 800eb9a:	4642      	mov	r2, r8
 800eb9c:	464b      	mov	r3, r9
 800eb9e:	4630      	mov	r0, r6
 800eba0:	4639      	mov	r1, r7
 800eba2:	f7f1 fe5b 	bl	800085c <__aeabi_ddiv>
 800eba6:	f7f1 ffdf 	bl	8000b68 <__aeabi_d2iz>
 800ebaa:	9002      	str	r0, [sp, #8]
 800ebac:	f7f1 fcc2 	bl	8000534 <__aeabi_i2d>
 800ebb0:	4642      	mov	r2, r8
 800ebb2:	464b      	mov	r3, r9
 800ebb4:	f7f1 fd28 	bl	8000608 <__aeabi_dmul>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	f7f1 fb6a 	bl	8000298 <__aeabi_dsub>
 800ebc4:	9e02      	ldr	r6, [sp, #8]
 800ebc6:	9f01      	ldr	r7, [sp, #4]
 800ebc8:	3630      	adds	r6, #48	; 0x30
 800ebca:	f805 6b01 	strb.w	r6, [r5], #1
 800ebce:	9e00      	ldr	r6, [sp, #0]
 800ebd0:	1bae      	subs	r6, r5, r6
 800ebd2:	42b7      	cmp	r7, r6
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	d137      	bne.n	800ec4a <_dtoa_r+0x722>
 800ebda:	f7f1 fb5f 	bl	800029c <__adddf3>
 800ebde:	4642      	mov	r2, r8
 800ebe0:	464b      	mov	r3, r9
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	460f      	mov	r7, r1
 800ebe6:	f7f1 ff9f 	bl	8000b28 <__aeabi_dcmpgt>
 800ebea:	b9c8      	cbnz	r0, 800ec20 <_dtoa_r+0x6f8>
 800ebec:	4642      	mov	r2, r8
 800ebee:	464b      	mov	r3, r9
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 800ebf8:	b110      	cbz	r0, 800ec00 <_dtoa_r+0x6d8>
 800ebfa:	9b02      	ldr	r3, [sp, #8]
 800ebfc:	07d9      	lsls	r1, r3, #31
 800ebfe:	d40f      	bmi.n	800ec20 <_dtoa_r+0x6f8>
 800ec00:	4620      	mov	r0, r4
 800ec02:	4659      	mov	r1, fp
 800ec04:	f000 fe5c 	bl	800f8c0 <_Bfree>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	702b      	strb	r3, [r5, #0]
 800ec0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec0e:	f10a 0001 	add.w	r0, sl, #1
 800ec12:	6018      	str	r0, [r3, #0]
 800ec14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f43f acd8 	beq.w	800e5cc <_dtoa_r+0xa4>
 800ec1c:	601d      	str	r5, [r3, #0]
 800ec1e:	e4d5      	b.n	800e5cc <_dtoa_r+0xa4>
 800ec20:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec24:	462b      	mov	r3, r5
 800ec26:	461d      	mov	r5, r3
 800ec28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec2c:	2a39      	cmp	r2, #57	; 0x39
 800ec2e:	d108      	bne.n	800ec42 <_dtoa_r+0x71a>
 800ec30:	9a00      	ldr	r2, [sp, #0]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d1f7      	bne.n	800ec26 <_dtoa_r+0x6fe>
 800ec36:	9a07      	ldr	r2, [sp, #28]
 800ec38:	9900      	ldr	r1, [sp, #0]
 800ec3a:	3201      	adds	r2, #1
 800ec3c:	9207      	str	r2, [sp, #28]
 800ec3e:	2230      	movs	r2, #48	; 0x30
 800ec40:	700a      	strb	r2, [r1, #0]
 800ec42:	781a      	ldrb	r2, [r3, #0]
 800ec44:	3201      	adds	r2, #1
 800ec46:	701a      	strb	r2, [r3, #0]
 800ec48:	e78c      	b.n	800eb64 <_dtoa_r+0x63c>
 800ec4a:	4b7f      	ldr	r3, [pc, #508]	; (800ee48 <_dtoa_r+0x920>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f7f1 fcdb 	bl	8000608 <__aeabi_dmul>
 800ec52:	2200      	movs	r2, #0
 800ec54:	2300      	movs	r3, #0
 800ec56:	4606      	mov	r6, r0
 800ec58:	460f      	mov	r7, r1
 800ec5a:	f7f1 ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d09b      	beq.n	800eb9a <_dtoa_r+0x672>
 800ec62:	e7cd      	b.n	800ec00 <_dtoa_r+0x6d8>
 800ec64:	9a08      	ldr	r2, [sp, #32]
 800ec66:	2a00      	cmp	r2, #0
 800ec68:	f000 80c4 	beq.w	800edf4 <_dtoa_r+0x8cc>
 800ec6c:	9a05      	ldr	r2, [sp, #20]
 800ec6e:	2a01      	cmp	r2, #1
 800ec70:	f300 80a8 	bgt.w	800edc4 <_dtoa_r+0x89c>
 800ec74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec76:	2a00      	cmp	r2, #0
 800ec78:	f000 80a0 	beq.w	800edbc <_dtoa_r+0x894>
 800ec7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ec80:	9e06      	ldr	r6, [sp, #24]
 800ec82:	4645      	mov	r5, r8
 800ec84:	9a04      	ldr	r2, [sp, #16]
 800ec86:	2101      	movs	r1, #1
 800ec88:	441a      	add	r2, r3
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	4498      	add	r8, r3
 800ec8e:	9204      	str	r2, [sp, #16]
 800ec90:	f000 ff1c 	bl	800facc <__i2b>
 800ec94:	4607      	mov	r7, r0
 800ec96:	2d00      	cmp	r5, #0
 800ec98:	dd0b      	ble.n	800ecb2 <_dtoa_r+0x78a>
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dd08      	ble.n	800ecb2 <_dtoa_r+0x78a>
 800eca0:	42ab      	cmp	r3, r5
 800eca2:	9a04      	ldr	r2, [sp, #16]
 800eca4:	bfa8      	it	ge
 800eca6:	462b      	movge	r3, r5
 800eca8:	eba8 0803 	sub.w	r8, r8, r3
 800ecac:	1aed      	subs	r5, r5, r3
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	9304      	str	r3, [sp, #16]
 800ecb2:	9b06      	ldr	r3, [sp, #24]
 800ecb4:	b1fb      	cbz	r3, 800ecf6 <_dtoa_r+0x7ce>
 800ecb6:	9b08      	ldr	r3, [sp, #32]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 809f 	beq.w	800edfc <_dtoa_r+0x8d4>
 800ecbe:	2e00      	cmp	r6, #0
 800ecc0:	dd11      	ble.n	800ece6 <_dtoa_r+0x7be>
 800ecc2:	4639      	mov	r1, r7
 800ecc4:	4632      	mov	r2, r6
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 ffbc 	bl	800fc44 <__pow5mult>
 800eccc:	465a      	mov	r2, fp
 800ecce:	4601      	mov	r1, r0
 800ecd0:	4607      	mov	r7, r0
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f000 ff10 	bl	800faf8 <__multiply>
 800ecd8:	4659      	mov	r1, fp
 800ecda:	9007      	str	r0, [sp, #28]
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 fdef 	bl	800f8c0 <_Bfree>
 800ece2:	9b07      	ldr	r3, [sp, #28]
 800ece4:	469b      	mov	fp, r3
 800ece6:	9b06      	ldr	r3, [sp, #24]
 800ece8:	1b9a      	subs	r2, r3, r6
 800ecea:	d004      	beq.n	800ecf6 <_dtoa_r+0x7ce>
 800ecec:	4659      	mov	r1, fp
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 ffa8 	bl	800fc44 <__pow5mult>
 800ecf4:	4683      	mov	fp, r0
 800ecf6:	2101      	movs	r1, #1
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 fee7 	bl	800facc <__i2b>
 800ecfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	4606      	mov	r6, r0
 800ed04:	dd7c      	ble.n	800ee00 <_dtoa_r+0x8d8>
 800ed06:	461a      	mov	r2, r3
 800ed08:	4601      	mov	r1, r0
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 ff9a 	bl	800fc44 <__pow5mult>
 800ed10:	9b05      	ldr	r3, [sp, #20]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	4606      	mov	r6, r0
 800ed16:	dd76      	ble.n	800ee06 <_dtoa_r+0x8de>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	9306      	str	r3, [sp, #24]
 800ed1c:	6933      	ldr	r3, [r6, #16]
 800ed1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed22:	6918      	ldr	r0, [r3, #16]
 800ed24:	f000 fe82 	bl	800fa2c <__hi0bits>
 800ed28:	f1c0 0020 	rsb	r0, r0, #32
 800ed2c:	9b04      	ldr	r3, [sp, #16]
 800ed2e:	4418      	add	r0, r3
 800ed30:	f010 001f 	ands.w	r0, r0, #31
 800ed34:	f000 8086 	beq.w	800ee44 <_dtoa_r+0x91c>
 800ed38:	f1c0 0320 	rsb	r3, r0, #32
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	dd7f      	ble.n	800ee40 <_dtoa_r+0x918>
 800ed40:	f1c0 001c 	rsb	r0, r0, #28
 800ed44:	9b04      	ldr	r3, [sp, #16]
 800ed46:	4403      	add	r3, r0
 800ed48:	4480      	add	r8, r0
 800ed4a:	4405      	add	r5, r0
 800ed4c:	9304      	str	r3, [sp, #16]
 800ed4e:	f1b8 0f00 	cmp.w	r8, #0
 800ed52:	dd05      	ble.n	800ed60 <_dtoa_r+0x838>
 800ed54:	4659      	mov	r1, fp
 800ed56:	4642      	mov	r2, r8
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 ffcd 	bl	800fcf8 <__lshift>
 800ed5e:	4683      	mov	fp, r0
 800ed60:	9b04      	ldr	r3, [sp, #16]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	dd05      	ble.n	800ed72 <_dtoa_r+0x84a>
 800ed66:	4631      	mov	r1, r6
 800ed68:	461a      	mov	r2, r3
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f000 ffc4 	bl	800fcf8 <__lshift>
 800ed70:	4606      	mov	r6, r0
 800ed72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d069      	beq.n	800ee4c <_dtoa_r+0x924>
 800ed78:	4631      	mov	r1, r6
 800ed7a:	4658      	mov	r0, fp
 800ed7c:	f001 f828 	bl	800fdd0 <__mcmp>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	da63      	bge.n	800ee4c <_dtoa_r+0x924>
 800ed84:	2300      	movs	r3, #0
 800ed86:	4659      	mov	r1, fp
 800ed88:	220a      	movs	r2, #10
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 fdba 	bl	800f904 <__multadd>
 800ed90:	9b08      	ldr	r3, [sp, #32]
 800ed92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed96:	4683      	mov	fp, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 818f 	beq.w	800f0bc <_dtoa_r+0xb94>
 800ed9e:	4639      	mov	r1, r7
 800eda0:	2300      	movs	r3, #0
 800eda2:	220a      	movs	r2, #10
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fdad 	bl	800f904 <__multadd>
 800edaa:	f1b9 0f00 	cmp.w	r9, #0
 800edae:	4607      	mov	r7, r0
 800edb0:	f300 808e 	bgt.w	800eed0 <_dtoa_r+0x9a8>
 800edb4:	9b05      	ldr	r3, [sp, #20]
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	dc50      	bgt.n	800ee5c <_dtoa_r+0x934>
 800edba:	e089      	b.n	800eed0 <_dtoa_r+0x9a8>
 800edbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800edc2:	e75d      	b.n	800ec80 <_dtoa_r+0x758>
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	1e5e      	subs	r6, r3, #1
 800edc8:	9b06      	ldr	r3, [sp, #24]
 800edca:	42b3      	cmp	r3, r6
 800edcc:	bfbf      	itttt	lt
 800edce:	9b06      	ldrlt	r3, [sp, #24]
 800edd0:	9606      	strlt	r6, [sp, #24]
 800edd2:	1af2      	sublt	r2, r6, r3
 800edd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800edd6:	bfb6      	itet	lt
 800edd8:	189b      	addlt	r3, r3, r2
 800edda:	1b9e      	subge	r6, r3, r6
 800eddc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800edde:	9b01      	ldr	r3, [sp, #4]
 800ede0:	bfb8      	it	lt
 800ede2:	2600      	movlt	r6, #0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	bfb5      	itete	lt
 800ede8:	eba8 0503 	sublt.w	r5, r8, r3
 800edec:	9b01      	ldrge	r3, [sp, #4]
 800edee:	2300      	movlt	r3, #0
 800edf0:	4645      	movge	r5, r8
 800edf2:	e747      	b.n	800ec84 <_dtoa_r+0x75c>
 800edf4:	9e06      	ldr	r6, [sp, #24]
 800edf6:	9f08      	ldr	r7, [sp, #32]
 800edf8:	4645      	mov	r5, r8
 800edfa:	e74c      	b.n	800ec96 <_dtoa_r+0x76e>
 800edfc:	9a06      	ldr	r2, [sp, #24]
 800edfe:	e775      	b.n	800ecec <_dtoa_r+0x7c4>
 800ee00:	9b05      	ldr	r3, [sp, #20]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	dc18      	bgt.n	800ee38 <_dtoa_r+0x910>
 800ee06:	9b02      	ldr	r3, [sp, #8]
 800ee08:	b9b3      	cbnz	r3, 800ee38 <_dtoa_r+0x910>
 800ee0a:	9b03      	ldr	r3, [sp, #12]
 800ee0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee10:	b9a3      	cbnz	r3, 800ee3c <_dtoa_r+0x914>
 800ee12:	9b03      	ldr	r3, [sp, #12]
 800ee14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee18:	0d1b      	lsrs	r3, r3, #20
 800ee1a:	051b      	lsls	r3, r3, #20
 800ee1c:	b12b      	cbz	r3, 800ee2a <_dtoa_r+0x902>
 800ee1e:	9b04      	ldr	r3, [sp, #16]
 800ee20:	3301      	adds	r3, #1
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	f108 0801 	add.w	r8, r8, #1
 800ee28:	2301      	movs	r3, #1
 800ee2a:	9306      	str	r3, [sp, #24]
 800ee2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f47f af74 	bne.w	800ed1c <_dtoa_r+0x7f4>
 800ee34:	2001      	movs	r0, #1
 800ee36:	e779      	b.n	800ed2c <_dtoa_r+0x804>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	e7f6      	b.n	800ee2a <_dtoa_r+0x902>
 800ee3c:	9b02      	ldr	r3, [sp, #8]
 800ee3e:	e7f4      	b.n	800ee2a <_dtoa_r+0x902>
 800ee40:	d085      	beq.n	800ed4e <_dtoa_r+0x826>
 800ee42:	4618      	mov	r0, r3
 800ee44:	301c      	adds	r0, #28
 800ee46:	e77d      	b.n	800ed44 <_dtoa_r+0x81c>
 800ee48:	40240000 	.word	0x40240000
 800ee4c:	9b01      	ldr	r3, [sp, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	dc38      	bgt.n	800eec4 <_dtoa_r+0x99c>
 800ee52:	9b05      	ldr	r3, [sp, #20]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	dd35      	ble.n	800eec4 <_dtoa_r+0x99c>
 800ee58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee5c:	f1b9 0f00 	cmp.w	r9, #0
 800ee60:	d10d      	bne.n	800ee7e <_dtoa_r+0x956>
 800ee62:	4631      	mov	r1, r6
 800ee64:	464b      	mov	r3, r9
 800ee66:	2205      	movs	r2, #5
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f000 fd4b 	bl	800f904 <__multadd>
 800ee6e:	4601      	mov	r1, r0
 800ee70:	4606      	mov	r6, r0
 800ee72:	4658      	mov	r0, fp
 800ee74:	f000 ffac 	bl	800fdd0 <__mcmp>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	f73f adbd 	bgt.w	800e9f8 <_dtoa_r+0x4d0>
 800ee7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee80:	9d00      	ldr	r5, [sp, #0]
 800ee82:	ea6f 0a03 	mvn.w	sl, r3
 800ee86:	f04f 0800 	mov.w	r8, #0
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 fd17 	bl	800f8c0 <_Bfree>
 800ee92:	2f00      	cmp	r7, #0
 800ee94:	f43f aeb4 	beq.w	800ec00 <_dtoa_r+0x6d8>
 800ee98:	f1b8 0f00 	cmp.w	r8, #0
 800ee9c:	d005      	beq.n	800eeaa <_dtoa_r+0x982>
 800ee9e:	45b8      	cmp	r8, r7
 800eea0:	d003      	beq.n	800eeaa <_dtoa_r+0x982>
 800eea2:	4641      	mov	r1, r8
 800eea4:	4620      	mov	r0, r4
 800eea6:	f000 fd0b 	bl	800f8c0 <_Bfree>
 800eeaa:	4639      	mov	r1, r7
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 fd07 	bl	800f8c0 <_Bfree>
 800eeb2:	e6a5      	b.n	800ec00 <_dtoa_r+0x6d8>
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	4637      	mov	r7, r6
 800eeb8:	e7e1      	b.n	800ee7e <_dtoa_r+0x956>
 800eeba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eebc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eec0:	4637      	mov	r7, r6
 800eec2:	e599      	b.n	800e9f8 <_dtoa_r+0x4d0>
 800eec4:	9b08      	ldr	r3, [sp, #32]
 800eec6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f000 80fd 	beq.w	800f0ca <_dtoa_r+0xba2>
 800eed0:	2d00      	cmp	r5, #0
 800eed2:	dd05      	ble.n	800eee0 <_dtoa_r+0x9b8>
 800eed4:	4639      	mov	r1, r7
 800eed6:	462a      	mov	r2, r5
 800eed8:	4620      	mov	r0, r4
 800eeda:	f000 ff0d 	bl	800fcf8 <__lshift>
 800eede:	4607      	mov	r7, r0
 800eee0:	9b06      	ldr	r3, [sp, #24]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d05c      	beq.n	800efa0 <_dtoa_r+0xa78>
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	4620      	mov	r0, r4
 800eeea:	f000 fca9 	bl	800f840 <_Balloc>
 800eeee:	4605      	mov	r5, r0
 800eef0:	b928      	cbnz	r0, 800eefe <_dtoa_r+0x9d6>
 800eef2:	4b80      	ldr	r3, [pc, #512]	; (800f0f4 <_dtoa_r+0xbcc>)
 800eef4:	4602      	mov	r2, r0
 800eef6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eefa:	f7ff bb2e 	b.w	800e55a <_dtoa_r+0x32>
 800eefe:	693a      	ldr	r2, [r7, #16]
 800ef00:	3202      	adds	r2, #2
 800ef02:	0092      	lsls	r2, r2, #2
 800ef04:	f107 010c 	add.w	r1, r7, #12
 800ef08:	300c      	adds	r0, #12
 800ef0a:	f7fd fc61 	bl	800c7d0 <memcpy>
 800ef0e:	2201      	movs	r2, #1
 800ef10:	4629      	mov	r1, r5
 800ef12:	4620      	mov	r0, r4
 800ef14:	f000 fef0 	bl	800fcf8 <__lshift>
 800ef18:	9b00      	ldr	r3, [sp, #0]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	9301      	str	r3, [sp, #4]
 800ef1e:	9b00      	ldr	r3, [sp, #0]
 800ef20:	444b      	add	r3, r9
 800ef22:	9307      	str	r3, [sp, #28]
 800ef24:	9b02      	ldr	r3, [sp, #8]
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	46b8      	mov	r8, r7
 800ef2c:	9306      	str	r3, [sp, #24]
 800ef2e:	4607      	mov	r7, r0
 800ef30:	9b01      	ldr	r3, [sp, #4]
 800ef32:	4631      	mov	r1, r6
 800ef34:	3b01      	subs	r3, #1
 800ef36:	4658      	mov	r0, fp
 800ef38:	9302      	str	r3, [sp, #8]
 800ef3a:	f7ff fa69 	bl	800e410 <quorem>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	3330      	adds	r3, #48	; 0x30
 800ef42:	9004      	str	r0, [sp, #16]
 800ef44:	4641      	mov	r1, r8
 800ef46:	4658      	mov	r0, fp
 800ef48:	9308      	str	r3, [sp, #32]
 800ef4a:	f000 ff41 	bl	800fdd0 <__mcmp>
 800ef4e:	463a      	mov	r2, r7
 800ef50:	4681      	mov	r9, r0
 800ef52:	4631      	mov	r1, r6
 800ef54:	4620      	mov	r0, r4
 800ef56:	f000 ff57 	bl	800fe08 <__mdiff>
 800ef5a:	68c2      	ldr	r2, [r0, #12]
 800ef5c:	9b08      	ldr	r3, [sp, #32]
 800ef5e:	4605      	mov	r5, r0
 800ef60:	bb02      	cbnz	r2, 800efa4 <_dtoa_r+0xa7c>
 800ef62:	4601      	mov	r1, r0
 800ef64:	4658      	mov	r0, fp
 800ef66:	f000 ff33 	bl	800fdd0 <__mcmp>
 800ef6a:	9b08      	ldr	r3, [sp, #32]
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	4629      	mov	r1, r5
 800ef70:	4620      	mov	r0, r4
 800ef72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ef76:	f000 fca3 	bl	800f8c0 <_Bfree>
 800ef7a:	9b05      	ldr	r3, [sp, #20]
 800ef7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef7e:	9d01      	ldr	r5, [sp, #4]
 800ef80:	ea43 0102 	orr.w	r1, r3, r2
 800ef84:	9b06      	ldr	r3, [sp, #24]
 800ef86:	430b      	orrs	r3, r1
 800ef88:	9b08      	ldr	r3, [sp, #32]
 800ef8a:	d10d      	bne.n	800efa8 <_dtoa_r+0xa80>
 800ef8c:	2b39      	cmp	r3, #57	; 0x39
 800ef8e:	d029      	beq.n	800efe4 <_dtoa_r+0xabc>
 800ef90:	f1b9 0f00 	cmp.w	r9, #0
 800ef94:	dd01      	ble.n	800ef9a <_dtoa_r+0xa72>
 800ef96:	9b04      	ldr	r3, [sp, #16]
 800ef98:	3331      	adds	r3, #49	; 0x31
 800ef9a:	9a02      	ldr	r2, [sp, #8]
 800ef9c:	7013      	strb	r3, [r2, #0]
 800ef9e:	e774      	b.n	800ee8a <_dtoa_r+0x962>
 800efa0:	4638      	mov	r0, r7
 800efa2:	e7b9      	b.n	800ef18 <_dtoa_r+0x9f0>
 800efa4:	2201      	movs	r2, #1
 800efa6:	e7e2      	b.n	800ef6e <_dtoa_r+0xa46>
 800efa8:	f1b9 0f00 	cmp.w	r9, #0
 800efac:	db06      	blt.n	800efbc <_dtoa_r+0xa94>
 800efae:	9905      	ldr	r1, [sp, #20]
 800efb0:	ea41 0909 	orr.w	r9, r1, r9
 800efb4:	9906      	ldr	r1, [sp, #24]
 800efb6:	ea59 0101 	orrs.w	r1, r9, r1
 800efba:	d120      	bne.n	800effe <_dtoa_r+0xad6>
 800efbc:	2a00      	cmp	r2, #0
 800efbe:	ddec      	ble.n	800ef9a <_dtoa_r+0xa72>
 800efc0:	4659      	mov	r1, fp
 800efc2:	2201      	movs	r2, #1
 800efc4:	4620      	mov	r0, r4
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	f000 fe96 	bl	800fcf8 <__lshift>
 800efcc:	4631      	mov	r1, r6
 800efce:	4683      	mov	fp, r0
 800efd0:	f000 fefe 	bl	800fdd0 <__mcmp>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	9b01      	ldr	r3, [sp, #4]
 800efd8:	dc02      	bgt.n	800efe0 <_dtoa_r+0xab8>
 800efda:	d1de      	bne.n	800ef9a <_dtoa_r+0xa72>
 800efdc:	07da      	lsls	r2, r3, #31
 800efde:	d5dc      	bpl.n	800ef9a <_dtoa_r+0xa72>
 800efe0:	2b39      	cmp	r3, #57	; 0x39
 800efe2:	d1d8      	bne.n	800ef96 <_dtoa_r+0xa6e>
 800efe4:	9a02      	ldr	r2, [sp, #8]
 800efe6:	2339      	movs	r3, #57	; 0x39
 800efe8:	7013      	strb	r3, [r2, #0]
 800efea:	462b      	mov	r3, r5
 800efec:	461d      	mov	r5, r3
 800efee:	3b01      	subs	r3, #1
 800eff0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eff4:	2a39      	cmp	r2, #57	; 0x39
 800eff6:	d050      	beq.n	800f09a <_dtoa_r+0xb72>
 800eff8:	3201      	adds	r2, #1
 800effa:	701a      	strb	r2, [r3, #0]
 800effc:	e745      	b.n	800ee8a <_dtoa_r+0x962>
 800effe:	2a00      	cmp	r2, #0
 800f000:	dd03      	ble.n	800f00a <_dtoa_r+0xae2>
 800f002:	2b39      	cmp	r3, #57	; 0x39
 800f004:	d0ee      	beq.n	800efe4 <_dtoa_r+0xabc>
 800f006:	3301      	adds	r3, #1
 800f008:	e7c7      	b.n	800ef9a <_dtoa_r+0xa72>
 800f00a:	9a01      	ldr	r2, [sp, #4]
 800f00c:	9907      	ldr	r1, [sp, #28]
 800f00e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f012:	428a      	cmp	r2, r1
 800f014:	d02a      	beq.n	800f06c <_dtoa_r+0xb44>
 800f016:	4659      	mov	r1, fp
 800f018:	2300      	movs	r3, #0
 800f01a:	220a      	movs	r2, #10
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 fc71 	bl	800f904 <__multadd>
 800f022:	45b8      	cmp	r8, r7
 800f024:	4683      	mov	fp, r0
 800f026:	f04f 0300 	mov.w	r3, #0
 800f02a:	f04f 020a 	mov.w	r2, #10
 800f02e:	4641      	mov	r1, r8
 800f030:	4620      	mov	r0, r4
 800f032:	d107      	bne.n	800f044 <_dtoa_r+0xb1c>
 800f034:	f000 fc66 	bl	800f904 <__multadd>
 800f038:	4680      	mov	r8, r0
 800f03a:	4607      	mov	r7, r0
 800f03c:	9b01      	ldr	r3, [sp, #4]
 800f03e:	3301      	adds	r3, #1
 800f040:	9301      	str	r3, [sp, #4]
 800f042:	e775      	b.n	800ef30 <_dtoa_r+0xa08>
 800f044:	f000 fc5e 	bl	800f904 <__multadd>
 800f048:	4639      	mov	r1, r7
 800f04a:	4680      	mov	r8, r0
 800f04c:	2300      	movs	r3, #0
 800f04e:	220a      	movs	r2, #10
 800f050:	4620      	mov	r0, r4
 800f052:	f000 fc57 	bl	800f904 <__multadd>
 800f056:	4607      	mov	r7, r0
 800f058:	e7f0      	b.n	800f03c <_dtoa_r+0xb14>
 800f05a:	f1b9 0f00 	cmp.w	r9, #0
 800f05e:	9a00      	ldr	r2, [sp, #0]
 800f060:	bfcc      	ite	gt
 800f062:	464d      	movgt	r5, r9
 800f064:	2501      	movle	r5, #1
 800f066:	4415      	add	r5, r2
 800f068:	f04f 0800 	mov.w	r8, #0
 800f06c:	4659      	mov	r1, fp
 800f06e:	2201      	movs	r2, #1
 800f070:	4620      	mov	r0, r4
 800f072:	9301      	str	r3, [sp, #4]
 800f074:	f000 fe40 	bl	800fcf8 <__lshift>
 800f078:	4631      	mov	r1, r6
 800f07a:	4683      	mov	fp, r0
 800f07c:	f000 fea8 	bl	800fdd0 <__mcmp>
 800f080:	2800      	cmp	r0, #0
 800f082:	dcb2      	bgt.n	800efea <_dtoa_r+0xac2>
 800f084:	d102      	bne.n	800f08c <_dtoa_r+0xb64>
 800f086:	9b01      	ldr	r3, [sp, #4]
 800f088:	07db      	lsls	r3, r3, #31
 800f08a:	d4ae      	bmi.n	800efea <_dtoa_r+0xac2>
 800f08c:	462b      	mov	r3, r5
 800f08e:	461d      	mov	r5, r3
 800f090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f094:	2a30      	cmp	r2, #48	; 0x30
 800f096:	d0fa      	beq.n	800f08e <_dtoa_r+0xb66>
 800f098:	e6f7      	b.n	800ee8a <_dtoa_r+0x962>
 800f09a:	9a00      	ldr	r2, [sp, #0]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d1a5      	bne.n	800efec <_dtoa_r+0xac4>
 800f0a0:	f10a 0a01 	add.w	sl, sl, #1
 800f0a4:	2331      	movs	r3, #49	; 0x31
 800f0a6:	e779      	b.n	800ef9c <_dtoa_r+0xa74>
 800f0a8:	4b13      	ldr	r3, [pc, #76]	; (800f0f8 <_dtoa_r+0xbd0>)
 800f0aa:	f7ff baaf 	b.w	800e60c <_dtoa_r+0xe4>
 800f0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f47f aa86 	bne.w	800e5c2 <_dtoa_r+0x9a>
 800f0b6:	4b11      	ldr	r3, [pc, #68]	; (800f0fc <_dtoa_r+0xbd4>)
 800f0b8:	f7ff baa8 	b.w	800e60c <_dtoa_r+0xe4>
 800f0bc:	f1b9 0f00 	cmp.w	r9, #0
 800f0c0:	dc03      	bgt.n	800f0ca <_dtoa_r+0xba2>
 800f0c2:	9b05      	ldr	r3, [sp, #20]
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	f73f aec9 	bgt.w	800ee5c <_dtoa_r+0x934>
 800f0ca:	9d00      	ldr	r5, [sp, #0]
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4658      	mov	r0, fp
 800f0d0:	f7ff f99e 	bl	800e410 <quorem>
 800f0d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f0d8:	f805 3b01 	strb.w	r3, [r5], #1
 800f0dc:	9a00      	ldr	r2, [sp, #0]
 800f0de:	1aaa      	subs	r2, r5, r2
 800f0e0:	4591      	cmp	r9, r2
 800f0e2:	ddba      	ble.n	800f05a <_dtoa_r+0xb32>
 800f0e4:	4659      	mov	r1, fp
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	220a      	movs	r2, #10
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f000 fc0a 	bl	800f904 <__multadd>
 800f0f0:	4683      	mov	fp, r0
 800f0f2:	e7eb      	b.n	800f0cc <_dtoa_r+0xba4>
 800f0f4:	0801252c 	.word	0x0801252c
 800f0f8:	08012731 	.word	0x08012731
 800f0fc:	080124a9 	.word	0x080124a9

0800f100 <rshift>:
 800f100:	6903      	ldr	r3, [r0, #16]
 800f102:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f106:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f10a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f10e:	f100 0414 	add.w	r4, r0, #20
 800f112:	dd45      	ble.n	800f1a0 <rshift+0xa0>
 800f114:	f011 011f 	ands.w	r1, r1, #31
 800f118:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f11c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f120:	d10c      	bne.n	800f13c <rshift+0x3c>
 800f122:	f100 0710 	add.w	r7, r0, #16
 800f126:	4629      	mov	r1, r5
 800f128:	42b1      	cmp	r1, r6
 800f12a:	d334      	bcc.n	800f196 <rshift+0x96>
 800f12c:	1a9b      	subs	r3, r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	1eea      	subs	r2, r5, #3
 800f132:	4296      	cmp	r6, r2
 800f134:	bf38      	it	cc
 800f136:	2300      	movcc	r3, #0
 800f138:	4423      	add	r3, r4
 800f13a:	e015      	b.n	800f168 <rshift+0x68>
 800f13c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f140:	f1c1 0820 	rsb	r8, r1, #32
 800f144:	40cf      	lsrs	r7, r1
 800f146:	f105 0e04 	add.w	lr, r5, #4
 800f14a:	46a1      	mov	r9, r4
 800f14c:	4576      	cmp	r6, lr
 800f14e:	46f4      	mov	ip, lr
 800f150:	d815      	bhi.n	800f17e <rshift+0x7e>
 800f152:	1a9b      	subs	r3, r3, r2
 800f154:	009a      	lsls	r2, r3, #2
 800f156:	3a04      	subs	r2, #4
 800f158:	3501      	adds	r5, #1
 800f15a:	42ae      	cmp	r6, r5
 800f15c:	bf38      	it	cc
 800f15e:	2200      	movcc	r2, #0
 800f160:	18a3      	adds	r3, r4, r2
 800f162:	50a7      	str	r7, [r4, r2]
 800f164:	b107      	cbz	r7, 800f168 <rshift+0x68>
 800f166:	3304      	adds	r3, #4
 800f168:	1b1a      	subs	r2, r3, r4
 800f16a:	42a3      	cmp	r3, r4
 800f16c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f170:	bf08      	it	eq
 800f172:	2300      	moveq	r3, #0
 800f174:	6102      	str	r2, [r0, #16]
 800f176:	bf08      	it	eq
 800f178:	6143      	streq	r3, [r0, #20]
 800f17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f17e:	f8dc c000 	ldr.w	ip, [ip]
 800f182:	fa0c fc08 	lsl.w	ip, ip, r8
 800f186:	ea4c 0707 	orr.w	r7, ip, r7
 800f18a:	f849 7b04 	str.w	r7, [r9], #4
 800f18e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f192:	40cf      	lsrs	r7, r1
 800f194:	e7da      	b.n	800f14c <rshift+0x4c>
 800f196:	f851 cb04 	ldr.w	ip, [r1], #4
 800f19a:	f847 cf04 	str.w	ip, [r7, #4]!
 800f19e:	e7c3      	b.n	800f128 <rshift+0x28>
 800f1a0:	4623      	mov	r3, r4
 800f1a2:	e7e1      	b.n	800f168 <rshift+0x68>

0800f1a4 <__hexdig_fun>:
 800f1a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f1a8:	2b09      	cmp	r3, #9
 800f1aa:	d802      	bhi.n	800f1b2 <__hexdig_fun+0xe>
 800f1ac:	3820      	subs	r0, #32
 800f1ae:	b2c0      	uxtb	r0, r0
 800f1b0:	4770      	bx	lr
 800f1b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f1b6:	2b05      	cmp	r3, #5
 800f1b8:	d801      	bhi.n	800f1be <__hexdig_fun+0x1a>
 800f1ba:	3847      	subs	r0, #71	; 0x47
 800f1bc:	e7f7      	b.n	800f1ae <__hexdig_fun+0xa>
 800f1be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f1c2:	2b05      	cmp	r3, #5
 800f1c4:	d801      	bhi.n	800f1ca <__hexdig_fun+0x26>
 800f1c6:	3827      	subs	r0, #39	; 0x27
 800f1c8:	e7f1      	b.n	800f1ae <__hexdig_fun+0xa>
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	4770      	bx	lr
	...

0800f1d0 <__gethex>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	ed2d 8b02 	vpush	{d8}
 800f1d8:	b089      	sub	sp, #36	; 0x24
 800f1da:	ee08 0a10 	vmov	s16, r0
 800f1de:	9304      	str	r3, [sp, #16]
 800f1e0:	4bbc      	ldr	r3, [pc, #752]	; (800f4d4 <__gethex+0x304>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	468b      	mov	fp, r1
 800f1ea:	4690      	mov	r8, r2
 800f1ec:	f7f0 fff8 	bl	80001e0 <strlen>
 800f1f0:	9b01      	ldr	r3, [sp, #4]
 800f1f2:	f8db 2000 	ldr.w	r2, [fp]
 800f1f6:	4403      	add	r3, r0
 800f1f8:	4682      	mov	sl, r0
 800f1fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f1fe:	9305      	str	r3, [sp, #20]
 800f200:	1c93      	adds	r3, r2, #2
 800f202:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f206:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f20a:	32fe      	adds	r2, #254	; 0xfe
 800f20c:	18d1      	adds	r1, r2, r3
 800f20e:	461f      	mov	r7, r3
 800f210:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f214:	9100      	str	r1, [sp, #0]
 800f216:	2830      	cmp	r0, #48	; 0x30
 800f218:	d0f8      	beq.n	800f20c <__gethex+0x3c>
 800f21a:	f7ff ffc3 	bl	800f1a4 <__hexdig_fun>
 800f21e:	4604      	mov	r4, r0
 800f220:	2800      	cmp	r0, #0
 800f222:	d13a      	bne.n	800f29a <__gethex+0xca>
 800f224:	9901      	ldr	r1, [sp, #4]
 800f226:	4652      	mov	r2, sl
 800f228:	4638      	mov	r0, r7
 800f22a:	f7fe f9f8 	bl	800d61e <strncmp>
 800f22e:	4605      	mov	r5, r0
 800f230:	2800      	cmp	r0, #0
 800f232:	d168      	bne.n	800f306 <__gethex+0x136>
 800f234:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f238:	eb07 060a 	add.w	r6, r7, sl
 800f23c:	f7ff ffb2 	bl	800f1a4 <__hexdig_fun>
 800f240:	2800      	cmp	r0, #0
 800f242:	d062      	beq.n	800f30a <__gethex+0x13a>
 800f244:	4633      	mov	r3, r6
 800f246:	7818      	ldrb	r0, [r3, #0]
 800f248:	2830      	cmp	r0, #48	; 0x30
 800f24a:	461f      	mov	r7, r3
 800f24c:	f103 0301 	add.w	r3, r3, #1
 800f250:	d0f9      	beq.n	800f246 <__gethex+0x76>
 800f252:	f7ff ffa7 	bl	800f1a4 <__hexdig_fun>
 800f256:	2301      	movs	r3, #1
 800f258:	fab0 f480 	clz	r4, r0
 800f25c:	0964      	lsrs	r4, r4, #5
 800f25e:	4635      	mov	r5, r6
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	463a      	mov	r2, r7
 800f264:	4616      	mov	r6, r2
 800f266:	3201      	adds	r2, #1
 800f268:	7830      	ldrb	r0, [r6, #0]
 800f26a:	f7ff ff9b 	bl	800f1a4 <__hexdig_fun>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d1f8      	bne.n	800f264 <__gethex+0x94>
 800f272:	9901      	ldr	r1, [sp, #4]
 800f274:	4652      	mov	r2, sl
 800f276:	4630      	mov	r0, r6
 800f278:	f7fe f9d1 	bl	800d61e <strncmp>
 800f27c:	b980      	cbnz	r0, 800f2a0 <__gethex+0xd0>
 800f27e:	b94d      	cbnz	r5, 800f294 <__gethex+0xc4>
 800f280:	eb06 050a 	add.w	r5, r6, sl
 800f284:	462a      	mov	r2, r5
 800f286:	4616      	mov	r6, r2
 800f288:	3201      	adds	r2, #1
 800f28a:	7830      	ldrb	r0, [r6, #0]
 800f28c:	f7ff ff8a 	bl	800f1a4 <__hexdig_fun>
 800f290:	2800      	cmp	r0, #0
 800f292:	d1f8      	bne.n	800f286 <__gethex+0xb6>
 800f294:	1bad      	subs	r5, r5, r6
 800f296:	00ad      	lsls	r5, r5, #2
 800f298:	e004      	b.n	800f2a4 <__gethex+0xd4>
 800f29a:	2400      	movs	r4, #0
 800f29c:	4625      	mov	r5, r4
 800f29e:	e7e0      	b.n	800f262 <__gethex+0x92>
 800f2a0:	2d00      	cmp	r5, #0
 800f2a2:	d1f7      	bne.n	800f294 <__gethex+0xc4>
 800f2a4:	7833      	ldrb	r3, [r6, #0]
 800f2a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2aa:	2b50      	cmp	r3, #80	; 0x50
 800f2ac:	d13b      	bne.n	800f326 <__gethex+0x156>
 800f2ae:	7873      	ldrb	r3, [r6, #1]
 800f2b0:	2b2b      	cmp	r3, #43	; 0x2b
 800f2b2:	d02c      	beq.n	800f30e <__gethex+0x13e>
 800f2b4:	2b2d      	cmp	r3, #45	; 0x2d
 800f2b6:	d02e      	beq.n	800f316 <__gethex+0x146>
 800f2b8:	1c71      	adds	r1, r6, #1
 800f2ba:	f04f 0900 	mov.w	r9, #0
 800f2be:	7808      	ldrb	r0, [r1, #0]
 800f2c0:	f7ff ff70 	bl	800f1a4 <__hexdig_fun>
 800f2c4:	1e43      	subs	r3, r0, #1
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	2b18      	cmp	r3, #24
 800f2ca:	d82c      	bhi.n	800f326 <__gethex+0x156>
 800f2cc:	f1a0 0210 	sub.w	r2, r0, #16
 800f2d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f2d4:	f7ff ff66 	bl	800f1a4 <__hexdig_fun>
 800f2d8:	1e43      	subs	r3, r0, #1
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	2b18      	cmp	r3, #24
 800f2de:	d91d      	bls.n	800f31c <__gethex+0x14c>
 800f2e0:	f1b9 0f00 	cmp.w	r9, #0
 800f2e4:	d000      	beq.n	800f2e8 <__gethex+0x118>
 800f2e6:	4252      	negs	r2, r2
 800f2e8:	4415      	add	r5, r2
 800f2ea:	f8cb 1000 	str.w	r1, [fp]
 800f2ee:	b1e4      	cbz	r4, 800f32a <__gethex+0x15a>
 800f2f0:	9b00      	ldr	r3, [sp, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	bf14      	ite	ne
 800f2f6:	2700      	movne	r7, #0
 800f2f8:	2706      	moveq	r7, #6
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	b009      	add	sp, #36	; 0x24
 800f2fe:	ecbd 8b02 	vpop	{d8}
 800f302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f306:	463e      	mov	r6, r7
 800f308:	4625      	mov	r5, r4
 800f30a:	2401      	movs	r4, #1
 800f30c:	e7ca      	b.n	800f2a4 <__gethex+0xd4>
 800f30e:	f04f 0900 	mov.w	r9, #0
 800f312:	1cb1      	adds	r1, r6, #2
 800f314:	e7d3      	b.n	800f2be <__gethex+0xee>
 800f316:	f04f 0901 	mov.w	r9, #1
 800f31a:	e7fa      	b.n	800f312 <__gethex+0x142>
 800f31c:	230a      	movs	r3, #10
 800f31e:	fb03 0202 	mla	r2, r3, r2, r0
 800f322:	3a10      	subs	r2, #16
 800f324:	e7d4      	b.n	800f2d0 <__gethex+0x100>
 800f326:	4631      	mov	r1, r6
 800f328:	e7df      	b.n	800f2ea <__gethex+0x11a>
 800f32a:	1bf3      	subs	r3, r6, r7
 800f32c:	3b01      	subs	r3, #1
 800f32e:	4621      	mov	r1, r4
 800f330:	2b07      	cmp	r3, #7
 800f332:	dc0b      	bgt.n	800f34c <__gethex+0x17c>
 800f334:	ee18 0a10 	vmov	r0, s16
 800f338:	f000 fa82 	bl	800f840 <_Balloc>
 800f33c:	4604      	mov	r4, r0
 800f33e:	b940      	cbnz	r0, 800f352 <__gethex+0x182>
 800f340:	4b65      	ldr	r3, [pc, #404]	; (800f4d8 <__gethex+0x308>)
 800f342:	4602      	mov	r2, r0
 800f344:	21de      	movs	r1, #222	; 0xde
 800f346:	4865      	ldr	r0, [pc, #404]	; (800f4dc <__gethex+0x30c>)
 800f348:	f001 fd92 	bl	8010e70 <__assert_func>
 800f34c:	3101      	adds	r1, #1
 800f34e:	105b      	asrs	r3, r3, #1
 800f350:	e7ee      	b.n	800f330 <__gethex+0x160>
 800f352:	f100 0914 	add.w	r9, r0, #20
 800f356:	f04f 0b00 	mov.w	fp, #0
 800f35a:	f1ca 0301 	rsb	r3, sl, #1
 800f35e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f362:	f8cd b000 	str.w	fp, [sp]
 800f366:	9306      	str	r3, [sp, #24]
 800f368:	42b7      	cmp	r7, r6
 800f36a:	d340      	bcc.n	800f3ee <__gethex+0x21e>
 800f36c:	9802      	ldr	r0, [sp, #8]
 800f36e:	9b00      	ldr	r3, [sp, #0]
 800f370:	f840 3b04 	str.w	r3, [r0], #4
 800f374:	eba0 0009 	sub.w	r0, r0, r9
 800f378:	1080      	asrs	r0, r0, #2
 800f37a:	0146      	lsls	r6, r0, #5
 800f37c:	6120      	str	r0, [r4, #16]
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 fb54 	bl	800fa2c <__hi0bits>
 800f384:	1a30      	subs	r0, r6, r0
 800f386:	f8d8 6000 	ldr.w	r6, [r8]
 800f38a:	42b0      	cmp	r0, r6
 800f38c:	dd63      	ble.n	800f456 <__gethex+0x286>
 800f38e:	1b87      	subs	r7, r0, r6
 800f390:	4639      	mov	r1, r7
 800f392:	4620      	mov	r0, r4
 800f394:	f000 feee 	bl	8010174 <__any_on>
 800f398:	4682      	mov	sl, r0
 800f39a:	b1a8      	cbz	r0, 800f3c8 <__gethex+0x1f8>
 800f39c:	1e7b      	subs	r3, r7, #1
 800f39e:	1159      	asrs	r1, r3, #5
 800f3a0:	f003 021f 	and.w	r2, r3, #31
 800f3a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f3a8:	f04f 0a01 	mov.w	sl, #1
 800f3ac:	fa0a f202 	lsl.w	r2, sl, r2
 800f3b0:	420a      	tst	r2, r1
 800f3b2:	d009      	beq.n	800f3c8 <__gethex+0x1f8>
 800f3b4:	4553      	cmp	r3, sl
 800f3b6:	dd05      	ble.n	800f3c4 <__gethex+0x1f4>
 800f3b8:	1eb9      	subs	r1, r7, #2
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f000 feda 	bl	8010174 <__any_on>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	d145      	bne.n	800f450 <__gethex+0x280>
 800f3c4:	f04f 0a02 	mov.w	sl, #2
 800f3c8:	4639      	mov	r1, r7
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f7ff fe98 	bl	800f100 <rshift>
 800f3d0:	443d      	add	r5, r7
 800f3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3d6:	42ab      	cmp	r3, r5
 800f3d8:	da4c      	bge.n	800f474 <__gethex+0x2a4>
 800f3da:	ee18 0a10 	vmov	r0, s16
 800f3de:	4621      	mov	r1, r4
 800f3e0:	f000 fa6e 	bl	800f8c0 <_Bfree>
 800f3e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	6013      	str	r3, [r2, #0]
 800f3ea:	27a3      	movs	r7, #163	; 0xa3
 800f3ec:	e785      	b.n	800f2fa <__gethex+0x12a>
 800f3ee:	1e73      	subs	r3, r6, #1
 800f3f0:	9a05      	ldr	r2, [sp, #20]
 800f3f2:	9303      	str	r3, [sp, #12]
 800f3f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d019      	beq.n	800f430 <__gethex+0x260>
 800f3fc:	f1bb 0f20 	cmp.w	fp, #32
 800f400:	d107      	bne.n	800f412 <__gethex+0x242>
 800f402:	9b02      	ldr	r3, [sp, #8]
 800f404:	9a00      	ldr	r2, [sp, #0]
 800f406:	f843 2b04 	str.w	r2, [r3], #4
 800f40a:	9302      	str	r3, [sp, #8]
 800f40c:	2300      	movs	r3, #0
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	469b      	mov	fp, r3
 800f412:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f416:	f7ff fec5 	bl	800f1a4 <__hexdig_fun>
 800f41a:	9b00      	ldr	r3, [sp, #0]
 800f41c:	f000 000f 	and.w	r0, r0, #15
 800f420:	fa00 f00b 	lsl.w	r0, r0, fp
 800f424:	4303      	orrs	r3, r0
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	f10b 0b04 	add.w	fp, fp, #4
 800f42c:	9b03      	ldr	r3, [sp, #12]
 800f42e:	e00d      	b.n	800f44c <__gethex+0x27c>
 800f430:	9b03      	ldr	r3, [sp, #12]
 800f432:	9a06      	ldr	r2, [sp, #24]
 800f434:	4413      	add	r3, r2
 800f436:	42bb      	cmp	r3, r7
 800f438:	d3e0      	bcc.n	800f3fc <__gethex+0x22c>
 800f43a:	4618      	mov	r0, r3
 800f43c:	9901      	ldr	r1, [sp, #4]
 800f43e:	9307      	str	r3, [sp, #28]
 800f440:	4652      	mov	r2, sl
 800f442:	f7fe f8ec 	bl	800d61e <strncmp>
 800f446:	9b07      	ldr	r3, [sp, #28]
 800f448:	2800      	cmp	r0, #0
 800f44a:	d1d7      	bne.n	800f3fc <__gethex+0x22c>
 800f44c:	461e      	mov	r6, r3
 800f44e:	e78b      	b.n	800f368 <__gethex+0x198>
 800f450:	f04f 0a03 	mov.w	sl, #3
 800f454:	e7b8      	b.n	800f3c8 <__gethex+0x1f8>
 800f456:	da0a      	bge.n	800f46e <__gethex+0x29e>
 800f458:	1a37      	subs	r7, r6, r0
 800f45a:	4621      	mov	r1, r4
 800f45c:	ee18 0a10 	vmov	r0, s16
 800f460:	463a      	mov	r2, r7
 800f462:	f000 fc49 	bl	800fcf8 <__lshift>
 800f466:	1bed      	subs	r5, r5, r7
 800f468:	4604      	mov	r4, r0
 800f46a:	f100 0914 	add.w	r9, r0, #20
 800f46e:	f04f 0a00 	mov.w	sl, #0
 800f472:	e7ae      	b.n	800f3d2 <__gethex+0x202>
 800f474:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f478:	42a8      	cmp	r0, r5
 800f47a:	dd72      	ble.n	800f562 <__gethex+0x392>
 800f47c:	1b45      	subs	r5, r0, r5
 800f47e:	42ae      	cmp	r6, r5
 800f480:	dc36      	bgt.n	800f4f0 <__gethex+0x320>
 800f482:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f486:	2b02      	cmp	r3, #2
 800f488:	d02a      	beq.n	800f4e0 <__gethex+0x310>
 800f48a:	2b03      	cmp	r3, #3
 800f48c:	d02c      	beq.n	800f4e8 <__gethex+0x318>
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d115      	bne.n	800f4be <__gethex+0x2ee>
 800f492:	42ae      	cmp	r6, r5
 800f494:	d113      	bne.n	800f4be <__gethex+0x2ee>
 800f496:	2e01      	cmp	r6, #1
 800f498:	d10b      	bne.n	800f4b2 <__gethex+0x2e2>
 800f49a:	9a04      	ldr	r2, [sp, #16]
 800f49c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4a0:	6013      	str	r3, [r2, #0]
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	6123      	str	r3, [r4, #16]
 800f4a6:	f8c9 3000 	str.w	r3, [r9]
 800f4aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4ac:	2762      	movs	r7, #98	; 0x62
 800f4ae:	601c      	str	r4, [r3, #0]
 800f4b0:	e723      	b.n	800f2fa <__gethex+0x12a>
 800f4b2:	1e71      	subs	r1, r6, #1
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f000 fe5d 	bl	8010174 <__any_on>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d1ed      	bne.n	800f49a <__gethex+0x2ca>
 800f4be:	ee18 0a10 	vmov	r0, s16
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	f000 f9fc 	bl	800f8c0 <_Bfree>
 800f4c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	6013      	str	r3, [r2, #0]
 800f4ce:	2750      	movs	r7, #80	; 0x50
 800f4d0:	e713      	b.n	800f2fa <__gethex+0x12a>
 800f4d2:	bf00      	nop
 800f4d4:	080125a8 	.word	0x080125a8
 800f4d8:	0801252c 	.word	0x0801252c
 800f4dc:	0801253d 	.word	0x0801253d
 800f4e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1eb      	bne.n	800f4be <__gethex+0x2ee>
 800f4e6:	e7d8      	b.n	800f49a <__gethex+0x2ca>
 800f4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1d5      	bne.n	800f49a <__gethex+0x2ca>
 800f4ee:	e7e6      	b.n	800f4be <__gethex+0x2ee>
 800f4f0:	1e6f      	subs	r7, r5, #1
 800f4f2:	f1ba 0f00 	cmp.w	sl, #0
 800f4f6:	d131      	bne.n	800f55c <__gethex+0x38c>
 800f4f8:	b127      	cbz	r7, 800f504 <__gethex+0x334>
 800f4fa:	4639      	mov	r1, r7
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 fe39 	bl	8010174 <__any_on>
 800f502:	4682      	mov	sl, r0
 800f504:	117b      	asrs	r3, r7, #5
 800f506:	2101      	movs	r1, #1
 800f508:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f50c:	f007 071f 	and.w	r7, r7, #31
 800f510:	fa01 f707 	lsl.w	r7, r1, r7
 800f514:	421f      	tst	r7, r3
 800f516:	4629      	mov	r1, r5
 800f518:	4620      	mov	r0, r4
 800f51a:	bf18      	it	ne
 800f51c:	f04a 0a02 	orrne.w	sl, sl, #2
 800f520:	1b76      	subs	r6, r6, r5
 800f522:	f7ff fded 	bl	800f100 <rshift>
 800f526:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f52a:	2702      	movs	r7, #2
 800f52c:	f1ba 0f00 	cmp.w	sl, #0
 800f530:	d048      	beq.n	800f5c4 <__gethex+0x3f4>
 800f532:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f536:	2b02      	cmp	r3, #2
 800f538:	d015      	beq.n	800f566 <__gethex+0x396>
 800f53a:	2b03      	cmp	r3, #3
 800f53c:	d017      	beq.n	800f56e <__gethex+0x39e>
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d109      	bne.n	800f556 <__gethex+0x386>
 800f542:	f01a 0f02 	tst.w	sl, #2
 800f546:	d006      	beq.n	800f556 <__gethex+0x386>
 800f548:	f8d9 0000 	ldr.w	r0, [r9]
 800f54c:	ea4a 0a00 	orr.w	sl, sl, r0
 800f550:	f01a 0f01 	tst.w	sl, #1
 800f554:	d10e      	bne.n	800f574 <__gethex+0x3a4>
 800f556:	f047 0710 	orr.w	r7, r7, #16
 800f55a:	e033      	b.n	800f5c4 <__gethex+0x3f4>
 800f55c:	f04f 0a01 	mov.w	sl, #1
 800f560:	e7d0      	b.n	800f504 <__gethex+0x334>
 800f562:	2701      	movs	r7, #1
 800f564:	e7e2      	b.n	800f52c <__gethex+0x35c>
 800f566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f568:	f1c3 0301 	rsb	r3, r3, #1
 800f56c:	9315      	str	r3, [sp, #84]	; 0x54
 800f56e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f570:	2b00      	cmp	r3, #0
 800f572:	d0f0      	beq.n	800f556 <__gethex+0x386>
 800f574:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f578:	f104 0314 	add.w	r3, r4, #20
 800f57c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f580:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f584:	f04f 0c00 	mov.w	ip, #0
 800f588:	4618      	mov	r0, r3
 800f58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f58e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f592:	d01c      	beq.n	800f5ce <__gethex+0x3fe>
 800f594:	3201      	adds	r2, #1
 800f596:	6002      	str	r2, [r0, #0]
 800f598:	2f02      	cmp	r7, #2
 800f59a:	f104 0314 	add.w	r3, r4, #20
 800f59e:	d13f      	bne.n	800f620 <__gethex+0x450>
 800f5a0:	f8d8 2000 	ldr.w	r2, [r8]
 800f5a4:	3a01      	subs	r2, #1
 800f5a6:	42b2      	cmp	r2, r6
 800f5a8:	d10a      	bne.n	800f5c0 <__gethex+0x3f0>
 800f5aa:	1171      	asrs	r1, r6, #5
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5b2:	f006 061f 	and.w	r6, r6, #31
 800f5b6:	fa02 f606 	lsl.w	r6, r2, r6
 800f5ba:	421e      	tst	r6, r3
 800f5bc:	bf18      	it	ne
 800f5be:	4617      	movne	r7, r2
 800f5c0:	f047 0720 	orr.w	r7, r7, #32
 800f5c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5c6:	601c      	str	r4, [r3, #0]
 800f5c8:	9b04      	ldr	r3, [sp, #16]
 800f5ca:	601d      	str	r5, [r3, #0]
 800f5cc:	e695      	b.n	800f2fa <__gethex+0x12a>
 800f5ce:	4299      	cmp	r1, r3
 800f5d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800f5d4:	d8d8      	bhi.n	800f588 <__gethex+0x3b8>
 800f5d6:	68a3      	ldr	r3, [r4, #8]
 800f5d8:	459b      	cmp	fp, r3
 800f5da:	db19      	blt.n	800f610 <__gethex+0x440>
 800f5dc:	6861      	ldr	r1, [r4, #4]
 800f5de:	ee18 0a10 	vmov	r0, s16
 800f5e2:	3101      	adds	r1, #1
 800f5e4:	f000 f92c 	bl	800f840 <_Balloc>
 800f5e8:	4681      	mov	r9, r0
 800f5ea:	b918      	cbnz	r0, 800f5f4 <__gethex+0x424>
 800f5ec:	4b1a      	ldr	r3, [pc, #104]	; (800f658 <__gethex+0x488>)
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	2184      	movs	r1, #132	; 0x84
 800f5f2:	e6a8      	b.n	800f346 <__gethex+0x176>
 800f5f4:	6922      	ldr	r2, [r4, #16]
 800f5f6:	3202      	adds	r2, #2
 800f5f8:	f104 010c 	add.w	r1, r4, #12
 800f5fc:	0092      	lsls	r2, r2, #2
 800f5fe:	300c      	adds	r0, #12
 800f600:	f7fd f8e6 	bl	800c7d0 <memcpy>
 800f604:	4621      	mov	r1, r4
 800f606:	ee18 0a10 	vmov	r0, s16
 800f60a:	f000 f959 	bl	800f8c0 <_Bfree>
 800f60e:	464c      	mov	r4, r9
 800f610:	6923      	ldr	r3, [r4, #16]
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f618:	6122      	str	r2, [r4, #16]
 800f61a:	2201      	movs	r2, #1
 800f61c:	615a      	str	r2, [r3, #20]
 800f61e:	e7bb      	b.n	800f598 <__gethex+0x3c8>
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	455a      	cmp	r2, fp
 800f624:	dd0b      	ble.n	800f63e <__gethex+0x46e>
 800f626:	2101      	movs	r1, #1
 800f628:	4620      	mov	r0, r4
 800f62a:	f7ff fd69 	bl	800f100 <rshift>
 800f62e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f632:	3501      	adds	r5, #1
 800f634:	42ab      	cmp	r3, r5
 800f636:	f6ff aed0 	blt.w	800f3da <__gethex+0x20a>
 800f63a:	2701      	movs	r7, #1
 800f63c:	e7c0      	b.n	800f5c0 <__gethex+0x3f0>
 800f63e:	f016 061f 	ands.w	r6, r6, #31
 800f642:	d0fa      	beq.n	800f63a <__gethex+0x46a>
 800f644:	449a      	add	sl, r3
 800f646:	f1c6 0620 	rsb	r6, r6, #32
 800f64a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f64e:	f000 f9ed 	bl	800fa2c <__hi0bits>
 800f652:	42b0      	cmp	r0, r6
 800f654:	dbe7      	blt.n	800f626 <__gethex+0x456>
 800f656:	e7f0      	b.n	800f63a <__gethex+0x46a>
 800f658:	0801252c 	.word	0x0801252c

0800f65c <L_shift>:
 800f65c:	f1c2 0208 	rsb	r2, r2, #8
 800f660:	0092      	lsls	r2, r2, #2
 800f662:	b570      	push	{r4, r5, r6, lr}
 800f664:	f1c2 0620 	rsb	r6, r2, #32
 800f668:	6843      	ldr	r3, [r0, #4]
 800f66a:	6804      	ldr	r4, [r0, #0]
 800f66c:	fa03 f506 	lsl.w	r5, r3, r6
 800f670:	432c      	orrs	r4, r5
 800f672:	40d3      	lsrs	r3, r2
 800f674:	6004      	str	r4, [r0, #0]
 800f676:	f840 3f04 	str.w	r3, [r0, #4]!
 800f67a:	4288      	cmp	r0, r1
 800f67c:	d3f4      	bcc.n	800f668 <L_shift+0xc>
 800f67e:	bd70      	pop	{r4, r5, r6, pc}

0800f680 <__match>:
 800f680:	b530      	push	{r4, r5, lr}
 800f682:	6803      	ldr	r3, [r0, #0]
 800f684:	3301      	adds	r3, #1
 800f686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f68a:	b914      	cbnz	r4, 800f692 <__match+0x12>
 800f68c:	6003      	str	r3, [r0, #0]
 800f68e:	2001      	movs	r0, #1
 800f690:	bd30      	pop	{r4, r5, pc}
 800f692:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f696:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f69a:	2d19      	cmp	r5, #25
 800f69c:	bf98      	it	ls
 800f69e:	3220      	addls	r2, #32
 800f6a0:	42a2      	cmp	r2, r4
 800f6a2:	d0f0      	beq.n	800f686 <__match+0x6>
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	e7f3      	b.n	800f690 <__match+0x10>

0800f6a8 <__hexnan>:
 800f6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	680b      	ldr	r3, [r1, #0]
 800f6ae:	6801      	ldr	r1, [r0, #0]
 800f6b0:	115e      	asrs	r6, r3, #5
 800f6b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f6b6:	f013 031f 	ands.w	r3, r3, #31
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	bf18      	it	ne
 800f6be:	3604      	addne	r6, #4
 800f6c0:	2500      	movs	r5, #0
 800f6c2:	1f37      	subs	r7, r6, #4
 800f6c4:	4682      	mov	sl, r0
 800f6c6:	4690      	mov	r8, r2
 800f6c8:	9301      	str	r3, [sp, #4]
 800f6ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800f6ce:	46b9      	mov	r9, r7
 800f6d0:	463c      	mov	r4, r7
 800f6d2:	9502      	str	r5, [sp, #8]
 800f6d4:	46ab      	mov	fp, r5
 800f6d6:	784a      	ldrb	r2, [r1, #1]
 800f6d8:	1c4b      	adds	r3, r1, #1
 800f6da:	9303      	str	r3, [sp, #12]
 800f6dc:	b342      	cbz	r2, 800f730 <__hexnan+0x88>
 800f6de:	4610      	mov	r0, r2
 800f6e0:	9105      	str	r1, [sp, #20]
 800f6e2:	9204      	str	r2, [sp, #16]
 800f6e4:	f7ff fd5e 	bl	800f1a4 <__hexdig_fun>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d14f      	bne.n	800f78c <__hexnan+0xe4>
 800f6ec:	9a04      	ldr	r2, [sp, #16]
 800f6ee:	9905      	ldr	r1, [sp, #20]
 800f6f0:	2a20      	cmp	r2, #32
 800f6f2:	d818      	bhi.n	800f726 <__hexnan+0x7e>
 800f6f4:	9b02      	ldr	r3, [sp, #8]
 800f6f6:	459b      	cmp	fp, r3
 800f6f8:	dd13      	ble.n	800f722 <__hexnan+0x7a>
 800f6fa:	454c      	cmp	r4, r9
 800f6fc:	d206      	bcs.n	800f70c <__hexnan+0x64>
 800f6fe:	2d07      	cmp	r5, #7
 800f700:	dc04      	bgt.n	800f70c <__hexnan+0x64>
 800f702:	462a      	mov	r2, r5
 800f704:	4649      	mov	r1, r9
 800f706:	4620      	mov	r0, r4
 800f708:	f7ff ffa8 	bl	800f65c <L_shift>
 800f70c:	4544      	cmp	r4, r8
 800f70e:	d950      	bls.n	800f7b2 <__hexnan+0x10a>
 800f710:	2300      	movs	r3, #0
 800f712:	f1a4 0904 	sub.w	r9, r4, #4
 800f716:	f844 3c04 	str.w	r3, [r4, #-4]
 800f71a:	f8cd b008 	str.w	fp, [sp, #8]
 800f71e:	464c      	mov	r4, r9
 800f720:	461d      	mov	r5, r3
 800f722:	9903      	ldr	r1, [sp, #12]
 800f724:	e7d7      	b.n	800f6d6 <__hexnan+0x2e>
 800f726:	2a29      	cmp	r2, #41	; 0x29
 800f728:	d156      	bne.n	800f7d8 <__hexnan+0x130>
 800f72a:	3102      	adds	r1, #2
 800f72c:	f8ca 1000 	str.w	r1, [sl]
 800f730:	f1bb 0f00 	cmp.w	fp, #0
 800f734:	d050      	beq.n	800f7d8 <__hexnan+0x130>
 800f736:	454c      	cmp	r4, r9
 800f738:	d206      	bcs.n	800f748 <__hexnan+0xa0>
 800f73a:	2d07      	cmp	r5, #7
 800f73c:	dc04      	bgt.n	800f748 <__hexnan+0xa0>
 800f73e:	462a      	mov	r2, r5
 800f740:	4649      	mov	r1, r9
 800f742:	4620      	mov	r0, r4
 800f744:	f7ff ff8a 	bl	800f65c <L_shift>
 800f748:	4544      	cmp	r4, r8
 800f74a:	d934      	bls.n	800f7b6 <__hexnan+0x10e>
 800f74c:	f1a8 0204 	sub.w	r2, r8, #4
 800f750:	4623      	mov	r3, r4
 800f752:	f853 1b04 	ldr.w	r1, [r3], #4
 800f756:	f842 1f04 	str.w	r1, [r2, #4]!
 800f75a:	429f      	cmp	r7, r3
 800f75c:	d2f9      	bcs.n	800f752 <__hexnan+0xaa>
 800f75e:	1b3b      	subs	r3, r7, r4
 800f760:	f023 0303 	bic.w	r3, r3, #3
 800f764:	3304      	adds	r3, #4
 800f766:	3401      	adds	r4, #1
 800f768:	3e03      	subs	r6, #3
 800f76a:	42b4      	cmp	r4, r6
 800f76c:	bf88      	it	hi
 800f76e:	2304      	movhi	r3, #4
 800f770:	4443      	add	r3, r8
 800f772:	2200      	movs	r2, #0
 800f774:	f843 2b04 	str.w	r2, [r3], #4
 800f778:	429f      	cmp	r7, r3
 800f77a:	d2fb      	bcs.n	800f774 <__hexnan+0xcc>
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	b91b      	cbnz	r3, 800f788 <__hexnan+0xe0>
 800f780:	4547      	cmp	r7, r8
 800f782:	d127      	bne.n	800f7d4 <__hexnan+0x12c>
 800f784:	2301      	movs	r3, #1
 800f786:	603b      	str	r3, [r7, #0]
 800f788:	2005      	movs	r0, #5
 800f78a:	e026      	b.n	800f7da <__hexnan+0x132>
 800f78c:	3501      	adds	r5, #1
 800f78e:	2d08      	cmp	r5, #8
 800f790:	f10b 0b01 	add.w	fp, fp, #1
 800f794:	dd06      	ble.n	800f7a4 <__hexnan+0xfc>
 800f796:	4544      	cmp	r4, r8
 800f798:	d9c3      	bls.n	800f722 <__hexnan+0x7a>
 800f79a:	2300      	movs	r3, #0
 800f79c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7a0:	2501      	movs	r5, #1
 800f7a2:	3c04      	subs	r4, #4
 800f7a4:	6822      	ldr	r2, [r4, #0]
 800f7a6:	f000 000f 	and.w	r0, r0, #15
 800f7aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f7ae:	6022      	str	r2, [r4, #0]
 800f7b0:	e7b7      	b.n	800f722 <__hexnan+0x7a>
 800f7b2:	2508      	movs	r5, #8
 800f7b4:	e7b5      	b.n	800f722 <__hexnan+0x7a>
 800f7b6:	9b01      	ldr	r3, [sp, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0df      	beq.n	800f77c <__hexnan+0xd4>
 800f7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c0:	f1c3 0320 	rsb	r3, r3, #32
 800f7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800f7c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f7cc:	401a      	ands	r2, r3
 800f7ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800f7d2:	e7d3      	b.n	800f77c <__hexnan+0xd4>
 800f7d4:	3f04      	subs	r7, #4
 800f7d6:	e7d1      	b.n	800f77c <__hexnan+0xd4>
 800f7d8:	2004      	movs	r0, #4
 800f7da:	b007      	add	sp, #28
 800f7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f7e0 <_localeconv_r>:
 800f7e0:	4800      	ldr	r0, [pc, #0]	; (800f7e4 <_localeconv_r+0x4>)
 800f7e2:	4770      	bx	lr
 800f7e4:	20000188 	.word	0x20000188

0800f7e8 <_lseek_r>:
 800f7e8:	b538      	push	{r3, r4, r5, lr}
 800f7ea:	4d07      	ldr	r5, [pc, #28]	; (800f808 <_lseek_r+0x20>)
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	4608      	mov	r0, r1
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	602a      	str	r2, [r5, #0]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	f7f2 fede 	bl	80025b8 <_lseek>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d102      	bne.n	800f806 <_lseek_r+0x1e>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	b103      	cbz	r3, 800f806 <_lseek_r+0x1e>
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	20005888 	.word	0x20005888

0800f80c <malloc>:
 800f80c:	4b02      	ldr	r3, [pc, #8]	; (800f818 <malloc+0xc>)
 800f80e:	4601      	mov	r1, r0
 800f810:	6818      	ldr	r0, [r3, #0]
 800f812:	f000 bd2f 	b.w	8010274 <_malloc_r>
 800f816:	bf00      	nop
 800f818:	20000030 	.word	0x20000030

0800f81c <__ascii_mbtowc>:
 800f81c:	b082      	sub	sp, #8
 800f81e:	b901      	cbnz	r1, 800f822 <__ascii_mbtowc+0x6>
 800f820:	a901      	add	r1, sp, #4
 800f822:	b142      	cbz	r2, 800f836 <__ascii_mbtowc+0x1a>
 800f824:	b14b      	cbz	r3, 800f83a <__ascii_mbtowc+0x1e>
 800f826:	7813      	ldrb	r3, [r2, #0]
 800f828:	600b      	str	r3, [r1, #0]
 800f82a:	7812      	ldrb	r2, [r2, #0]
 800f82c:	1e10      	subs	r0, r2, #0
 800f82e:	bf18      	it	ne
 800f830:	2001      	movne	r0, #1
 800f832:	b002      	add	sp, #8
 800f834:	4770      	bx	lr
 800f836:	4610      	mov	r0, r2
 800f838:	e7fb      	b.n	800f832 <__ascii_mbtowc+0x16>
 800f83a:	f06f 0001 	mvn.w	r0, #1
 800f83e:	e7f8      	b.n	800f832 <__ascii_mbtowc+0x16>

0800f840 <_Balloc>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f844:	4604      	mov	r4, r0
 800f846:	460d      	mov	r5, r1
 800f848:	b976      	cbnz	r6, 800f868 <_Balloc+0x28>
 800f84a:	2010      	movs	r0, #16
 800f84c:	f7ff ffde 	bl	800f80c <malloc>
 800f850:	4602      	mov	r2, r0
 800f852:	6260      	str	r0, [r4, #36]	; 0x24
 800f854:	b920      	cbnz	r0, 800f860 <_Balloc+0x20>
 800f856:	4b18      	ldr	r3, [pc, #96]	; (800f8b8 <_Balloc+0x78>)
 800f858:	4818      	ldr	r0, [pc, #96]	; (800f8bc <_Balloc+0x7c>)
 800f85a:	2166      	movs	r1, #102	; 0x66
 800f85c:	f001 fb08 	bl	8010e70 <__assert_func>
 800f860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f864:	6006      	str	r6, [r0, #0]
 800f866:	60c6      	str	r6, [r0, #12]
 800f868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f86a:	68f3      	ldr	r3, [r6, #12]
 800f86c:	b183      	cbz	r3, 800f890 <_Balloc+0x50>
 800f86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f876:	b9b8      	cbnz	r0, 800f8a8 <_Balloc+0x68>
 800f878:	2101      	movs	r1, #1
 800f87a:	fa01 f605 	lsl.w	r6, r1, r5
 800f87e:	1d72      	adds	r2, r6, #5
 800f880:	0092      	lsls	r2, r2, #2
 800f882:	4620      	mov	r0, r4
 800f884:	f000 fc97 	bl	80101b6 <_calloc_r>
 800f888:	b160      	cbz	r0, 800f8a4 <_Balloc+0x64>
 800f88a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f88e:	e00e      	b.n	800f8ae <_Balloc+0x6e>
 800f890:	2221      	movs	r2, #33	; 0x21
 800f892:	2104      	movs	r1, #4
 800f894:	4620      	mov	r0, r4
 800f896:	f000 fc8e 	bl	80101b6 <_calloc_r>
 800f89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f89c:	60f0      	str	r0, [r6, #12]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1e4      	bne.n	800f86e <_Balloc+0x2e>
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
 800f8a8:	6802      	ldr	r2, [r0, #0]
 800f8aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8b4:	e7f7      	b.n	800f8a6 <_Balloc+0x66>
 800f8b6:	bf00      	nop
 800f8b8:	080124b6 	.word	0x080124b6
 800f8bc:	080125bc 	.word	0x080125bc

0800f8c0 <_Bfree>:
 800f8c0:	b570      	push	{r4, r5, r6, lr}
 800f8c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	b976      	cbnz	r6, 800f8e8 <_Bfree+0x28>
 800f8ca:	2010      	movs	r0, #16
 800f8cc:	f7ff ff9e 	bl	800f80c <malloc>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	6268      	str	r0, [r5, #36]	; 0x24
 800f8d4:	b920      	cbnz	r0, 800f8e0 <_Bfree+0x20>
 800f8d6:	4b09      	ldr	r3, [pc, #36]	; (800f8fc <_Bfree+0x3c>)
 800f8d8:	4809      	ldr	r0, [pc, #36]	; (800f900 <_Bfree+0x40>)
 800f8da:	218a      	movs	r1, #138	; 0x8a
 800f8dc:	f001 fac8 	bl	8010e70 <__assert_func>
 800f8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8e4:	6006      	str	r6, [r0, #0]
 800f8e6:	60c6      	str	r6, [r0, #12]
 800f8e8:	b13c      	cbz	r4, 800f8fa <_Bfree+0x3a>
 800f8ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f8ec:	6862      	ldr	r2, [r4, #4]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8f4:	6021      	str	r1, [r4, #0]
 800f8f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8fa:	bd70      	pop	{r4, r5, r6, pc}
 800f8fc:	080124b6 	.word	0x080124b6
 800f900:	080125bc 	.word	0x080125bc

0800f904 <__multadd>:
 800f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f908:	690e      	ldr	r6, [r1, #16]
 800f90a:	4607      	mov	r7, r0
 800f90c:	4698      	mov	r8, r3
 800f90e:	460c      	mov	r4, r1
 800f910:	f101 0014 	add.w	r0, r1, #20
 800f914:	2300      	movs	r3, #0
 800f916:	6805      	ldr	r5, [r0, #0]
 800f918:	b2a9      	uxth	r1, r5
 800f91a:	fb02 8101 	mla	r1, r2, r1, r8
 800f91e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f922:	0c2d      	lsrs	r5, r5, #16
 800f924:	fb02 c505 	mla	r5, r2, r5, ip
 800f928:	b289      	uxth	r1, r1
 800f92a:	3301      	adds	r3, #1
 800f92c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f930:	429e      	cmp	r6, r3
 800f932:	f840 1b04 	str.w	r1, [r0], #4
 800f936:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f93a:	dcec      	bgt.n	800f916 <__multadd+0x12>
 800f93c:	f1b8 0f00 	cmp.w	r8, #0
 800f940:	d022      	beq.n	800f988 <__multadd+0x84>
 800f942:	68a3      	ldr	r3, [r4, #8]
 800f944:	42b3      	cmp	r3, r6
 800f946:	dc19      	bgt.n	800f97c <__multadd+0x78>
 800f948:	6861      	ldr	r1, [r4, #4]
 800f94a:	4638      	mov	r0, r7
 800f94c:	3101      	adds	r1, #1
 800f94e:	f7ff ff77 	bl	800f840 <_Balloc>
 800f952:	4605      	mov	r5, r0
 800f954:	b928      	cbnz	r0, 800f962 <__multadd+0x5e>
 800f956:	4602      	mov	r2, r0
 800f958:	4b0d      	ldr	r3, [pc, #52]	; (800f990 <__multadd+0x8c>)
 800f95a:	480e      	ldr	r0, [pc, #56]	; (800f994 <__multadd+0x90>)
 800f95c:	21b5      	movs	r1, #181	; 0xb5
 800f95e:	f001 fa87 	bl	8010e70 <__assert_func>
 800f962:	6922      	ldr	r2, [r4, #16]
 800f964:	3202      	adds	r2, #2
 800f966:	f104 010c 	add.w	r1, r4, #12
 800f96a:	0092      	lsls	r2, r2, #2
 800f96c:	300c      	adds	r0, #12
 800f96e:	f7fc ff2f 	bl	800c7d0 <memcpy>
 800f972:	4621      	mov	r1, r4
 800f974:	4638      	mov	r0, r7
 800f976:	f7ff ffa3 	bl	800f8c0 <_Bfree>
 800f97a:	462c      	mov	r4, r5
 800f97c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f980:	3601      	adds	r6, #1
 800f982:	f8c3 8014 	str.w	r8, [r3, #20]
 800f986:	6126      	str	r6, [r4, #16]
 800f988:	4620      	mov	r0, r4
 800f98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f98e:	bf00      	nop
 800f990:	0801252c 	.word	0x0801252c
 800f994:	080125bc 	.word	0x080125bc

0800f998 <__s2b>:
 800f998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	4615      	mov	r5, r2
 800f9a0:	461f      	mov	r7, r3
 800f9a2:	2209      	movs	r2, #9
 800f9a4:	3308      	adds	r3, #8
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	db09      	blt.n	800f9c8 <__s2b+0x30>
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f7ff ff43 	bl	800f840 <_Balloc>
 800f9ba:	b940      	cbnz	r0, 800f9ce <__s2b+0x36>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	4b19      	ldr	r3, [pc, #100]	; (800fa24 <__s2b+0x8c>)
 800f9c0:	4819      	ldr	r0, [pc, #100]	; (800fa28 <__s2b+0x90>)
 800f9c2:	21ce      	movs	r1, #206	; 0xce
 800f9c4:	f001 fa54 	bl	8010e70 <__assert_func>
 800f9c8:	0052      	lsls	r2, r2, #1
 800f9ca:	3101      	adds	r1, #1
 800f9cc:	e7f0      	b.n	800f9b0 <__s2b+0x18>
 800f9ce:	9b08      	ldr	r3, [sp, #32]
 800f9d0:	6143      	str	r3, [r0, #20]
 800f9d2:	2d09      	cmp	r5, #9
 800f9d4:	f04f 0301 	mov.w	r3, #1
 800f9d8:	6103      	str	r3, [r0, #16]
 800f9da:	dd16      	ble.n	800fa0a <__s2b+0x72>
 800f9dc:	f104 0909 	add.w	r9, r4, #9
 800f9e0:	46c8      	mov	r8, r9
 800f9e2:	442c      	add	r4, r5
 800f9e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f9e8:	4601      	mov	r1, r0
 800f9ea:	3b30      	subs	r3, #48	; 0x30
 800f9ec:	220a      	movs	r2, #10
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f7ff ff88 	bl	800f904 <__multadd>
 800f9f4:	45a0      	cmp	r8, r4
 800f9f6:	d1f5      	bne.n	800f9e4 <__s2b+0x4c>
 800f9f8:	f1a5 0408 	sub.w	r4, r5, #8
 800f9fc:	444c      	add	r4, r9
 800f9fe:	1b2d      	subs	r5, r5, r4
 800fa00:	1963      	adds	r3, r4, r5
 800fa02:	42bb      	cmp	r3, r7
 800fa04:	db04      	blt.n	800fa10 <__s2b+0x78>
 800fa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0a:	340a      	adds	r4, #10
 800fa0c:	2509      	movs	r5, #9
 800fa0e:	e7f6      	b.n	800f9fe <__s2b+0x66>
 800fa10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa14:	4601      	mov	r1, r0
 800fa16:	3b30      	subs	r3, #48	; 0x30
 800fa18:	220a      	movs	r2, #10
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f7ff ff72 	bl	800f904 <__multadd>
 800fa20:	e7ee      	b.n	800fa00 <__s2b+0x68>
 800fa22:	bf00      	nop
 800fa24:	0801252c 	.word	0x0801252c
 800fa28:	080125bc 	.word	0x080125bc

0800fa2c <__hi0bits>:
 800fa2c:	0c03      	lsrs	r3, r0, #16
 800fa2e:	041b      	lsls	r3, r3, #16
 800fa30:	b9d3      	cbnz	r3, 800fa68 <__hi0bits+0x3c>
 800fa32:	0400      	lsls	r0, r0, #16
 800fa34:	2310      	movs	r3, #16
 800fa36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fa3a:	bf04      	itt	eq
 800fa3c:	0200      	lsleq	r0, r0, #8
 800fa3e:	3308      	addeq	r3, #8
 800fa40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa44:	bf04      	itt	eq
 800fa46:	0100      	lsleq	r0, r0, #4
 800fa48:	3304      	addeq	r3, #4
 800fa4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa4e:	bf04      	itt	eq
 800fa50:	0080      	lsleq	r0, r0, #2
 800fa52:	3302      	addeq	r3, #2
 800fa54:	2800      	cmp	r0, #0
 800fa56:	db05      	blt.n	800fa64 <__hi0bits+0x38>
 800fa58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa5c:	f103 0301 	add.w	r3, r3, #1
 800fa60:	bf08      	it	eq
 800fa62:	2320      	moveq	r3, #32
 800fa64:	4618      	mov	r0, r3
 800fa66:	4770      	bx	lr
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e7e4      	b.n	800fa36 <__hi0bits+0xa>

0800fa6c <__lo0bits>:
 800fa6c:	6803      	ldr	r3, [r0, #0]
 800fa6e:	f013 0207 	ands.w	r2, r3, #7
 800fa72:	4601      	mov	r1, r0
 800fa74:	d00b      	beq.n	800fa8e <__lo0bits+0x22>
 800fa76:	07da      	lsls	r2, r3, #31
 800fa78:	d424      	bmi.n	800fac4 <__lo0bits+0x58>
 800fa7a:	0798      	lsls	r0, r3, #30
 800fa7c:	bf49      	itett	mi
 800fa7e:	085b      	lsrmi	r3, r3, #1
 800fa80:	089b      	lsrpl	r3, r3, #2
 800fa82:	2001      	movmi	r0, #1
 800fa84:	600b      	strmi	r3, [r1, #0]
 800fa86:	bf5c      	itt	pl
 800fa88:	600b      	strpl	r3, [r1, #0]
 800fa8a:	2002      	movpl	r0, #2
 800fa8c:	4770      	bx	lr
 800fa8e:	b298      	uxth	r0, r3
 800fa90:	b9b0      	cbnz	r0, 800fac0 <__lo0bits+0x54>
 800fa92:	0c1b      	lsrs	r3, r3, #16
 800fa94:	2010      	movs	r0, #16
 800fa96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fa9a:	bf04      	itt	eq
 800fa9c:	0a1b      	lsreq	r3, r3, #8
 800fa9e:	3008      	addeq	r0, #8
 800faa0:	071a      	lsls	r2, r3, #28
 800faa2:	bf04      	itt	eq
 800faa4:	091b      	lsreq	r3, r3, #4
 800faa6:	3004      	addeq	r0, #4
 800faa8:	079a      	lsls	r2, r3, #30
 800faaa:	bf04      	itt	eq
 800faac:	089b      	lsreq	r3, r3, #2
 800faae:	3002      	addeq	r0, #2
 800fab0:	07da      	lsls	r2, r3, #31
 800fab2:	d403      	bmi.n	800fabc <__lo0bits+0x50>
 800fab4:	085b      	lsrs	r3, r3, #1
 800fab6:	f100 0001 	add.w	r0, r0, #1
 800faba:	d005      	beq.n	800fac8 <__lo0bits+0x5c>
 800fabc:	600b      	str	r3, [r1, #0]
 800fabe:	4770      	bx	lr
 800fac0:	4610      	mov	r0, r2
 800fac2:	e7e8      	b.n	800fa96 <__lo0bits+0x2a>
 800fac4:	2000      	movs	r0, #0
 800fac6:	4770      	bx	lr
 800fac8:	2020      	movs	r0, #32
 800faca:	4770      	bx	lr

0800facc <__i2b>:
 800facc:	b510      	push	{r4, lr}
 800face:	460c      	mov	r4, r1
 800fad0:	2101      	movs	r1, #1
 800fad2:	f7ff feb5 	bl	800f840 <_Balloc>
 800fad6:	4602      	mov	r2, r0
 800fad8:	b928      	cbnz	r0, 800fae6 <__i2b+0x1a>
 800fada:	4b05      	ldr	r3, [pc, #20]	; (800faf0 <__i2b+0x24>)
 800fadc:	4805      	ldr	r0, [pc, #20]	; (800faf4 <__i2b+0x28>)
 800fade:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fae2:	f001 f9c5 	bl	8010e70 <__assert_func>
 800fae6:	2301      	movs	r3, #1
 800fae8:	6144      	str	r4, [r0, #20]
 800faea:	6103      	str	r3, [r0, #16]
 800faec:	bd10      	pop	{r4, pc}
 800faee:	bf00      	nop
 800faf0:	0801252c 	.word	0x0801252c
 800faf4:	080125bc 	.word	0x080125bc

0800faf8 <__multiply>:
 800faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafc:	4614      	mov	r4, r2
 800fafe:	690a      	ldr	r2, [r1, #16]
 800fb00:	6923      	ldr	r3, [r4, #16]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	bfb8      	it	lt
 800fb06:	460b      	movlt	r3, r1
 800fb08:	460d      	mov	r5, r1
 800fb0a:	bfbc      	itt	lt
 800fb0c:	4625      	movlt	r5, r4
 800fb0e:	461c      	movlt	r4, r3
 800fb10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fb14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb18:	68ab      	ldr	r3, [r5, #8]
 800fb1a:	6869      	ldr	r1, [r5, #4]
 800fb1c:	eb0a 0709 	add.w	r7, sl, r9
 800fb20:	42bb      	cmp	r3, r7
 800fb22:	b085      	sub	sp, #20
 800fb24:	bfb8      	it	lt
 800fb26:	3101      	addlt	r1, #1
 800fb28:	f7ff fe8a 	bl	800f840 <_Balloc>
 800fb2c:	b930      	cbnz	r0, 800fb3c <__multiply+0x44>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	4b42      	ldr	r3, [pc, #264]	; (800fc3c <__multiply+0x144>)
 800fb32:	4843      	ldr	r0, [pc, #268]	; (800fc40 <__multiply+0x148>)
 800fb34:	f240 115d 	movw	r1, #349	; 0x15d
 800fb38:	f001 f99a 	bl	8010e70 <__assert_func>
 800fb3c:	f100 0614 	add.w	r6, r0, #20
 800fb40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fb44:	4633      	mov	r3, r6
 800fb46:	2200      	movs	r2, #0
 800fb48:	4543      	cmp	r3, r8
 800fb4a:	d31e      	bcc.n	800fb8a <__multiply+0x92>
 800fb4c:	f105 0c14 	add.w	ip, r5, #20
 800fb50:	f104 0314 	add.w	r3, r4, #20
 800fb54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fb58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fb5c:	9202      	str	r2, [sp, #8]
 800fb5e:	ebac 0205 	sub.w	r2, ip, r5
 800fb62:	3a15      	subs	r2, #21
 800fb64:	f022 0203 	bic.w	r2, r2, #3
 800fb68:	3204      	adds	r2, #4
 800fb6a:	f105 0115 	add.w	r1, r5, #21
 800fb6e:	458c      	cmp	ip, r1
 800fb70:	bf38      	it	cc
 800fb72:	2204      	movcc	r2, #4
 800fb74:	9201      	str	r2, [sp, #4]
 800fb76:	9a02      	ldr	r2, [sp, #8]
 800fb78:	9303      	str	r3, [sp, #12]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d808      	bhi.n	800fb90 <__multiply+0x98>
 800fb7e:	2f00      	cmp	r7, #0
 800fb80:	dc55      	bgt.n	800fc2e <__multiply+0x136>
 800fb82:	6107      	str	r7, [r0, #16]
 800fb84:	b005      	add	sp, #20
 800fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8a:	f843 2b04 	str.w	r2, [r3], #4
 800fb8e:	e7db      	b.n	800fb48 <__multiply+0x50>
 800fb90:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb94:	f1ba 0f00 	cmp.w	sl, #0
 800fb98:	d020      	beq.n	800fbdc <__multiply+0xe4>
 800fb9a:	f105 0e14 	add.w	lr, r5, #20
 800fb9e:	46b1      	mov	r9, r6
 800fba0:	2200      	movs	r2, #0
 800fba2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fba6:	f8d9 b000 	ldr.w	fp, [r9]
 800fbaa:	b2a1      	uxth	r1, r4
 800fbac:	fa1f fb8b 	uxth.w	fp, fp
 800fbb0:	fb0a b101 	mla	r1, sl, r1, fp
 800fbb4:	4411      	add	r1, r2
 800fbb6:	f8d9 2000 	ldr.w	r2, [r9]
 800fbba:	0c24      	lsrs	r4, r4, #16
 800fbbc:	0c12      	lsrs	r2, r2, #16
 800fbbe:	fb0a 2404 	mla	r4, sl, r4, r2
 800fbc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fbc6:	b289      	uxth	r1, r1
 800fbc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fbcc:	45f4      	cmp	ip, lr
 800fbce:	f849 1b04 	str.w	r1, [r9], #4
 800fbd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fbd6:	d8e4      	bhi.n	800fba2 <__multiply+0xaa>
 800fbd8:	9901      	ldr	r1, [sp, #4]
 800fbda:	5072      	str	r2, [r6, r1]
 800fbdc:	9a03      	ldr	r2, [sp, #12]
 800fbde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	f1b9 0f00 	cmp.w	r9, #0
 800fbe8:	d01f      	beq.n	800fc2a <__multiply+0x132>
 800fbea:	6834      	ldr	r4, [r6, #0]
 800fbec:	f105 0114 	add.w	r1, r5, #20
 800fbf0:	46b6      	mov	lr, r6
 800fbf2:	f04f 0a00 	mov.w	sl, #0
 800fbf6:	880a      	ldrh	r2, [r1, #0]
 800fbf8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fbfc:	fb09 b202 	mla	r2, r9, r2, fp
 800fc00:	4492      	add	sl, r2
 800fc02:	b2a4      	uxth	r4, r4
 800fc04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fc08:	f84e 4b04 	str.w	r4, [lr], #4
 800fc0c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fc10:	f8be 2000 	ldrh.w	r2, [lr]
 800fc14:	0c24      	lsrs	r4, r4, #16
 800fc16:	fb09 2404 	mla	r4, r9, r4, r2
 800fc1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fc1e:	458c      	cmp	ip, r1
 800fc20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc24:	d8e7      	bhi.n	800fbf6 <__multiply+0xfe>
 800fc26:	9a01      	ldr	r2, [sp, #4]
 800fc28:	50b4      	str	r4, [r6, r2]
 800fc2a:	3604      	adds	r6, #4
 800fc2c:	e7a3      	b.n	800fb76 <__multiply+0x7e>
 800fc2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1a5      	bne.n	800fb82 <__multiply+0x8a>
 800fc36:	3f01      	subs	r7, #1
 800fc38:	e7a1      	b.n	800fb7e <__multiply+0x86>
 800fc3a:	bf00      	nop
 800fc3c:	0801252c 	.word	0x0801252c
 800fc40:	080125bc 	.word	0x080125bc

0800fc44 <__pow5mult>:
 800fc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc48:	4615      	mov	r5, r2
 800fc4a:	f012 0203 	ands.w	r2, r2, #3
 800fc4e:	4606      	mov	r6, r0
 800fc50:	460f      	mov	r7, r1
 800fc52:	d007      	beq.n	800fc64 <__pow5mult+0x20>
 800fc54:	4c25      	ldr	r4, [pc, #148]	; (800fcec <__pow5mult+0xa8>)
 800fc56:	3a01      	subs	r2, #1
 800fc58:	2300      	movs	r3, #0
 800fc5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc5e:	f7ff fe51 	bl	800f904 <__multadd>
 800fc62:	4607      	mov	r7, r0
 800fc64:	10ad      	asrs	r5, r5, #2
 800fc66:	d03d      	beq.n	800fce4 <__pow5mult+0xa0>
 800fc68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc6a:	b97c      	cbnz	r4, 800fc8c <__pow5mult+0x48>
 800fc6c:	2010      	movs	r0, #16
 800fc6e:	f7ff fdcd 	bl	800f80c <malloc>
 800fc72:	4602      	mov	r2, r0
 800fc74:	6270      	str	r0, [r6, #36]	; 0x24
 800fc76:	b928      	cbnz	r0, 800fc84 <__pow5mult+0x40>
 800fc78:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <__pow5mult+0xac>)
 800fc7a:	481e      	ldr	r0, [pc, #120]	; (800fcf4 <__pow5mult+0xb0>)
 800fc7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fc80:	f001 f8f6 	bl	8010e70 <__assert_func>
 800fc84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc88:	6004      	str	r4, [r0, #0]
 800fc8a:	60c4      	str	r4, [r0, #12]
 800fc8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fc90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc94:	b94c      	cbnz	r4, 800fcaa <__pow5mult+0x66>
 800fc96:	f240 2171 	movw	r1, #625	; 0x271
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	f7ff ff16 	bl	800facc <__i2b>
 800fca0:	2300      	movs	r3, #0
 800fca2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fca6:	4604      	mov	r4, r0
 800fca8:	6003      	str	r3, [r0, #0]
 800fcaa:	f04f 0900 	mov.w	r9, #0
 800fcae:	07eb      	lsls	r3, r5, #31
 800fcb0:	d50a      	bpl.n	800fcc8 <__pow5mult+0x84>
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	4622      	mov	r2, r4
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f7ff ff1e 	bl	800faf8 <__multiply>
 800fcbc:	4639      	mov	r1, r7
 800fcbe:	4680      	mov	r8, r0
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f7ff fdfd 	bl	800f8c0 <_Bfree>
 800fcc6:	4647      	mov	r7, r8
 800fcc8:	106d      	asrs	r5, r5, #1
 800fcca:	d00b      	beq.n	800fce4 <__pow5mult+0xa0>
 800fccc:	6820      	ldr	r0, [r4, #0]
 800fcce:	b938      	cbnz	r0, 800fce0 <__pow5mult+0x9c>
 800fcd0:	4622      	mov	r2, r4
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	f7ff ff0f 	bl	800faf8 <__multiply>
 800fcda:	6020      	str	r0, [r4, #0]
 800fcdc:	f8c0 9000 	str.w	r9, [r0]
 800fce0:	4604      	mov	r4, r0
 800fce2:	e7e4      	b.n	800fcae <__pow5mult+0x6a>
 800fce4:	4638      	mov	r0, r7
 800fce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcea:	bf00      	nop
 800fcec:	08012710 	.word	0x08012710
 800fcf0:	080124b6 	.word	0x080124b6
 800fcf4:	080125bc 	.word	0x080125bc

0800fcf8 <__lshift>:
 800fcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	6849      	ldr	r1, [r1, #4]
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd06:	68a3      	ldr	r3, [r4, #8]
 800fd08:	4607      	mov	r7, r0
 800fd0a:	4691      	mov	r9, r2
 800fd0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd10:	f108 0601 	add.w	r6, r8, #1
 800fd14:	42b3      	cmp	r3, r6
 800fd16:	db0b      	blt.n	800fd30 <__lshift+0x38>
 800fd18:	4638      	mov	r0, r7
 800fd1a:	f7ff fd91 	bl	800f840 <_Balloc>
 800fd1e:	4605      	mov	r5, r0
 800fd20:	b948      	cbnz	r0, 800fd36 <__lshift+0x3e>
 800fd22:	4602      	mov	r2, r0
 800fd24:	4b28      	ldr	r3, [pc, #160]	; (800fdc8 <__lshift+0xd0>)
 800fd26:	4829      	ldr	r0, [pc, #164]	; (800fdcc <__lshift+0xd4>)
 800fd28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd2c:	f001 f8a0 	bl	8010e70 <__assert_func>
 800fd30:	3101      	adds	r1, #1
 800fd32:	005b      	lsls	r3, r3, #1
 800fd34:	e7ee      	b.n	800fd14 <__lshift+0x1c>
 800fd36:	2300      	movs	r3, #0
 800fd38:	f100 0114 	add.w	r1, r0, #20
 800fd3c:	f100 0210 	add.w	r2, r0, #16
 800fd40:	4618      	mov	r0, r3
 800fd42:	4553      	cmp	r3, sl
 800fd44:	db33      	blt.n	800fdae <__lshift+0xb6>
 800fd46:	6920      	ldr	r0, [r4, #16]
 800fd48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd4c:	f104 0314 	add.w	r3, r4, #20
 800fd50:	f019 091f 	ands.w	r9, r9, #31
 800fd54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd5c:	d02b      	beq.n	800fdb6 <__lshift+0xbe>
 800fd5e:	f1c9 0e20 	rsb	lr, r9, #32
 800fd62:	468a      	mov	sl, r1
 800fd64:	2200      	movs	r2, #0
 800fd66:	6818      	ldr	r0, [r3, #0]
 800fd68:	fa00 f009 	lsl.w	r0, r0, r9
 800fd6c:	4302      	orrs	r2, r0
 800fd6e:	f84a 2b04 	str.w	r2, [sl], #4
 800fd72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd76:	459c      	cmp	ip, r3
 800fd78:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd7c:	d8f3      	bhi.n	800fd66 <__lshift+0x6e>
 800fd7e:	ebac 0304 	sub.w	r3, ip, r4
 800fd82:	3b15      	subs	r3, #21
 800fd84:	f023 0303 	bic.w	r3, r3, #3
 800fd88:	3304      	adds	r3, #4
 800fd8a:	f104 0015 	add.w	r0, r4, #21
 800fd8e:	4584      	cmp	ip, r0
 800fd90:	bf38      	it	cc
 800fd92:	2304      	movcc	r3, #4
 800fd94:	50ca      	str	r2, [r1, r3]
 800fd96:	b10a      	cbz	r2, 800fd9c <__lshift+0xa4>
 800fd98:	f108 0602 	add.w	r6, r8, #2
 800fd9c:	3e01      	subs	r6, #1
 800fd9e:	4638      	mov	r0, r7
 800fda0:	612e      	str	r6, [r5, #16]
 800fda2:	4621      	mov	r1, r4
 800fda4:	f7ff fd8c 	bl	800f8c0 <_Bfree>
 800fda8:	4628      	mov	r0, r5
 800fdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdae:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	e7c5      	b.n	800fd42 <__lshift+0x4a>
 800fdb6:	3904      	subs	r1, #4
 800fdb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdc0:	459c      	cmp	ip, r3
 800fdc2:	d8f9      	bhi.n	800fdb8 <__lshift+0xc0>
 800fdc4:	e7ea      	b.n	800fd9c <__lshift+0xa4>
 800fdc6:	bf00      	nop
 800fdc8:	0801252c 	.word	0x0801252c
 800fdcc:	080125bc 	.word	0x080125bc

0800fdd0 <__mcmp>:
 800fdd0:	b530      	push	{r4, r5, lr}
 800fdd2:	6902      	ldr	r2, [r0, #16]
 800fdd4:	690c      	ldr	r4, [r1, #16]
 800fdd6:	1b12      	subs	r2, r2, r4
 800fdd8:	d10e      	bne.n	800fdf8 <__mcmp+0x28>
 800fdda:	f100 0314 	add.w	r3, r0, #20
 800fdde:	3114      	adds	r1, #20
 800fde0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fde4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fde8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fdec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fdf0:	42a5      	cmp	r5, r4
 800fdf2:	d003      	beq.n	800fdfc <__mcmp+0x2c>
 800fdf4:	d305      	bcc.n	800fe02 <__mcmp+0x32>
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	4610      	mov	r0, r2
 800fdfa:	bd30      	pop	{r4, r5, pc}
 800fdfc:	4283      	cmp	r3, r0
 800fdfe:	d3f3      	bcc.n	800fde8 <__mcmp+0x18>
 800fe00:	e7fa      	b.n	800fdf8 <__mcmp+0x28>
 800fe02:	f04f 32ff 	mov.w	r2, #4294967295
 800fe06:	e7f7      	b.n	800fdf8 <__mcmp+0x28>

0800fe08 <__mdiff>:
 800fe08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	4606      	mov	r6, r0
 800fe10:	4611      	mov	r1, r2
 800fe12:	4620      	mov	r0, r4
 800fe14:	4617      	mov	r7, r2
 800fe16:	f7ff ffdb 	bl	800fdd0 <__mcmp>
 800fe1a:	1e05      	subs	r5, r0, #0
 800fe1c:	d110      	bne.n	800fe40 <__mdiff+0x38>
 800fe1e:	4629      	mov	r1, r5
 800fe20:	4630      	mov	r0, r6
 800fe22:	f7ff fd0d 	bl	800f840 <_Balloc>
 800fe26:	b930      	cbnz	r0, 800fe36 <__mdiff+0x2e>
 800fe28:	4b39      	ldr	r3, [pc, #228]	; (800ff10 <__mdiff+0x108>)
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	f240 2132 	movw	r1, #562	; 0x232
 800fe30:	4838      	ldr	r0, [pc, #224]	; (800ff14 <__mdiff+0x10c>)
 800fe32:	f001 f81d 	bl	8010e70 <__assert_func>
 800fe36:	2301      	movs	r3, #1
 800fe38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe40:	bfa4      	itt	ge
 800fe42:	463b      	movge	r3, r7
 800fe44:	4627      	movge	r7, r4
 800fe46:	4630      	mov	r0, r6
 800fe48:	6879      	ldr	r1, [r7, #4]
 800fe4a:	bfa6      	itte	ge
 800fe4c:	461c      	movge	r4, r3
 800fe4e:	2500      	movge	r5, #0
 800fe50:	2501      	movlt	r5, #1
 800fe52:	f7ff fcf5 	bl	800f840 <_Balloc>
 800fe56:	b920      	cbnz	r0, 800fe62 <__mdiff+0x5a>
 800fe58:	4b2d      	ldr	r3, [pc, #180]	; (800ff10 <__mdiff+0x108>)
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe60:	e7e6      	b.n	800fe30 <__mdiff+0x28>
 800fe62:	693e      	ldr	r6, [r7, #16]
 800fe64:	60c5      	str	r5, [r0, #12]
 800fe66:	6925      	ldr	r5, [r4, #16]
 800fe68:	f107 0114 	add.w	r1, r7, #20
 800fe6c:	f104 0914 	add.w	r9, r4, #20
 800fe70:	f100 0e14 	add.w	lr, r0, #20
 800fe74:	f107 0210 	add.w	r2, r7, #16
 800fe78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fe7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fe80:	46f2      	mov	sl, lr
 800fe82:	2700      	movs	r7, #0
 800fe84:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe8c:	fa1f f883 	uxth.w	r8, r3
 800fe90:	fa17 f78b 	uxtah	r7, r7, fp
 800fe94:	0c1b      	lsrs	r3, r3, #16
 800fe96:	eba7 0808 	sub.w	r8, r7, r8
 800fe9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fea2:	fa1f f888 	uxth.w	r8, r8
 800fea6:	141f      	asrs	r7, r3, #16
 800fea8:	454d      	cmp	r5, r9
 800feaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800feae:	f84a 3b04 	str.w	r3, [sl], #4
 800feb2:	d8e7      	bhi.n	800fe84 <__mdiff+0x7c>
 800feb4:	1b2b      	subs	r3, r5, r4
 800feb6:	3b15      	subs	r3, #21
 800feb8:	f023 0303 	bic.w	r3, r3, #3
 800febc:	3304      	adds	r3, #4
 800febe:	3415      	adds	r4, #21
 800fec0:	42a5      	cmp	r5, r4
 800fec2:	bf38      	it	cc
 800fec4:	2304      	movcc	r3, #4
 800fec6:	4419      	add	r1, r3
 800fec8:	4473      	add	r3, lr
 800feca:	469e      	mov	lr, r3
 800fecc:	460d      	mov	r5, r1
 800fece:	4565      	cmp	r5, ip
 800fed0:	d30e      	bcc.n	800fef0 <__mdiff+0xe8>
 800fed2:	f10c 0203 	add.w	r2, ip, #3
 800fed6:	1a52      	subs	r2, r2, r1
 800fed8:	f022 0203 	bic.w	r2, r2, #3
 800fedc:	3903      	subs	r1, #3
 800fede:	458c      	cmp	ip, r1
 800fee0:	bf38      	it	cc
 800fee2:	2200      	movcc	r2, #0
 800fee4:	441a      	add	r2, r3
 800fee6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800feea:	b17b      	cbz	r3, 800ff0c <__mdiff+0x104>
 800feec:	6106      	str	r6, [r0, #16]
 800feee:	e7a5      	b.n	800fe3c <__mdiff+0x34>
 800fef0:	f855 8b04 	ldr.w	r8, [r5], #4
 800fef4:	fa17 f488 	uxtah	r4, r7, r8
 800fef8:	1422      	asrs	r2, r4, #16
 800fefa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fefe:	b2a4      	uxth	r4, r4
 800ff00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ff04:	f84e 4b04 	str.w	r4, [lr], #4
 800ff08:	1417      	asrs	r7, r2, #16
 800ff0a:	e7e0      	b.n	800fece <__mdiff+0xc6>
 800ff0c:	3e01      	subs	r6, #1
 800ff0e:	e7ea      	b.n	800fee6 <__mdiff+0xde>
 800ff10:	0801252c 	.word	0x0801252c
 800ff14:	080125bc 	.word	0x080125bc

0800ff18 <__ulp>:
 800ff18:	b082      	sub	sp, #8
 800ff1a:	ed8d 0b00 	vstr	d0, [sp]
 800ff1e:	9b01      	ldr	r3, [sp, #4]
 800ff20:	4912      	ldr	r1, [pc, #72]	; (800ff6c <__ulp+0x54>)
 800ff22:	4019      	ands	r1, r3
 800ff24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ff28:	2900      	cmp	r1, #0
 800ff2a:	dd05      	ble.n	800ff38 <__ulp+0x20>
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	460b      	mov	r3, r1
 800ff30:	ec43 2b10 	vmov	d0, r2, r3
 800ff34:	b002      	add	sp, #8
 800ff36:	4770      	bx	lr
 800ff38:	4249      	negs	r1, r1
 800ff3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ff3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ff42:	f04f 0200 	mov.w	r2, #0
 800ff46:	f04f 0300 	mov.w	r3, #0
 800ff4a:	da04      	bge.n	800ff56 <__ulp+0x3e>
 800ff4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ff50:	fa41 f300 	asr.w	r3, r1, r0
 800ff54:	e7ec      	b.n	800ff30 <__ulp+0x18>
 800ff56:	f1a0 0114 	sub.w	r1, r0, #20
 800ff5a:	291e      	cmp	r1, #30
 800ff5c:	bfda      	itte	le
 800ff5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ff62:	fa20 f101 	lsrle.w	r1, r0, r1
 800ff66:	2101      	movgt	r1, #1
 800ff68:	460a      	mov	r2, r1
 800ff6a:	e7e1      	b.n	800ff30 <__ulp+0x18>
 800ff6c:	7ff00000 	.word	0x7ff00000

0800ff70 <__b2d>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	6905      	ldr	r5, [r0, #16]
 800ff74:	f100 0714 	add.w	r7, r0, #20
 800ff78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ff7c:	1f2e      	subs	r6, r5, #4
 800ff7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7ff fd52 	bl	800fa2c <__hi0bits>
 800ff88:	f1c0 0320 	rsb	r3, r0, #32
 800ff8c:	280a      	cmp	r0, #10
 800ff8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801000c <__b2d+0x9c>
 800ff92:	600b      	str	r3, [r1, #0]
 800ff94:	dc14      	bgt.n	800ffc0 <__b2d+0x50>
 800ff96:	f1c0 0e0b 	rsb	lr, r0, #11
 800ff9a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ff9e:	42b7      	cmp	r7, r6
 800ffa0:	ea41 030c 	orr.w	r3, r1, ip
 800ffa4:	bf34      	ite	cc
 800ffa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ffaa:	2100      	movcs	r1, #0
 800ffac:	3015      	adds	r0, #21
 800ffae:	fa04 f000 	lsl.w	r0, r4, r0
 800ffb2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ffb6:	ea40 0201 	orr.w	r2, r0, r1
 800ffba:	ec43 2b10 	vmov	d0, r2, r3
 800ffbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffc0:	42b7      	cmp	r7, r6
 800ffc2:	bf3a      	itte	cc
 800ffc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ffc8:	f1a5 0608 	subcc.w	r6, r5, #8
 800ffcc:	2100      	movcs	r1, #0
 800ffce:	380b      	subs	r0, #11
 800ffd0:	d017      	beq.n	8010002 <__b2d+0x92>
 800ffd2:	f1c0 0c20 	rsb	ip, r0, #32
 800ffd6:	fa04 f500 	lsl.w	r5, r4, r0
 800ffda:	42be      	cmp	r6, r7
 800ffdc:	fa21 f40c 	lsr.w	r4, r1, ip
 800ffe0:	ea45 0504 	orr.w	r5, r5, r4
 800ffe4:	bf8c      	ite	hi
 800ffe6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ffea:	2400      	movls	r4, #0
 800ffec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fff0:	fa01 f000 	lsl.w	r0, r1, r0
 800fff4:	fa24 f40c 	lsr.w	r4, r4, ip
 800fff8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fffc:	ea40 0204 	orr.w	r2, r0, r4
 8010000:	e7db      	b.n	800ffba <__b2d+0x4a>
 8010002:	ea44 030c 	orr.w	r3, r4, ip
 8010006:	460a      	mov	r2, r1
 8010008:	e7d7      	b.n	800ffba <__b2d+0x4a>
 801000a:	bf00      	nop
 801000c:	3ff00000 	.word	0x3ff00000

08010010 <__d2b>:
 8010010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010014:	4689      	mov	r9, r1
 8010016:	2101      	movs	r1, #1
 8010018:	ec57 6b10 	vmov	r6, r7, d0
 801001c:	4690      	mov	r8, r2
 801001e:	f7ff fc0f 	bl	800f840 <_Balloc>
 8010022:	4604      	mov	r4, r0
 8010024:	b930      	cbnz	r0, 8010034 <__d2b+0x24>
 8010026:	4602      	mov	r2, r0
 8010028:	4b25      	ldr	r3, [pc, #148]	; (80100c0 <__d2b+0xb0>)
 801002a:	4826      	ldr	r0, [pc, #152]	; (80100c4 <__d2b+0xb4>)
 801002c:	f240 310a 	movw	r1, #778	; 0x30a
 8010030:	f000 ff1e 	bl	8010e70 <__assert_func>
 8010034:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801003c:	bb35      	cbnz	r5, 801008c <__d2b+0x7c>
 801003e:	2e00      	cmp	r6, #0
 8010040:	9301      	str	r3, [sp, #4]
 8010042:	d028      	beq.n	8010096 <__d2b+0x86>
 8010044:	4668      	mov	r0, sp
 8010046:	9600      	str	r6, [sp, #0]
 8010048:	f7ff fd10 	bl	800fa6c <__lo0bits>
 801004c:	9900      	ldr	r1, [sp, #0]
 801004e:	b300      	cbz	r0, 8010092 <__d2b+0x82>
 8010050:	9a01      	ldr	r2, [sp, #4]
 8010052:	f1c0 0320 	rsb	r3, r0, #32
 8010056:	fa02 f303 	lsl.w	r3, r2, r3
 801005a:	430b      	orrs	r3, r1
 801005c:	40c2      	lsrs	r2, r0
 801005e:	6163      	str	r3, [r4, #20]
 8010060:	9201      	str	r2, [sp, #4]
 8010062:	9b01      	ldr	r3, [sp, #4]
 8010064:	61a3      	str	r3, [r4, #24]
 8010066:	2b00      	cmp	r3, #0
 8010068:	bf14      	ite	ne
 801006a:	2202      	movne	r2, #2
 801006c:	2201      	moveq	r2, #1
 801006e:	6122      	str	r2, [r4, #16]
 8010070:	b1d5      	cbz	r5, 80100a8 <__d2b+0x98>
 8010072:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010076:	4405      	add	r5, r0
 8010078:	f8c9 5000 	str.w	r5, [r9]
 801007c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010080:	f8c8 0000 	str.w	r0, [r8]
 8010084:	4620      	mov	r0, r4
 8010086:	b003      	add	sp, #12
 8010088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801008c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010090:	e7d5      	b.n	801003e <__d2b+0x2e>
 8010092:	6161      	str	r1, [r4, #20]
 8010094:	e7e5      	b.n	8010062 <__d2b+0x52>
 8010096:	a801      	add	r0, sp, #4
 8010098:	f7ff fce8 	bl	800fa6c <__lo0bits>
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	6163      	str	r3, [r4, #20]
 80100a0:	2201      	movs	r2, #1
 80100a2:	6122      	str	r2, [r4, #16]
 80100a4:	3020      	adds	r0, #32
 80100a6:	e7e3      	b.n	8010070 <__d2b+0x60>
 80100a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80100b0:	f8c9 0000 	str.w	r0, [r9]
 80100b4:	6918      	ldr	r0, [r3, #16]
 80100b6:	f7ff fcb9 	bl	800fa2c <__hi0bits>
 80100ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100be:	e7df      	b.n	8010080 <__d2b+0x70>
 80100c0:	0801252c 	.word	0x0801252c
 80100c4:	080125bc 	.word	0x080125bc

080100c8 <__ratio>:
 80100c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	4688      	mov	r8, r1
 80100ce:	4669      	mov	r1, sp
 80100d0:	4681      	mov	r9, r0
 80100d2:	f7ff ff4d 	bl	800ff70 <__b2d>
 80100d6:	a901      	add	r1, sp, #4
 80100d8:	4640      	mov	r0, r8
 80100da:	ec55 4b10 	vmov	r4, r5, d0
 80100de:	f7ff ff47 	bl	800ff70 <__b2d>
 80100e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80100ea:	eba3 0c02 	sub.w	ip, r3, r2
 80100ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80100f8:	ec51 0b10 	vmov	r0, r1, d0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfd6      	itet	le
 8010100:	460a      	movle	r2, r1
 8010102:	462a      	movgt	r2, r5
 8010104:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010108:	468b      	mov	fp, r1
 801010a:	462f      	mov	r7, r5
 801010c:	bfd4      	ite	le
 801010e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010112:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010116:	4620      	mov	r0, r4
 8010118:	ee10 2a10 	vmov	r2, s0
 801011c:	465b      	mov	r3, fp
 801011e:	4639      	mov	r1, r7
 8010120:	f7f0 fb9c 	bl	800085c <__aeabi_ddiv>
 8010124:	ec41 0b10 	vmov	d0, r0, r1
 8010128:	b003      	add	sp, #12
 801012a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801012e <__copybits>:
 801012e:	3901      	subs	r1, #1
 8010130:	b570      	push	{r4, r5, r6, lr}
 8010132:	1149      	asrs	r1, r1, #5
 8010134:	6914      	ldr	r4, [r2, #16]
 8010136:	3101      	adds	r1, #1
 8010138:	f102 0314 	add.w	r3, r2, #20
 801013c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010140:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010144:	1f05      	subs	r5, r0, #4
 8010146:	42a3      	cmp	r3, r4
 8010148:	d30c      	bcc.n	8010164 <__copybits+0x36>
 801014a:	1aa3      	subs	r3, r4, r2
 801014c:	3b11      	subs	r3, #17
 801014e:	f023 0303 	bic.w	r3, r3, #3
 8010152:	3211      	adds	r2, #17
 8010154:	42a2      	cmp	r2, r4
 8010156:	bf88      	it	hi
 8010158:	2300      	movhi	r3, #0
 801015a:	4418      	add	r0, r3
 801015c:	2300      	movs	r3, #0
 801015e:	4288      	cmp	r0, r1
 8010160:	d305      	bcc.n	801016e <__copybits+0x40>
 8010162:	bd70      	pop	{r4, r5, r6, pc}
 8010164:	f853 6b04 	ldr.w	r6, [r3], #4
 8010168:	f845 6f04 	str.w	r6, [r5, #4]!
 801016c:	e7eb      	b.n	8010146 <__copybits+0x18>
 801016e:	f840 3b04 	str.w	r3, [r0], #4
 8010172:	e7f4      	b.n	801015e <__copybits+0x30>

08010174 <__any_on>:
 8010174:	f100 0214 	add.w	r2, r0, #20
 8010178:	6900      	ldr	r0, [r0, #16]
 801017a:	114b      	asrs	r3, r1, #5
 801017c:	4298      	cmp	r0, r3
 801017e:	b510      	push	{r4, lr}
 8010180:	db11      	blt.n	80101a6 <__any_on+0x32>
 8010182:	dd0a      	ble.n	801019a <__any_on+0x26>
 8010184:	f011 011f 	ands.w	r1, r1, #31
 8010188:	d007      	beq.n	801019a <__any_on+0x26>
 801018a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801018e:	fa24 f001 	lsr.w	r0, r4, r1
 8010192:	fa00 f101 	lsl.w	r1, r0, r1
 8010196:	428c      	cmp	r4, r1
 8010198:	d10b      	bne.n	80101b2 <__any_on+0x3e>
 801019a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801019e:	4293      	cmp	r3, r2
 80101a0:	d803      	bhi.n	80101aa <__any_on+0x36>
 80101a2:	2000      	movs	r0, #0
 80101a4:	bd10      	pop	{r4, pc}
 80101a6:	4603      	mov	r3, r0
 80101a8:	e7f7      	b.n	801019a <__any_on+0x26>
 80101aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101ae:	2900      	cmp	r1, #0
 80101b0:	d0f5      	beq.n	801019e <__any_on+0x2a>
 80101b2:	2001      	movs	r0, #1
 80101b4:	e7f6      	b.n	80101a4 <__any_on+0x30>

080101b6 <_calloc_r>:
 80101b6:	b513      	push	{r0, r1, r4, lr}
 80101b8:	434a      	muls	r2, r1
 80101ba:	4611      	mov	r1, r2
 80101bc:	9201      	str	r2, [sp, #4]
 80101be:	f000 f859 	bl	8010274 <_malloc_r>
 80101c2:	4604      	mov	r4, r0
 80101c4:	b118      	cbz	r0, 80101ce <_calloc_r+0x18>
 80101c6:	9a01      	ldr	r2, [sp, #4]
 80101c8:	2100      	movs	r1, #0
 80101ca:	f7fc fb0f 	bl	800c7ec <memset>
 80101ce:	4620      	mov	r0, r4
 80101d0:	b002      	add	sp, #8
 80101d2:	bd10      	pop	{r4, pc}

080101d4 <_free_r>:
 80101d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101d6:	2900      	cmp	r1, #0
 80101d8:	d048      	beq.n	801026c <_free_r+0x98>
 80101da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101de:	9001      	str	r0, [sp, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f1a1 0404 	sub.w	r4, r1, #4
 80101e6:	bfb8      	it	lt
 80101e8:	18e4      	addlt	r4, r4, r3
 80101ea:	f001 f845 	bl	8011278 <__malloc_lock>
 80101ee:	4a20      	ldr	r2, [pc, #128]	; (8010270 <_free_r+0x9c>)
 80101f0:	9801      	ldr	r0, [sp, #4]
 80101f2:	6813      	ldr	r3, [r2, #0]
 80101f4:	4615      	mov	r5, r2
 80101f6:	b933      	cbnz	r3, 8010206 <_free_r+0x32>
 80101f8:	6063      	str	r3, [r4, #4]
 80101fa:	6014      	str	r4, [r2, #0]
 80101fc:	b003      	add	sp, #12
 80101fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010202:	f001 b83f 	b.w	8011284 <__malloc_unlock>
 8010206:	42a3      	cmp	r3, r4
 8010208:	d90b      	bls.n	8010222 <_free_r+0x4e>
 801020a:	6821      	ldr	r1, [r4, #0]
 801020c:	1862      	adds	r2, r4, r1
 801020e:	4293      	cmp	r3, r2
 8010210:	bf04      	itt	eq
 8010212:	681a      	ldreq	r2, [r3, #0]
 8010214:	685b      	ldreq	r3, [r3, #4]
 8010216:	6063      	str	r3, [r4, #4]
 8010218:	bf04      	itt	eq
 801021a:	1852      	addeq	r2, r2, r1
 801021c:	6022      	streq	r2, [r4, #0]
 801021e:	602c      	str	r4, [r5, #0]
 8010220:	e7ec      	b.n	80101fc <_free_r+0x28>
 8010222:	461a      	mov	r2, r3
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	b10b      	cbz	r3, 801022c <_free_r+0x58>
 8010228:	42a3      	cmp	r3, r4
 801022a:	d9fa      	bls.n	8010222 <_free_r+0x4e>
 801022c:	6811      	ldr	r1, [r2, #0]
 801022e:	1855      	adds	r5, r2, r1
 8010230:	42a5      	cmp	r5, r4
 8010232:	d10b      	bne.n	801024c <_free_r+0x78>
 8010234:	6824      	ldr	r4, [r4, #0]
 8010236:	4421      	add	r1, r4
 8010238:	1854      	adds	r4, r2, r1
 801023a:	42a3      	cmp	r3, r4
 801023c:	6011      	str	r1, [r2, #0]
 801023e:	d1dd      	bne.n	80101fc <_free_r+0x28>
 8010240:	681c      	ldr	r4, [r3, #0]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	6053      	str	r3, [r2, #4]
 8010246:	4421      	add	r1, r4
 8010248:	6011      	str	r1, [r2, #0]
 801024a:	e7d7      	b.n	80101fc <_free_r+0x28>
 801024c:	d902      	bls.n	8010254 <_free_r+0x80>
 801024e:	230c      	movs	r3, #12
 8010250:	6003      	str	r3, [r0, #0]
 8010252:	e7d3      	b.n	80101fc <_free_r+0x28>
 8010254:	6825      	ldr	r5, [r4, #0]
 8010256:	1961      	adds	r1, r4, r5
 8010258:	428b      	cmp	r3, r1
 801025a:	bf04      	itt	eq
 801025c:	6819      	ldreq	r1, [r3, #0]
 801025e:	685b      	ldreq	r3, [r3, #4]
 8010260:	6063      	str	r3, [r4, #4]
 8010262:	bf04      	itt	eq
 8010264:	1949      	addeq	r1, r1, r5
 8010266:	6021      	streq	r1, [r4, #0]
 8010268:	6054      	str	r4, [r2, #4]
 801026a:	e7c7      	b.n	80101fc <_free_r+0x28>
 801026c:	b003      	add	sp, #12
 801026e:	bd30      	pop	{r4, r5, pc}
 8010270:	20004c7c 	.word	0x20004c7c

08010274 <_malloc_r>:
 8010274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010276:	1ccd      	adds	r5, r1, #3
 8010278:	f025 0503 	bic.w	r5, r5, #3
 801027c:	3508      	adds	r5, #8
 801027e:	2d0c      	cmp	r5, #12
 8010280:	bf38      	it	cc
 8010282:	250c      	movcc	r5, #12
 8010284:	2d00      	cmp	r5, #0
 8010286:	4606      	mov	r6, r0
 8010288:	db01      	blt.n	801028e <_malloc_r+0x1a>
 801028a:	42a9      	cmp	r1, r5
 801028c:	d903      	bls.n	8010296 <_malloc_r+0x22>
 801028e:	230c      	movs	r3, #12
 8010290:	6033      	str	r3, [r6, #0]
 8010292:	2000      	movs	r0, #0
 8010294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010296:	f000 ffef 	bl	8011278 <__malloc_lock>
 801029a:	4921      	ldr	r1, [pc, #132]	; (8010320 <_malloc_r+0xac>)
 801029c:	680a      	ldr	r2, [r1, #0]
 801029e:	4614      	mov	r4, r2
 80102a0:	b99c      	cbnz	r4, 80102ca <_malloc_r+0x56>
 80102a2:	4f20      	ldr	r7, [pc, #128]	; (8010324 <_malloc_r+0xb0>)
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	b923      	cbnz	r3, 80102b2 <_malloc_r+0x3e>
 80102a8:	4621      	mov	r1, r4
 80102aa:	4630      	mov	r0, r6
 80102ac:	f000 fcd0 	bl	8010c50 <_sbrk_r>
 80102b0:	6038      	str	r0, [r7, #0]
 80102b2:	4629      	mov	r1, r5
 80102b4:	4630      	mov	r0, r6
 80102b6:	f000 fccb 	bl	8010c50 <_sbrk_r>
 80102ba:	1c43      	adds	r3, r0, #1
 80102bc:	d123      	bne.n	8010306 <_malloc_r+0x92>
 80102be:	230c      	movs	r3, #12
 80102c0:	6033      	str	r3, [r6, #0]
 80102c2:	4630      	mov	r0, r6
 80102c4:	f000 ffde 	bl	8011284 <__malloc_unlock>
 80102c8:	e7e3      	b.n	8010292 <_malloc_r+0x1e>
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	1b5b      	subs	r3, r3, r5
 80102ce:	d417      	bmi.n	8010300 <_malloc_r+0x8c>
 80102d0:	2b0b      	cmp	r3, #11
 80102d2:	d903      	bls.n	80102dc <_malloc_r+0x68>
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	441c      	add	r4, r3
 80102d8:	6025      	str	r5, [r4, #0]
 80102da:	e004      	b.n	80102e6 <_malloc_r+0x72>
 80102dc:	6863      	ldr	r3, [r4, #4]
 80102de:	42a2      	cmp	r2, r4
 80102e0:	bf0c      	ite	eq
 80102e2:	600b      	streq	r3, [r1, #0]
 80102e4:	6053      	strne	r3, [r2, #4]
 80102e6:	4630      	mov	r0, r6
 80102e8:	f000 ffcc 	bl	8011284 <__malloc_unlock>
 80102ec:	f104 000b 	add.w	r0, r4, #11
 80102f0:	1d23      	adds	r3, r4, #4
 80102f2:	f020 0007 	bic.w	r0, r0, #7
 80102f6:	1ac2      	subs	r2, r0, r3
 80102f8:	d0cc      	beq.n	8010294 <_malloc_r+0x20>
 80102fa:	1a1b      	subs	r3, r3, r0
 80102fc:	50a3      	str	r3, [r4, r2]
 80102fe:	e7c9      	b.n	8010294 <_malloc_r+0x20>
 8010300:	4622      	mov	r2, r4
 8010302:	6864      	ldr	r4, [r4, #4]
 8010304:	e7cc      	b.n	80102a0 <_malloc_r+0x2c>
 8010306:	1cc4      	adds	r4, r0, #3
 8010308:	f024 0403 	bic.w	r4, r4, #3
 801030c:	42a0      	cmp	r0, r4
 801030e:	d0e3      	beq.n	80102d8 <_malloc_r+0x64>
 8010310:	1a21      	subs	r1, r4, r0
 8010312:	4630      	mov	r0, r6
 8010314:	f000 fc9c 	bl	8010c50 <_sbrk_r>
 8010318:	3001      	adds	r0, #1
 801031a:	d1dd      	bne.n	80102d8 <_malloc_r+0x64>
 801031c:	e7cf      	b.n	80102be <_malloc_r+0x4a>
 801031e:	bf00      	nop
 8010320:	20004c7c 	.word	0x20004c7c
 8010324:	20004c80 	.word	0x20004c80

08010328 <__ssputs_r>:
 8010328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801032c:	688e      	ldr	r6, [r1, #8]
 801032e:	429e      	cmp	r6, r3
 8010330:	4682      	mov	sl, r0
 8010332:	460c      	mov	r4, r1
 8010334:	4690      	mov	r8, r2
 8010336:	461f      	mov	r7, r3
 8010338:	d838      	bhi.n	80103ac <__ssputs_r+0x84>
 801033a:	898a      	ldrh	r2, [r1, #12]
 801033c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010340:	d032      	beq.n	80103a8 <__ssputs_r+0x80>
 8010342:	6825      	ldr	r5, [r4, #0]
 8010344:	6909      	ldr	r1, [r1, #16]
 8010346:	eba5 0901 	sub.w	r9, r5, r1
 801034a:	6965      	ldr	r5, [r4, #20]
 801034c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010354:	3301      	adds	r3, #1
 8010356:	444b      	add	r3, r9
 8010358:	106d      	asrs	r5, r5, #1
 801035a:	429d      	cmp	r5, r3
 801035c:	bf38      	it	cc
 801035e:	461d      	movcc	r5, r3
 8010360:	0553      	lsls	r3, r2, #21
 8010362:	d531      	bpl.n	80103c8 <__ssputs_r+0xa0>
 8010364:	4629      	mov	r1, r5
 8010366:	f7ff ff85 	bl	8010274 <_malloc_r>
 801036a:	4606      	mov	r6, r0
 801036c:	b950      	cbnz	r0, 8010384 <__ssputs_r+0x5c>
 801036e:	230c      	movs	r3, #12
 8010370:	f8ca 3000 	str.w	r3, [sl]
 8010374:	89a3      	ldrh	r3, [r4, #12]
 8010376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801037a:	81a3      	strh	r3, [r4, #12]
 801037c:	f04f 30ff 	mov.w	r0, #4294967295
 8010380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010384:	6921      	ldr	r1, [r4, #16]
 8010386:	464a      	mov	r2, r9
 8010388:	f7fc fa22 	bl	800c7d0 <memcpy>
 801038c:	89a3      	ldrh	r3, [r4, #12]
 801038e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010396:	81a3      	strh	r3, [r4, #12]
 8010398:	6126      	str	r6, [r4, #16]
 801039a:	6165      	str	r5, [r4, #20]
 801039c:	444e      	add	r6, r9
 801039e:	eba5 0509 	sub.w	r5, r5, r9
 80103a2:	6026      	str	r6, [r4, #0]
 80103a4:	60a5      	str	r5, [r4, #8]
 80103a6:	463e      	mov	r6, r7
 80103a8:	42be      	cmp	r6, r7
 80103aa:	d900      	bls.n	80103ae <__ssputs_r+0x86>
 80103ac:	463e      	mov	r6, r7
 80103ae:	4632      	mov	r2, r6
 80103b0:	6820      	ldr	r0, [r4, #0]
 80103b2:	4641      	mov	r1, r8
 80103b4:	f000 ff46 	bl	8011244 <memmove>
 80103b8:	68a3      	ldr	r3, [r4, #8]
 80103ba:	6822      	ldr	r2, [r4, #0]
 80103bc:	1b9b      	subs	r3, r3, r6
 80103be:	4432      	add	r2, r6
 80103c0:	60a3      	str	r3, [r4, #8]
 80103c2:	6022      	str	r2, [r4, #0]
 80103c4:	2000      	movs	r0, #0
 80103c6:	e7db      	b.n	8010380 <__ssputs_r+0x58>
 80103c8:	462a      	mov	r2, r5
 80103ca:	f000 ff61 	bl	8011290 <_realloc_r>
 80103ce:	4606      	mov	r6, r0
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d1e1      	bne.n	8010398 <__ssputs_r+0x70>
 80103d4:	6921      	ldr	r1, [r4, #16]
 80103d6:	4650      	mov	r0, sl
 80103d8:	f7ff fefc 	bl	80101d4 <_free_r>
 80103dc:	e7c7      	b.n	801036e <__ssputs_r+0x46>
	...

080103e0 <_svfiprintf_r>:
 80103e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e4:	4698      	mov	r8, r3
 80103e6:	898b      	ldrh	r3, [r1, #12]
 80103e8:	061b      	lsls	r3, r3, #24
 80103ea:	b09d      	sub	sp, #116	; 0x74
 80103ec:	4607      	mov	r7, r0
 80103ee:	460d      	mov	r5, r1
 80103f0:	4614      	mov	r4, r2
 80103f2:	d50e      	bpl.n	8010412 <_svfiprintf_r+0x32>
 80103f4:	690b      	ldr	r3, [r1, #16]
 80103f6:	b963      	cbnz	r3, 8010412 <_svfiprintf_r+0x32>
 80103f8:	2140      	movs	r1, #64	; 0x40
 80103fa:	f7ff ff3b 	bl	8010274 <_malloc_r>
 80103fe:	6028      	str	r0, [r5, #0]
 8010400:	6128      	str	r0, [r5, #16]
 8010402:	b920      	cbnz	r0, 801040e <_svfiprintf_r+0x2e>
 8010404:	230c      	movs	r3, #12
 8010406:	603b      	str	r3, [r7, #0]
 8010408:	f04f 30ff 	mov.w	r0, #4294967295
 801040c:	e0d1      	b.n	80105b2 <_svfiprintf_r+0x1d2>
 801040e:	2340      	movs	r3, #64	; 0x40
 8010410:	616b      	str	r3, [r5, #20]
 8010412:	2300      	movs	r3, #0
 8010414:	9309      	str	r3, [sp, #36]	; 0x24
 8010416:	2320      	movs	r3, #32
 8010418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801041c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010420:	2330      	movs	r3, #48	; 0x30
 8010422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80105cc <_svfiprintf_r+0x1ec>
 8010426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801042a:	f04f 0901 	mov.w	r9, #1
 801042e:	4623      	mov	r3, r4
 8010430:	469a      	mov	sl, r3
 8010432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010436:	b10a      	cbz	r2, 801043c <_svfiprintf_r+0x5c>
 8010438:	2a25      	cmp	r2, #37	; 0x25
 801043a:	d1f9      	bne.n	8010430 <_svfiprintf_r+0x50>
 801043c:	ebba 0b04 	subs.w	fp, sl, r4
 8010440:	d00b      	beq.n	801045a <_svfiprintf_r+0x7a>
 8010442:	465b      	mov	r3, fp
 8010444:	4622      	mov	r2, r4
 8010446:	4629      	mov	r1, r5
 8010448:	4638      	mov	r0, r7
 801044a:	f7ff ff6d 	bl	8010328 <__ssputs_r>
 801044e:	3001      	adds	r0, #1
 8010450:	f000 80aa 	beq.w	80105a8 <_svfiprintf_r+0x1c8>
 8010454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010456:	445a      	add	r2, fp
 8010458:	9209      	str	r2, [sp, #36]	; 0x24
 801045a:	f89a 3000 	ldrb.w	r3, [sl]
 801045e:	2b00      	cmp	r3, #0
 8010460:	f000 80a2 	beq.w	80105a8 <_svfiprintf_r+0x1c8>
 8010464:	2300      	movs	r3, #0
 8010466:	f04f 32ff 	mov.w	r2, #4294967295
 801046a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801046e:	f10a 0a01 	add.w	sl, sl, #1
 8010472:	9304      	str	r3, [sp, #16]
 8010474:	9307      	str	r3, [sp, #28]
 8010476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801047a:	931a      	str	r3, [sp, #104]	; 0x68
 801047c:	4654      	mov	r4, sl
 801047e:	2205      	movs	r2, #5
 8010480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010484:	4851      	ldr	r0, [pc, #324]	; (80105cc <_svfiprintf_r+0x1ec>)
 8010486:	f7ef feb3 	bl	80001f0 <memchr>
 801048a:	9a04      	ldr	r2, [sp, #16]
 801048c:	b9d8      	cbnz	r0, 80104c6 <_svfiprintf_r+0xe6>
 801048e:	06d0      	lsls	r0, r2, #27
 8010490:	bf44      	itt	mi
 8010492:	2320      	movmi	r3, #32
 8010494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010498:	0711      	lsls	r1, r2, #28
 801049a:	bf44      	itt	mi
 801049c:	232b      	movmi	r3, #43	; 0x2b
 801049e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104a2:	f89a 3000 	ldrb.w	r3, [sl]
 80104a6:	2b2a      	cmp	r3, #42	; 0x2a
 80104a8:	d015      	beq.n	80104d6 <_svfiprintf_r+0xf6>
 80104aa:	9a07      	ldr	r2, [sp, #28]
 80104ac:	4654      	mov	r4, sl
 80104ae:	2000      	movs	r0, #0
 80104b0:	f04f 0c0a 	mov.w	ip, #10
 80104b4:	4621      	mov	r1, r4
 80104b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104ba:	3b30      	subs	r3, #48	; 0x30
 80104bc:	2b09      	cmp	r3, #9
 80104be:	d94e      	bls.n	801055e <_svfiprintf_r+0x17e>
 80104c0:	b1b0      	cbz	r0, 80104f0 <_svfiprintf_r+0x110>
 80104c2:	9207      	str	r2, [sp, #28]
 80104c4:	e014      	b.n	80104f0 <_svfiprintf_r+0x110>
 80104c6:	eba0 0308 	sub.w	r3, r0, r8
 80104ca:	fa09 f303 	lsl.w	r3, r9, r3
 80104ce:	4313      	orrs	r3, r2
 80104d0:	9304      	str	r3, [sp, #16]
 80104d2:	46a2      	mov	sl, r4
 80104d4:	e7d2      	b.n	801047c <_svfiprintf_r+0x9c>
 80104d6:	9b03      	ldr	r3, [sp, #12]
 80104d8:	1d19      	adds	r1, r3, #4
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	9103      	str	r1, [sp, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	bfbb      	ittet	lt
 80104e2:	425b      	neglt	r3, r3
 80104e4:	f042 0202 	orrlt.w	r2, r2, #2
 80104e8:	9307      	strge	r3, [sp, #28]
 80104ea:	9307      	strlt	r3, [sp, #28]
 80104ec:	bfb8      	it	lt
 80104ee:	9204      	strlt	r2, [sp, #16]
 80104f0:	7823      	ldrb	r3, [r4, #0]
 80104f2:	2b2e      	cmp	r3, #46	; 0x2e
 80104f4:	d10c      	bne.n	8010510 <_svfiprintf_r+0x130>
 80104f6:	7863      	ldrb	r3, [r4, #1]
 80104f8:	2b2a      	cmp	r3, #42	; 0x2a
 80104fa:	d135      	bne.n	8010568 <_svfiprintf_r+0x188>
 80104fc:	9b03      	ldr	r3, [sp, #12]
 80104fe:	1d1a      	adds	r2, r3, #4
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	9203      	str	r2, [sp, #12]
 8010504:	2b00      	cmp	r3, #0
 8010506:	bfb8      	it	lt
 8010508:	f04f 33ff 	movlt.w	r3, #4294967295
 801050c:	3402      	adds	r4, #2
 801050e:	9305      	str	r3, [sp, #20]
 8010510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80105dc <_svfiprintf_r+0x1fc>
 8010514:	7821      	ldrb	r1, [r4, #0]
 8010516:	2203      	movs	r2, #3
 8010518:	4650      	mov	r0, sl
 801051a:	f7ef fe69 	bl	80001f0 <memchr>
 801051e:	b140      	cbz	r0, 8010532 <_svfiprintf_r+0x152>
 8010520:	2340      	movs	r3, #64	; 0x40
 8010522:	eba0 000a 	sub.w	r0, r0, sl
 8010526:	fa03 f000 	lsl.w	r0, r3, r0
 801052a:	9b04      	ldr	r3, [sp, #16]
 801052c:	4303      	orrs	r3, r0
 801052e:	3401      	adds	r4, #1
 8010530:	9304      	str	r3, [sp, #16]
 8010532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010536:	4826      	ldr	r0, [pc, #152]	; (80105d0 <_svfiprintf_r+0x1f0>)
 8010538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801053c:	2206      	movs	r2, #6
 801053e:	f7ef fe57 	bl	80001f0 <memchr>
 8010542:	2800      	cmp	r0, #0
 8010544:	d038      	beq.n	80105b8 <_svfiprintf_r+0x1d8>
 8010546:	4b23      	ldr	r3, [pc, #140]	; (80105d4 <_svfiprintf_r+0x1f4>)
 8010548:	bb1b      	cbnz	r3, 8010592 <_svfiprintf_r+0x1b2>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	3307      	adds	r3, #7
 801054e:	f023 0307 	bic.w	r3, r3, #7
 8010552:	3308      	adds	r3, #8
 8010554:	9303      	str	r3, [sp, #12]
 8010556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010558:	4433      	add	r3, r6
 801055a:	9309      	str	r3, [sp, #36]	; 0x24
 801055c:	e767      	b.n	801042e <_svfiprintf_r+0x4e>
 801055e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010562:	460c      	mov	r4, r1
 8010564:	2001      	movs	r0, #1
 8010566:	e7a5      	b.n	80104b4 <_svfiprintf_r+0xd4>
 8010568:	2300      	movs	r3, #0
 801056a:	3401      	adds	r4, #1
 801056c:	9305      	str	r3, [sp, #20]
 801056e:	4619      	mov	r1, r3
 8010570:	f04f 0c0a 	mov.w	ip, #10
 8010574:	4620      	mov	r0, r4
 8010576:	f810 2b01 	ldrb.w	r2, [r0], #1
 801057a:	3a30      	subs	r2, #48	; 0x30
 801057c:	2a09      	cmp	r2, #9
 801057e:	d903      	bls.n	8010588 <_svfiprintf_r+0x1a8>
 8010580:	2b00      	cmp	r3, #0
 8010582:	d0c5      	beq.n	8010510 <_svfiprintf_r+0x130>
 8010584:	9105      	str	r1, [sp, #20]
 8010586:	e7c3      	b.n	8010510 <_svfiprintf_r+0x130>
 8010588:	fb0c 2101 	mla	r1, ip, r1, r2
 801058c:	4604      	mov	r4, r0
 801058e:	2301      	movs	r3, #1
 8010590:	e7f0      	b.n	8010574 <_svfiprintf_r+0x194>
 8010592:	ab03      	add	r3, sp, #12
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	462a      	mov	r2, r5
 8010598:	4b0f      	ldr	r3, [pc, #60]	; (80105d8 <_svfiprintf_r+0x1f8>)
 801059a:	a904      	add	r1, sp, #16
 801059c:	4638      	mov	r0, r7
 801059e:	f7fc f9cd 	bl	800c93c <_printf_float>
 80105a2:	1c42      	adds	r2, r0, #1
 80105a4:	4606      	mov	r6, r0
 80105a6:	d1d6      	bne.n	8010556 <_svfiprintf_r+0x176>
 80105a8:	89ab      	ldrh	r3, [r5, #12]
 80105aa:	065b      	lsls	r3, r3, #25
 80105ac:	f53f af2c 	bmi.w	8010408 <_svfiprintf_r+0x28>
 80105b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105b2:	b01d      	add	sp, #116	; 0x74
 80105b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b8:	ab03      	add	r3, sp, #12
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	462a      	mov	r2, r5
 80105be:	4b06      	ldr	r3, [pc, #24]	; (80105d8 <_svfiprintf_r+0x1f8>)
 80105c0:	a904      	add	r1, sp, #16
 80105c2:	4638      	mov	r0, r7
 80105c4:	f7fc fc5e 	bl	800ce84 <_printf_i>
 80105c8:	e7eb      	b.n	80105a2 <_svfiprintf_r+0x1c2>
 80105ca:	bf00      	nop
 80105cc:	0801271c 	.word	0x0801271c
 80105d0:	08012726 	.word	0x08012726
 80105d4:	0800c93d 	.word	0x0800c93d
 80105d8:	08010329 	.word	0x08010329
 80105dc:	08012722 	.word	0x08012722

080105e0 <_sungetc_r>:
 80105e0:	b538      	push	{r3, r4, r5, lr}
 80105e2:	1c4b      	adds	r3, r1, #1
 80105e4:	4614      	mov	r4, r2
 80105e6:	d103      	bne.n	80105f0 <_sungetc_r+0x10>
 80105e8:	f04f 35ff 	mov.w	r5, #4294967295
 80105ec:	4628      	mov	r0, r5
 80105ee:	bd38      	pop	{r3, r4, r5, pc}
 80105f0:	8993      	ldrh	r3, [r2, #12]
 80105f2:	f023 0320 	bic.w	r3, r3, #32
 80105f6:	8193      	strh	r3, [r2, #12]
 80105f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105fa:	6852      	ldr	r2, [r2, #4]
 80105fc:	b2cd      	uxtb	r5, r1
 80105fe:	b18b      	cbz	r3, 8010624 <_sungetc_r+0x44>
 8010600:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010602:	4293      	cmp	r3, r2
 8010604:	dd08      	ble.n	8010618 <_sungetc_r+0x38>
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	1e5a      	subs	r2, r3, #1
 801060a:	6022      	str	r2, [r4, #0]
 801060c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	3301      	adds	r3, #1
 8010614:	6063      	str	r3, [r4, #4]
 8010616:	e7e9      	b.n	80105ec <_sungetc_r+0xc>
 8010618:	4621      	mov	r1, r4
 801061a:	f000 fbe1 	bl	8010de0 <__submore>
 801061e:	2800      	cmp	r0, #0
 8010620:	d0f1      	beq.n	8010606 <_sungetc_r+0x26>
 8010622:	e7e1      	b.n	80105e8 <_sungetc_r+0x8>
 8010624:	6921      	ldr	r1, [r4, #16]
 8010626:	6823      	ldr	r3, [r4, #0]
 8010628:	b151      	cbz	r1, 8010640 <_sungetc_r+0x60>
 801062a:	4299      	cmp	r1, r3
 801062c:	d208      	bcs.n	8010640 <_sungetc_r+0x60>
 801062e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010632:	42a9      	cmp	r1, r5
 8010634:	d104      	bne.n	8010640 <_sungetc_r+0x60>
 8010636:	3b01      	subs	r3, #1
 8010638:	3201      	adds	r2, #1
 801063a:	6023      	str	r3, [r4, #0]
 801063c:	6062      	str	r2, [r4, #4]
 801063e:	e7d5      	b.n	80105ec <_sungetc_r+0xc>
 8010640:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010648:	6363      	str	r3, [r4, #52]	; 0x34
 801064a:	2303      	movs	r3, #3
 801064c:	63a3      	str	r3, [r4, #56]	; 0x38
 801064e:	4623      	mov	r3, r4
 8010650:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	2301      	movs	r3, #1
 8010658:	e7dc      	b.n	8010614 <_sungetc_r+0x34>

0801065a <__ssrefill_r>:
 801065a:	b510      	push	{r4, lr}
 801065c:	460c      	mov	r4, r1
 801065e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010660:	b169      	cbz	r1, 801067e <__ssrefill_r+0x24>
 8010662:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010666:	4299      	cmp	r1, r3
 8010668:	d001      	beq.n	801066e <__ssrefill_r+0x14>
 801066a:	f7ff fdb3 	bl	80101d4 <_free_r>
 801066e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010670:	6063      	str	r3, [r4, #4]
 8010672:	2000      	movs	r0, #0
 8010674:	6360      	str	r0, [r4, #52]	; 0x34
 8010676:	b113      	cbz	r3, 801067e <__ssrefill_r+0x24>
 8010678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801067a:	6023      	str	r3, [r4, #0]
 801067c:	bd10      	pop	{r4, pc}
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	6023      	str	r3, [r4, #0]
 8010682:	2300      	movs	r3, #0
 8010684:	6063      	str	r3, [r4, #4]
 8010686:	89a3      	ldrh	r3, [r4, #12]
 8010688:	f043 0320 	orr.w	r3, r3, #32
 801068c:	81a3      	strh	r3, [r4, #12]
 801068e:	f04f 30ff 	mov.w	r0, #4294967295
 8010692:	e7f3      	b.n	801067c <__ssrefill_r+0x22>

08010694 <__ssvfiscanf_r>:
 8010694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010698:	460c      	mov	r4, r1
 801069a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801069e:	2100      	movs	r1, #0
 80106a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80106a4:	49b2      	ldr	r1, [pc, #712]	; (8010970 <__ssvfiscanf_r+0x2dc>)
 80106a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80106a8:	f10d 0804 	add.w	r8, sp, #4
 80106ac:	49b1      	ldr	r1, [pc, #708]	; (8010974 <__ssvfiscanf_r+0x2e0>)
 80106ae:	4fb2      	ldr	r7, [pc, #712]	; (8010978 <__ssvfiscanf_r+0x2e4>)
 80106b0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801097c <__ssvfiscanf_r+0x2e8>
 80106b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80106b8:	4606      	mov	r6, r0
 80106ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	f892 a000 	ldrb.w	sl, [r2]
 80106c2:	f1ba 0f00 	cmp.w	sl, #0
 80106c6:	f000 8151 	beq.w	801096c <__ssvfiscanf_r+0x2d8>
 80106ca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80106ce:	f013 0308 	ands.w	r3, r3, #8
 80106d2:	f102 0501 	add.w	r5, r2, #1
 80106d6:	d019      	beq.n	801070c <__ssvfiscanf_r+0x78>
 80106d8:	6863      	ldr	r3, [r4, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	dd0f      	ble.n	80106fe <__ssvfiscanf_r+0x6a>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	781a      	ldrb	r2, [r3, #0]
 80106e2:	5cba      	ldrb	r2, [r7, r2]
 80106e4:	0712      	lsls	r2, r2, #28
 80106e6:	d401      	bmi.n	80106ec <__ssvfiscanf_r+0x58>
 80106e8:	462a      	mov	r2, r5
 80106ea:	e7e8      	b.n	80106be <__ssvfiscanf_r+0x2a>
 80106ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80106ee:	3201      	adds	r2, #1
 80106f0:	9245      	str	r2, [sp, #276]	; 0x114
 80106f2:	6862      	ldr	r2, [r4, #4]
 80106f4:	3301      	adds	r3, #1
 80106f6:	3a01      	subs	r2, #1
 80106f8:	6062      	str	r2, [r4, #4]
 80106fa:	6023      	str	r3, [r4, #0]
 80106fc:	e7ec      	b.n	80106d8 <__ssvfiscanf_r+0x44>
 80106fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010700:	4621      	mov	r1, r4
 8010702:	4630      	mov	r0, r6
 8010704:	4798      	blx	r3
 8010706:	2800      	cmp	r0, #0
 8010708:	d0e9      	beq.n	80106de <__ssvfiscanf_r+0x4a>
 801070a:	e7ed      	b.n	80106e8 <__ssvfiscanf_r+0x54>
 801070c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8010710:	f040 8083 	bne.w	801081a <__ssvfiscanf_r+0x186>
 8010714:	9341      	str	r3, [sp, #260]	; 0x104
 8010716:	9343      	str	r3, [sp, #268]	; 0x10c
 8010718:	7853      	ldrb	r3, [r2, #1]
 801071a:	2b2a      	cmp	r3, #42	; 0x2a
 801071c:	bf02      	ittt	eq
 801071e:	2310      	moveq	r3, #16
 8010720:	1c95      	addeq	r5, r2, #2
 8010722:	9341      	streq	r3, [sp, #260]	; 0x104
 8010724:	220a      	movs	r2, #10
 8010726:	46ab      	mov	fp, r5
 8010728:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801072c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010730:	2b09      	cmp	r3, #9
 8010732:	d91d      	bls.n	8010770 <__ssvfiscanf_r+0xdc>
 8010734:	4891      	ldr	r0, [pc, #580]	; (801097c <__ssvfiscanf_r+0x2e8>)
 8010736:	2203      	movs	r2, #3
 8010738:	f7ef fd5a 	bl	80001f0 <memchr>
 801073c:	b140      	cbz	r0, 8010750 <__ssvfiscanf_r+0xbc>
 801073e:	2301      	movs	r3, #1
 8010740:	eba0 0009 	sub.w	r0, r0, r9
 8010744:	fa03 f000 	lsl.w	r0, r3, r0
 8010748:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801074a:	4318      	orrs	r0, r3
 801074c:	9041      	str	r0, [sp, #260]	; 0x104
 801074e:	465d      	mov	r5, fp
 8010750:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010754:	2b78      	cmp	r3, #120	; 0x78
 8010756:	d806      	bhi.n	8010766 <__ssvfiscanf_r+0xd2>
 8010758:	2b57      	cmp	r3, #87	; 0x57
 801075a:	d810      	bhi.n	801077e <__ssvfiscanf_r+0xea>
 801075c:	2b25      	cmp	r3, #37	; 0x25
 801075e:	d05c      	beq.n	801081a <__ssvfiscanf_r+0x186>
 8010760:	d856      	bhi.n	8010810 <__ssvfiscanf_r+0x17c>
 8010762:	2b00      	cmp	r3, #0
 8010764:	d074      	beq.n	8010850 <__ssvfiscanf_r+0x1bc>
 8010766:	2303      	movs	r3, #3
 8010768:	9347      	str	r3, [sp, #284]	; 0x11c
 801076a:	230a      	movs	r3, #10
 801076c:	9342      	str	r3, [sp, #264]	; 0x108
 801076e:	e081      	b.n	8010874 <__ssvfiscanf_r+0x1e0>
 8010770:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010772:	fb02 1303 	mla	r3, r2, r3, r1
 8010776:	3b30      	subs	r3, #48	; 0x30
 8010778:	9343      	str	r3, [sp, #268]	; 0x10c
 801077a:	465d      	mov	r5, fp
 801077c:	e7d3      	b.n	8010726 <__ssvfiscanf_r+0x92>
 801077e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010782:	2a20      	cmp	r2, #32
 8010784:	d8ef      	bhi.n	8010766 <__ssvfiscanf_r+0xd2>
 8010786:	a101      	add	r1, pc, #4	; (adr r1, 801078c <__ssvfiscanf_r+0xf8>)
 8010788:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801078c:	0801085f 	.word	0x0801085f
 8010790:	08010767 	.word	0x08010767
 8010794:	08010767 	.word	0x08010767
 8010798:	080108bd 	.word	0x080108bd
 801079c:	08010767 	.word	0x08010767
 80107a0:	08010767 	.word	0x08010767
 80107a4:	08010767 	.word	0x08010767
 80107a8:	08010767 	.word	0x08010767
 80107ac:	08010767 	.word	0x08010767
 80107b0:	08010767 	.word	0x08010767
 80107b4:	08010767 	.word	0x08010767
 80107b8:	080108d3 	.word	0x080108d3
 80107bc:	080108a9 	.word	0x080108a9
 80107c0:	08010817 	.word	0x08010817
 80107c4:	08010817 	.word	0x08010817
 80107c8:	08010817 	.word	0x08010817
 80107cc:	08010767 	.word	0x08010767
 80107d0:	080108ad 	.word	0x080108ad
 80107d4:	08010767 	.word	0x08010767
 80107d8:	08010767 	.word	0x08010767
 80107dc:	08010767 	.word	0x08010767
 80107e0:	08010767 	.word	0x08010767
 80107e4:	080108e3 	.word	0x080108e3
 80107e8:	080108b5 	.word	0x080108b5
 80107ec:	08010857 	.word	0x08010857
 80107f0:	08010767 	.word	0x08010767
 80107f4:	08010767 	.word	0x08010767
 80107f8:	080108df 	.word	0x080108df
 80107fc:	08010767 	.word	0x08010767
 8010800:	080108a9 	.word	0x080108a9
 8010804:	08010767 	.word	0x08010767
 8010808:	08010767 	.word	0x08010767
 801080c:	0801085f 	.word	0x0801085f
 8010810:	3b45      	subs	r3, #69	; 0x45
 8010812:	2b02      	cmp	r3, #2
 8010814:	d8a7      	bhi.n	8010766 <__ssvfiscanf_r+0xd2>
 8010816:	2305      	movs	r3, #5
 8010818:	e02b      	b.n	8010872 <__ssvfiscanf_r+0x1de>
 801081a:	6863      	ldr	r3, [r4, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	dd0d      	ble.n	801083c <__ssvfiscanf_r+0x1a8>
 8010820:	6823      	ldr	r3, [r4, #0]
 8010822:	781a      	ldrb	r2, [r3, #0]
 8010824:	4552      	cmp	r2, sl
 8010826:	f040 80a1 	bne.w	801096c <__ssvfiscanf_r+0x2d8>
 801082a:	3301      	adds	r3, #1
 801082c:	6862      	ldr	r2, [r4, #4]
 801082e:	6023      	str	r3, [r4, #0]
 8010830:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010832:	3a01      	subs	r2, #1
 8010834:	3301      	adds	r3, #1
 8010836:	6062      	str	r2, [r4, #4]
 8010838:	9345      	str	r3, [sp, #276]	; 0x114
 801083a:	e755      	b.n	80106e8 <__ssvfiscanf_r+0x54>
 801083c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801083e:	4621      	mov	r1, r4
 8010840:	4630      	mov	r0, r6
 8010842:	4798      	blx	r3
 8010844:	2800      	cmp	r0, #0
 8010846:	d0eb      	beq.n	8010820 <__ssvfiscanf_r+0x18c>
 8010848:	9844      	ldr	r0, [sp, #272]	; 0x110
 801084a:	2800      	cmp	r0, #0
 801084c:	f040 8084 	bne.w	8010958 <__ssvfiscanf_r+0x2c4>
 8010850:	f04f 30ff 	mov.w	r0, #4294967295
 8010854:	e086      	b.n	8010964 <__ssvfiscanf_r+0x2d0>
 8010856:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010858:	f042 0220 	orr.w	r2, r2, #32
 801085c:	9241      	str	r2, [sp, #260]	; 0x104
 801085e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010864:	9241      	str	r2, [sp, #260]	; 0x104
 8010866:	2210      	movs	r2, #16
 8010868:	2b6f      	cmp	r3, #111	; 0x6f
 801086a:	9242      	str	r2, [sp, #264]	; 0x108
 801086c:	bf34      	ite	cc
 801086e:	2303      	movcc	r3, #3
 8010870:	2304      	movcs	r3, #4
 8010872:	9347      	str	r3, [sp, #284]	; 0x11c
 8010874:	6863      	ldr	r3, [r4, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	dd41      	ble.n	80108fe <__ssvfiscanf_r+0x26a>
 801087a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801087c:	0659      	lsls	r1, r3, #25
 801087e:	d404      	bmi.n	801088a <__ssvfiscanf_r+0x1f6>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	781a      	ldrb	r2, [r3, #0]
 8010884:	5cba      	ldrb	r2, [r7, r2]
 8010886:	0712      	lsls	r2, r2, #28
 8010888:	d440      	bmi.n	801090c <__ssvfiscanf_r+0x278>
 801088a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801088c:	2b02      	cmp	r3, #2
 801088e:	dc4f      	bgt.n	8010930 <__ssvfiscanf_r+0x29c>
 8010890:	466b      	mov	r3, sp
 8010892:	4622      	mov	r2, r4
 8010894:	a941      	add	r1, sp, #260	; 0x104
 8010896:	4630      	mov	r0, r6
 8010898:	f000 f874 	bl	8010984 <_scanf_chars>
 801089c:	2801      	cmp	r0, #1
 801089e:	d065      	beq.n	801096c <__ssvfiscanf_r+0x2d8>
 80108a0:	2802      	cmp	r0, #2
 80108a2:	f47f af21 	bne.w	80106e8 <__ssvfiscanf_r+0x54>
 80108a6:	e7cf      	b.n	8010848 <__ssvfiscanf_r+0x1b4>
 80108a8:	220a      	movs	r2, #10
 80108aa:	e7dd      	b.n	8010868 <__ssvfiscanf_r+0x1d4>
 80108ac:	2300      	movs	r3, #0
 80108ae:	9342      	str	r3, [sp, #264]	; 0x108
 80108b0:	2303      	movs	r3, #3
 80108b2:	e7de      	b.n	8010872 <__ssvfiscanf_r+0x1de>
 80108b4:	2308      	movs	r3, #8
 80108b6:	9342      	str	r3, [sp, #264]	; 0x108
 80108b8:	2304      	movs	r3, #4
 80108ba:	e7da      	b.n	8010872 <__ssvfiscanf_r+0x1de>
 80108bc:	4629      	mov	r1, r5
 80108be:	4640      	mov	r0, r8
 80108c0:	f000 f9d6 	bl	8010c70 <__sccl>
 80108c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80108c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ca:	9341      	str	r3, [sp, #260]	; 0x104
 80108cc:	4605      	mov	r5, r0
 80108ce:	2301      	movs	r3, #1
 80108d0:	e7cf      	b.n	8010872 <__ssvfiscanf_r+0x1de>
 80108d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80108d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108d8:	9341      	str	r3, [sp, #260]	; 0x104
 80108da:	2300      	movs	r3, #0
 80108dc:	e7c9      	b.n	8010872 <__ssvfiscanf_r+0x1de>
 80108de:	2302      	movs	r3, #2
 80108e0:	e7c7      	b.n	8010872 <__ssvfiscanf_r+0x1de>
 80108e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80108e4:	06c3      	lsls	r3, r0, #27
 80108e6:	f53f aeff 	bmi.w	80106e8 <__ssvfiscanf_r+0x54>
 80108ea:	9b00      	ldr	r3, [sp, #0]
 80108ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80108ee:	1d19      	adds	r1, r3, #4
 80108f0:	9100      	str	r1, [sp, #0]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	07c0      	lsls	r0, r0, #31
 80108f6:	bf4c      	ite	mi
 80108f8:	801a      	strhmi	r2, [r3, #0]
 80108fa:	601a      	strpl	r2, [r3, #0]
 80108fc:	e6f4      	b.n	80106e8 <__ssvfiscanf_r+0x54>
 80108fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010900:	4621      	mov	r1, r4
 8010902:	4630      	mov	r0, r6
 8010904:	4798      	blx	r3
 8010906:	2800      	cmp	r0, #0
 8010908:	d0b7      	beq.n	801087a <__ssvfiscanf_r+0x1e6>
 801090a:	e79d      	b.n	8010848 <__ssvfiscanf_r+0x1b4>
 801090c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801090e:	3201      	adds	r2, #1
 8010910:	9245      	str	r2, [sp, #276]	; 0x114
 8010912:	6862      	ldr	r2, [r4, #4]
 8010914:	3a01      	subs	r2, #1
 8010916:	2a00      	cmp	r2, #0
 8010918:	6062      	str	r2, [r4, #4]
 801091a:	dd02      	ble.n	8010922 <__ssvfiscanf_r+0x28e>
 801091c:	3301      	adds	r3, #1
 801091e:	6023      	str	r3, [r4, #0]
 8010920:	e7ae      	b.n	8010880 <__ssvfiscanf_r+0x1ec>
 8010922:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010924:	4621      	mov	r1, r4
 8010926:	4630      	mov	r0, r6
 8010928:	4798      	blx	r3
 801092a:	2800      	cmp	r0, #0
 801092c:	d0a8      	beq.n	8010880 <__ssvfiscanf_r+0x1ec>
 801092e:	e78b      	b.n	8010848 <__ssvfiscanf_r+0x1b4>
 8010930:	2b04      	cmp	r3, #4
 8010932:	dc06      	bgt.n	8010942 <__ssvfiscanf_r+0x2ae>
 8010934:	466b      	mov	r3, sp
 8010936:	4622      	mov	r2, r4
 8010938:	a941      	add	r1, sp, #260	; 0x104
 801093a:	4630      	mov	r0, r6
 801093c:	f000 f87a 	bl	8010a34 <_scanf_i>
 8010940:	e7ac      	b.n	801089c <__ssvfiscanf_r+0x208>
 8010942:	4b0f      	ldr	r3, [pc, #60]	; (8010980 <__ssvfiscanf_r+0x2ec>)
 8010944:	2b00      	cmp	r3, #0
 8010946:	f43f aecf 	beq.w	80106e8 <__ssvfiscanf_r+0x54>
 801094a:	466b      	mov	r3, sp
 801094c:	4622      	mov	r2, r4
 801094e:	a941      	add	r1, sp, #260	; 0x104
 8010950:	4630      	mov	r0, r6
 8010952:	f7fc fbbd 	bl	800d0d0 <_scanf_float>
 8010956:	e7a1      	b.n	801089c <__ssvfiscanf_r+0x208>
 8010958:	89a3      	ldrh	r3, [r4, #12]
 801095a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801095e:	bf18      	it	ne
 8010960:	f04f 30ff 	movne.w	r0, #4294967295
 8010964:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8010968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801096e:	e7f9      	b.n	8010964 <__ssvfiscanf_r+0x2d0>
 8010970:	080105e1 	.word	0x080105e1
 8010974:	0801065b 	.word	0x0801065b
 8010978:	080123a9 	.word	0x080123a9
 801097c:	08012722 	.word	0x08012722
 8010980:	0800d0d1 	.word	0x0800d0d1

08010984 <_scanf_chars>:
 8010984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010988:	4615      	mov	r5, r2
 801098a:	688a      	ldr	r2, [r1, #8]
 801098c:	4680      	mov	r8, r0
 801098e:	460c      	mov	r4, r1
 8010990:	b932      	cbnz	r2, 80109a0 <_scanf_chars+0x1c>
 8010992:	698a      	ldr	r2, [r1, #24]
 8010994:	2a00      	cmp	r2, #0
 8010996:	bf0c      	ite	eq
 8010998:	2201      	moveq	r2, #1
 801099a:	f04f 32ff 	movne.w	r2, #4294967295
 801099e:	608a      	str	r2, [r1, #8]
 80109a0:	6822      	ldr	r2, [r4, #0]
 80109a2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010a30 <_scanf_chars+0xac>
 80109a6:	06d1      	lsls	r1, r2, #27
 80109a8:	bf5f      	itttt	pl
 80109aa:	681a      	ldrpl	r2, [r3, #0]
 80109ac:	1d11      	addpl	r1, r2, #4
 80109ae:	6019      	strpl	r1, [r3, #0]
 80109b0:	6816      	ldrpl	r6, [r2, #0]
 80109b2:	2700      	movs	r7, #0
 80109b4:	69a0      	ldr	r0, [r4, #24]
 80109b6:	b188      	cbz	r0, 80109dc <_scanf_chars+0x58>
 80109b8:	2801      	cmp	r0, #1
 80109ba:	d107      	bne.n	80109cc <_scanf_chars+0x48>
 80109bc:	682b      	ldr	r3, [r5, #0]
 80109be:	781a      	ldrb	r2, [r3, #0]
 80109c0:	6963      	ldr	r3, [r4, #20]
 80109c2:	5c9b      	ldrb	r3, [r3, r2]
 80109c4:	b953      	cbnz	r3, 80109dc <_scanf_chars+0x58>
 80109c6:	bb27      	cbnz	r7, 8010a12 <_scanf_chars+0x8e>
 80109c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109cc:	2802      	cmp	r0, #2
 80109ce:	d120      	bne.n	8010a12 <_scanf_chars+0x8e>
 80109d0:	682b      	ldr	r3, [r5, #0]
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80109d8:	071b      	lsls	r3, r3, #28
 80109da:	d41a      	bmi.n	8010a12 <_scanf_chars+0x8e>
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	06da      	lsls	r2, r3, #27
 80109e0:	bf5e      	ittt	pl
 80109e2:	682b      	ldrpl	r3, [r5, #0]
 80109e4:	781b      	ldrbpl	r3, [r3, #0]
 80109e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80109ea:	682a      	ldr	r2, [r5, #0]
 80109ec:	686b      	ldr	r3, [r5, #4]
 80109ee:	3201      	adds	r2, #1
 80109f0:	602a      	str	r2, [r5, #0]
 80109f2:	68a2      	ldr	r2, [r4, #8]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	3a01      	subs	r2, #1
 80109f8:	606b      	str	r3, [r5, #4]
 80109fa:	3701      	adds	r7, #1
 80109fc:	60a2      	str	r2, [r4, #8]
 80109fe:	b142      	cbz	r2, 8010a12 <_scanf_chars+0x8e>
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	dcd7      	bgt.n	80109b4 <_scanf_chars+0x30>
 8010a04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4640      	mov	r0, r8
 8010a0c:	4798      	blx	r3
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d0d0      	beq.n	80109b4 <_scanf_chars+0x30>
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	f013 0310 	ands.w	r3, r3, #16
 8010a18:	d105      	bne.n	8010a26 <_scanf_chars+0xa2>
 8010a1a:	68e2      	ldr	r2, [r4, #12]
 8010a1c:	3201      	adds	r2, #1
 8010a1e:	60e2      	str	r2, [r4, #12]
 8010a20:	69a2      	ldr	r2, [r4, #24]
 8010a22:	b102      	cbz	r2, 8010a26 <_scanf_chars+0xa2>
 8010a24:	7033      	strb	r3, [r6, #0]
 8010a26:	6923      	ldr	r3, [r4, #16]
 8010a28:	441f      	add	r7, r3
 8010a2a:	6127      	str	r7, [r4, #16]
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	e7cb      	b.n	80109c8 <_scanf_chars+0x44>
 8010a30:	080123a9 	.word	0x080123a9

08010a34 <_scanf_i>:
 8010a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a38:	4698      	mov	r8, r3
 8010a3a:	4b74      	ldr	r3, [pc, #464]	; (8010c0c <_scanf_i+0x1d8>)
 8010a3c:	460c      	mov	r4, r1
 8010a3e:	4682      	mov	sl, r0
 8010a40:	4616      	mov	r6, r2
 8010a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010a46:	b087      	sub	sp, #28
 8010a48:	ab03      	add	r3, sp, #12
 8010a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010a4e:	4b70      	ldr	r3, [pc, #448]	; (8010c10 <_scanf_i+0x1dc>)
 8010a50:	69a1      	ldr	r1, [r4, #24]
 8010a52:	4a70      	ldr	r2, [pc, #448]	; (8010c14 <_scanf_i+0x1e0>)
 8010a54:	2903      	cmp	r1, #3
 8010a56:	bf18      	it	ne
 8010a58:	461a      	movne	r2, r3
 8010a5a:	68a3      	ldr	r3, [r4, #8]
 8010a5c:	9201      	str	r2, [sp, #4]
 8010a5e:	1e5a      	subs	r2, r3, #1
 8010a60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010a64:	bf88      	it	hi
 8010a66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010a6a:	4627      	mov	r7, r4
 8010a6c:	bf82      	ittt	hi
 8010a6e:	eb03 0905 	addhi.w	r9, r3, r5
 8010a72:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010a76:	60a3      	strhi	r3, [r4, #8]
 8010a78:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010a7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010a80:	bf98      	it	ls
 8010a82:	f04f 0900 	movls.w	r9, #0
 8010a86:	6023      	str	r3, [r4, #0]
 8010a88:	463d      	mov	r5, r7
 8010a8a:	f04f 0b00 	mov.w	fp, #0
 8010a8e:	6831      	ldr	r1, [r6, #0]
 8010a90:	ab03      	add	r3, sp, #12
 8010a92:	7809      	ldrb	r1, [r1, #0]
 8010a94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010a98:	2202      	movs	r2, #2
 8010a9a:	f7ef fba9 	bl	80001f0 <memchr>
 8010a9e:	b328      	cbz	r0, 8010aec <_scanf_i+0xb8>
 8010aa0:	f1bb 0f01 	cmp.w	fp, #1
 8010aa4:	d159      	bne.n	8010b5a <_scanf_i+0x126>
 8010aa6:	6862      	ldr	r2, [r4, #4]
 8010aa8:	b92a      	cbnz	r2, 8010ab6 <_scanf_i+0x82>
 8010aaa:	6822      	ldr	r2, [r4, #0]
 8010aac:	2308      	movs	r3, #8
 8010aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010ab2:	6063      	str	r3, [r4, #4]
 8010ab4:	6022      	str	r2, [r4, #0]
 8010ab6:	6822      	ldr	r2, [r4, #0]
 8010ab8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010abc:	6022      	str	r2, [r4, #0]
 8010abe:	68a2      	ldr	r2, [r4, #8]
 8010ac0:	1e51      	subs	r1, r2, #1
 8010ac2:	60a1      	str	r1, [r4, #8]
 8010ac4:	b192      	cbz	r2, 8010aec <_scanf_i+0xb8>
 8010ac6:	6832      	ldr	r2, [r6, #0]
 8010ac8:	1c51      	adds	r1, r2, #1
 8010aca:	6031      	str	r1, [r6, #0]
 8010acc:	7812      	ldrb	r2, [r2, #0]
 8010ace:	f805 2b01 	strb.w	r2, [r5], #1
 8010ad2:	6872      	ldr	r2, [r6, #4]
 8010ad4:	3a01      	subs	r2, #1
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	6072      	str	r2, [r6, #4]
 8010ada:	dc07      	bgt.n	8010aec <_scanf_i+0xb8>
 8010adc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010ae0:	4631      	mov	r1, r6
 8010ae2:	4650      	mov	r0, sl
 8010ae4:	4790      	blx	r2
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f040 8085 	bne.w	8010bf6 <_scanf_i+0x1c2>
 8010aec:	f10b 0b01 	add.w	fp, fp, #1
 8010af0:	f1bb 0f03 	cmp.w	fp, #3
 8010af4:	d1cb      	bne.n	8010a8e <_scanf_i+0x5a>
 8010af6:	6863      	ldr	r3, [r4, #4]
 8010af8:	b90b      	cbnz	r3, 8010afe <_scanf_i+0xca>
 8010afa:	230a      	movs	r3, #10
 8010afc:	6063      	str	r3, [r4, #4]
 8010afe:	6863      	ldr	r3, [r4, #4]
 8010b00:	4945      	ldr	r1, [pc, #276]	; (8010c18 <_scanf_i+0x1e4>)
 8010b02:	6960      	ldr	r0, [r4, #20]
 8010b04:	1ac9      	subs	r1, r1, r3
 8010b06:	f000 f8b3 	bl	8010c70 <__sccl>
 8010b0a:	f04f 0b00 	mov.w	fp, #0
 8010b0e:	68a3      	ldr	r3, [r4, #8]
 8010b10:	6822      	ldr	r2, [r4, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d03d      	beq.n	8010b92 <_scanf_i+0x15e>
 8010b16:	6831      	ldr	r1, [r6, #0]
 8010b18:	6960      	ldr	r0, [r4, #20]
 8010b1a:	f891 c000 	ldrb.w	ip, [r1]
 8010b1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d035      	beq.n	8010b92 <_scanf_i+0x15e>
 8010b26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010b2a:	d124      	bne.n	8010b76 <_scanf_i+0x142>
 8010b2c:	0510      	lsls	r0, r2, #20
 8010b2e:	d522      	bpl.n	8010b76 <_scanf_i+0x142>
 8010b30:	f10b 0b01 	add.w	fp, fp, #1
 8010b34:	f1b9 0f00 	cmp.w	r9, #0
 8010b38:	d003      	beq.n	8010b42 <_scanf_i+0x10e>
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010b40:	60a3      	str	r3, [r4, #8]
 8010b42:	6873      	ldr	r3, [r6, #4]
 8010b44:	3b01      	subs	r3, #1
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	6073      	str	r3, [r6, #4]
 8010b4a:	dd1b      	ble.n	8010b84 <_scanf_i+0x150>
 8010b4c:	6833      	ldr	r3, [r6, #0]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	6033      	str	r3, [r6, #0]
 8010b52:	68a3      	ldr	r3, [r4, #8]
 8010b54:	3b01      	subs	r3, #1
 8010b56:	60a3      	str	r3, [r4, #8]
 8010b58:	e7d9      	b.n	8010b0e <_scanf_i+0xda>
 8010b5a:	f1bb 0f02 	cmp.w	fp, #2
 8010b5e:	d1ae      	bne.n	8010abe <_scanf_i+0x8a>
 8010b60:	6822      	ldr	r2, [r4, #0]
 8010b62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010b66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010b6a:	d1bf      	bne.n	8010aec <_scanf_i+0xb8>
 8010b6c:	2310      	movs	r3, #16
 8010b6e:	6063      	str	r3, [r4, #4]
 8010b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010b74:	e7a2      	b.n	8010abc <_scanf_i+0x88>
 8010b76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010b7a:	6022      	str	r2, [r4, #0]
 8010b7c:	780b      	ldrb	r3, [r1, #0]
 8010b7e:	f805 3b01 	strb.w	r3, [r5], #1
 8010b82:	e7de      	b.n	8010b42 <_scanf_i+0x10e>
 8010b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010b88:	4631      	mov	r1, r6
 8010b8a:	4650      	mov	r0, sl
 8010b8c:	4798      	blx	r3
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	d0df      	beq.n	8010b52 <_scanf_i+0x11e>
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	05d9      	lsls	r1, r3, #23
 8010b96:	d50d      	bpl.n	8010bb4 <_scanf_i+0x180>
 8010b98:	42bd      	cmp	r5, r7
 8010b9a:	d909      	bls.n	8010bb0 <_scanf_i+0x17c>
 8010b9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010ba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	4650      	mov	r0, sl
 8010ba8:	4798      	blx	r3
 8010baa:	f105 39ff 	add.w	r9, r5, #4294967295
 8010bae:	464d      	mov	r5, r9
 8010bb0:	42bd      	cmp	r5, r7
 8010bb2:	d028      	beq.n	8010c06 <_scanf_i+0x1d2>
 8010bb4:	6822      	ldr	r2, [r4, #0]
 8010bb6:	f012 0210 	ands.w	r2, r2, #16
 8010bba:	d113      	bne.n	8010be4 <_scanf_i+0x1b0>
 8010bbc:	702a      	strb	r2, [r5, #0]
 8010bbe:	6863      	ldr	r3, [r4, #4]
 8010bc0:	9e01      	ldr	r6, [sp, #4]
 8010bc2:	4639      	mov	r1, r7
 8010bc4:	4650      	mov	r0, sl
 8010bc6:	47b0      	blx	r6
 8010bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8010bcc:	6821      	ldr	r1, [r4, #0]
 8010bce:	1d1a      	adds	r2, r3, #4
 8010bd0:	f8c8 2000 	str.w	r2, [r8]
 8010bd4:	f011 0f20 	tst.w	r1, #32
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	d00f      	beq.n	8010bfc <_scanf_i+0x1c8>
 8010bdc:	6018      	str	r0, [r3, #0]
 8010bde:	68e3      	ldr	r3, [r4, #12]
 8010be0:	3301      	adds	r3, #1
 8010be2:	60e3      	str	r3, [r4, #12]
 8010be4:	1bed      	subs	r5, r5, r7
 8010be6:	44ab      	add	fp, r5
 8010be8:	6925      	ldr	r5, [r4, #16]
 8010bea:	445d      	add	r5, fp
 8010bec:	6125      	str	r5, [r4, #16]
 8010bee:	2000      	movs	r0, #0
 8010bf0:	b007      	add	sp, #28
 8010bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf6:	f04f 0b00 	mov.w	fp, #0
 8010bfa:	e7ca      	b.n	8010b92 <_scanf_i+0x15e>
 8010bfc:	07ca      	lsls	r2, r1, #31
 8010bfe:	bf4c      	ite	mi
 8010c00:	8018      	strhmi	r0, [r3, #0]
 8010c02:	6018      	strpl	r0, [r3, #0]
 8010c04:	e7eb      	b.n	8010bde <_scanf_i+0x1aa>
 8010c06:	2001      	movs	r0, #1
 8010c08:	e7f2      	b.n	8010bf0 <_scanf_i+0x1bc>
 8010c0a:	bf00      	nop
 8010c0c:	08011ab4 	.word	0x08011ab4
 8010c10:	08010ddd 	.word	0x08010ddd
 8010c14:	0800e3c9 	.word	0x0800e3c9
 8010c18:	08012746 	.word	0x08012746

08010c1c <_read_r>:
 8010c1c:	b538      	push	{r3, r4, r5, lr}
 8010c1e:	4d07      	ldr	r5, [pc, #28]	; (8010c3c <_read_r+0x20>)
 8010c20:	4604      	mov	r4, r0
 8010c22:	4608      	mov	r0, r1
 8010c24:	4611      	mov	r1, r2
 8010c26:	2200      	movs	r2, #0
 8010c28:	602a      	str	r2, [r5, #0]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	f7f1 fc64 	bl	80024f8 <_read>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d102      	bne.n	8010c3a <_read_r+0x1e>
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	b103      	cbz	r3, 8010c3a <_read_r+0x1e>
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	20005888 	.word	0x20005888

08010c40 <nan>:
 8010c40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010c48 <nan+0x8>
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	00000000 	.word	0x00000000
 8010c4c:	7ff80000 	.word	0x7ff80000

08010c50 <_sbrk_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	4d06      	ldr	r5, [pc, #24]	; (8010c6c <_sbrk_r+0x1c>)
 8010c54:	2300      	movs	r3, #0
 8010c56:	4604      	mov	r4, r0
 8010c58:	4608      	mov	r0, r1
 8010c5a:	602b      	str	r3, [r5, #0]
 8010c5c:	f7f1 fcba 	bl	80025d4 <_sbrk>
 8010c60:	1c43      	adds	r3, r0, #1
 8010c62:	d102      	bne.n	8010c6a <_sbrk_r+0x1a>
 8010c64:	682b      	ldr	r3, [r5, #0]
 8010c66:	b103      	cbz	r3, 8010c6a <_sbrk_r+0x1a>
 8010c68:	6023      	str	r3, [r4, #0]
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}
 8010c6c:	20005888 	.word	0x20005888

08010c70 <__sccl>:
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	780b      	ldrb	r3, [r1, #0]
 8010c74:	4604      	mov	r4, r0
 8010c76:	2b5e      	cmp	r3, #94	; 0x5e
 8010c78:	bf0b      	itete	eq
 8010c7a:	784b      	ldrbeq	r3, [r1, #1]
 8010c7c:	1c48      	addne	r0, r1, #1
 8010c7e:	1c88      	addeq	r0, r1, #2
 8010c80:	2200      	movne	r2, #0
 8010c82:	bf08      	it	eq
 8010c84:	2201      	moveq	r2, #1
 8010c86:	1e61      	subs	r1, r4, #1
 8010c88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010c8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010c90:	42a9      	cmp	r1, r5
 8010c92:	d1fb      	bne.n	8010c8c <__sccl+0x1c>
 8010c94:	b90b      	cbnz	r3, 8010c9a <__sccl+0x2a>
 8010c96:	3801      	subs	r0, #1
 8010c98:	bd70      	pop	{r4, r5, r6, pc}
 8010c9a:	f082 0101 	eor.w	r1, r2, #1
 8010c9e:	54e1      	strb	r1, [r4, r3]
 8010ca0:	1c42      	adds	r2, r0, #1
 8010ca2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8010ca6:	2d2d      	cmp	r5, #45	; 0x2d
 8010ca8:	f102 36ff 	add.w	r6, r2, #4294967295
 8010cac:	4610      	mov	r0, r2
 8010cae:	d006      	beq.n	8010cbe <__sccl+0x4e>
 8010cb0:	2d5d      	cmp	r5, #93	; 0x5d
 8010cb2:	d0f1      	beq.n	8010c98 <__sccl+0x28>
 8010cb4:	b90d      	cbnz	r5, 8010cba <__sccl+0x4a>
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	e7ee      	b.n	8010c98 <__sccl+0x28>
 8010cba:	462b      	mov	r3, r5
 8010cbc:	e7ef      	b.n	8010c9e <__sccl+0x2e>
 8010cbe:	7816      	ldrb	r6, [r2, #0]
 8010cc0:	2e5d      	cmp	r6, #93	; 0x5d
 8010cc2:	d0fa      	beq.n	8010cba <__sccl+0x4a>
 8010cc4:	42b3      	cmp	r3, r6
 8010cc6:	dcf8      	bgt.n	8010cba <__sccl+0x4a>
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3001      	adds	r0, #1
 8010ccc:	4286      	cmp	r6, r0
 8010cce:	5421      	strb	r1, [r4, r0]
 8010cd0:	dcfb      	bgt.n	8010cca <__sccl+0x5a>
 8010cd2:	43d8      	mvns	r0, r3
 8010cd4:	4430      	add	r0, r6
 8010cd6:	1c5d      	adds	r5, r3, #1
 8010cd8:	42b3      	cmp	r3, r6
 8010cda:	bfa8      	it	ge
 8010cdc:	2000      	movge	r0, #0
 8010cde:	182b      	adds	r3, r5, r0
 8010ce0:	3202      	adds	r2, #2
 8010ce2:	e7de      	b.n	8010ca2 <__sccl+0x32>

08010ce4 <_strtoul_l.isra.0>:
 8010ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ce8:	4e3b      	ldr	r6, [pc, #236]	; (8010dd8 <_strtoul_l.isra.0+0xf4>)
 8010cea:	4686      	mov	lr, r0
 8010cec:	468c      	mov	ip, r1
 8010cee:	4660      	mov	r0, ip
 8010cf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010cf4:	5da5      	ldrb	r5, [r4, r6]
 8010cf6:	f015 0508 	ands.w	r5, r5, #8
 8010cfa:	d1f8      	bne.n	8010cee <_strtoul_l.isra.0+0xa>
 8010cfc:	2c2d      	cmp	r4, #45	; 0x2d
 8010cfe:	d134      	bne.n	8010d6a <_strtoul_l.isra.0+0x86>
 8010d00:	f89c 4000 	ldrb.w	r4, [ip]
 8010d04:	f04f 0801 	mov.w	r8, #1
 8010d08:	f100 0c02 	add.w	ip, r0, #2
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d05e      	beq.n	8010dce <_strtoul_l.isra.0+0xea>
 8010d10:	2b10      	cmp	r3, #16
 8010d12:	d10c      	bne.n	8010d2e <_strtoul_l.isra.0+0x4a>
 8010d14:	2c30      	cmp	r4, #48	; 0x30
 8010d16:	d10a      	bne.n	8010d2e <_strtoul_l.isra.0+0x4a>
 8010d18:	f89c 0000 	ldrb.w	r0, [ip]
 8010d1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010d20:	2858      	cmp	r0, #88	; 0x58
 8010d22:	d14f      	bne.n	8010dc4 <_strtoul_l.isra.0+0xe0>
 8010d24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010d28:	2310      	movs	r3, #16
 8010d2a:	f10c 0c02 	add.w	ip, ip, #2
 8010d2e:	f04f 37ff 	mov.w	r7, #4294967295
 8010d32:	2500      	movs	r5, #0
 8010d34:	fbb7 f7f3 	udiv	r7, r7, r3
 8010d38:	fb03 f907 	mul.w	r9, r3, r7
 8010d3c:	ea6f 0909 	mvn.w	r9, r9
 8010d40:	4628      	mov	r0, r5
 8010d42:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8010d46:	2e09      	cmp	r6, #9
 8010d48:	d818      	bhi.n	8010d7c <_strtoul_l.isra.0+0x98>
 8010d4a:	4634      	mov	r4, r6
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	dd24      	ble.n	8010d9a <_strtoul_l.isra.0+0xb6>
 8010d50:	2d00      	cmp	r5, #0
 8010d52:	db1f      	blt.n	8010d94 <_strtoul_l.isra.0+0xb0>
 8010d54:	4287      	cmp	r7, r0
 8010d56:	d31d      	bcc.n	8010d94 <_strtoul_l.isra.0+0xb0>
 8010d58:	d101      	bne.n	8010d5e <_strtoul_l.isra.0+0x7a>
 8010d5a:	45a1      	cmp	r9, r4
 8010d5c:	db1a      	blt.n	8010d94 <_strtoul_l.isra.0+0xb0>
 8010d5e:	fb00 4003 	mla	r0, r0, r3, r4
 8010d62:	2501      	movs	r5, #1
 8010d64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010d68:	e7eb      	b.n	8010d42 <_strtoul_l.isra.0+0x5e>
 8010d6a:	2c2b      	cmp	r4, #43	; 0x2b
 8010d6c:	bf08      	it	eq
 8010d6e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8010d72:	46a8      	mov	r8, r5
 8010d74:	bf08      	it	eq
 8010d76:	f100 0c02 	addeq.w	ip, r0, #2
 8010d7a:	e7c7      	b.n	8010d0c <_strtoul_l.isra.0+0x28>
 8010d7c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8010d80:	2e19      	cmp	r6, #25
 8010d82:	d801      	bhi.n	8010d88 <_strtoul_l.isra.0+0xa4>
 8010d84:	3c37      	subs	r4, #55	; 0x37
 8010d86:	e7e1      	b.n	8010d4c <_strtoul_l.isra.0+0x68>
 8010d88:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8010d8c:	2e19      	cmp	r6, #25
 8010d8e:	d804      	bhi.n	8010d9a <_strtoul_l.isra.0+0xb6>
 8010d90:	3c57      	subs	r4, #87	; 0x57
 8010d92:	e7db      	b.n	8010d4c <_strtoul_l.isra.0+0x68>
 8010d94:	f04f 35ff 	mov.w	r5, #4294967295
 8010d98:	e7e4      	b.n	8010d64 <_strtoul_l.isra.0+0x80>
 8010d9a:	2d00      	cmp	r5, #0
 8010d9c:	da07      	bge.n	8010dae <_strtoul_l.isra.0+0xca>
 8010d9e:	2322      	movs	r3, #34	; 0x22
 8010da0:	f8ce 3000 	str.w	r3, [lr]
 8010da4:	f04f 30ff 	mov.w	r0, #4294967295
 8010da8:	b942      	cbnz	r2, 8010dbc <_strtoul_l.isra.0+0xd8>
 8010daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dae:	f1b8 0f00 	cmp.w	r8, #0
 8010db2:	d000      	beq.n	8010db6 <_strtoul_l.isra.0+0xd2>
 8010db4:	4240      	negs	r0, r0
 8010db6:	2a00      	cmp	r2, #0
 8010db8:	d0f7      	beq.n	8010daa <_strtoul_l.isra.0+0xc6>
 8010dba:	b10d      	cbz	r5, 8010dc0 <_strtoul_l.isra.0+0xdc>
 8010dbc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8010dc0:	6011      	str	r1, [r2, #0]
 8010dc2:	e7f2      	b.n	8010daa <_strtoul_l.isra.0+0xc6>
 8010dc4:	2430      	movs	r4, #48	; 0x30
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1b1      	bne.n	8010d2e <_strtoul_l.isra.0+0x4a>
 8010dca:	2308      	movs	r3, #8
 8010dcc:	e7af      	b.n	8010d2e <_strtoul_l.isra.0+0x4a>
 8010dce:	2c30      	cmp	r4, #48	; 0x30
 8010dd0:	d0a2      	beq.n	8010d18 <_strtoul_l.isra.0+0x34>
 8010dd2:	230a      	movs	r3, #10
 8010dd4:	e7ab      	b.n	8010d2e <_strtoul_l.isra.0+0x4a>
 8010dd6:	bf00      	nop
 8010dd8:	080123a9 	.word	0x080123a9

08010ddc <_strtoul_r>:
 8010ddc:	f7ff bf82 	b.w	8010ce4 <_strtoul_l.isra.0>

08010de0 <__submore>:
 8010de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de4:	460c      	mov	r4, r1
 8010de6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010dec:	4299      	cmp	r1, r3
 8010dee:	d11d      	bne.n	8010e2c <__submore+0x4c>
 8010df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010df4:	f7ff fa3e 	bl	8010274 <_malloc_r>
 8010df8:	b918      	cbnz	r0, 8010e02 <__submore+0x22>
 8010dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8010dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e06:	63a3      	str	r3, [r4, #56]	; 0x38
 8010e08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8010e0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010e12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010e16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010e1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010e1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010e22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010e26:	6020      	str	r0, [r4, #0]
 8010e28:	2000      	movs	r0, #0
 8010e2a:	e7e8      	b.n	8010dfe <__submore+0x1e>
 8010e2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010e2e:	0077      	lsls	r7, r6, #1
 8010e30:	463a      	mov	r2, r7
 8010e32:	f000 fa2d 	bl	8011290 <_realloc_r>
 8010e36:	4605      	mov	r5, r0
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d0de      	beq.n	8010dfa <__submore+0x1a>
 8010e3c:	eb00 0806 	add.w	r8, r0, r6
 8010e40:	4601      	mov	r1, r0
 8010e42:	4632      	mov	r2, r6
 8010e44:	4640      	mov	r0, r8
 8010e46:	f7fb fcc3 	bl	800c7d0 <memcpy>
 8010e4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010e4e:	f8c4 8000 	str.w	r8, [r4]
 8010e52:	e7e9      	b.n	8010e28 <__submore+0x48>

08010e54 <__ascii_wctomb>:
 8010e54:	b149      	cbz	r1, 8010e6a <__ascii_wctomb+0x16>
 8010e56:	2aff      	cmp	r2, #255	; 0xff
 8010e58:	bf85      	ittet	hi
 8010e5a:	238a      	movhi	r3, #138	; 0x8a
 8010e5c:	6003      	strhi	r3, [r0, #0]
 8010e5e:	700a      	strbls	r2, [r1, #0]
 8010e60:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e64:	bf98      	it	ls
 8010e66:	2001      	movls	r0, #1
 8010e68:	4770      	bx	lr
 8010e6a:	4608      	mov	r0, r1
 8010e6c:	4770      	bx	lr
	...

08010e70 <__assert_func>:
 8010e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e72:	4614      	mov	r4, r2
 8010e74:	461a      	mov	r2, r3
 8010e76:	4b09      	ldr	r3, [pc, #36]	; (8010e9c <__assert_func+0x2c>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	68d8      	ldr	r0, [r3, #12]
 8010e7e:	b14c      	cbz	r4, 8010e94 <__assert_func+0x24>
 8010e80:	4b07      	ldr	r3, [pc, #28]	; (8010ea0 <__assert_func+0x30>)
 8010e82:	9100      	str	r1, [sp, #0]
 8010e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e88:	4906      	ldr	r1, [pc, #24]	; (8010ea4 <__assert_func+0x34>)
 8010e8a:	462b      	mov	r3, r5
 8010e8c:	f000 f9a6 	bl	80111dc <fiprintf>
 8010e90:	f000 fc3e 	bl	8011710 <abort>
 8010e94:	4b04      	ldr	r3, [pc, #16]	; (8010ea8 <__assert_func+0x38>)
 8010e96:	461c      	mov	r4, r3
 8010e98:	e7f3      	b.n	8010e82 <__assert_func+0x12>
 8010e9a:	bf00      	nop
 8010e9c:	20000030 	.word	0x20000030
 8010ea0:	08012748 	.word	0x08012748
 8010ea4:	08012755 	.word	0x08012755
 8010ea8:	08012783 	.word	0x08012783

08010eac <__sflush_r>:
 8010eac:	898a      	ldrh	r2, [r1, #12]
 8010eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	0710      	lsls	r0, r2, #28
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	d458      	bmi.n	8010f6c <__sflush_r+0xc0>
 8010eba:	684b      	ldr	r3, [r1, #4]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	dc05      	bgt.n	8010ecc <__sflush_r+0x20>
 8010ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	dc02      	bgt.n	8010ecc <__sflush_r+0x20>
 8010ec6:	2000      	movs	r0, #0
 8010ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ece:	2e00      	cmp	r6, #0
 8010ed0:	d0f9      	beq.n	8010ec6 <__sflush_r+0x1a>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ed8:	682f      	ldr	r7, [r5, #0]
 8010eda:	602b      	str	r3, [r5, #0]
 8010edc:	d032      	beq.n	8010f44 <__sflush_r+0x98>
 8010ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ee0:	89a3      	ldrh	r3, [r4, #12]
 8010ee2:	075a      	lsls	r2, r3, #29
 8010ee4:	d505      	bpl.n	8010ef2 <__sflush_r+0x46>
 8010ee6:	6863      	ldr	r3, [r4, #4]
 8010ee8:	1ac0      	subs	r0, r0, r3
 8010eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010eec:	b10b      	cbz	r3, 8010ef2 <__sflush_r+0x46>
 8010eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ef0:	1ac0      	subs	r0, r0, r3
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ef8:	6a21      	ldr	r1, [r4, #32]
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b0      	blx	r6
 8010efe:	1c43      	adds	r3, r0, #1
 8010f00:	89a3      	ldrh	r3, [r4, #12]
 8010f02:	d106      	bne.n	8010f12 <__sflush_r+0x66>
 8010f04:	6829      	ldr	r1, [r5, #0]
 8010f06:	291d      	cmp	r1, #29
 8010f08:	d82c      	bhi.n	8010f64 <__sflush_r+0xb8>
 8010f0a:	4a2a      	ldr	r2, [pc, #168]	; (8010fb4 <__sflush_r+0x108>)
 8010f0c:	40ca      	lsrs	r2, r1
 8010f0e:	07d6      	lsls	r6, r2, #31
 8010f10:	d528      	bpl.n	8010f64 <__sflush_r+0xb8>
 8010f12:	2200      	movs	r2, #0
 8010f14:	6062      	str	r2, [r4, #4]
 8010f16:	04d9      	lsls	r1, r3, #19
 8010f18:	6922      	ldr	r2, [r4, #16]
 8010f1a:	6022      	str	r2, [r4, #0]
 8010f1c:	d504      	bpl.n	8010f28 <__sflush_r+0x7c>
 8010f1e:	1c42      	adds	r2, r0, #1
 8010f20:	d101      	bne.n	8010f26 <__sflush_r+0x7a>
 8010f22:	682b      	ldr	r3, [r5, #0]
 8010f24:	b903      	cbnz	r3, 8010f28 <__sflush_r+0x7c>
 8010f26:	6560      	str	r0, [r4, #84]	; 0x54
 8010f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f2a:	602f      	str	r7, [r5, #0]
 8010f2c:	2900      	cmp	r1, #0
 8010f2e:	d0ca      	beq.n	8010ec6 <__sflush_r+0x1a>
 8010f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f34:	4299      	cmp	r1, r3
 8010f36:	d002      	beq.n	8010f3e <__sflush_r+0x92>
 8010f38:	4628      	mov	r0, r5
 8010f3a:	f7ff f94b 	bl	80101d4 <_free_r>
 8010f3e:	2000      	movs	r0, #0
 8010f40:	6360      	str	r0, [r4, #52]	; 0x34
 8010f42:	e7c1      	b.n	8010ec8 <__sflush_r+0x1c>
 8010f44:	6a21      	ldr	r1, [r4, #32]
 8010f46:	2301      	movs	r3, #1
 8010f48:	4628      	mov	r0, r5
 8010f4a:	47b0      	blx	r6
 8010f4c:	1c41      	adds	r1, r0, #1
 8010f4e:	d1c7      	bne.n	8010ee0 <__sflush_r+0x34>
 8010f50:	682b      	ldr	r3, [r5, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d0c4      	beq.n	8010ee0 <__sflush_r+0x34>
 8010f56:	2b1d      	cmp	r3, #29
 8010f58:	d001      	beq.n	8010f5e <__sflush_r+0xb2>
 8010f5a:	2b16      	cmp	r3, #22
 8010f5c:	d101      	bne.n	8010f62 <__sflush_r+0xb6>
 8010f5e:	602f      	str	r7, [r5, #0]
 8010f60:	e7b1      	b.n	8010ec6 <__sflush_r+0x1a>
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f68:	81a3      	strh	r3, [r4, #12]
 8010f6a:	e7ad      	b.n	8010ec8 <__sflush_r+0x1c>
 8010f6c:	690f      	ldr	r7, [r1, #16]
 8010f6e:	2f00      	cmp	r7, #0
 8010f70:	d0a9      	beq.n	8010ec6 <__sflush_r+0x1a>
 8010f72:	0793      	lsls	r3, r2, #30
 8010f74:	680e      	ldr	r6, [r1, #0]
 8010f76:	bf08      	it	eq
 8010f78:	694b      	ldreq	r3, [r1, #20]
 8010f7a:	600f      	str	r7, [r1, #0]
 8010f7c:	bf18      	it	ne
 8010f7e:	2300      	movne	r3, #0
 8010f80:	eba6 0807 	sub.w	r8, r6, r7
 8010f84:	608b      	str	r3, [r1, #8]
 8010f86:	f1b8 0f00 	cmp.w	r8, #0
 8010f8a:	dd9c      	ble.n	8010ec6 <__sflush_r+0x1a>
 8010f8c:	6a21      	ldr	r1, [r4, #32]
 8010f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f90:	4643      	mov	r3, r8
 8010f92:	463a      	mov	r2, r7
 8010f94:	4628      	mov	r0, r5
 8010f96:	47b0      	blx	r6
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	dc06      	bgt.n	8010faa <__sflush_r+0xfe>
 8010f9c:	89a3      	ldrh	r3, [r4, #12]
 8010f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fa2:	81a3      	strh	r3, [r4, #12]
 8010fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa8:	e78e      	b.n	8010ec8 <__sflush_r+0x1c>
 8010faa:	4407      	add	r7, r0
 8010fac:	eba8 0800 	sub.w	r8, r8, r0
 8010fb0:	e7e9      	b.n	8010f86 <__sflush_r+0xda>
 8010fb2:	bf00      	nop
 8010fb4:	20400001 	.word	0x20400001

08010fb8 <_fflush_r>:
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	690b      	ldr	r3, [r1, #16]
 8010fbc:	4605      	mov	r5, r0
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	b913      	cbnz	r3, 8010fc8 <_fflush_r+0x10>
 8010fc2:	2500      	movs	r5, #0
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	bd38      	pop	{r3, r4, r5, pc}
 8010fc8:	b118      	cbz	r0, 8010fd2 <_fflush_r+0x1a>
 8010fca:	6983      	ldr	r3, [r0, #24]
 8010fcc:	b90b      	cbnz	r3, 8010fd2 <_fflush_r+0x1a>
 8010fce:	f000 f887 	bl	80110e0 <__sinit>
 8010fd2:	4b14      	ldr	r3, [pc, #80]	; (8011024 <_fflush_r+0x6c>)
 8010fd4:	429c      	cmp	r4, r3
 8010fd6:	d11b      	bne.n	8011010 <_fflush_r+0x58>
 8010fd8:	686c      	ldr	r4, [r5, #4]
 8010fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d0ef      	beq.n	8010fc2 <_fflush_r+0xa>
 8010fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010fe4:	07d0      	lsls	r0, r2, #31
 8010fe6:	d404      	bmi.n	8010ff2 <_fflush_r+0x3a>
 8010fe8:	0599      	lsls	r1, r3, #22
 8010fea:	d402      	bmi.n	8010ff2 <_fflush_r+0x3a>
 8010fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fee:	f000 f927 	bl	8011240 <__retarget_lock_acquire_recursive>
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	f7ff ff59 	bl	8010eac <__sflush_r>
 8010ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ffc:	07da      	lsls	r2, r3, #31
 8010ffe:	4605      	mov	r5, r0
 8011000:	d4e0      	bmi.n	8010fc4 <_fflush_r+0xc>
 8011002:	89a3      	ldrh	r3, [r4, #12]
 8011004:	059b      	lsls	r3, r3, #22
 8011006:	d4dd      	bmi.n	8010fc4 <_fflush_r+0xc>
 8011008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801100a:	f000 f91a 	bl	8011242 <__retarget_lock_release_recursive>
 801100e:	e7d9      	b.n	8010fc4 <_fflush_r+0xc>
 8011010:	4b05      	ldr	r3, [pc, #20]	; (8011028 <_fflush_r+0x70>)
 8011012:	429c      	cmp	r4, r3
 8011014:	d101      	bne.n	801101a <_fflush_r+0x62>
 8011016:	68ac      	ldr	r4, [r5, #8]
 8011018:	e7df      	b.n	8010fda <_fflush_r+0x22>
 801101a:	4b04      	ldr	r3, [pc, #16]	; (801102c <_fflush_r+0x74>)
 801101c:	429c      	cmp	r4, r3
 801101e:	bf08      	it	eq
 8011020:	68ec      	ldreq	r4, [r5, #12]
 8011022:	e7da      	b.n	8010fda <_fflush_r+0x22>
 8011024:	080127a4 	.word	0x080127a4
 8011028:	080127c4 	.word	0x080127c4
 801102c:	08012784 	.word	0x08012784

08011030 <std>:
 8011030:	2300      	movs	r3, #0
 8011032:	b510      	push	{r4, lr}
 8011034:	4604      	mov	r4, r0
 8011036:	e9c0 3300 	strd	r3, r3, [r0]
 801103a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801103e:	6083      	str	r3, [r0, #8]
 8011040:	8181      	strh	r1, [r0, #12]
 8011042:	6643      	str	r3, [r0, #100]	; 0x64
 8011044:	81c2      	strh	r2, [r0, #14]
 8011046:	6183      	str	r3, [r0, #24]
 8011048:	4619      	mov	r1, r3
 801104a:	2208      	movs	r2, #8
 801104c:	305c      	adds	r0, #92	; 0x5c
 801104e:	f7fb fbcd 	bl	800c7ec <memset>
 8011052:	4b05      	ldr	r3, [pc, #20]	; (8011068 <std+0x38>)
 8011054:	6263      	str	r3, [r4, #36]	; 0x24
 8011056:	4b05      	ldr	r3, [pc, #20]	; (801106c <std+0x3c>)
 8011058:	62a3      	str	r3, [r4, #40]	; 0x28
 801105a:	4b05      	ldr	r3, [pc, #20]	; (8011070 <std+0x40>)
 801105c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801105e:	4b05      	ldr	r3, [pc, #20]	; (8011074 <std+0x44>)
 8011060:	6224      	str	r4, [r4, #32]
 8011062:	6323      	str	r3, [r4, #48]	; 0x30
 8011064:	bd10      	pop	{r4, pc}
 8011066:	bf00      	nop
 8011068:	0800d595 	.word	0x0800d595
 801106c:	0800d5bb 	.word	0x0800d5bb
 8011070:	0800d5f3 	.word	0x0800d5f3
 8011074:	0800d617 	.word	0x0800d617

08011078 <_cleanup_r>:
 8011078:	4901      	ldr	r1, [pc, #4]	; (8011080 <_cleanup_r+0x8>)
 801107a:	f000 b8c1 	b.w	8011200 <_fwalk_reent>
 801107e:	bf00      	nop
 8011080:	08010fb9 	.word	0x08010fb9

08011084 <__sfmoreglue>:
 8011084:	b570      	push	{r4, r5, r6, lr}
 8011086:	1e4a      	subs	r2, r1, #1
 8011088:	2568      	movs	r5, #104	; 0x68
 801108a:	4355      	muls	r5, r2
 801108c:	460e      	mov	r6, r1
 801108e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011092:	f7ff f8ef 	bl	8010274 <_malloc_r>
 8011096:	4604      	mov	r4, r0
 8011098:	b140      	cbz	r0, 80110ac <__sfmoreglue+0x28>
 801109a:	2100      	movs	r1, #0
 801109c:	e9c0 1600 	strd	r1, r6, [r0]
 80110a0:	300c      	adds	r0, #12
 80110a2:	60a0      	str	r0, [r4, #8]
 80110a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110a8:	f7fb fba0 	bl	800c7ec <memset>
 80110ac:	4620      	mov	r0, r4
 80110ae:	bd70      	pop	{r4, r5, r6, pc}

080110b0 <__sfp_lock_acquire>:
 80110b0:	4801      	ldr	r0, [pc, #4]	; (80110b8 <__sfp_lock_acquire+0x8>)
 80110b2:	f000 b8c5 	b.w	8011240 <__retarget_lock_acquire_recursive>
 80110b6:	bf00      	nop
 80110b8:	20005894 	.word	0x20005894

080110bc <__sfp_lock_release>:
 80110bc:	4801      	ldr	r0, [pc, #4]	; (80110c4 <__sfp_lock_release+0x8>)
 80110be:	f000 b8c0 	b.w	8011242 <__retarget_lock_release_recursive>
 80110c2:	bf00      	nop
 80110c4:	20005894 	.word	0x20005894

080110c8 <__sinit_lock_acquire>:
 80110c8:	4801      	ldr	r0, [pc, #4]	; (80110d0 <__sinit_lock_acquire+0x8>)
 80110ca:	f000 b8b9 	b.w	8011240 <__retarget_lock_acquire_recursive>
 80110ce:	bf00      	nop
 80110d0:	2000588f 	.word	0x2000588f

080110d4 <__sinit_lock_release>:
 80110d4:	4801      	ldr	r0, [pc, #4]	; (80110dc <__sinit_lock_release+0x8>)
 80110d6:	f000 b8b4 	b.w	8011242 <__retarget_lock_release_recursive>
 80110da:	bf00      	nop
 80110dc:	2000588f 	.word	0x2000588f

080110e0 <__sinit>:
 80110e0:	b510      	push	{r4, lr}
 80110e2:	4604      	mov	r4, r0
 80110e4:	f7ff fff0 	bl	80110c8 <__sinit_lock_acquire>
 80110e8:	69a3      	ldr	r3, [r4, #24]
 80110ea:	b11b      	cbz	r3, 80110f4 <__sinit+0x14>
 80110ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110f0:	f7ff bff0 	b.w	80110d4 <__sinit_lock_release>
 80110f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80110f8:	6523      	str	r3, [r4, #80]	; 0x50
 80110fa:	4b13      	ldr	r3, [pc, #76]	; (8011148 <__sinit+0x68>)
 80110fc:	4a13      	ldr	r2, [pc, #76]	; (801114c <__sinit+0x6c>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	62a2      	str	r2, [r4, #40]	; 0x28
 8011102:	42a3      	cmp	r3, r4
 8011104:	bf04      	itt	eq
 8011106:	2301      	moveq	r3, #1
 8011108:	61a3      	streq	r3, [r4, #24]
 801110a:	4620      	mov	r0, r4
 801110c:	f000 f820 	bl	8011150 <__sfp>
 8011110:	6060      	str	r0, [r4, #4]
 8011112:	4620      	mov	r0, r4
 8011114:	f000 f81c 	bl	8011150 <__sfp>
 8011118:	60a0      	str	r0, [r4, #8]
 801111a:	4620      	mov	r0, r4
 801111c:	f000 f818 	bl	8011150 <__sfp>
 8011120:	2200      	movs	r2, #0
 8011122:	60e0      	str	r0, [r4, #12]
 8011124:	2104      	movs	r1, #4
 8011126:	6860      	ldr	r0, [r4, #4]
 8011128:	f7ff ff82 	bl	8011030 <std>
 801112c:	68a0      	ldr	r0, [r4, #8]
 801112e:	2201      	movs	r2, #1
 8011130:	2109      	movs	r1, #9
 8011132:	f7ff ff7d 	bl	8011030 <std>
 8011136:	68e0      	ldr	r0, [r4, #12]
 8011138:	2202      	movs	r2, #2
 801113a:	2112      	movs	r1, #18
 801113c:	f7ff ff78 	bl	8011030 <std>
 8011140:	2301      	movs	r3, #1
 8011142:	61a3      	str	r3, [r4, #24]
 8011144:	e7d2      	b.n	80110ec <__sinit+0xc>
 8011146:	bf00      	nop
 8011148:	0801231c 	.word	0x0801231c
 801114c:	08011079 	.word	0x08011079

08011150 <__sfp>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	4607      	mov	r7, r0
 8011154:	f7ff ffac 	bl	80110b0 <__sfp_lock_acquire>
 8011158:	4b1e      	ldr	r3, [pc, #120]	; (80111d4 <__sfp+0x84>)
 801115a:	681e      	ldr	r6, [r3, #0]
 801115c:	69b3      	ldr	r3, [r6, #24]
 801115e:	b913      	cbnz	r3, 8011166 <__sfp+0x16>
 8011160:	4630      	mov	r0, r6
 8011162:	f7ff ffbd 	bl	80110e0 <__sinit>
 8011166:	3648      	adds	r6, #72	; 0x48
 8011168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801116c:	3b01      	subs	r3, #1
 801116e:	d503      	bpl.n	8011178 <__sfp+0x28>
 8011170:	6833      	ldr	r3, [r6, #0]
 8011172:	b30b      	cbz	r3, 80111b8 <__sfp+0x68>
 8011174:	6836      	ldr	r6, [r6, #0]
 8011176:	e7f7      	b.n	8011168 <__sfp+0x18>
 8011178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801117c:	b9d5      	cbnz	r5, 80111b4 <__sfp+0x64>
 801117e:	4b16      	ldr	r3, [pc, #88]	; (80111d8 <__sfp+0x88>)
 8011180:	60e3      	str	r3, [r4, #12]
 8011182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011186:	6665      	str	r5, [r4, #100]	; 0x64
 8011188:	f000 f859 	bl	801123e <__retarget_lock_init_recursive>
 801118c:	f7ff ff96 	bl	80110bc <__sfp_lock_release>
 8011190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011198:	6025      	str	r5, [r4, #0]
 801119a:	61a5      	str	r5, [r4, #24]
 801119c:	2208      	movs	r2, #8
 801119e:	4629      	mov	r1, r5
 80111a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111a4:	f7fb fb22 	bl	800c7ec <memset>
 80111a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80111ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80111b0:	4620      	mov	r0, r4
 80111b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111b4:	3468      	adds	r4, #104	; 0x68
 80111b6:	e7d9      	b.n	801116c <__sfp+0x1c>
 80111b8:	2104      	movs	r1, #4
 80111ba:	4638      	mov	r0, r7
 80111bc:	f7ff ff62 	bl	8011084 <__sfmoreglue>
 80111c0:	4604      	mov	r4, r0
 80111c2:	6030      	str	r0, [r6, #0]
 80111c4:	2800      	cmp	r0, #0
 80111c6:	d1d5      	bne.n	8011174 <__sfp+0x24>
 80111c8:	f7ff ff78 	bl	80110bc <__sfp_lock_release>
 80111cc:	230c      	movs	r3, #12
 80111ce:	603b      	str	r3, [r7, #0]
 80111d0:	e7ee      	b.n	80111b0 <__sfp+0x60>
 80111d2:	bf00      	nop
 80111d4:	0801231c 	.word	0x0801231c
 80111d8:	ffff0001 	.word	0xffff0001

080111dc <fiprintf>:
 80111dc:	b40e      	push	{r1, r2, r3}
 80111de:	b503      	push	{r0, r1, lr}
 80111e0:	4601      	mov	r1, r0
 80111e2:	ab03      	add	r3, sp, #12
 80111e4:	4805      	ldr	r0, [pc, #20]	; (80111fc <fiprintf+0x20>)
 80111e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ea:	6800      	ldr	r0, [r0, #0]
 80111ec:	9301      	str	r3, [sp, #4]
 80111ee:	f000 f89f 	bl	8011330 <_vfiprintf_r>
 80111f2:	b002      	add	sp, #8
 80111f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80111f8:	b003      	add	sp, #12
 80111fa:	4770      	bx	lr
 80111fc:	20000030 	.word	0x20000030

08011200 <_fwalk_reent>:
 8011200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011204:	4606      	mov	r6, r0
 8011206:	4688      	mov	r8, r1
 8011208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801120c:	2700      	movs	r7, #0
 801120e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011212:	f1b9 0901 	subs.w	r9, r9, #1
 8011216:	d505      	bpl.n	8011224 <_fwalk_reent+0x24>
 8011218:	6824      	ldr	r4, [r4, #0]
 801121a:	2c00      	cmp	r4, #0
 801121c:	d1f7      	bne.n	801120e <_fwalk_reent+0xe>
 801121e:	4638      	mov	r0, r7
 8011220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011224:	89ab      	ldrh	r3, [r5, #12]
 8011226:	2b01      	cmp	r3, #1
 8011228:	d907      	bls.n	801123a <_fwalk_reent+0x3a>
 801122a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801122e:	3301      	adds	r3, #1
 8011230:	d003      	beq.n	801123a <_fwalk_reent+0x3a>
 8011232:	4629      	mov	r1, r5
 8011234:	4630      	mov	r0, r6
 8011236:	47c0      	blx	r8
 8011238:	4307      	orrs	r7, r0
 801123a:	3568      	adds	r5, #104	; 0x68
 801123c:	e7e9      	b.n	8011212 <_fwalk_reent+0x12>

0801123e <__retarget_lock_init_recursive>:
 801123e:	4770      	bx	lr

08011240 <__retarget_lock_acquire_recursive>:
 8011240:	4770      	bx	lr

08011242 <__retarget_lock_release_recursive>:
 8011242:	4770      	bx	lr

08011244 <memmove>:
 8011244:	4288      	cmp	r0, r1
 8011246:	b510      	push	{r4, lr}
 8011248:	eb01 0402 	add.w	r4, r1, r2
 801124c:	d902      	bls.n	8011254 <memmove+0x10>
 801124e:	4284      	cmp	r4, r0
 8011250:	4623      	mov	r3, r4
 8011252:	d807      	bhi.n	8011264 <memmove+0x20>
 8011254:	1e43      	subs	r3, r0, #1
 8011256:	42a1      	cmp	r1, r4
 8011258:	d008      	beq.n	801126c <memmove+0x28>
 801125a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801125e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011262:	e7f8      	b.n	8011256 <memmove+0x12>
 8011264:	4402      	add	r2, r0
 8011266:	4601      	mov	r1, r0
 8011268:	428a      	cmp	r2, r1
 801126a:	d100      	bne.n	801126e <memmove+0x2a>
 801126c:	bd10      	pop	{r4, pc}
 801126e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011276:	e7f7      	b.n	8011268 <memmove+0x24>

08011278 <__malloc_lock>:
 8011278:	4801      	ldr	r0, [pc, #4]	; (8011280 <__malloc_lock+0x8>)
 801127a:	f7ff bfe1 	b.w	8011240 <__retarget_lock_acquire_recursive>
 801127e:	bf00      	nop
 8011280:	20005890 	.word	0x20005890

08011284 <__malloc_unlock>:
 8011284:	4801      	ldr	r0, [pc, #4]	; (801128c <__malloc_unlock+0x8>)
 8011286:	f7ff bfdc 	b.w	8011242 <__retarget_lock_release_recursive>
 801128a:	bf00      	nop
 801128c:	20005890 	.word	0x20005890

08011290 <_realloc_r>:
 8011290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011292:	4607      	mov	r7, r0
 8011294:	4614      	mov	r4, r2
 8011296:	460e      	mov	r6, r1
 8011298:	b921      	cbnz	r1, 80112a4 <_realloc_r+0x14>
 801129a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801129e:	4611      	mov	r1, r2
 80112a0:	f7fe bfe8 	b.w	8010274 <_malloc_r>
 80112a4:	b922      	cbnz	r2, 80112b0 <_realloc_r+0x20>
 80112a6:	f7fe ff95 	bl	80101d4 <_free_r>
 80112aa:	4625      	mov	r5, r4
 80112ac:	4628      	mov	r0, r5
 80112ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b0:	f000 fa9a 	bl	80117e8 <_malloc_usable_size_r>
 80112b4:	42a0      	cmp	r0, r4
 80112b6:	d20f      	bcs.n	80112d8 <_realloc_r+0x48>
 80112b8:	4621      	mov	r1, r4
 80112ba:	4638      	mov	r0, r7
 80112bc:	f7fe ffda 	bl	8010274 <_malloc_r>
 80112c0:	4605      	mov	r5, r0
 80112c2:	2800      	cmp	r0, #0
 80112c4:	d0f2      	beq.n	80112ac <_realloc_r+0x1c>
 80112c6:	4631      	mov	r1, r6
 80112c8:	4622      	mov	r2, r4
 80112ca:	f7fb fa81 	bl	800c7d0 <memcpy>
 80112ce:	4631      	mov	r1, r6
 80112d0:	4638      	mov	r0, r7
 80112d2:	f7fe ff7f 	bl	80101d4 <_free_r>
 80112d6:	e7e9      	b.n	80112ac <_realloc_r+0x1c>
 80112d8:	4635      	mov	r5, r6
 80112da:	e7e7      	b.n	80112ac <_realloc_r+0x1c>

080112dc <__sfputc_r>:
 80112dc:	6893      	ldr	r3, [r2, #8]
 80112de:	3b01      	subs	r3, #1
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	b410      	push	{r4}
 80112e4:	6093      	str	r3, [r2, #8]
 80112e6:	da08      	bge.n	80112fa <__sfputc_r+0x1e>
 80112e8:	6994      	ldr	r4, [r2, #24]
 80112ea:	42a3      	cmp	r3, r4
 80112ec:	db01      	blt.n	80112f2 <__sfputc_r+0x16>
 80112ee:	290a      	cmp	r1, #10
 80112f0:	d103      	bne.n	80112fa <__sfputc_r+0x1e>
 80112f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112f6:	f000 b94b 	b.w	8011590 <__swbuf_r>
 80112fa:	6813      	ldr	r3, [r2, #0]
 80112fc:	1c58      	adds	r0, r3, #1
 80112fe:	6010      	str	r0, [r2, #0]
 8011300:	7019      	strb	r1, [r3, #0]
 8011302:	4608      	mov	r0, r1
 8011304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011308:	4770      	bx	lr

0801130a <__sfputs_r>:
 801130a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130c:	4606      	mov	r6, r0
 801130e:	460f      	mov	r7, r1
 8011310:	4614      	mov	r4, r2
 8011312:	18d5      	adds	r5, r2, r3
 8011314:	42ac      	cmp	r4, r5
 8011316:	d101      	bne.n	801131c <__sfputs_r+0x12>
 8011318:	2000      	movs	r0, #0
 801131a:	e007      	b.n	801132c <__sfputs_r+0x22>
 801131c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011320:	463a      	mov	r2, r7
 8011322:	4630      	mov	r0, r6
 8011324:	f7ff ffda 	bl	80112dc <__sfputc_r>
 8011328:	1c43      	adds	r3, r0, #1
 801132a:	d1f3      	bne.n	8011314 <__sfputs_r+0xa>
 801132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011330 <_vfiprintf_r>:
 8011330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011334:	460d      	mov	r5, r1
 8011336:	b09d      	sub	sp, #116	; 0x74
 8011338:	4614      	mov	r4, r2
 801133a:	4698      	mov	r8, r3
 801133c:	4606      	mov	r6, r0
 801133e:	b118      	cbz	r0, 8011348 <_vfiprintf_r+0x18>
 8011340:	6983      	ldr	r3, [r0, #24]
 8011342:	b90b      	cbnz	r3, 8011348 <_vfiprintf_r+0x18>
 8011344:	f7ff fecc 	bl	80110e0 <__sinit>
 8011348:	4b89      	ldr	r3, [pc, #548]	; (8011570 <_vfiprintf_r+0x240>)
 801134a:	429d      	cmp	r5, r3
 801134c:	d11b      	bne.n	8011386 <_vfiprintf_r+0x56>
 801134e:	6875      	ldr	r5, [r6, #4]
 8011350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011352:	07d9      	lsls	r1, r3, #31
 8011354:	d405      	bmi.n	8011362 <_vfiprintf_r+0x32>
 8011356:	89ab      	ldrh	r3, [r5, #12]
 8011358:	059a      	lsls	r2, r3, #22
 801135a:	d402      	bmi.n	8011362 <_vfiprintf_r+0x32>
 801135c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801135e:	f7ff ff6f 	bl	8011240 <__retarget_lock_acquire_recursive>
 8011362:	89ab      	ldrh	r3, [r5, #12]
 8011364:	071b      	lsls	r3, r3, #28
 8011366:	d501      	bpl.n	801136c <_vfiprintf_r+0x3c>
 8011368:	692b      	ldr	r3, [r5, #16]
 801136a:	b9eb      	cbnz	r3, 80113a8 <_vfiprintf_r+0x78>
 801136c:	4629      	mov	r1, r5
 801136e:	4630      	mov	r0, r6
 8011370:	f000 f960 	bl	8011634 <__swsetup_r>
 8011374:	b1c0      	cbz	r0, 80113a8 <_vfiprintf_r+0x78>
 8011376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011378:	07dc      	lsls	r4, r3, #31
 801137a:	d50e      	bpl.n	801139a <_vfiprintf_r+0x6a>
 801137c:	f04f 30ff 	mov.w	r0, #4294967295
 8011380:	b01d      	add	sp, #116	; 0x74
 8011382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011386:	4b7b      	ldr	r3, [pc, #492]	; (8011574 <_vfiprintf_r+0x244>)
 8011388:	429d      	cmp	r5, r3
 801138a:	d101      	bne.n	8011390 <_vfiprintf_r+0x60>
 801138c:	68b5      	ldr	r5, [r6, #8]
 801138e:	e7df      	b.n	8011350 <_vfiprintf_r+0x20>
 8011390:	4b79      	ldr	r3, [pc, #484]	; (8011578 <_vfiprintf_r+0x248>)
 8011392:	429d      	cmp	r5, r3
 8011394:	bf08      	it	eq
 8011396:	68f5      	ldreq	r5, [r6, #12]
 8011398:	e7da      	b.n	8011350 <_vfiprintf_r+0x20>
 801139a:	89ab      	ldrh	r3, [r5, #12]
 801139c:	0598      	lsls	r0, r3, #22
 801139e:	d4ed      	bmi.n	801137c <_vfiprintf_r+0x4c>
 80113a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113a2:	f7ff ff4e 	bl	8011242 <__retarget_lock_release_recursive>
 80113a6:	e7e9      	b.n	801137c <_vfiprintf_r+0x4c>
 80113a8:	2300      	movs	r3, #0
 80113aa:	9309      	str	r3, [sp, #36]	; 0x24
 80113ac:	2320      	movs	r3, #32
 80113ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80113b6:	2330      	movs	r3, #48	; 0x30
 80113b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801157c <_vfiprintf_r+0x24c>
 80113bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113c0:	f04f 0901 	mov.w	r9, #1
 80113c4:	4623      	mov	r3, r4
 80113c6:	469a      	mov	sl, r3
 80113c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113cc:	b10a      	cbz	r2, 80113d2 <_vfiprintf_r+0xa2>
 80113ce:	2a25      	cmp	r2, #37	; 0x25
 80113d0:	d1f9      	bne.n	80113c6 <_vfiprintf_r+0x96>
 80113d2:	ebba 0b04 	subs.w	fp, sl, r4
 80113d6:	d00b      	beq.n	80113f0 <_vfiprintf_r+0xc0>
 80113d8:	465b      	mov	r3, fp
 80113da:	4622      	mov	r2, r4
 80113dc:	4629      	mov	r1, r5
 80113de:	4630      	mov	r0, r6
 80113e0:	f7ff ff93 	bl	801130a <__sfputs_r>
 80113e4:	3001      	adds	r0, #1
 80113e6:	f000 80aa 	beq.w	801153e <_vfiprintf_r+0x20e>
 80113ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113ec:	445a      	add	r2, fp
 80113ee:	9209      	str	r2, [sp, #36]	; 0x24
 80113f0:	f89a 3000 	ldrb.w	r3, [sl]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	f000 80a2 	beq.w	801153e <_vfiprintf_r+0x20e>
 80113fa:	2300      	movs	r3, #0
 80113fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011404:	f10a 0a01 	add.w	sl, sl, #1
 8011408:	9304      	str	r3, [sp, #16]
 801140a:	9307      	str	r3, [sp, #28]
 801140c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011410:	931a      	str	r3, [sp, #104]	; 0x68
 8011412:	4654      	mov	r4, sl
 8011414:	2205      	movs	r2, #5
 8011416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141a:	4858      	ldr	r0, [pc, #352]	; (801157c <_vfiprintf_r+0x24c>)
 801141c:	f7ee fee8 	bl	80001f0 <memchr>
 8011420:	9a04      	ldr	r2, [sp, #16]
 8011422:	b9d8      	cbnz	r0, 801145c <_vfiprintf_r+0x12c>
 8011424:	06d1      	lsls	r1, r2, #27
 8011426:	bf44      	itt	mi
 8011428:	2320      	movmi	r3, #32
 801142a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801142e:	0713      	lsls	r3, r2, #28
 8011430:	bf44      	itt	mi
 8011432:	232b      	movmi	r3, #43	; 0x2b
 8011434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011438:	f89a 3000 	ldrb.w	r3, [sl]
 801143c:	2b2a      	cmp	r3, #42	; 0x2a
 801143e:	d015      	beq.n	801146c <_vfiprintf_r+0x13c>
 8011440:	9a07      	ldr	r2, [sp, #28]
 8011442:	4654      	mov	r4, sl
 8011444:	2000      	movs	r0, #0
 8011446:	f04f 0c0a 	mov.w	ip, #10
 801144a:	4621      	mov	r1, r4
 801144c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011450:	3b30      	subs	r3, #48	; 0x30
 8011452:	2b09      	cmp	r3, #9
 8011454:	d94e      	bls.n	80114f4 <_vfiprintf_r+0x1c4>
 8011456:	b1b0      	cbz	r0, 8011486 <_vfiprintf_r+0x156>
 8011458:	9207      	str	r2, [sp, #28]
 801145a:	e014      	b.n	8011486 <_vfiprintf_r+0x156>
 801145c:	eba0 0308 	sub.w	r3, r0, r8
 8011460:	fa09 f303 	lsl.w	r3, r9, r3
 8011464:	4313      	orrs	r3, r2
 8011466:	9304      	str	r3, [sp, #16]
 8011468:	46a2      	mov	sl, r4
 801146a:	e7d2      	b.n	8011412 <_vfiprintf_r+0xe2>
 801146c:	9b03      	ldr	r3, [sp, #12]
 801146e:	1d19      	adds	r1, r3, #4
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	9103      	str	r1, [sp, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	bfbb      	ittet	lt
 8011478:	425b      	neglt	r3, r3
 801147a:	f042 0202 	orrlt.w	r2, r2, #2
 801147e:	9307      	strge	r3, [sp, #28]
 8011480:	9307      	strlt	r3, [sp, #28]
 8011482:	bfb8      	it	lt
 8011484:	9204      	strlt	r2, [sp, #16]
 8011486:	7823      	ldrb	r3, [r4, #0]
 8011488:	2b2e      	cmp	r3, #46	; 0x2e
 801148a:	d10c      	bne.n	80114a6 <_vfiprintf_r+0x176>
 801148c:	7863      	ldrb	r3, [r4, #1]
 801148e:	2b2a      	cmp	r3, #42	; 0x2a
 8011490:	d135      	bne.n	80114fe <_vfiprintf_r+0x1ce>
 8011492:	9b03      	ldr	r3, [sp, #12]
 8011494:	1d1a      	adds	r2, r3, #4
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	9203      	str	r2, [sp, #12]
 801149a:	2b00      	cmp	r3, #0
 801149c:	bfb8      	it	lt
 801149e:	f04f 33ff 	movlt.w	r3, #4294967295
 80114a2:	3402      	adds	r4, #2
 80114a4:	9305      	str	r3, [sp, #20]
 80114a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801158c <_vfiprintf_r+0x25c>
 80114aa:	7821      	ldrb	r1, [r4, #0]
 80114ac:	2203      	movs	r2, #3
 80114ae:	4650      	mov	r0, sl
 80114b0:	f7ee fe9e 	bl	80001f0 <memchr>
 80114b4:	b140      	cbz	r0, 80114c8 <_vfiprintf_r+0x198>
 80114b6:	2340      	movs	r3, #64	; 0x40
 80114b8:	eba0 000a 	sub.w	r0, r0, sl
 80114bc:	fa03 f000 	lsl.w	r0, r3, r0
 80114c0:	9b04      	ldr	r3, [sp, #16]
 80114c2:	4303      	orrs	r3, r0
 80114c4:	3401      	adds	r4, #1
 80114c6:	9304      	str	r3, [sp, #16]
 80114c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114cc:	482c      	ldr	r0, [pc, #176]	; (8011580 <_vfiprintf_r+0x250>)
 80114ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114d2:	2206      	movs	r2, #6
 80114d4:	f7ee fe8c 	bl	80001f0 <memchr>
 80114d8:	2800      	cmp	r0, #0
 80114da:	d03f      	beq.n	801155c <_vfiprintf_r+0x22c>
 80114dc:	4b29      	ldr	r3, [pc, #164]	; (8011584 <_vfiprintf_r+0x254>)
 80114de:	bb1b      	cbnz	r3, 8011528 <_vfiprintf_r+0x1f8>
 80114e0:	9b03      	ldr	r3, [sp, #12]
 80114e2:	3307      	adds	r3, #7
 80114e4:	f023 0307 	bic.w	r3, r3, #7
 80114e8:	3308      	adds	r3, #8
 80114ea:	9303      	str	r3, [sp, #12]
 80114ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ee:	443b      	add	r3, r7
 80114f0:	9309      	str	r3, [sp, #36]	; 0x24
 80114f2:	e767      	b.n	80113c4 <_vfiprintf_r+0x94>
 80114f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80114f8:	460c      	mov	r4, r1
 80114fa:	2001      	movs	r0, #1
 80114fc:	e7a5      	b.n	801144a <_vfiprintf_r+0x11a>
 80114fe:	2300      	movs	r3, #0
 8011500:	3401      	adds	r4, #1
 8011502:	9305      	str	r3, [sp, #20]
 8011504:	4619      	mov	r1, r3
 8011506:	f04f 0c0a 	mov.w	ip, #10
 801150a:	4620      	mov	r0, r4
 801150c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011510:	3a30      	subs	r2, #48	; 0x30
 8011512:	2a09      	cmp	r2, #9
 8011514:	d903      	bls.n	801151e <_vfiprintf_r+0x1ee>
 8011516:	2b00      	cmp	r3, #0
 8011518:	d0c5      	beq.n	80114a6 <_vfiprintf_r+0x176>
 801151a:	9105      	str	r1, [sp, #20]
 801151c:	e7c3      	b.n	80114a6 <_vfiprintf_r+0x176>
 801151e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011522:	4604      	mov	r4, r0
 8011524:	2301      	movs	r3, #1
 8011526:	e7f0      	b.n	801150a <_vfiprintf_r+0x1da>
 8011528:	ab03      	add	r3, sp, #12
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	462a      	mov	r2, r5
 801152e:	4b16      	ldr	r3, [pc, #88]	; (8011588 <_vfiprintf_r+0x258>)
 8011530:	a904      	add	r1, sp, #16
 8011532:	4630      	mov	r0, r6
 8011534:	f7fb fa02 	bl	800c93c <_printf_float>
 8011538:	4607      	mov	r7, r0
 801153a:	1c78      	adds	r0, r7, #1
 801153c:	d1d6      	bne.n	80114ec <_vfiprintf_r+0x1bc>
 801153e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011540:	07d9      	lsls	r1, r3, #31
 8011542:	d405      	bmi.n	8011550 <_vfiprintf_r+0x220>
 8011544:	89ab      	ldrh	r3, [r5, #12]
 8011546:	059a      	lsls	r2, r3, #22
 8011548:	d402      	bmi.n	8011550 <_vfiprintf_r+0x220>
 801154a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801154c:	f7ff fe79 	bl	8011242 <__retarget_lock_release_recursive>
 8011550:	89ab      	ldrh	r3, [r5, #12]
 8011552:	065b      	lsls	r3, r3, #25
 8011554:	f53f af12 	bmi.w	801137c <_vfiprintf_r+0x4c>
 8011558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801155a:	e711      	b.n	8011380 <_vfiprintf_r+0x50>
 801155c:	ab03      	add	r3, sp, #12
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	462a      	mov	r2, r5
 8011562:	4b09      	ldr	r3, [pc, #36]	; (8011588 <_vfiprintf_r+0x258>)
 8011564:	a904      	add	r1, sp, #16
 8011566:	4630      	mov	r0, r6
 8011568:	f7fb fc8c 	bl	800ce84 <_printf_i>
 801156c:	e7e4      	b.n	8011538 <_vfiprintf_r+0x208>
 801156e:	bf00      	nop
 8011570:	080127a4 	.word	0x080127a4
 8011574:	080127c4 	.word	0x080127c4
 8011578:	08012784 	.word	0x08012784
 801157c:	0801271c 	.word	0x0801271c
 8011580:	08012726 	.word	0x08012726
 8011584:	0800c93d 	.word	0x0800c93d
 8011588:	0801130b 	.word	0x0801130b
 801158c:	08012722 	.word	0x08012722

08011590 <__swbuf_r>:
 8011590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011592:	460e      	mov	r6, r1
 8011594:	4614      	mov	r4, r2
 8011596:	4605      	mov	r5, r0
 8011598:	b118      	cbz	r0, 80115a2 <__swbuf_r+0x12>
 801159a:	6983      	ldr	r3, [r0, #24]
 801159c:	b90b      	cbnz	r3, 80115a2 <__swbuf_r+0x12>
 801159e:	f7ff fd9f 	bl	80110e0 <__sinit>
 80115a2:	4b21      	ldr	r3, [pc, #132]	; (8011628 <__swbuf_r+0x98>)
 80115a4:	429c      	cmp	r4, r3
 80115a6:	d12b      	bne.n	8011600 <__swbuf_r+0x70>
 80115a8:	686c      	ldr	r4, [r5, #4]
 80115aa:	69a3      	ldr	r3, [r4, #24]
 80115ac:	60a3      	str	r3, [r4, #8]
 80115ae:	89a3      	ldrh	r3, [r4, #12]
 80115b0:	071a      	lsls	r2, r3, #28
 80115b2:	d52f      	bpl.n	8011614 <__swbuf_r+0x84>
 80115b4:	6923      	ldr	r3, [r4, #16]
 80115b6:	b36b      	cbz	r3, 8011614 <__swbuf_r+0x84>
 80115b8:	6923      	ldr	r3, [r4, #16]
 80115ba:	6820      	ldr	r0, [r4, #0]
 80115bc:	1ac0      	subs	r0, r0, r3
 80115be:	6963      	ldr	r3, [r4, #20]
 80115c0:	b2f6      	uxtb	r6, r6
 80115c2:	4283      	cmp	r3, r0
 80115c4:	4637      	mov	r7, r6
 80115c6:	dc04      	bgt.n	80115d2 <__swbuf_r+0x42>
 80115c8:	4621      	mov	r1, r4
 80115ca:	4628      	mov	r0, r5
 80115cc:	f7ff fcf4 	bl	8010fb8 <_fflush_r>
 80115d0:	bb30      	cbnz	r0, 8011620 <__swbuf_r+0x90>
 80115d2:	68a3      	ldr	r3, [r4, #8]
 80115d4:	3b01      	subs	r3, #1
 80115d6:	60a3      	str	r3, [r4, #8]
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	6022      	str	r2, [r4, #0]
 80115de:	701e      	strb	r6, [r3, #0]
 80115e0:	6963      	ldr	r3, [r4, #20]
 80115e2:	3001      	adds	r0, #1
 80115e4:	4283      	cmp	r3, r0
 80115e6:	d004      	beq.n	80115f2 <__swbuf_r+0x62>
 80115e8:	89a3      	ldrh	r3, [r4, #12]
 80115ea:	07db      	lsls	r3, r3, #31
 80115ec:	d506      	bpl.n	80115fc <__swbuf_r+0x6c>
 80115ee:	2e0a      	cmp	r6, #10
 80115f0:	d104      	bne.n	80115fc <__swbuf_r+0x6c>
 80115f2:	4621      	mov	r1, r4
 80115f4:	4628      	mov	r0, r5
 80115f6:	f7ff fcdf 	bl	8010fb8 <_fflush_r>
 80115fa:	b988      	cbnz	r0, 8011620 <__swbuf_r+0x90>
 80115fc:	4638      	mov	r0, r7
 80115fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011600:	4b0a      	ldr	r3, [pc, #40]	; (801162c <__swbuf_r+0x9c>)
 8011602:	429c      	cmp	r4, r3
 8011604:	d101      	bne.n	801160a <__swbuf_r+0x7a>
 8011606:	68ac      	ldr	r4, [r5, #8]
 8011608:	e7cf      	b.n	80115aa <__swbuf_r+0x1a>
 801160a:	4b09      	ldr	r3, [pc, #36]	; (8011630 <__swbuf_r+0xa0>)
 801160c:	429c      	cmp	r4, r3
 801160e:	bf08      	it	eq
 8011610:	68ec      	ldreq	r4, [r5, #12]
 8011612:	e7ca      	b.n	80115aa <__swbuf_r+0x1a>
 8011614:	4621      	mov	r1, r4
 8011616:	4628      	mov	r0, r5
 8011618:	f000 f80c 	bl	8011634 <__swsetup_r>
 801161c:	2800      	cmp	r0, #0
 801161e:	d0cb      	beq.n	80115b8 <__swbuf_r+0x28>
 8011620:	f04f 37ff 	mov.w	r7, #4294967295
 8011624:	e7ea      	b.n	80115fc <__swbuf_r+0x6c>
 8011626:	bf00      	nop
 8011628:	080127a4 	.word	0x080127a4
 801162c:	080127c4 	.word	0x080127c4
 8011630:	08012784 	.word	0x08012784

08011634 <__swsetup_r>:
 8011634:	4b32      	ldr	r3, [pc, #200]	; (8011700 <__swsetup_r+0xcc>)
 8011636:	b570      	push	{r4, r5, r6, lr}
 8011638:	681d      	ldr	r5, [r3, #0]
 801163a:	4606      	mov	r6, r0
 801163c:	460c      	mov	r4, r1
 801163e:	b125      	cbz	r5, 801164a <__swsetup_r+0x16>
 8011640:	69ab      	ldr	r3, [r5, #24]
 8011642:	b913      	cbnz	r3, 801164a <__swsetup_r+0x16>
 8011644:	4628      	mov	r0, r5
 8011646:	f7ff fd4b 	bl	80110e0 <__sinit>
 801164a:	4b2e      	ldr	r3, [pc, #184]	; (8011704 <__swsetup_r+0xd0>)
 801164c:	429c      	cmp	r4, r3
 801164e:	d10f      	bne.n	8011670 <__swsetup_r+0x3c>
 8011650:	686c      	ldr	r4, [r5, #4]
 8011652:	89a3      	ldrh	r3, [r4, #12]
 8011654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011658:	0719      	lsls	r1, r3, #28
 801165a:	d42c      	bmi.n	80116b6 <__swsetup_r+0x82>
 801165c:	06dd      	lsls	r5, r3, #27
 801165e:	d411      	bmi.n	8011684 <__swsetup_r+0x50>
 8011660:	2309      	movs	r3, #9
 8011662:	6033      	str	r3, [r6, #0]
 8011664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011668:	81a3      	strh	r3, [r4, #12]
 801166a:	f04f 30ff 	mov.w	r0, #4294967295
 801166e:	e03e      	b.n	80116ee <__swsetup_r+0xba>
 8011670:	4b25      	ldr	r3, [pc, #148]	; (8011708 <__swsetup_r+0xd4>)
 8011672:	429c      	cmp	r4, r3
 8011674:	d101      	bne.n	801167a <__swsetup_r+0x46>
 8011676:	68ac      	ldr	r4, [r5, #8]
 8011678:	e7eb      	b.n	8011652 <__swsetup_r+0x1e>
 801167a:	4b24      	ldr	r3, [pc, #144]	; (801170c <__swsetup_r+0xd8>)
 801167c:	429c      	cmp	r4, r3
 801167e:	bf08      	it	eq
 8011680:	68ec      	ldreq	r4, [r5, #12]
 8011682:	e7e6      	b.n	8011652 <__swsetup_r+0x1e>
 8011684:	0758      	lsls	r0, r3, #29
 8011686:	d512      	bpl.n	80116ae <__swsetup_r+0x7a>
 8011688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801168a:	b141      	cbz	r1, 801169e <__swsetup_r+0x6a>
 801168c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011690:	4299      	cmp	r1, r3
 8011692:	d002      	beq.n	801169a <__swsetup_r+0x66>
 8011694:	4630      	mov	r0, r6
 8011696:	f7fe fd9d 	bl	80101d4 <_free_r>
 801169a:	2300      	movs	r3, #0
 801169c:	6363      	str	r3, [r4, #52]	; 0x34
 801169e:	89a3      	ldrh	r3, [r4, #12]
 80116a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80116a4:	81a3      	strh	r3, [r4, #12]
 80116a6:	2300      	movs	r3, #0
 80116a8:	6063      	str	r3, [r4, #4]
 80116aa:	6923      	ldr	r3, [r4, #16]
 80116ac:	6023      	str	r3, [r4, #0]
 80116ae:	89a3      	ldrh	r3, [r4, #12]
 80116b0:	f043 0308 	orr.w	r3, r3, #8
 80116b4:	81a3      	strh	r3, [r4, #12]
 80116b6:	6923      	ldr	r3, [r4, #16]
 80116b8:	b94b      	cbnz	r3, 80116ce <__swsetup_r+0x9a>
 80116ba:	89a3      	ldrh	r3, [r4, #12]
 80116bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116c4:	d003      	beq.n	80116ce <__swsetup_r+0x9a>
 80116c6:	4621      	mov	r1, r4
 80116c8:	4630      	mov	r0, r6
 80116ca:	f000 f84d 	bl	8011768 <__smakebuf_r>
 80116ce:	89a0      	ldrh	r0, [r4, #12]
 80116d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116d4:	f010 0301 	ands.w	r3, r0, #1
 80116d8:	d00a      	beq.n	80116f0 <__swsetup_r+0xbc>
 80116da:	2300      	movs	r3, #0
 80116dc:	60a3      	str	r3, [r4, #8]
 80116de:	6963      	ldr	r3, [r4, #20]
 80116e0:	425b      	negs	r3, r3
 80116e2:	61a3      	str	r3, [r4, #24]
 80116e4:	6923      	ldr	r3, [r4, #16]
 80116e6:	b943      	cbnz	r3, 80116fa <__swsetup_r+0xc6>
 80116e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80116ec:	d1ba      	bne.n	8011664 <__swsetup_r+0x30>
 80116ee:	bd70      	pop	{r4, r5, r6, pc}
 80116f0:	0781      	lsls	r1, r0, #30
 80116f2:	bf58      	it	pl
 80116f4:	6963      	ldrpl	r3, [r4, #20]
 80116f6:	60a3      	str	r3, [r4, #8]
 80116f8:	e7f4      	b.n	80116e4 <__swsetup_r+0xb0>
 80116fa:	2000      	movs	r0, #0
 80116fc:	e7f7      	b.n	80116ee <__swsetup_r+0xba>
 80116fe:	bf00      	nop
 8011700:	20000030 	.word	0x20000030
 8011704:	080127a4 	.word	0x080127a4
 8011708:	080127c4 	.word	0x080127c4
 801170c:	08012784 	.word	0x08012784

08011710 <abort>:
 8011710:	b508      	push	{r3, lr}
 8011712:	2006      	movs	r0, #6
 8011714:	f000 f898 	bl	8011848 <raise>
 8011718:	2001      	movs	r0, #1
 801171a:	f7f0 fee3 	bl	80024e4 <_exit>

0801171e <__swhatbuf_r>:
 801171e:	b570      	push	{r4, r5, r6, lr}
 8011720:	460e      	mov	r6, r1
 8011722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011726:	2900      	cmp	r1, #0
 8011728:	b096      	sub	sp, #88	; 0x58
 801172a:	4614      	mov	r4, r2
 801172c:	461d      	mov	r5, r3
 801172e:	da07      	bge.n	8011740 <__swhatbuf_r+0x22>
 8011730:	2300      	movs	r3, #0
 8011732:	602b      	str	r3, [r5, #0]
 8011734:	89b3      	ldrh	r3, [r6, #12]
 8011736:	061a      	lsls	r2, r3, #24
 8011738:	d410      	bmi.n	801175c <__swhatbuf_r+0x3e>
 801173a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801173e:	e00e      	b.n	801175e <__swhatbuf_r+0x40>
 8011740:	466a      	mov	r2, sp
 8011742:	f000 f89d 	bl	8011880 <_fstat_r>
 8011746:	2800      	cmp	r0, #0
 8011748:	dbf2      	blt.n	8011730 <__swhatbuf_r+0x12>
 801174a:	9a01      	ldr	r2, [sp, #4]
 801174c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011750:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011754:	425a      	negs	r2, r3
 8011756:	415a      	adcs	r2, r3
 8011758:	602a      	str	r2, [r5, #0]
 801175a:	e7ee      	b.n	801173a <__swhatbuf_r+0x1c>
 801175c:	2340      	movs	r3, #64	; 0x40
 801175e:	2000      	movs	r0, #0
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	b016      	add	sp, #88	; 0x58
 8011764:	bd70      	pop	{r4, r5, r6, pc}
	...

08011768 <__smakebuf_r>:
 8011768:	898b      	ldrh	r3, [r1, #12]
 801176a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801176c:	079d      	lsls	r5, r3, #30
 801176e:	4606      	mov	r6, r0
 8011770:	460c      	mov	r4, r1
 8011772:	d507      	bpl.n	8011784 <__smakebuf_r+0x1c>
 8011774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011778:	6023      	str	r3, [r4, #0]
 801177a:	6123      	str	r3, [r4, #16]
 801177c:	2301      	movs	r3, #1
 801177e:	6163      	str	r3, [r4, #20]
 8011780:	b002      	add	sp, #8
 8011782:	bd70      	pop	{r4, r5, r6, pc}
 8011784:	ab01      	add	r3, sp, #4
 8011786:	466a      	mov	r2, sp
 8011788:	f7ff ffc9 	bl	801171e <__swhatbuf_r>
 801178c:	9900      	ldr	r1, [sp, #0]
 801178e:	4605      	mov	r5, r0
 8011790:	4630      	mov	r0, r6
 8011792:	f7fe fd6f 	bl	8010274 <_malloc_r>
 8011796:	b948      	cbnz	r0, 80117ac <__smakebuf_r+0x44>
 8011798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801179c:	059a      	lsls	r2, r3, #22
 801179e:	d4ef      	bmi.n	8011780 <__smakebuf_r+0x18>
 80117a0:	f023 0303 	bic.w	r3, r3, #3
 80117a4:	f043 0302 	orr.w	r3, r3, #2
 80117a8:	81a3      	strh	r3, [r4, #12]
 80117aa:	e7e3      	b.n	8011774 <__smakebuf_r+0xc>
 80117ac:	4b0d      	ldr	r3, [pc, #52]	; (80117e4 <__smakebuf_r+0x7c>)
 80117ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80117b0:	89a3      	ldrh	r3, [r4, #12]
 80117b2:	6020      	str	r0, [r4, #0]
 80117b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117b8:	81a3      	strh	r3, [r4, #12]
 80117ba:	9b00      	ldr	r3, [sp, #0]
 80117bc:	6163      	str	r3, [r4, #20]
 80117be:	9b01      	ldr	r3, [sp, #4]
 80117c0:	6120      	str	r0, [r4, #16]
 80117c2:	b15b      	cbz	r3, 80117dc <__smakebuf_r+0x74>
 80117c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117c8:	4630      	mov	r0, r6
 80117ca:	f000 f86b 	bl	80118a4 <_isatty_r>
 80117ce:	b128      	cbz	r0, 80117dc <__smakebuf_r+0x74>
 80117d0:	89a3      	ldrh	r3, [r4, #12]
 80117d2:	f023 0303 	bic.w	r3, r3, #3
 80117d6:	f043 0301 	orr.w	r3, r3, #1
 80117da:	81a3      	strh	r3, [r4, #12]
 80117dc:	89a0      	ldrh	r0, [r4, #12]
 80117de:	4305      	orrs	r5, r0
 80117e0:	81a5      	strh	r5, [r4, #12]
 80117e2:	e7cd      	b.n	8011780 <__smakebuf_r+0x18>
 80117e4:	08011079 	.word	0x08011079

080117e8 <_malloc_usable_size_r>:
 80117e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117ec:	1f18      	subs	r0, r3, #4
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	bfbc      	itt	lt
 80117f2:	580b      	ldrlt	r3, [r1, r0]
 80117f4:	18c0      	addlt	r0, r0, r3
 80117f6:	4770      	bx	lr

080117f8 <_raise_r>:
 80117f8:	291f      	cmp	r1, #31
 80117fa:	b538      	push	{r3, r4, r5, lr}
 80117fc:	4604      	mov	r4, r0
 80117fe:	460d      	mov	r5, r1
 8011800:	d904      	bls.n	801180c <_raise_r+0x14>
 8011802:	2316      	movs	r3, #22
 8011804:	6003      	str	r3, [r0, #0]
 8011806:	f04f 30ff 	mov.w	r0, #4294967295
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801180e:	b112      	cbz	r2, 8011816 <_raise_r+0x1e>
 8011810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011814:	b94b      	cbnz	r3, 801182a <_raise_r+0x32>
 8011816:	4620      	mov	r0, r4
 8011818:	f000 f830 	bl	801187c <_getpid_r>
 801181c:	462a      	mov	r2, r5
 801181e:	4601      	mov	r1, r0
 8011820:	4620      	mov	r0, r4
 8011822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011826:	f000 b817 	b.w	8011858 <_kill_r>
 801182a:	2b01      	cmp	r3, #1
 801182c:	d00a      	beq.n	8011844 <_raise_r+0x4c>
 801182e:	1c59      	adds	r1, r3, #1
 8011830:	d103      	bne.n	801183a <_raise_r+0x42>
 8011832:	2316      	movs	r3, #22
 8011834:	6003      	str	r3, [r0, #0]
 8011836:	2001      	movs	r0, #1
 8011838:	e7e7      	b.n	801180a <_raise_r+0x12>
 801183a:	2400      	movs	r4, #0
 801183c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011840:	4628      	mov	r0, r5
 8011842:	4798      	blx	r3
 8011844:	2000      	movs	r0, #0
 8011846:	e7e0      	b.n	801180a <_raise_r+0x12>

08011848 <raise>:
 8011848:	4b02      	ldr	r3, [pc, #8]	; (8011854 <raise+0xc>)
 801184a:	4601      	mov	r1, r0
 801184c:	6818      	ldr	r0, [r3, #0]
 801184e:	f7ff bfd3 	b.w	80117f8 <_raise_r>
 8011852:	bf00      	nop
 8011854:	20000030 	.word	0x20000030

08011858 <_kill_r>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4d07      	ldr	r5, [pc, #28]	; (8011878 <_kill_r+0x20>)
 801185c:	2300      	movs	r3, #0
 801185e:	4604      	mov	r4, r0
 8011860:	4608      	mov	r0, r1
 8011862:	4611      	mov	r1, r2
 8011864:	602b      	str	r3, [r5, #0]
 8011866:	f7f0 fe2d 	bl	80024c4 <_kill>
 801186a:	1c43      	adds	r3, r0, #1
 801186c:	d102      	bne.n	8011874 <_kill_r+0x1c>
 801186e:	682b      	ldr	r3, [r5, #0]
 8011870:	b103      	cbz	r3, 8011874 <_kill_r+0x1c>
 8011872:	6023      	str	r3, [r4, #0]
 8011874:	bd38      	pop	{r3, r4, r5, pc}
 8011876:	bf00      	nop
 8011878:	20005888 	.word	0x20005888

0801187c <_getpid_r>:
 801187c:	f7f0 be1a 	b.w	80024b4 <_getpid>

08011880 <_fstat_r>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4d07      	ldr	r5, [pc, #28]	; (80118a0 <_fstat_r+0x20>)
 8011884:	2300      	movs	r3, #0
 8011886:	4604      	mov	r4, r0
 8011888:	4608      	mov	r0, r1
 801188a:	4611      	mov	r1, r2
 801188c:	602b      	str	r3, [r5, #0]
 801188e:	f7f0 fe78 	bl	8002582 <_fstat>
 8011892:	1c43      	adds	r3, r0, #1
 8011894:	d102      	bne.n	801189c <_fstat_r+0x1c>
 8011896:	682b      	ldr	r3, [r5, #0]
 8011898:	b103      	cbz	r3, 801189c <_fstat_r+0x1c>
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	bd38      	pop	{r3, r4, r5, pc}
 801189e:	bf00      	nop
 80118a0:	20005888 	.word	0x20005888

080118a4 <_isatty_r>:
 80118a4:	b538      	push	{r3, r4, r5, lr}
 80118a6:	4d06      	ldr	r5, [pc, #24]	; (80118c0 <_isatty_r+0x1c>)
 80118a8:	2300      	movs	r3, #0
 80118aa:	4604      	mov	r4, r0
 80118ac:	4608      	mov	r0, r1
 80118ae:	602b      	str	r3, [r5, #0]
 80118b0:	f7f0 fe77 	bl	80025a2 <_isatty>
 80118b4:	1c43      	adds	r3, r0, #1
 80118b6:	d102      	bne.n	80118be <_isatty_r+0x1a>
 80118b8:	682b      	ldr	r3, [r5, #0]
 80118ba:	b103      	cbz	r3, 80118be <_isatty_r+0x1a>
 80118bc:	6023      	str	r3, [r4, #0]
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	20005888 	.word	0x20005888

080118c4 <_init>:
 80118c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c6:	bf00      	nop
 80118c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ca:	bc08      	pop	{r3}
 80118cc:	469e      	mov	lr, r3
 80118ce:	4770      	bx	lr

080118d0 <_fini>:
 80118d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d2:	bf00      	nop
 80118d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118d6:	bc08      	pop	{r3}
 80118d8:	469e      	mov	lr, r3
 80118da:	4770      	bx	lr
